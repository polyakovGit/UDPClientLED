
UDPCLIENTLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011474  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002bcc  08011674  08011674  00021674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014240  08014240  000301c8  2**0
                  CONTENTS
  4 .ARM          00000008  08014240  08014240  00024240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014248  08014248  000301c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014248  08014248  00024248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801424c  0801424c  0002424c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08014250  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000088  080142d8  00030088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000128  08014378  00030128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00008984  200001c8  08014418  000301c8  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20008b4c  08014418  00038b4c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000301c8  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000301f6  2**0
                  CONTENTS, READONLY
 15 .debug_info   00026964  00000000  00000000  00030239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000060ec  00000000  00000000  00056b9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001d90  00000000  00000000  0005cc90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000179b  00000000  00000000  0005ea20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00035f21  00000000  00000000  000601bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0003087d  00000000  00000000  000960dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0011720b  00000000  00000000  000c6959  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00008440  00000000  00000000  001ddb64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005d  00000000  00000000  001e5fa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001c8 	.word	0x200001c8
 800021c:	00000000 	.word	0x00000000
 8000220:	0801165c 	.word	0x0801165c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001cc 	.word	0x200001cc
 800023c:	0801165c 	.word	0x0801165c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	// отправляем пакет раз в секунду
	udp_send_msg(upcb, "text");
 80005f4:	4b04      	ldr	r3, [pc, #16]	; (8000608 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4904      	ldr	r1, [pc, #16]	; (800060c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 fca8 	bl	8000f50 <udp_send_msg>
}
 8000600:	bf00      	nop
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	200007c0 	.word	0x200007c0
 800060c:	08011674 	.word	0x08011674

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000616:	f000 fe6d 	bl	80012f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061a:	f000 f827 	bl	800066c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061e:	f000 f941 	bl	80008a4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000622:	f000 f8e1 	bl	80007e8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000626:	f000 f90f 	bl	8000848 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 800062a:	f000 f88f 	bl	800074c <MX_TIM2_Init>
  MX_LWIP_Init();
 800062e:	f005 f97f 	bl	8005930 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
	//my_udp_connect();
	ip4_addr_t dest;
	IP4_ADDR(&dest, 10, 102, 2, 186);
 8000632:	4b0a      	ldr	r3, [pc, #40]	; (800065c <main+0x4c>)
 8000634:	603b      	str	r3, [r7, #0]
	u16_t port = 3333;
 8000636:	f640 5305 	movw	r3, #3333	; 0xd05
 800063a:	80fb      	strh	r3, [r7, #6]
	upcb = udp_create_socket(dest, port, udp_receive_callback, NULL);
 800063c:	88f9      	ldrh	r1, [r7, #6]
 800063e:	2300      	movs	r3, #0
 8000640:	4a07      	ldr	r2, [pc, #28]	; (8000660 <main+0x50>)
 8000642:	6838      	ldr	r0, [r7, #0]
 8000644:	f000 fc48 	bl	8000ed8 <udp_create_socket>
 8000648:	4603      	mov	r3, r0
 800064a:	4a06      	ldr	r2, [pc, #24]	; (8000664 <main+0x54>)
 800064c:	6013      	str	r3, [r2, #0]

	//udp_create_socket();
	HAL_TIM_Base_Start_IT(&htim2);
 800064e:	4806      	ldr	r0, [pc, #24]	; (8000668 <main+0x58>)
 8000650:	f003 fda2 	bl	8004198 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		MX_LWIP_Process();
 8000654:	f005 faac 	bl	8005bb0 <MX_LWIP_Process>
 8000658:	e7fc      	b.n	8000654 <main+0x44>
 800065a:	bf00      	nop
 800065c:	ba02660a 	.word	0xba02660a
 8000660:	08000e91 	.word	0x08000e91
 8000664:	200007c0 	.word	0x200007c0
 8000668:	200001e4 	.word	0x200001e4

0800066c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b094      	sub	sp, #80	; 0x50
 8000670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	f107 031c 	add.w	r3, r7, #28
 8000676:	2234      	movs	r2, #52	; 0x34
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f010 f92f 	bl	80108de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000680:	f107 0308 	add.w	r3, r7, #8
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000690:	4b2c      	ldr	r3, [pc, #176]	; (8000744 <SystemClock_Config+0xd8>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000694:	4a2b      	ldr	r2, [pc, #172]	; (8000744 <SystemClock_Config+0xd8>)
 8000696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800069a:	6413      	str	r3, [r2, #64]	; 0x40
 800069c:	4b29      	ldr	r3, [pc, #164]	; (8000744 <SystemClock_Config+0xd8>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006a8:	4b27      	ldr	r3, [pc, #156]	; (8000748 <SystemClock_Config+0xdc>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006b0:	4a25      	ldr	r2, [pc, #148]	; (8000748 <SystemClock_Config+0xdc>)
 80006b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b6:	6013      	str	r3, [r2, #0]
 80006b8:	4b23      	ldr	r3, [pc, #140]	; (8000748 <SystemClock_Config+0xdc>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006c0:	603b      	str	r3, [r7, #0]
 80006c2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c4:	2301      	movs	r3, #1
 80006c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006cc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ce:	2302      	movs	r3, #2
 80006d0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006d8:	2308      	movs	r3, #8
 80006da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80006dc:	23d8      	movs	r3, #216	; 0xd8
 80006de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e0:	2302      	movs	r3, #2
 80006e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006e4:	2304      	movs	r3, #4
 80006e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006e8:	2302      	movs	r3, #2
 80006ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ec:	f107 031c 	add.w	r3, r7, #28
 80006f0:	4618      	mov	r0, r3
 80006f2:	f002 fbfd 	bl	8002ef0 <HAL_RCC_OscConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006fc:	f000 f974 	bl	80009e8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000700:	f002 fba6 	bl	8002e50 <HAL_PWREx_EnableOverDrive>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800070a:	f000 f96d 	bl	80009e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070e:	230f      	movs	r3, #15
 8000710:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000712:	2302      	movs	r3, #2
 8000714:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000716:	2300      	movs	r3, #0
 8000718:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800071a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800071e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000724:	f107 0308 	add.w	r3, r7, #8
 8000728:	2103      	movs	r1, #3
 800072a:	4618      	mov	r0, r3
 800072c:	f002 fe8e 	bl	800344c <HAL_RCC_ClockConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000736:	f000 f957 	bl	80009e8 <Error_Handler>
  }
}
 800073a:	bf00      	nop
 800073c:	3750      	adds	r7, #80	; 0x50
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40023800 	.word	0x40023800
 8000748:	40007000 	.word	0x40007000

0800074c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b088      	sub	sp, #32
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000752:	f107 0310 	add.w	r3, r7, #16
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800076a:	4b1d      	ldr	r3, [pc, #116]	; (80007e0 <MX_TIM2_Init+0x94>)
 800076c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000770:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 8000772:	4b1b      	ldr	r3, [pc, #108]	; (80007e0 <MX_TIM2_Init+0x94>)
 8000774:	226b      	movs	r2, #107	; 0x6b
 8000776:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000778:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <MX_TIM2_Init+0x94>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999999;
 800077e:	4b18      	ldr	r3, [pc, #96]	; (80007e0 <MX_TIM2_Init+0x94>)
 8000780:	4a18      	ldr	r2, [pc, #96]	; (80007e4 <MX_TIM2_Init+0x98>)
 8000782:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000784:	4b16      	ldr	r3, [pc, #88]	; (80007e0 <MX_TIM2_Init+0x94>)
 8000786:	2200      	movs	r2, #0
 8000788:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800078a:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <MX_TIM2_Init+0x94>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000790:	4813      	ldr	r0, [pc, #76]	; (80007e0 <MX_TIM2_Init+0x94>)
 8000792:	f003 fca9 	bl	80040e8 <HAL_TIM_Base_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800079c:	f000 f924 	bl	80009e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007a6:	f107 0310 	add.w	r3, r7, #16
 80007aa:	4619      	mov	r1, r3
 80007ac:	480c      	ldr	r0, [pc, #48]	; (80007e0 <MX_TIM2_Init+0x94>)
 80007ae:	f003 fe8b 	bl	80044c8 <HAL_TIM_ConfigClockSource>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80007b8:	f000 f916 	bl	80009e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007bc:	2300      	movs	r3, #0
 80007be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007c0:	2300      	movs	r3, #0
 80007c2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	4619      	mov	r1, r3
 80007c8:	4805      	ldr	r0, [pc, #20]	; (80007e0 <MX_TIM2_Init+0x94>)
 80007ca:	f004 f8a9 	bl	8004920 <HAL_TIMEx_MasterConfigSynchronization>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80007d4:	f000 f908 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	3720      	adds	r7, #32
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	200001e4 	.word	0x200001e4
 80007e4:	000f423f 	.word	0x000f423f

080007e8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007ec:	4b14      	ldr	r3, [pc, #80]	; (8000840 <MX_USART3_UART_Init+0x58>)
 80007ee:	4a15      	ldr	r2, [pc, #84]	; (8000844 <MX_USART3_UART_Init+0x5c>)
 80007f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007f2:	4b13      	ldr	r3, [pc, #76]	; (8000840 <MX_USART3_UART_Init+0x58>)
 80007f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007fa:	4b11      	ldr	r3, [pc, #68]	; (8000840 <MX_USART3_UART_Init+0x58>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000800:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <MX_USART3_UART_Init+0x58>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000806:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <MX_USART3_UART_Init+0x58>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800080c:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <MX_USART3_UART_Init+0x58>)
 800080e:	220c      	movs	r2, #12
 8000810:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000812:	4b0b      	ldr	r3, [pc, #44]	; (8000840 <MX_USART3_UART_Init+0x58>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000818:	4b09      	ldr	r3, [pc, #36]	; (8000840 <MX_USART3_UART_Init+0x58>)
 800081a:	2200      	movs	r2, #0
 800081c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800081e:	4b08      	ldr	r3, [pc, #32]	; (8000840 <MX_USART3_UART_Init+0x58>)
 8000820:	2200      	movs	r2, #0
 8000822:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000824:	4b06      	ldr	r3, [pc, #24]	; (8000840 <MX_USART3_UART_Init+0x58>)
 8000826:	2200      	movs	r2, #0
 8000828:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800082a:	4805      	ldr	r0, [pc, #20]	; (8000840 <MX_USART3_UART_Init+0x58>)
 800082c:	f004 f924 	bl	8004a78 <HAL_UART_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000836:	f000 f8d7 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000230 	.word	0x20000230
 8000844:	40004800 	.word	0x40004800

08000848 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800084c:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800084e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000852:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000854:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000856:	2206      	movs	r2, #6
 8000858:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800085a:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800085c:	2202      	movs	r2, #2
 800085e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000860:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000862:	2200      	movs	r2, #0
 8000864:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000868:	2202      	movs	r2, #2
 800086a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800086c:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800086e:	2201      	movs	r2, #1
 8000870:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000872:	4b0b      	ldr	r3, [pc, #44]	; (80008a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000874:	2200      	movs	r2, #0
 8000876:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000878:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800087a:	2200      	movs	r2, #0
 800087c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800087e:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000880:	2201      	movs	r2, #1
 8000882:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000884:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000886:	2200      	movs	r2, #0
 8000888:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800088a:	4805      	ldr	r0, [pc, #20]	; (80008a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800088c:	f002 f997 	bl	8002bbe <HAL_PCD_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000896:	f000 f8a7 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	200002b8 	.word	0x200002b8

080008a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08c      	sub	sp, #48	; 0x30
 80008a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
 80008b6:	60da      	str	r2, [r3, #12]
 80008b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ba:	4b47      	ldr	r3, [pc, #284]	; (80009d8 <MX_GPIO_Init+0x134>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a46      	ldr	r2, [pc, #280]	; (80009d8 <MX_GPIO_Init+0x134>)
 80008c0:	f043 0304 	orr.w	r3, r3, #4
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b44      	ldr	r3, [pc, #272]	; (80009d8 <MX_GPIO_Init+0x134>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0304 	and.w	r3, r3, #4
 80008ce:	61bb      	str	r3, [r7, #24]
 80008d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008d2:	4b41      	ldr	r3, [pc, #260]	; (80009d8 <MX_GPIO_Init+0x134>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a40      	ldr	r2, [pc, #256]	; (80009d8 <MX_GPIO_Init+0x134>)
 80008d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b3e      	ldr	r3, [pc, #248]	; (80009d8 <MX_GPIO_Init+0x134>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008e6:	617b      	str	r3, [r7, #20]
 80008e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ea:	4b3b      	ldr	r3, [pc, #236]	; (80009d8 <MX_GPIO_Init+0x134>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a3a      	ldr	r2, [pc, #232]	; (80009d8 <MX_GPIO_Init+0x134>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b38      	ldr	r3, [pc, #224]	; (80009d8 <MX_GPIO_Init+0x134>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	613b      	str	r3, [r7, #16]
 8000900:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000902:	4b35      	ldr	r3, [pc, #212]	; (80009d8 <MX_GPIO_Init+0x134>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a34      	ldr	r2, [pc, #208]	; (80009d8 <MX_GPIO_Init+0x134>)
 8000908:	f043 0302 	orr.w	r3, r3, #2
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b32      	ldr	r3, [pc, #200]	; (80009d8 <MX_GPIO_Init+0x134>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0302 	and.w	r3, r3, #2
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800091a:	4b2f      	ldr	r3, [pc, #188]	; (80009d8 <MX_GPIO_Init+0x134>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a2e      	ldr	r2, [pc, #184]	; (80009d8 <MX_GPIO_Init+0x134>)
 8000920:	f043 0308 	orr.w	r3, r3, #8
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b2c      	ldr	r3, [pc, #176]	; (80009d8 <MX_GPIO_Init+0x134>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0308 	and.w	r3, r3, #8
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000932:	4b29      	ldr	r3, [pc, #164]	; (80009d8 <MX_GPIO_Init+0x134>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a28      	ldr	r2, [pc, #160]	; (80009d8 <MX_GPIO_Init+0x134>)
 8000938:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b26      	ldr	r3, [pc, #152]	; (80009d8 <MX_GPIO_Init+0x134>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000950:	4822      	ldr	r0, [pc, #136]	; (80009dc <MX_GPIO_Init+0x138>)
 8000952:	f002 f901 	bl	8002b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	2140      	movs	r1, #64	; 0x40
 800095a:	4821      	ldr	r0, [pc, #132]	; (80009e0 <MX_GPIO_Init+0x13c>)
 800095c:	f002 f8fc 	bl	8002b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000960:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000966:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800096a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000970:	f107 031c 	add.w	r3, r7, #28
 8000974:	4619      	mov	r1, r3
 8000976:	481b      	ldr	r0, [pc, #108]	; (80009e4 <MX_GPIO_Init+0x140>)
 8000978:	f001 ff42 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800097c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000982:	2301      	movs	r3, #1
 8000984:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2300      	movs	r3, #0
 800098c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4619      	mov	r1, r3
 8000994:	4811      	ldr	r0, [pc, #68]	; (80009dc <MX_GPIO_Init+0x138>)
 8000996:	f001 ff33 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800099a:	2340      	movs	r3, #64	; 0x40
 800099c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099e:	2301      	movs	r3, #1
 80009a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	480b      	ldr	r0, [pc, #44]	; (80009e0 <MX_GPIO_Init+0x13c>)
 80009b2:	f001 ff25 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009b6:	2380      	movs	r3, #128	; 0x80
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ba:	2300      	movs	r3, #0
 80009bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	4619      	mov	r1, r3
 80009c8:	4805      	ldr	r0, [pc, #20]	; (80009e0 <MX_GPIO_Init+0x13c>)
 80009ca:	f001 ff19 	bl	8002800 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009ce:	bf00      	nop
 80009d0:	3730      	adds	r7, #48	; 0x30
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40023800 	.word	0x40023800
 80009dc:	40020400 	.word	0x40020400
 80009e0:	40021800 	.word	0x40021800
 80009e4:	40020800 	.word	0x40020800

080009e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ec:	b672      	cpsid	i
}
 80009ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80009f0:	e7fe      	b.n	80009f0 <Error_Handler+0x8>
	...

080009f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009fa:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <HAL_MspInit+0x50>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fe:	4a11      	ldr	r2, [pc, #68]	; (8000a44 <HAL_MspInit+0x50>)
 8000a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a04:	6413      	str	r3, [r2, #64]	; 0x40
 8000a06:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <HAL_MspInit+0x50>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a12:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <HAL_MspInit+0x50>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a16:	4a0b      	ldr	r2, [pc, #44]	; (8000a44 <HAL_MspInit+0x50>)
 8000a18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <HAL_MspInit+0x50>)
 8000a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	2005      	movs	r0, #5
 8000a30:	f000 fdbd 	bl	80015ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000a34:	2005      	movs	r0, #5
 8000a36:	f000 fdd6 	bl	80015e6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40023800 	.word	0x40023800

08000a48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a58:	d113      	bne.n	8000a82 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a5a:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <HAL_TIM_Base_MspInit+0x44>)
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5e:	4a0b      	ldr	r2, [pc, #44]	; (8000a8c <HAL_TIM_Base_MspInit+0x44>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6413      	str	r3, [r2, #64]	; 0x40
 8000a66:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <HAL_TIM_Base_MspInit+0x44>)
 8000a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2100      	movs	r1, #0
 8000a76:	201c      	movs	r0, #28
 8000a78:	f000 fd99 	bl	80015ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a7c:	201c      	movs	r0, #28
 8000a7e:	f000 fdb2 	bl	80015e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a82:	bf00      	nop
 8000a84:	3710      	adds	r7, #16
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40023800 	.word	0x40023800

08000a90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b0ae      	sub	sp, #184	; 0xb8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a98:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	2290      	movs	r2, #144	; 0x90
 8000aae:	2100      	movs	r1, #0
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f00f ff14 	bl	80108de <memset>
  if(huart->Instance==USART3)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4a22      	ldr	r2, [pc, #136]	; (8000b44 <HAL_UART_MspInit+0xb4>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d13c      	bne.n	8000b3a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ac0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ac4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aca:	f107 0314 	add.w	r3, r7, #20
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f002 fee2 	bl	8003898 <HAL_RCCEx_PeriphCLKConfig>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ada:	f7ff ff85 	bl	80009e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ade:	4b1a      	ldr	r3, [pc, #104]	; (8000b48 <HAL_UART_MspInit+0xb8>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	4a19      	ldr	r2, [pc, #100]	; (8000b48 <HAL_UART_MspInit+0xb8>)
 8000ae4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aea:	4b17      	ldr	r3, [pc, #92]	; (8000b48 <HAL_UART_MspInit+0xb8>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000af2:	613b      	str	r3, [r7, #16]
 8000af4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000af6:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <HAL_UART_MspInit+0xb8>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a13      	ldr	r2, [pc, #76]	; (8000b48 <HAL_UART_MspInit+0xb8>)
 8000afc:	f043 0308 	orr.w	r3, r3, #8
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <HAL_UART_MspInit+0xb8>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0308 	and.w	r3, r3, #8
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b16:	2302      	movs	r3, #2
 8000b18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b22:	2303      	movs	r3, #3
 8000b24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b28:	2307      	movs	r3, #7
 8000b2a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b2e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b32:	4619      	mov	r1, r3
 8000b34:	4805      	ldr	r0, [pc, #20]	; (8000b4c <HAL_UART_MspInit+0xbc>)
 8000b36:	f001 fe63 	bl	8002800 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b3a:	bf00      	nop
 8000b3c:	37b8      	adds	r7, #184	; 0xb8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40004800 	.word	0x40004800
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40020c00 	.word	0x40020c00

08000b50 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b0ae      	sub	sp, #184	; 0xb8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	2290      	movs	r2, #144	; 0x90
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4618      	mov	r0, r3
 8000b72:	f00f feb4 	bl	80108de <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b7e:	d166      	bne.n	8000c4e <HAL_PCD_MspInit+0xfe>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000b80:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000b84:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000b86:	23c0      	movs	r3, #192	; 0xc0
 8000b88:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 8000b92:	2301      	movs	r3, #1
 8000b94:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000b96:	2301      	movs	r3, #1
 8000b98:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8000b9e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ba2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	4618      	mov	r0, r3
 8000bac:	f002 fe74 	bl	8003898 <HAL_RCCEx_PeriphCLKConfig>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <HAL_PCD_MspInit+0x6a>
    {
      Error_Handler();
 8000bb6:	f7ff ff17 	bl	80009e8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bba:	4b27      	ldr	r3, [pc, #156]	; (8000c58 <HAL_PCD_MspInit+0x108>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	4a26      	ldr	r2, [pc, #152]	; (8000c58 <HAL_PCD_MspInit+0x108>)
 8000bc0:	f043 0301 	orr.w	r3, r3, #1
 8000bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc6:	4b24      	ldr	r3, [pc, #144]	; (8000c58 <HAL_PCD_MspInit+0x108>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000bd2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000bd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be6:	2303      	movs	r3, #3
 8000be8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000bec:	230a      	movs	r3, #10
 8000bee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4818      	ldr	r0, [pc, #96]	; (8000c5c <HAL_PCD_MspInit+0x10c>)
 8000bfa:	f001 fe01 	bl	8002800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000bfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c06:	2300      	movs	r3, #0
 8000c08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c12:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c16:	4619      	mov	r1, r3
 8000c18:	4810      	ldr	r0, [pc, #64]	; (8000c5c <HAL_PCD_MspInit+0x10c>)
 8000c1a:	f001 fdf1 	bl	8002800 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <HAL_PCD_MspInit+0x108>)
 8000c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c22:	4a0d      	ldr	r2, [pc, #52]	; (8000c58 <HAL_PCD_MspInit+0x108>)
 8000c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c28:	6353      	str	r3, [r2, #52]	; 0x34
 8000c2a:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <HAL_PCD_MspInit+0x108>)
 8000c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <HAL_PCD_MspInit+0x108>)
 8000c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3a:	4a07      	ldr	r2, [pc, #28]	; (8000c58 <HAL_PCD_MspInit+0x108>)
 8000c3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c40:	6453      	str	r3, [r2, #68]	; 0x44
 8000c42:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <HAL_PCD_MspInit+0x108>)
 8000c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c4a:	60bb      	str	r3, [r7, #8]
 8000c4c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000c4e:	bf00      	nop
 8000c50:	37b8      	adds	r7, #184	; 0xb8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40020000 	.word	0x40020000

08000c60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c64:	e7fe      	b.n	8000c64 <NMI_Handler+0x4>

08000c66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c6a:	e7fe      	b.n	8000c6a <HardFault_Handler+0x4>

08000c6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <MemManage_Handler+0x4>

08000c72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c76:	e7fe      	b.n	8000c76 <BusFault_Handler+0x4>

08000c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <UsageFault_Handler+0x4>

08000c7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cac:	f000 fb60 	bl	8001370 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
	...

08000cc4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000cc8:	4802      	ldr	r0, [pc, #8]	; (8000cd4 <TIM2_IRQHandler+0x10>)
 8000cca:	f003 fadd 	bl	8004288 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	200001e4 	.word	0x200001e4

08000cd8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  return 1;
 8000cdc:	2301      	movs	r3, #1
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <_kill>:

int _kill(int pid, int sig)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000cf2:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <_kill+0x20>)
 8000cf4:	2216      	movs	r2, #22
 8000cf6:	601a      	str	r2, [r3, #0]
  return -1;
 8000cf8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	20008b3c 	.word	0x20008b3c

08000d0c <_exit>:

void _exit (int status)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000d14:	f04f 31ff 	mov.w	r1, #4294967295
 8000d18:	6878      	ldr	r0, [r7, #4]
 8000d1a:	f7ff ffe5 	bl	8000ce8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000d1e:	e7fe      	b.n	8000d1e <_exit+0x12>

08000d20 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	617b      	str	r3, [r7, #20]
 8000d30:	e00a      	b.n	8000d48 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d32:	f3af 8000 	nop.w
 8000d36:	4601      	mov	r1, r0
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	1c5a      	adds	r2, r3, #1
 8000d3c:	60ba      	str	r2, [r7, #8]
 8000d3e:	b2ca      	uxtb	r2, r1
 8000d40:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	3301      	adds	r3, #1
 8000d46:	617b      	str	r3, [r7, #20]
 8000d48:	697a      	ldr	r2, [r7, #20]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	dbf0      	blt.n	8000d32 <_read+0x12>
  }

  return len;
 8000d50:	687b      	ldr	r3, [r7, #4]
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3718      	adds	r7, #24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b086      	sub	sp, #24
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	60f8      	str	r0, [r7, #12]
 8000d62:	60b9      	str	r1, [r7, #8]
 8000d64:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d66:	2300      	movs	r3, #0
 8000d68:	617b      	str	r3, [r7, #20]
 8000d6a:	e009      	b.n	8000d80 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	1c5a      	adds	r2, r3, #1
 8000d70:	60ba      	str	r2, [r7, #8]
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	617b      	str	r3, [r7, #20]
 8000d80:	697a      	ldr	r2, [r7, #20]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	dbf1      	blt.n	8000d6c <_write+0x12>
  }
  return len;
 8000d88:	687b      	ldr	r3, [r7, #4]
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3718      	adds	r7, #24
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <_close>:

int _close(int file)
{
 8000d92:	b480      	push	{r7}
 8000d94:	b083      	sub	sp, #12
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr

08000daa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000daa:	b480      	push	{r7}
 8000dac:	b083      	sub	sp, #12
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
 8000db2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dba:	605a      	str	r2, [r3, #4]
  return 0;
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <_isatty>:

int _isatty(int file)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	b083      	sub	sp, #12
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000dd2:	2301      	movs	r3, #1
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3714      	adds	r7, #20
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
	...

08000dfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b087      	sub	sp, #28
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e04:	4a14      	ldr	r2, [pc, #80]	; (8000e58 <_sbrk+0x5c>)
 8000e06:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <_sbrk+0x60>)
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e10:	4b13      	ldr	r3, [pc, #76]	; (8000e60 <_sbrk+0x64>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d102      	bne.n	8000e1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e18:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <_sbrk+0x64>)
 8000e1a:	4a12      	ldr	r2, [pc, #72]	; (8000e64 <_sbrk+0x68>)
 8000e1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e1e:	4b10      	ldr	r3, [pc, #64]	; (8000e60 <_sbrk+0x64>)
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4413      	add	r3, r2
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d205      	bcs.n	8000e38 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000e2c:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <_sbrk+0x6c>)
 8000e2e:	220c      	movs	r2, #12
 8000e30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e32:	f04f 33ff 	mov.w	r3, #4294967295
 8000e36:	e009      	b.n	8000e4c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e38:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <_sbrk+0x64>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e3e:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <_sbrk+0x64>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4413      	add	r3, r2
 8000e46:	4a06      	ldr	r2, [pc, #24]	; (8000e60 <_sbrk+0x64>)
 8000e48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	371c      	adds	r7, #28
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	20080000 	.word	0x20080000
 8000e5c:	00000400 	.word	0x00000400
 8000e60:	200007c4 	.word	0x200007c4
 8000e64:	20008b50 	.word	0x20008b50
 8000e68:	20008b3c 	.word	0x20008b3c

08000e6c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <SystemInit+0x20>)
 8000e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e76:	4a05      	ldr	r2, [pc, #20]	; (8000e8c <SystemInit+0x20>)
 8000e78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <udp_receive_callback>:

static struct udp_pcb *upcb = NULL;
char str1[128];

void udp_receive_callback(void *arg, struct udp_pcb *pcb, struct pbuf *p,
		const ip_addr_t *addr, u16_t port) {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
 8000e9c:	603b      	str	r3, [r7, #0]
	// в этой функции обязательно должны очистить p, иначе память потечёт
	strncpy(str1, p->payload, p->len);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6859      	ldr	r1, [r3, #4]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	895b      	ldrh	r3, [r3, #10]
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	4809      	ldr	r0, [pc, #36]	; (8000ed0 <udp_receive_callback+0x40>)
 8000eaa:	f00f fd20 	bl	80108ee <strncpy>
	str1[p->len] = 0;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	895b      	ldrh	r3, [r3, #10]
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <udp_receive_callback+0x40>)
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	5499      	strb	r1, [r3, r2]
	pbuf_free(p);
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f006 fdc2 	bl	8007a44 <pbuf_free>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000ec0:	2180      	movs	r1, #128	; 0x80
 8000ec2:	4804      	ldr	r0, [pc, #16]	; (8000ed4 <udp_receive_callback+0x44>)
 8000ec4:	f001 fe61 	bl	8002b8a <HAL_GPIO_TogglePin>
}
 8000ec8:	bf00      	nop
 8000eca:	3710      	adds	r7, #16
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	200007cc 	.word	0x200007cc
 8000ed4:	40020400 	.word	0x40020400

08000ed8 <udp_create_socket>:
//	IP4_ADDR(&dest, 10, 102, 2, 186);
//	udp_create_socket(dest, 3333,udp_receive_callback,NULL);
//}

struct udp_pcb* udp_create_socket(const ip4_addr_t ip_addr, const u16_t port,
		udp_recv_fn recv, void *recv_arg) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	607a      	str	r2, [r7, #4]
 8000ee2:	603b      	str	r3, [r7, #0]
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	817b      	strh	r3, [r7, #10]
	// проверяем, что не инициализировали сокет еще
	if (upcb == NULL) {
 8000ee8:	4b18      	ldr	r3, [pc, #96]	; (8000f4c <udp_create_socket+0x74>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d10b      	bne.n	8000f08 <udp_create_socket+0x30>
		// создание сокета
		upcb = udp_new();
 8000ef0:	f00d f882 	bl	800dff8 <udp_new>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	4a15      	ldr	r2, [pc, #84]	; (8000f4c <udp_create_socket+0x74>)
 8000ef8:	6013      	str	r3, [r2, #0]
		// если не удалось создать сокет, то на выход с ошибкой
		if (upcb == NULL) {
 8000efa:	4b14      	ldr	r3, [pc, #80]	; (8000f4c <udp_create_socket+0x74>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d102      	bne.n	8000f08 <udp_create_socket+0x30>
			return upcb;
 8000f02:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <udp_create_socket+0x74>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	e01d      	b.n	8000f44 <udp_create_socket+0x6c>

	//ip4_addr_t dest;
	//IP4_ADDR(&dest, 10, 102, 2, 186);//192, 168, 0, 11, сервер для теста 10, 102, 2, 186
	// коннектимся к удаленному серверу по ИП и порту (сервер должен быть настроен именно на так)
//	err_t err = udp_connect(upcb, &dest, 3333);
	err_t err = udp_connect(upcb, &ip_addr, port);
 8000f08:	4b10      	ldr	r3, [pc, #64]	; (8000f4c <udp_create_socket+0x74>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	897a      	ldrh	r2, [r7, #10]
 8000f0e:	f107 010c 	add.w	r1, r7, #12
 8000f12:	4618      	mov	r0, r3
 8000f14:	f00c ffa0 	bl	800de58 <udp_connect>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	75fb      	strb	r3, [r7, #23]
	if (ERR_OK != err) {
 8000f1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d006      	beq.n	8000f32 <udp_create_socket+0x5a>
		udp_remove(upcb);
 8000f24:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <udp_create_socket+0x74>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f00d f823 	bl	800df74 <udp_remove>
		return NULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	e008      	b.n	8000f44 <udp_create_socket+0x6c>
	}
	// регистрируем колбэк на прием пакета
	udp_recv(upcb, recv, NULL);
 8000f32:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <udp_create_socket+0x74>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2200      	movs	r2, #0
 8000f38:	6879      	ldr	r1, [r7, #4]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f00c fffa 	bl	800df34 <udp_recv>
	return upcb;
 8000f40:	4b02      	ldr	r3, [pc, #8]	; (8000f4c <udp_create_socket+0x74>)
 8000f42:	681b      	ldr	r3, [r3, #0]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3718      	adds	r7, #24
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	200007c8 	.word	0x200007c8

08000f50 <udp_send_msg>:

err_t udp_send_msg(struct udp_pcb *upcb, const char *dataSource) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
	// если сокет не создался, то на выход с ошибкой
	if (upcb == NULL) {
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d102      	bne.n	8000f66 <udp_send_msg+0x16>
		return ERR_ABRT;
 8000f60:	f06f 030c 	mvn.w	r3, #12
 8000f64:	e037      	b.n	8000fd6 <udp_send_msg+0x86>
	}
	u16_t dataLength = strlen(dataSource) + 1;
 8000f66:	6838      	ldr	r0, [r7, #0]
 8000f68:	f7ff f96a 	bl	8000240 <strlen>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	3301      	adds	r3, #1
 8000f72:	82fb      	strh	r3, [r7, #22]
	// аллоцируем память под буфер с данными
	struct pbuf *p = pbuf_alloc(PBUF_TRANSPORT, dataLength, PBUF_RAM);
 8000f74:	8afb      	ldrh	r3, [r7, #22]
 8000f76:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	2036      	movs	r0, #54	; 0x36
 8000f7e:	f006 fa7d 	bl	800747c <pbuf_alloc>
 8000f82:	6138      	str	r0, [r7, #16]
	if (p != NULL) {
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d024      	beq.n	8000fd4 <udp_send_msg+0x84>
//		if (data == NULL) {
//			return ERR_ABRT;
//		}
//		strncpy(data, dataSource, dataLength);
		// кладём данные в аллоцированный буфер
		err_t err = pbuf_take(p, dataSource, dataLength);
 8000f8a:	8afb      	ldrh	r3, [r7, #22]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	6839      	ldr	r1, [r7, #0]
 8000f90:	6938      	ldr	r0, [r7, #16]
 8000f92:	f006 ffc3 	bl	8007f1c <pbuf_take>
 8000f96:	4603      	mov	r3, r0
 8000f98:	73fb      	strb	r3, [r7, #15]
		//очистить память от сообщения
		//free(data);
		if (ERR_OK != err) {
 8000f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d005      	beq.n	8000fae <udp_send_msg+0x5e>
			// обязательно должны очистить аллоцированную память при ошибке
			pbuf_free(p);
 8000fa2:	6938      	ldr	r0, [r7, #16]
 8000fa4:	f006 fd4e 	bl	8007a44 <pbuf_free>
			return err;
 8000fa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fac:	e013      	b.n	8000fd6 <udp_send_msg+0x86>
		}

		// отсылаем пакет
		err = udp_send(upcb, p);
 8000fae:	6939      	ldr	r1, [r7, #16]
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f00c fcdf 	bl	800d974 <udp_send>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	73fb      	strb	r3, [r7, #15]
		if (ERR_OK != err) {
 8000fba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d005      	beq.n	8000fce <udp_send_msg+0x7e>
			// обязательно должны очистить аллоцированную память при ошибке
			pbuf_free(p);
 8000fc2:	6938      	ldr	r0, [r7, #16]
 8000fc4:	f006 fd3e 	bl	8007a44 <pbuf_free>
			return err;
 8000fc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fcc:	e003      	b.n	8000fd6 <udp_send_msg+0x86>
		}
		// очищаем аллоцированную память
		pbuf_free(p);
 8000fce:	6938      	ldr	r0, [r7, #16]
 8000fd0:	f006 fd38 	bl	8007a44 <pbuf_free>
	}
	return ERR_OK;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3718      	adds	r7, #24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
	...

08000fe0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fe0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001018 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fe4:	480d      	ldr	r0, [pc, #52]	; (800101c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fe6:	490e      	ldr	r1, [pc, #56]	; (8001020 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fe8:	4a0e      	ldr	r2, [pc, #56]	; (8001024 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fec:	e002      	b.n	8000ff4 <LoopCopyDataInit>

08000fee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ff2:	3304      	adds	r3, #4

08000ff4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ff6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ff8:	d3f9      	bcc.n	8000fee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ffa:	4a0b      	ldr	r2, [pc, #44]	; (8001028 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ffc:	4c0b      	ldr	r4, [pc, #44]	; (800102c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ffe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001000:	e001      	b.n	8001006 <LoopFillZerobss>

08001002 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001002:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001004:	3204      	adds	r2, #4

08001006 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001006:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001008:	d3fb      	bcc.n	8001002 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800100a:	f7ff ff2f 	bl	8000e6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800100e:	f00f fcc7 	bl	80109a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001012:	f7ff fafd 	bl	8000610 <main>
  bx  lr    
 8001016:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001018:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800101c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001020:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001024:	08014250 	.word	0x08014250
  ldr r2, =_sbss
 8001028:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 800102c:	20008b4c 	.word	0x20008b4c

08001030 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001030:	e7fe      	b.n	8001030 <ADC_IRQHandler>

08001032 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001032:	b480      	push	{r7}
 8001034:	b083      	sub	sp, #12
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
 800103a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d00b      	beq.n	800105a <LAN8742_RegisterBusIO+0x28>
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	68db      	ldr	r3, [r3, #12]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d007      	beq.n	800105a <LAN8742_RegisterBusIO+0x28>
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d003      	beq.n	800105a <LAN8742_RegisterBusIO+0x28>
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	691b      	ldr	r3, [r3, #16]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d102      	bne.n	8001060 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800105a:	f04f 33ff 	mov.w	r3, #4294967295
 800105e:	e014      	b.n	800108a <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685a      	ldr	r2, [r3, #4]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	68da      	ldr	r2, [r3, #12]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	689a      	ldr	r2, [r3, #8]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	691a      	ldr	r2, [r3, #16]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001096:	b580      	push	{r7, lr}
 8001098:	b086      	sub	sp, #24
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	2300      	movs	r3, #0
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	2300      	movs	r3, #0
 80010a8:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80010aa:	2300      	movs	r3, #0
 80010ac:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d17c      	bne.n	80011b0 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d002      	beq.n	80010c4 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2220      	movs	r2, #32
 80010c8:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
 80010ce:	e01c      	b.n	800110a <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	695b      	ldr	r3, [r3, #20]
 80010d4:	f107 0208 	add.w	r2, r7, #8
 80010d8:	2112      	movs	r1, #18
 80010da:	6978      	ldr	r0, [r7, #20]
 80010dc:	4798      	blx	r3
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	da03      	bge.n	80010ec <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80010e4:	f06f 0304 	mvn.w	r3, #4
 80010e8:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 80010ea:	e00b      	b.n	8001104 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	f003 031f 	and.w	r3, r3, #31
 80010f2:	697a      	ldr	r2, [r7, #20]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d105      	bne.n	8001104 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	697a      	ldr	r2, [r7, #20]
 80010fc:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80010fe:	2300      	movs	r3, #0
 8001100:	613b      	str	r3, [r7, #16]
         break;
 8001102:	e005      	b.n	8001110 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	3301      	adds	r3, #1
 8001108:	617b      	str	r3, [r7, #20]
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	2b1f      	cmp	r3, #31
 800110e:	d9df      	bls.n	80010d0 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2b1f      	cmp	r3, #31
 8001116:	d902      	bls.n	800111e <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001118:	f06f 0302 	mvn.w	r3, #2
 800111c:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d145      	bne.n	80011b0 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	691b      	ldr	r3, [r3, #16]
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	6810      	ldr	r0, [r2, #0]
 800112c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001130:	2100      	movs	r1, #0
 8001132:	4798      	blx	r3
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	db37      	blt.n	80011aa <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	695b      	ldr	r3, [r3, #20]
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	6810      	ldr	r0, [r2, #0]
 8001142:	f107 0208 	add.w	r2, r7, #8
 8001146:	2100      	movs	r1, #0
 8001148:	4798      	blx	r3
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	db28      	blt.n	80011a2 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	4798      	blx	r3
 8001156:	4603      	mov	r3, r0
 8001158:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800115a:	e01c      	b.n	8001196 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	4798      	blx	r3
 8001162:	4603      	mov	r3, r0
 8001164:	461a      	mov	r2, r3
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800116e:	d80e      	bhi.n	800118e <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	695b      	ldr	r3, [r3, #20]
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	6810      	ldr	r0, [r2, #0]
 8001178:	f107 0208 	add.w	r2, r7, #8
 800117c:	2100      	movs	r1, #0
 800117e:	4798      	blx	r3
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	da07      	bge.n	8001196 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001186:	f06f 0304 	mvn.w	r3, #4
 800118a:	613b      	str	r3, [r7, #16]
                 break;
 800118c:	e010      	b.n	80011b0 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800118e:	f06f 0301 	mvn.w	r3, #1
 8001192:	613b      	str	r3, [r7, #16]
               break;
 8001194:	e00c      	b.n	80011b0 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d1dd      	bne.n	800115c <LAN8742_Init+0xc6>
 80011a0:	e006      	b.n	80011b0 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80011a2:	f06f 0304 	mvn.w	r3, #4
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	e002      	b.n	80011b0 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80011aa:	f06f 0303 	mvn.w	r3, #3
 80011ae:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d112      	bne.n	80011dc <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	699b      	ldr	r3, [r3, #24]
 80011ba:	4798      	blx	r3
 80011bc:	4603      	mov	r3, r0
 80011be:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80011c0:	bf00      	nop
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	699b      	ldr	r3, [r3, #24]
 80011c6:	4798      	blx	r3
 80011c8:	4603      	mov	r3, r0
 80011ca:	461a      	mov	r2, r3
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80011d4:	d9f5      	bls.n	80011c2 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2201      	movs	r2, #1
 80011da:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80011dc:	693b      	ldr	r3, [r7, #16]
 }
 80011de:	4618      	mov	r0, r3
 80011e0:	3718      	adds	r7, #24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b084      	sub	sp, #16
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	6810      	ldr	r0, [r2, #0]
 80011fa:	f107 020c 	add.w	r2, r7, #12
 80011fe:	2101      	movs	r1, #1
 8001200:	4798      	blx	r3
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	da02      	bge.n	800120e <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001208:	f06f 0304 	mvn.w	r3, #4
 800120c:	e06e      	b.n	80012ec <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	6810      	ldr	r0, [r2, #0]
 8001216:	f107 020c 	add.w	r2, r7, #12
 800121a:	2101      	movs	r1, #1
 800121c:	4798      	blx	r3
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	da02      	bge.n	800122a <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001224:	f06f 0304 	mvn.w	r3, #4
 8001228:	e060      	b.n	80012ec <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	f003 0304 	and.w	r3, r3, #4
 8001230:	2b00      	cmp	r3, #0
 8001232:	d101      	bne.n	8001238 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001234:	2301      	movs	r3, #1
 8001236:	e059      	b.n	80012ec <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	695b      	ldr	r3, [r3, #20]
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	6810      	ldr	r0, [r2, #0]
 8001240:	f107 020c 	add.w	r2, r7, #12
 8001244:	2100      	movs	r1, #0
 8001246:	4798      	blx	r3
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	da02      	bge.n	8001254 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800124e:	f06f 0304 	mvn.w	r3, #4
 8001252:	e04b      	b.n	80012ec <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d11b      	bne.n	8001296 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d006      	beq.n	8001276 <LAN8742_GetLinkState+0x90>
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001272:	2302      	movs	r3, #2
 8001274:	e03a      	b.n	80012ec <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001280:	2303      	movs	r3, #3
 8001282:	e033      	b.n	80012ec <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800128e:	2304      	movs	r3, #4
 8001290:	e02c      	b.n	80012ec <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001292:	2305      	movs	r3, #5
 8001294:	e02a      	b.n	80012ec <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	695b      	ldr	r3, [r3, #20]
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	6810      	ldr	r0, [r2, #0]
 800129e:	f107 020c 	add.w	r2, r7, #12
 80012a2:	211f      	movs	r1, #31
 80012a4:	4798      	blx	r3
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	da02      	bge.n	80012b2 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80012ac:	f06f 0304 	mvn.w	r3, #4
 80012b0:	e01c      	b.n	80012ec <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d101      	bne.n	80012c0 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80012bc:	2306      	movs	r3, #6
 80012be:	e015      	b.n	80012ec <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f003 031c 	and.w	r3, r3, #28
 80012c6:	2b18      	cmp	r3, #24
 80012c8:	d101      	bne.n	80012ce <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80012ca:	2302      	movs	r3, #2
 80012cc:	e00e      	b.n	80012ec <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	f003 031c 	and.w	r3, r3, #28
 80012d4:	2b08      	cmp	r3, #8
 80012d6:	d101      	bne.n	80012dc <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80012d8:	2303      	movs	r3, #3
 80012da:	e007      	b.n	80012ec <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	f003 031c 	and.w	r3, r3, #28
 80012e2:	2b14      	cmp	r3, #20
 80012e4:	d101      	bne.n	80012ea <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80012e6:	2304      	movs	r3, #4
 80012e8:	e000      	b.n	80012ec <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80012ea:	2305      	movs	r3, #5
    }				
  }
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f8:	2003      	movs	r0, #3
 80012fa:	f000 f94d 	bl	8001598 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012fe:	2000      	movs	r0, #0
 8001300:	f000 f806 	bl	8001310 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001304:	f7ff fb76 	bl	80009f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001318:	4b12      	ldr	r3, [pc, #72]	; (8001364 <HAL_InitTick+0x54>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	4b12      	ldr	r3, [pc, #72]	; (8001368 <HAL_InitTick+0x58>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	4619      	mov	r1, r3
 8001322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001326:	fbb3 f3f1 	udiv	r3, r3, r1
 800132a:	fbb2 f3f3 	udiv	r3, r2, r3
 800132e:	4618      	mov	r0, r3
 8001330:	f000 f967 	bl	8001602 <HAL_SYSTICK_Config>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e00e      	b.n	800135c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2b0f      	cmp	r3, #15
 8001342:	d80a      	bhi.n	800135a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001344:	2200      	movs	r2, #0
 8001346:	6879      	ldr	r1, [r7, #4]
 8001348:	f04f 30ff 	mov.w	r0, #4294967295
 800134c:	f000 f92f 	bl	80015ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001350:	4a06      	ldr	r2, [pc, #24]	; (800136c <HAL_InitTick+0x5c>)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001356:	2300      	movs	r3, #0
 8001358:	e000      	b.n	800135c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
}
 800135c:	4618      	mov	r0, r3
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20000000 	.word	0x20000000
 8001368:	20000008 	.word	0x20000008
 800136c:	20000004 	.word	0x20000004

08001370 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <HAL_IncTick+0x20>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	461a      	mov	r2, r3
 800137a:	4b06      	ldr	r3, [pc, #24]	; (8001394 <HAL_IncTick+0x24>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4413      	add	r3, r2
 8001380:	4a04      	ldr	r2, [pc, #16]	; (8001394 <HAL_IncTick+0x24>)
 8001382:	6013      	str	r3, [r2, #0]
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	20000008 	.word	0x20000008
 8001394:	2000084c 	.word	0x2000084c

08001398 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  return uwTick;
 800139c:	4b03      	ldr	r3, [pc, #12]	; (80013ac <HAL_GetTick+0x14>)
 800139e:	681b      	ldr	r3, [r3, #0]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	2000084c 	.word	0x2000084c

080013b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013b8:	f7ff ffee 	bl	8001398 <HAL_GetTick>
 80013bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013c8:	d005      	beq.n	80013d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ca:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <HAL_Delay+0x44>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	461a      	mov	r2, r3
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	4413      	add	r3, r2
 80013d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013d6:	bf00      	nop
 80013d8:	f7ff ffde 	bl	8001398 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	68fa      	ldr	r2, [r7, #12]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d8f7      	bhi.n	80013d8 <HAL_Delay+0x28>
  {
  }
}
 80013e8:	bf00      	nop
 80013ea:	bf00      	nop
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000008 	.word	0x20000008

080013f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001408:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <__NVIC_SetPriorityGrouping+0x40>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800140e:	68ba      	ldr	r2, [r7, #8]
 8001410:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001414:	4013      	ands	r3, r2
 8001416:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001420:	4b06      	ldr	r3, [pc, #24]	; (800143c <__NVIC_SetPriorityGrouping+0x44>)
 8001422:	4313      	orrs	r3, r2
 8001424:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001426:	4a04      	ldr	r2, [pc, #16]	; (8001438 <__NVIC_SetPriorityGrouping+0x40>)
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	60d3      	str	r3, [r2, #12]
}
 800142c:	bf00      	nop
 800142e:	3714      	adds	r7, #20
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	e000ed00 	.word	0xe000ed00
 800143c:	05fa0000 	.word	0x05fa0000

08001440 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001444:	4b04      	ldr	r3, [pc, #16]	; (8001458 <__NVIC_GetPriorityGrouping+0x18>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	0a1b      	lsrs	r3, r3, #8
 800144a:	f003 0307 	and.w	r3, r3, #7
}
 800144e:	4618      	mov	r0, r3
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146a:	2b00      	cmp	r3, #0
 800146c:	db0b      	blt.n	8001486 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	f003 021f 	and.w	r2, r3, #31
 8001474:	4907      	ldr	r1, [pc, #28]	; (8001494 <__NVIC_EnableIRQ+0x38>)
 8001476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147a:	095b      	lsrs	r3, r3, #5
 800147c:	2001      	movs	r0, #1
 800147e:	fa00 f202 	lsl.w	r2, r0, r2
 8001482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	e000e100 	.word	0xe000e100

08001498 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	6039      	str	r1, [r7, #0]
 80014a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	db0a      	blt.n	80014c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	b2da      	uxtb	r2, r3
 80014b0:	490c      	ldr	r1, [pc, #48]	; (80014e4 <__NVIC_SetPriority+0x4c>)
 80014b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b6:	0112      	lsls	r2, r2, #4
 80014b8:	b2d2      	uxtb	r2, r2
 80014ba:	440b      	add	r3, r1
 80014bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014c0:	e00a      	b.n	80014d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	4908      	ldr	r1, [pc, #32]	; (80014e8 <__NVIC_SetPriority+0x50>)
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	f003 030f 	and.w	r3, r3, #15
 80014ce:	3b04      	subs	r3, #4
 80014d0:	0112      	lsls	r2, r2, #4
 80014d2:	b2d2      	uxtb	r2, r2
 80014d4:	440b      	add	r3, r1
 80014d6:	761a      	strb	r2, [r3, #24]
}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	e000e100 	.word	0xe000e100
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b089      	sub	sp, #36	; 0x24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	f1c3 0307 	rsb	r3, r3, #7
 8001506:	2b04      	cmp	r3, #4
 8001508:	bf28      	it	cs
 800150a:	2304      	movcs	r3, #4
 800150c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	3304      	adds	r3, #4
 8001512:	2b06      	cmp	r3, #6
 8001514:	d902      	bls.n	800151c <NVIC_EncodePriority+0x30>
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	3b03      	subs	r3, #3
 800151a:	e000      	b.n	800151e <NVIC_EncodePriority+0x32>
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001520:	f04f 32ff 	mov.w	r2, #4294967295
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	43da      	mvns	r2, r3
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	401a      	ands	r2, r3
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001534:	f04f 31ff 	mov.w	r1, #4294967295
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	fa01 f303 	lsl.w	r3, r1, r3
 800153e:	43d9      	mvns	r1, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001544:	4313      	orrs	r3, r2
         );
}
 8001546:	4618      	mov	r0, r3
 8001548:	3724      	adds	r7, #36	; 0x24
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
	...

08001554 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3b01      	subs	r3, #1
 8001560:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001564:	d301      	bcc.n	800156a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001566:	2301      	movs	r3, #1
 8001568:	e00f      	b.n	800158a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800156a:	4a0a      	ldr	r2, [pc, #40]	; (8001594 <SysTick_Config+0x40>)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3b01      	subs	r3, #1
 8001570:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001572:	210f      	movs	r1, #15
 8001574:	f04f 30ff 	mov.w	r0, #4294967295
 8001578:	f7ff ff8e 	bl	8001498 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800157c:	4b05      	ldr	r3, [pc, #20]	; (8001594 <SysTick_Config+0x40>)
 800157e:	2200      	movs	r2, #0
 8001580:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001582:	4b04      	ldr	r3, [pc, #16]	; (8001594 <SysTick_Config+0x40>)
 8001584:	2207      	movs	r2, #7
 8001586:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	e000e010 	.word	0xe000e010

08001598 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f7ff ff29 	bl	80013f8 <__NVIC_SetPriorityGrouping>
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b086      	sub	sp, #24
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	4603      	mov	r3, r0
 80015b6:	60b9      	str	r1, [r7, #8]
 80015b8:	607a      	str	r2, [r7, #4]
 80015ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015c0:	f7ff ff3e 	bl	8001440 <__NVIC_GetPriorityGrouping>
 80015c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	68b9      	ldr	r1, [r7, #8]
 80015ca:	6978      	ldr	r0, [r7, #20]
 80015cc:	f7ff ff8e 	bl	80014ec <NVIC_EncodePriority>
 80015d0:	4602      	mov	r2, r0
 80015d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015d6:	4611      	mov	r1, r2
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff ff5d 	bl	8001498 <__NVIC_SetPriority>
}
 80015de:	bf00      	nop
 80015e0:	3718      	adds	r7, #24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b082      	sub	sp, #8
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	4603      	mov	r3, r0
 80015ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff ff31 	bl	800145c <__NVIC_EnableIRQ>
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b082      	sub	sp, #8
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f7ff ffa2 	bl	8001554 <SysTick_Config>
 8001610:	4603      	mov	r3, r0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
	...

0800161c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d101      	bne.n	800162e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e06a      	b.n	8001704 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001634:	2b00      	cmp	r3, #0
 8001636:	d106      	bne.n	8001646 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2223      	movs	r2, #35	; 0x23
 800163c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f004 fc9d 	bl	8005f80 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001646:	4b31      	ldr	r3, [pc, #196]	; (800170c <HAL_ETH_Init+0xf0>)
 8001648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164a:	4a30      	ldr	r2, [pc, #192]	; (800170c <HAL_ETH_Init+0xf0>)
 800164c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001650:	6453      	str	r3, [r2, #68]	; 0x44
 8001652:	4b2e      	ldr	r3, [pc, #184]	; (800170c <HAL_ETH_Init+0xf0>)
 8001654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001656:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800165a:	60bb      	str	r3, [r7, #8]
 800165c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800165e:	4b2c      	ldr	r3, [pc, #176]	; (8001710 <HAL_ETH_Init+0xf4>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	4a2b      	ldr	r2, [pc, #172]	; (8001710 <HAL_ETH_Init+0xf4>)
 8001664:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001668:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800166a:	4b29      	ldr	r3, [pc, #164]	; (8001710 <HAL_ETH_Init+0xf4>)
 800166c:	685a      	ldr	r2, [r3, #4]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	4927      	ldr	r1, [pc, #156]	; (8001710 <HAL_ETH_Init+0xf4>)
 8001674:	4313      	orrs	r3, r2
 8001676:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001678:	4b25      	ldr	r3, [pc, #148]	; (8001710 <HAL_ETH_Init+0xf4>)
 800167a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	6812      	ldr	r2, [r2, #0]
 800168a:	f043 0301 	orr.w	r3, r3, #1
 800168e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001692:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001694:	f7ff fe80 	bl	8001398 <HAL_GetTick>
 8001698:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800169a:	e011      	b.n	80016c0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800169c:	f7ff fe7c 	bl	8001398 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80016aa:	d909      	bls.n	80016c0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2204      	movs	r2, #4
 80016b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	22e0      	movs	r2, #224	; 0xe0
 80016b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e021      	b.n	8001704 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1e4      	bne.n	800169c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f000 fdf0 	bl	80022b8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f000 fe97 	bl	800240c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f000 feed 	bl	80024be <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	461a      	mov	r2, r3
 80016ea:	2100      	movs	r1, #0
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f000 fe55 	bl	800239c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2210      	movs	r2, #16
 80016fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001702:	2300      	movs	r3, #0
}
 8001704:	4618      	mov	r0, r3
 8001706:	3710      	adds	r7, #16
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40023800 	.word	0x40023800
 8001710:	40013800 	.word	0x40013800

08001714 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001722:	2b10      	cmp	r3, #16
 8001724:	d150      	bne.n	80017c8 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2223      	movs	r2, #35	; 0x23
 800172a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2204      	movs	r2, #4
 8001732:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f000 f9fd 	bl	8001b34 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f042 0208 	orr.w	r2, r2, #8
 8001748:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001752:	2001      	movs	r0, #1
 8001754:	f7ff fe2c 	bl	80013b0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	68fa      	ldr	r2, [r7, #12]
 800175e:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f042 0204 	orr.w	r2, r2, #4
 800176e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001778:	2001      	movs	r0, #1
 800177a:	f7ff fe19 	bl	80013b0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f000 fc36 	bl	8001ff8 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	6812      	ldr	r2, [r2, #0]
 800179a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800179e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017a2:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017ac:	699b      	ldr	r3, [r3, #24]
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	6812      	ldr	r2, [r2, #0]
 80017b2:	f043 0302 	orr.w	r3, r3, #2
 80017b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017ba:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2223      	movs	r2, #35	; 0x23
 80017c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80017c4:	2300      	movs	r3, #0
 80017c6:	e000      	b.n	80017ca <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
  }
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b084      	sub	sp, #16
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017e0:	2b23      	cmp	r3, #35	; 0x23
 80017e2:	d14a      	bne.n	800187a <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2223      	movs	r2, #35	; 0x23
 80017e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017f4:	699b      	ldr	r3, [r3, #24]
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	6812      	ldr	r2, [r2, #0]
 80017fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80017fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001802:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800180c:	699b      	ldr	r3, [r3, #24]
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	6812      	ldr	r2, [r2, #0]
 8001812:	f023 0302 	bic.w	r3, r3, #2
 8001816:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800181a:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f022 0204 	bic.w	r2, r2, #4
 800182a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001834:	2001      	movs	r0, #1
 8001836:	f7ff fdbb 	bl	80013b0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	68fa      	ldr	r2, [r7, #12]
 8001840:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f000 fbd8 	bl	8001ff8 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f022 0208 	bic.w	r2, r2, #8
 8001856:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001860:	2001      	movs	r0, #1
 8001862:	f7ff fda5 	bl	80013b0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	68fa      	ldr	r2, [r7, #12]
 800186c:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2210      	movs	r2, #16
 8001872:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001876:	2300      	movs	r3, #0
 8001878:	e000      	b.n	800187c <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
  }
}
 800187c:	4618      	mov	r0, r3
 800187e:	3710      	adds	r7, #16
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d109      	bne.n	80018aa <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800189c:	f043 0201 	orr.w	r2, r3, #1
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e07c      	b.n	80019a4 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018b0:	2b23      	cmp	r3, #35	; 0x23
 80018b2:	d176      	bne.n	80019a2 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80018b4:	2200      	movs	r2, #0
 80018b6:	68b9      	ldr	r1, [r7, #8]
 80018b8:	68f8      	ldr	r0, [r7, #12]
 80018ba:	f000 fe6d 	bl	8002598 <ETH_Prepare_Tx_Descriptors>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d009      	beq.n	80018d8 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ca:	f043 0202 	orr.w	r2, r3, #2
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e065      	b.n	80019a4 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80018d8:	f3bf 8f4f 	dsb	sy
}
 80018dc:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	3206      	adds	r2, #6
 80018e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018ea:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f0:	1c5a      	adds	r2, r3, #1
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	629a      	str	r2, [r3, #40]	; 0x28
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fa:	2b03      	cmp	r3, #3
 80018fc:	d904      	bls.n	8001908 <HAL_ETH_Transmit+0x84>
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001902:	1f1a      	subs	r2, r3, #4
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	3106      	adds	r1, #6
 8001914:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001918:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800191c:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 800191e:	f7ff fd3b 	bl	8001398 <HAL_GetTick>
 8001922:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001924:	e037      	b.n	8001996 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800192e:	695b      	ldr	r3, [r3, #20]
 8001930:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d011      	beq.n	800195c <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800193e:	f043 0208 	orr.w	r2, r3, #8
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001950:	695a      	ldr	r2, [r3, #20]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e023      	b.n	80019a4 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001962:	d018      	beq.n	8001996 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001964:	f7ff fd18 	bl	8001398 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	429a      	cmp	r2, r3
 8001972:	d302      	bcc.n	800197a <HAL_ETH_Transmit+0xf6>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d10d      	bne.n	8001996 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001980:	f043 0204 	orr.w	r2, r3, #4
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001990:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e006      	b.n	80019a4 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	dbc3      	blt.n	8001926 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 800199e:	2300      	movs	r3, #0
 80019a0:	e000      	b.n	80019a4 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
  }
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3718      	adds	r7, #24
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b088      	sub	sp, #32
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80019b6:	2300      	movs	r3, #0
 80019b8:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80019ba:	2300      	movs	r3, #0
 80019bc:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d109      	bne.n	80019d8 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ca:	f043 0201 	orr.w	r2, r3, #1
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e0a8      	b.n	8001b2a <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019de:	2b23      	cmp	r3, #35	; 0x23
 80019e0:	d001      	beq.n	80019e6 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e0a1      	b.n	8001b2a <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ea:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	69fa      	ldr	r2, [r7, #28]
 80019f0:	3212      	adds	r2, #18
 80019f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019f6:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019fc:	f1c3 0304 	rsb	r3, r3, #4
 8001a00:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001a02:	e06a      	b.n	8001ada <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d007      	beq.n	8001a20 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	699a      	ldr	r2, [r3, #24]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	69da      	ldr	r2, [r3, #28]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d103      	bne.n	8001a34 <HAL_ETH_ReadData+0x88>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d040      	beq.n	8001ab6 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d005      	beq.n	8001a4c <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	695b      	ldr	r3, [r3, #20]
 8001a50:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d00c      	beq.n	8001a78 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	0c1b      	lsrs	r3, r3, #16
 8001a64:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001a68:	3b04      	subs	r3, #4
 8001a6a:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001a74:	2301      	movs	r3, #1
 8001a76:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	689a      	ldr	r2, [r3, #8]
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001a90:	461a      	mov	r2, r3
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	f004 fc35 	bl	8006304 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a9e:	1c5a      	adds	r2, r3, #1
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	441a      	add	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	61fb      	str	r3, [r7, #28]
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	2b03      	cmp	r3, #3
 8001ac0:	d902      	bls.n	8001ac8 <HAL_ETH_ReadData+0x11c>
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	3b04      	subs	r3, #4
 8001ac6:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	69fa      	ldr	r2, [r7, #28]
 8001acc:	3212      	adds	r2, #18
 8001ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ad2:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	db06      	blt.n	8001af0 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001ae2:	697a      	ldr	r2, [r7, #20]
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d202      	bcs.n	8001af0 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001aea:	7bfb      	ldrb	r3, [r7, #15]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d089      	beq.n	8001a04 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	441a      	add	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d002      	beq.n	8001b0a <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f000 f815 	bl	8001b34 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	69fa      	ldr	r2, [r7, #28]
 8001b0e:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001b10:	7bfb      	ldrb	r3, [r7, #15]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d108      	bne.n	8001b28 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001b24:	2300      	movs	r3, #0
 8001b26:	e000      	b.n	8001b2a <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3720      	adds	r7, #32
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
	...

08001b34 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b088      	sub	sp, #32
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001b40:	2301      	movs	r3, #1
 8001b42:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001b48:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	69fa      	ldr	r2, [r7, #28]
 8001b4e:	3212      	adds	r2, #18
 8001b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b54:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b5a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001b5c:	e040      	b.n	8001be0 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	6a1b      	ldr	r3, [r3, #32]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d112      	bne.n	8001b8c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001b66:	f107 030c 	add.w	r3, r7, #12
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f004 fb9a 	bl	80062a4 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d102      	bne.n	8001b7c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001b76:	2300      	movs	r3, #0
 8001b78:	74fb      	strb	r3, [r7, #19]
 8001b7a:	e007      	b.n	8001b8c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	461a      	mov	r2, r3
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	461a      	mov	r2, r3
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001b8c:	7cfb      	ldrb	r3, [r7, #19]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d026      	beq.n	8001be0 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d103      	bne.n	8001ba2 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	4a1e      	ldr	r2, [pc, #120]	; (8001c18 <ETH_UpdateDescriptor+0xe4>)
 8001b9e:	605a      	str	r2, [r3, #4]
 8001ba0:	e003      	b.n	8001baa <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8001ba8:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001baa:	f3bf 8f5f 	dmb	sy
}
 8001bae:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	61fb      	str	r3, [r7, #28]
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	2b03      	cmp	r3, #3
 8001bc6:	d902      	bls.n	8001bce <ETH_UpdateDescriptor+0x9a>
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	3b04      	subs	r3, #4
 8001bcc:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	69fa      	ldr	r2, [r7, #28]
 8001bd2:	3212      	adds	r2, #18
 8001bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bd8:	617b      	str	r3, [r7, #20]
      desccount--;
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	3b01      	subs	r3, #1
 8001bde:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d002      	beq.n	8001bec <ETH_UpdateDescriptor+0xb8>
 8001be6:	7cfb      	ldrb	r3, [r7, #19]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1b8      	bne.n	8001b5e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d00c      	beq.n	8001c10 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bfe:	461a      	mov	r2, r3
 8001c00:	2300      	movs	r3, #0
 8001c02:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	69fa      	ldr	r2, [r7, #28]
 8001c08:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001c10:	bf00      	nop
 8001c12:	3720      	adds	r7, #32
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	80004600 	.word	0x80004600

08001c1c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
 8001c28:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	691b      	ldr	r3, [r3, #16]
 8001c30:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	f003 031c 	and.w	r3, r3, #28
 8001c38:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	02db      	lsls	r3, r3, #11
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	697a      	ldr	r2, [r7, #20]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	019b      	lsls	r3, r3, #6
 8001c4a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001c4e:	697a      	ldr	r2, [r7, #20]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	f023 0302 	bic.w	r3, r3, #2
 8001c5a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	f043 0301 	orr.w	r3, r3, #1
 8001c62:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001c6c:	f7ff fb94 	bl	8001398 <HAL_GetTick>
 8001c70:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c72:	e00d      	b.n	8001c90 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001c74:	f7ff fb90 	bl	8001398 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c82:	d301      	bcc.n	8001c88 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e010      	b.n	8001caa <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d1ec      	bne.n	8001c74 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	695b      	ldr	r3, [r3, #20]
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3718      	adds	r7, #24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b086      	sub	sp, #24
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	60f8      	str	r0, [r7, #12]
 8001cba:	60b9      	str	r1, [r7, #8]
 8001cbc:	607a      	str	r2, [r7, #4]
 8001cbe:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	f003 031c 	and.w	r3, r3, #28
 8001cce:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	02db      	lsls	r3, r3, #11
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	697a      	ldr	r2, [r7, #20]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	019b      	lsls	r3, r3, #6
 8001ce0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001ce4:	697a      	ldr	r2, [r7, #20]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	f043 0302 	orr.w	r3, r3, #2
 8001cf0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	697a      	ldr	r2, [r7, #20]
 8001d0a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d0c:	f7ff fb44 	bl	8001398 <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d12:	e00d      	b.n	8001d30 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001d14:	f7ff fb40 	bl	8001398 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d22:	d301      	bcc.n	8001d28 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e009      	b.n	8001d3c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1ec      	bne.n	8001d14 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3718      	adds	r7, #24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d101      	bne.n	8001d58 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e0d9      	b.n	8001f0c <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0310 	and.w	r3, r3, #16
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	bf14      	ite	ne
 8001d66:	2301      	movne	r3, #1
 8001d68:	2300      	moveq	r3, #0
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	bf0c      	ite	eq
 8001d90:	2301      	moveq	r3, #1
 8001d92:	2300      	movne	r3, #0
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	461a      	mov	r2, r3
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	bf14      	ite	ne
 8001dac:	2301      	movne	r3, #1
 8001dae:	2300      	moveq	r3, #0
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	bf0c      	ite	eq
 8001dc6:	2301      	moveq	r3, #1
 8001dc8:	2300      	movne	r3, #0
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	461a      	mov	r2, r3
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	bf14      	ite	ne
 8001de0:	2301      	movne	r3, #1
 8001de2:	2300      	moveq	r3, #0
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	461a      	mov	r2, r3
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	bf0c      	ite	eq
 8001e16:	2301      	moveq	r3, #1
 8001e18:	2300      	movne	r3, #0
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	bf0c      	ite	eq
 8001e30:	2301      	moveq	r3, #1
 8001e32:	2300      	movne	r3, #0
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	461a      	mov	r2, r3
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	bf14      	ite	ne
 8001e4a:	2301      	movne	r3, #1
 8001e4c:	2300      	moveq	r3, #0
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	461a      	mov	r2, r3
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	bf14      	ite	ne
 8001e72:	2301      	movne	r3, #1
 8001e74:	2300      	moveq	r3, #0
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	461a      	mov	r2, r3
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	bf14      	ite	ne
 8001e8c:	2301      	movne	r3, #1
 8001e8e:	2300      	moveq	r3, #0
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	461a      	mov	r2, r3
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	bf0c      	ite	eq
 8001ea8:	2301      	moveq	r3, #1
 8001eaa:	2300      	movne	r3, #0
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	461a      	mov	r2, r3
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	0c1b      	lsrs	r3, r3, #16
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	bf14      	ite	ne
 8001ee0:	2301      	movne	r3, #1
 8001ee2:	2300      	moveq	r3, #0
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	bf14      	ite	ne
 8001efc:	2301      	movne	r3, #1
 8001efe:	2300      	moveq	r3, #0
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e00b      	b.n	8001f44 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f32:	2b10      	cmp	r3, #16
 8001f34:	d105      	bne.n	8001f42 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001f36:	6839      	ldr	r1, [r7, #0]
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 f883 	bl	8002044 <ETH_SetMACConfig>

    return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	e000      	b.n	8001f44 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
  }
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f023 031c 	bic.w	r3, r3, #28
 8001f62:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001f64:	f001 fc64 	bl	8003830 <HAL_RCC_GetHCLKFreq>
 8001f68:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	4a1d      	ldr	r2, [pc, #116]	; (8001fe4 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d908      	bls.n	8001f84 <HAL_ETH_SetMDIOClockRange+0x38>
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	4a1c      	ldr	r2, [pc, #112]	; (8001fe8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d804      	bhi.n	8001f84 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f043 0308 	orr.w	r3, r3, #8
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	e027      	b.n	8001fd4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	4a18      	ldr	r2, [pc, #96]	; (8001fe8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d908      	bls.n	8001f9e <HAL_ETH_SetMDIOClockRange+0x52>
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	4a17      	ldr	r2, [pc, #92]	; (8001fec <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d204      	bcs.n	8001f9e <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f043 030c 	orr.w	r3, r3, #12
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	e01a      	b.n	8001fd4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	4a12      	ldr	r2, [pc, #72]	; (8001fec <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d303      	bcc.n	8001fae <HAL_ETH_SetMDIOClockRange+0x62>
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	4a11      	ldr	r2, [pc, #68]	; (8001ff0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d911      	bls.n	8001fd2 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	4a0f      	ldr	r2, [pc, #60]	; (8001ff0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d908      	bls.n	8001fc8 <HAL_ETH_SetMDIOClockRange+0x7c>
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	4a0e      	ldr	r2, [pc, #56]	; (8001ff4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d804      	bhi.n	8001fc8 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f043 0304 	orr.w	r3, r3, #4
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	e005      	b.n	8001fd4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f043 0310 	orr.w	r3, r3, #16
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	e000      	b.n	8001fd4 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001fd2:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	611a      	str	r2, [r3, #16]
}
 8001fdc:	bf00      	nop
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	01312cff 	.word	0x01312cff
 8001fe8:	02160ebf 	.word	0x02160ebf
 8001fec:	03938700 	.word	0x03938700
 8001ff0:	05f5e0ff 	.word	0x05f5e0ff
 8001ff4:	08f0d17f 	.word	0x08f0d17f

08001ff8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002000:	2300      	movs	r3, #0
 8002002:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	6812      	ldr	r2, [r2, #0]
 8002012:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002016:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800201a:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002028:	2001      	movs	r0, #1
 800202a:	f7ff f9c1 	bl	80013b0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002038:	6193      	str	r3, [r2, #24]
}
 800203a:	bf00      	nop
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
	...

08002044 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	4b51      	ldr	r3, [pc, #324]	; (80021a0 <ETH_SetMACConfig+0x15c>)
 800205a:	4013      	ands	r3, r2
 800205c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	7c1b      	ldrb	r3, [r3, #16]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d102      	bne.n	800206c <ETH_SetMACConfig+0x28>
 8002066:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800206a:	e000      	b.n	800206e <ETH_SetMACConfig+0x2a>
 800206c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	7c5b      	ldrb	r3, [r3, #17]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d102      	bne.n	800207c <ETH_SetMACConfig+0x38>
 8002076:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800207a:	e000      	b.n	800207e <ETH_SetMACConfig+0x3a>
 800207c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800207e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002084:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	7fdb      	ldrb	r3, [r3, #31]
 800208a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800208c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002092:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	7f92      	ldrb	r2, [r2, #30]
 8002098:	2a00      	cmp	r2, #0
 800209a:	d102      	bne.n	80020a2 <ETH_SetMACConfig+0x5e>
 800209c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020a0:	e000      	b.n	80020a4 <ETH_SetMACConfig+0x60>
 80020a2:	2200      	movs	r2, #0
                        macconf->Speed |
 80020a4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	7f1b      	ldrb	r3, [r3, #28]
 80020aa:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80020ac:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80020b2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	791b      	ldrb	r3, [r3, #4]
 80020b8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80020ba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	f892 2020 	ldrb.w	r2, [r2, #32]
 80020c2:	2a00      	cmp	r2, #0
 80020c4:	d102      	bne.n	80020cc <ETH_SetMACConfig+0x88>
 80020c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020ca:	e000      	b.n	80020ce <ETH_SetMACConfig+0x8a>
 80020cc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80020ce:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	7bdb      	ldrb	r3, [r3, #15]
 80020d4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80020d6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80020dc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80020e4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80020e6:	4313      	orrs	r3, r2
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020fe:	2001      	movs	r0, #1
 8002100:	f7ff f956 	bl	80013b0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68fa      	ldr	r2, [r7, #12]
 800210a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	f64f 7341 	movw	r3, #65345	; 0xff41
 800211a:	4013      	ands	r3, r2
 800211c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002122:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800212a:	2a00      	cmp	r2, #0
 800212c:	d101      	bne.n	8002132 <ETH_SetMACConfig+0xee>
 800212e:	2280      	movs	r2, #128	; 0x80
 8002130:	e000      	b.n	8002134 <ETH_SetMACConfig+0xf0>
 8002132:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002134:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800213a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002142:	2a01      	cmp	r2, #1
 8002144:	d101      	bne.n	800214a <ETH_SetMACConfig+0x106>
 8002146:	2208      	movs	r2, #8
 8002148:	e000      	b.n	800214c <ETH_SetMACConfig+0x108>
 800214a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800214c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002154:	2a01      	cmp	r2, #1
 8002156:	d101      	bne.n	800215c <ETH_SetMACConfig+0x118>
 8002158:	2204      	movs	r2, #4
 800215a:	e000      	b.n	800215e <ETH_SetMACConfig+0x11a>
 800215c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800215e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002166:	2a01      	cmp	r2, #1
 8002168:	d101      	bne.n	800216e <ETH_SetMACConfig+0x12a>
 800216a:	2202      	movs	r2, #2
 800216c:	e000      	b.n	8002170 <ETH_SetMACConfig+0x12c>
 800216e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002170:	4313      	orrs	r3, r2
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	4313      	orrs	r3, r2
 8002176:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002188:	2001      	movs	r0, #1
 800218a:	f7ff f911 	bl	80013b0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	619a      	str	r2, [r3, #24]
}
 8002196:	bf00      	nop
 8002198:	3710      	adds	r7, #16
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	ff20810f 	.word	0xff20810f

080021a4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	4b3d      	ldr	r3, [pc, #244]	; (80022b4 <ETH_SetDMAConfig+0x110>)
 80021be:	4013      	ands	r3, r2
 80021c0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	7b1b      	ldrb	r3, [r3, #12]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d102      	bne.n	80021d0 <ETH_SetDMAConfig+0x2c>
 80021ca:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80021ce:	e000      	b.n	80021d2 <ETH_SetDMAConfig+0x2e>
 80021d0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	7b5b      	ldrb	r3, [r3, #13]
 80021d6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80021d8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	7f52      	ldrb	r2, [r2, #29]
 80021de:	2a00      	cmp	r2, #0
 80021e0:	d102      	bne.n	80021e8 <ETH_SetDMAConfig+0x44>
 80021e2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80021e6:	e000      	b.n	80021ea <ETH_SetDMAConfig+0x46>
 80021e8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80021ea:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	7b9b      	ldrb	r3, [r3, #14]
 80021f0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80021f2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80021f8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	7f1b      	ldrb	r3, [r3, #28]
 80021fe:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002200:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	7f9b      	ldrb	r3, [r3, #30]
 8002206:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002208:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800220e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002216:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002218:	4313      	orrs	r3, r2
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	4313      	orrs	r3, r2
 800221e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002228:	461a      	mov	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800223a:	2001      	movs	r0, #1
 800223c:	f7ff f8b8 	bl	80013b0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002248:	461a      	mov	r2, r3
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	791b      	ldrb	r3, [r3, #4]
 8002252:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002258:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800225e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002264:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800226c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800226e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002274:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002276:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800227c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	6812      	ldr	r2, [r2, #0]
 8002282:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002286:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800228a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002298:	2001      	movs	r0, #1
 800229a:	f7ff f889 	bl	80013b0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022a6:	461a      	mov	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6013      	str	r3, [r2, #0]
}
 80022ac:	bf00      	nop
 80022ae:	3710      	adds	r7, #16
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	f8de3f23 	.word	0xf8de3f23

080022b8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b0a6      	sub	sp, #152	; 0x98
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80022c0:	2301      	movs	r3, #1
 80022c2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80022c6:	2301      	movs	r3, #1
 80022c8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80022cc:	2300      	movs	r3, #0
 80022ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80022d0:	2300      	movs	r3, #0
 80022d2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80022d6:	2301      	movs	r3, #1
 80022d8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80022dc:	2300      	movs	r3, #0
 80022de:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80022e2:	2301      	movs	r3, #1
 80022e4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80022e8:	2300      	movs	r3, #0
 80022ea:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80022ee:	2300      	movs	r3, #0
 80022f0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80022f4:	2300      	movs	r3, #0
 80022f6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80022f8:	2300      	movs	r3, #0
 80022fa:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80022fe:	2300      	movs	r3, #0
 8002300:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002302:	2300      	movs	r3, #0
 8002304:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002308:	2300      	movs	r3, #0
 800230a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800230e:	2300      	movs	r3, #0
 8002310:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002314:	2300      	movs	r3, #0
 8002316:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800231a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800231e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002320:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002324:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002326:	2300      	movs	r3, #0
 8002328:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800232c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002330:	4619      	mov	r1, r3
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f7ff fe86 	bl	8002044 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002338:	2301      	movs	r3, #1
 800233a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800233c:	2301      	movs	r3, #1
 800233e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002340:	2301      	movs	r3, #1
 8002342:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002346:	2301      	movs	r3, #1
 8002348:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800234a:	2300      	movs	r3, #0
 800234c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800234e:	2300      	movs	r3, #0
 8002350:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002354:	2300      	movs	r3, #0
 8002356:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800235a:	2300      	movs	r3, #0
 800235c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800235e:	2301      	movs	r3, #1
 8002360:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002364:	2301      	movs	r3, #1
 8002366:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002368:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800236c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800236e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002372:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002374:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002378:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800237a:	2301      	movs	r3, #1
 800237c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002380:	2300      	movs	r3, #0
 8002382:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002384:	2300      	movs	r3, #0
 8002386:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002388:	f107 0308 	add.w	r3, r7, #8
 800238c:	4619      	mov	r1, r3
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7ff ff08 	bl	80021a4 <ETH_SetDMAConfig>
}
 8002394:	bf00      	nop
 8002396:	3798      	adds	r7, #152	; 0x98
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800239c:	b480      	push	{r7}
 800239e:	b087      	sub	sp, #28
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	3305      	adds	r3, #5
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	021b      	lsls	r3, r3, #8
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	3204      	adds	r2, #4
 80023b4:	7812      	ldrb	r2, [r2, #0]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80023ba:	68ba      	ldr	r2, [r7, #8]
 80023bc:	4b11      	ldr	r3, [pc, #68]	; (8002404 <ETH_MACAddressConfig+0x68>)
 80023be:	4413      	add	r3, r2
 80023c0:	461a      	mov	r2, r3
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	3303      	adds	r3, #3
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	061a      	lsls	r2, r3, #24
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	3302      	adds	r3, #2
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	041b      	lsls	r3, r3, #16
 80023d6:	431a      	orrs	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3301      	adds	r3, #1
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	021b      	lsls	r3, r3, #8
 80023e0:	4313      	orrs	r3, r2
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	7812      	ldrb	r2, [r2, #0]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	4b06      	ldr	r3, [pc, #24]	; (8002408 <ETH_MACAddressConfig+0x6c>)
 80023ee:	4413      	add	r3, r2
 80023f0:	461a      	mov	r2, r3
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	6013      	str	r3, [r2, #0]
}
 80023f6:	bf00      	nop
 80023f8:	371c      	adds	r7, #28
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	40028040 	.word	0x40028040
 8002408:	40028044 	.word	0x40028044

0800240c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002414:	2300      	movs	r3, #0
 8002416:	60fb      	str	r3, [r7, #12]
 8002418:	e03e      	b.n	8002498 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68d9      	ldr	r1, [r3, #12]
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	4613      	mov	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4413      	add	r3, r2
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	440b      	add	r3, r1
 800242a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	2200      	movs	r2, #0
 8002430:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	2200      	movs	r2, #0
 8002436:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	2200      	movs	r2, #0
 800243c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	2200      	movs	r2, #0
 8002442:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002444:	68b9      	ldr	r1, [r7, #8]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	3206      	adds	r2, #6
 800244c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2b02      	cmp	r3, #2
 8002460:	d80c      	bhi.n	800247c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	68d9      	ldr	r1, [r3, #12]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	1c5a      	adds	r2, r3, #1
 800246a:	4613      	mov	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4413      	add	r3, r2
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	440b      	add	r3, r1
 8002474:	461a      	mov	r2, r3
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	60da      	str	r2, [r3, #12]
 800247a:	e004      	b.n	8002486 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	461a      	mov	r2, r3
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	3301      	adds	r3, #1
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2b03      	cmp	r3, #3
 800249c:	d9bd      	bls.n	800241a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	68da      	ldr	r2, [r3, #12]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024b0:	611a      	str	r2, [r3, #16]
}
 80024b2:	bf00      	nop
 80024b4:	3714      	adds	r7, #20
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr

080024be <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80024be:	b480      	push	{r7}
 80024c0:	b085      	sub	sp, #20
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80024c6:	2300      	movs	r3, #0
 80024c8:	60fb      	str	r3, [r7, #12]
 80024ca:	e046      	b.n	800255a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6919      	ldr	r1, [r3, #16]
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	4613      	mov	r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	4413      	add	r3, r2
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	440b      	add	r3, r1
 80024dc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	2200      	movs	r2, #0
 80024e8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	2200      	movs	r2, #0
 80024ee:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	2200      	movs	r2, #0
 80024f4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	2200      	movs	r2, #0
 80024fa:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	2200      	movs	r2, #0
 8002500:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002508:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8002510:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800251e:	68b9      	ldr	r1, [r7, #8]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	3212      	adds	r2, #18
 8002526:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2b02      	cmp	r3, #2
 800252e:	d80c      	bhi.n	800254a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6919      	ldr	r1, [r3, #16]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	1c5a      	adds	r2, r3, #1
 8002538:	4613      	mov	r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	4413      	add	r3, r2
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	440b      	add	r3, r1
 8002542:	461a      	mov	r2, r3
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	60da      	str	r2, [r3, #12]
 8002548:	e004      	b.n	8002554 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	461a      	mov	r2, r3
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	3301      	adds	r3, #1
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2b03      	cmp	r3, #3
 800255e:	d9b5      	bls.n	80024cc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	691a      	ldr	r2, [r3, #16]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800258a:	60da      	str	r2, [r3, #12]
}
 800258c:	bf00      	nop
 800258e:	3714      	adds	r7, #20
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002598:	b480      	push	{r7}
 800259a:	b08d      	sub	sp, #52	; 0x34
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	3318      	adds	r3, #24
 80025a8:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80025b6:	2300      	movs	r3, #0
 80025b8:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025c2:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80025ca:	2300      	movs	r3, #0
 80025cc:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80025ce:	6a3b      	ldr	r3, [r7, #32]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80025d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80025da:	d007      	beq.n	80025ec <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80025dc:	697a      	ldr	r2, [r7, #20]
 80025de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e0:	3304      	adds	r3, #4
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	4413      	add	r3, r2
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80025ec:	2302      	movs	r3, #2
 80025ee:	e0ff      	b.n	80027f0 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 80025f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f2:	3301      	adds	r3, #1
 80025f4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	461a      	mov	r2, r3
 80025fc:	6a3b      	ldr	r3, [r7, #32]
 80025fe:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002600:	6a3b      	ldr	r3, [r7, #32]
 8002602:	685a      	ldr	r2, [r3, #4]
 8002604:	4b7d      	ldr	r3, [pc, #500]	; (80027fc <ETH_Prepare_Tx_Descriptors+0x264>)
 8002606:	4013      	ands	r3, r2
 8002608:	69fa      	ldr	r2, [r7, #28]
 800260a:	6852      	ldr	r2, [r2, #4]
 800260c:	431a      	orrs	r2, r3
 800260e:	6a3b      	ldr	r3, [r7, #32]
 8002610:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b00      	cmp	r3, #0
 800261c:	d008      	beq.n	8002630 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800261e:	6a3b      	ldr	r3, [r7, #32]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	431a      	orrs	r2, r3
 800262c:	6a3b      	ldr	r3, [r7, #32]
 800262e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0320 	and.w	r3, r3, #32
 8002638:	2b00      	cmp	r3, #0
 800263a:	d008      	beq.n	800264e <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 800263c:	6a3b      	ldr	r3, [r7, #32]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	431a      	orrs	r2, r3
 800264a:	6a3b      	ldr	r3, [r7, #32]
 800264c:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0304 	and.w	r3, r3, #4
 8002656:	2b00      	cmp	r3, #0
 8002658:	d005      	beq.n	8002666 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800265a:	6a3b      	ldr	r3, [r7, #32]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002662:	6a3b      	ldr	r3, [r7, #32]
 8002664:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002666:	6a3b      	ldr	r3, [r7, #32]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800266e:	6a3b      	ldr	r3, [r7, #32]
 8002670:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8002672:	f3bf 8f5f 	dmb	sy
}
 8002676:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002678:	6a3b      	ldr	r3, [r7, #32]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002680:	6a3b      	ldr	r3, [r7, #32]
 8002682:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002684:	e082      	b.n	800278c <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002686:	6a3b      	ldr	r3, [r7, #32]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800268e:	6a3b      	ldr	r3, [r7, #32]
 8002690:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d006      	beq.n	80026a6 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002698:	6a3b      	ldr	r3, [r7, #32]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80026a0:	6a3b      	ldr	r3, [r7, #32]
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	e005      	b.n	80026b2 <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80026a6:	6a3b      	ldr	r3, [r7, #32]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80026ae:	6a3b      	ldr	r3, [r7, #32]
 80026b0:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80026b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b4:	3301      	adds	r3, #1
 80026b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ba:	2b03      	cmp	r3, #3
 80026bc:	d902      	bls.n	80026c4 <ETH_Prepare_Tx_Descriptors+0x12c>
 80026be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c0:	3b04      	subs	r3, #4
 80026c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026cc:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80026ce:	6a3b      	ldr	r3, [r7, #32]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80026d6:	6a3b      	ldr	r3, [r7, #32]
 80026d8:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80026da:	6a3b      	ldr	r3, [r7, #32]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80026e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80026e6:	d007      	beq.n	80026f8 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80026e8:	697a      	ldr	r2, [r7, #20]
 80026ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ec:	3304      	adds	r3, #4
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	4413      	add	r3, r2
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d029      	beq.n	800274c <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002704:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002706:	2300      	movs	r3, #0
 8002708:	62bb      	str	r3, [r7, #40]	; 0x28
 800270a:	e019      	b.n	8002740 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 800270c:	f3bf 8f5f 	dmb	sy
}
 8002710:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002712:	6a3b      	ldr	r3, [r7, #32]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800271a:	6a3b      	ldr	r3, [r7, #32]
 800271c:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800271e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002720:	3301      	adds	r3, #1
 8002722:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002726:	2b03      	cmp	r3, #3
 8002728:	d902      	bls.n	8002730 <ETH_Prepare_Tx_Descriptors+0x198>
 800272a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800272c:	3b04      	subs	r3, #4
 800272e:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002738:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800273a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800273c:	3301      	adds	r3, #1
 800273e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002740:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002744:	429a      	cmp	r2, r3
 8002746:	d3e1      	bcc.n	800270c <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8002748:	2302      	movs	r3, #2
 800274a:	e051      	b.n	80027f0 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	3301      	adds	r3, #1
 8002750:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	461a      	mov	r2, r3
 800275e:	6a3b      	ldr	r3, [r7, #32]
 8002760:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002762:	6a3b      	ldr	r3, [r7, #32]
 8002764:	685a      	ldr	r2, [r3, #4]
 8002766:	4b25      	ldr	r3, [pc, #148]	; (80027fc <ETH_Prepare_Tx_Descriptors+0x264>)
 8002768:	4013      	ands	r3, r2
 800276a:	69fa      	ldr	r2, [r7, #28]
 800276c:	6852      	ldr	r2, [r2, #4]
 800276e:	431a      	orrs	r2, r3
 8002770:	6a3b      	ldr	r3, [r7, #32]
 8002772:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	3301      	adds	r3, #1
 8002778:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800277a:	f3bf 8f5f 	dmb	sy
}
 800277e:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002780:	6a3b      	ldr	r3, [r7, #32]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002788:	6a3b      	ldr	r3, [r7, #32]
 800278a:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	2b00      	cmp	r3, #0
 8002792:	f47f af78 	bne.w	8002686 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d006      	beq.n	80027aa <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800279c:	6a3b      	ldr	r3, [r7, #32]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80027a4:	6a3b      	ldr	r3, [r7, #32]
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	e005      	b.n	80027b6 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80027aa:	6a3b      	ldr	r3, [r7, #32]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80027b2:	6a3b      	ldr	r3, [r7, #32]
 80027b4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80027b6:	6a3b      	ldr	r3, [r7, #32]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80027be:	6a3b      	ldr	r3, [r7, #32]
 80027c0:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027c6:	6979      	ldr	r1, [r7, #20]
 80027c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ca:	3304      	adds	r3, #4
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	440b      	add	r3, r1
 80027d0:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027d6:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80027d8:	b672      	cpsid	i
}
 80027da:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	4413      	add	r3, r2
 80027e4:	1c5a      	adds	r2, r3, #1
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80027ea:	b662      	cpsie	i
}
 80027ec:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3734      	adds	r7, #52	; 0x34
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr
 80027fc:	ffffe000 	.word	0xffffe000

08002800 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002800:	b480      	push	{r7}
 8002802:	b089      	sub	sp, #36	; 0x24
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800280a:	2300      	movs	r3, #0
 800280c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800280e:	2300      	movs	r3, #0
 8002810:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002812:	2300      	movs	r3, #0
 8002814:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002816:	2300      	movs	r3, #0
 8002818:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800281a:	2300      	movs	r3, #0
 800281c:	61fb      	str	r3, [r7, #28]
 800281e:	e175      	b.n	8002b0c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002820:	2201      	movs	r2, #1
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	4013      	ands	r3, r2
 8002832:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	429a      	cmp	r2, r3
 800283a:	f040 8164 	bne.w	8002b06 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f003 0303 	and.w	r3, r3, #3
 8002846:	2b01      	cmp	r3, #1
 8002848:	d005      	beq.n	8002856 <HAL_GPIO_Init+0x56>
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f003 0303 	and.w	r3, r3, #3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d130      	bne.n	80028b8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	2203      	movs	r2, #3
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	43db      	mvns	r3, r3
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4013      	ands	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	68da      	ldr	r2, [r3, #12]
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4313      	orrs	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800288c:	2201      	movs	r2, #1
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	43db      	mvns	r3, r3
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	4013      	ands	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	091b      	lsrs	r3, r3, #4
 80028a2:	f003 0201 	and.w	r2, r3, #1
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f003 0303 	and.w	r3, r3, #3
 80028c0:	2b03      	cmp	r3, #3
 80028c2:	d017      	beq.n	80028f4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	2203      	movs	r2, #3
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	43db      	mvns	r3, r3
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	4013      	ands	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f003 0303 	and.w	r3, r3, #3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d123      	bne.n	8002948 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	08da      	lsrs	r2, r3, #3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	3208      	adds	r2, #8
 8002908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800290c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	220f      	movs	r2, #15
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	43db      	mvns	r3, r3
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	4013      	ands	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	691a      	ldr	r2, [r3, #16]
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	f003 0307 	and.w	r3, r3, #7
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4313      	orrs	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	08da      	lsrs	r2, r3, #3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	3208      	adds	r2, #8
 8002942:	69b9      	ldr	r1, [r7, #24]
 8002944:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	2203      	movs	r2, #3
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	43db      	mvns	r3, r3
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4013      	ands	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f003 0203 	and.w	r2, r3, #3
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	4313      	orrs	r3, r2
 8002974:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002984:	2b00      	cmp	r3, #0
 8002986:	f000 80be 	beq.w	8002b06 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800298a:	4b66      	ldr	r3, [pc, #408]	; (8002b24 <HAL_GPIO_Init+0x324>)
 800298c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298e:	4a65      	ldr	r2, [pc, #404]	; (8002b24 <HAL_GPIO_Init+0x324>)
 8002990:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002994:	6453      	str	r3, [r2, #68]	; 0x44
 8002996:	4b63      	ldr	r3, [pc, #396]	; (8002b24 <HAL_GPIO_Init+0x324>)
 8002998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80029a2:	4a61      	ldr	r2, [pc, #388]	; (8002b28 <HAL_GPIO_Init+0x328>)
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	089b      	lsrs	r3, r3, #2
 80029a8:	3302      	adds	r3, #2
 80029aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	f003 0303 	and.w	r3, r3, #3
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	220f      	movs	r2, #15
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	43db      	mvns	r3, r3
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	4013      	ands	r3, r2
 80029c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a58      	ldr	r2, [pc, #352]	; (8002b2c <HAL_GPIO_Init+0x32c>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d037      	beq.n	8002a3e <HAL_GPIO_Init+0x23e>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a57      	ldr	r2, [pc, #348]	; (8002b30 <HAL_GPIO_Init+0x330>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d031      	beq.n	8002a3a <HAL_GPIO_Init+0x23a>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a56      	ldr	r2, [pc, #344]	; (8002b34 <HAL_GPIO_Init+0x334>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d02b      	beq.n	8002a36 <HAL_GPIO_Init+0x236>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a55      	ldr	r2, [pc, #340]	; (8002b38 <HAL_GPIO_Init+0x338>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d025      	beq.n	8002a32 <HAL_GPIO_Init+0x232>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a54      	ldr	r2, [pc, #336]	; (8002b3c <HAL_GPIO_Init+0x33c>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d01f      	beq.n	8002a2e <HAL_GPIO_Init+0x22e>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a53      	ldr	r2, [pc, #332]	; (8002b40 <HAL_GPIO_Init+0x340>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d019      	beq.n	8002a2a <HAL_GPIO_Init+0x22a>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a52      	ldr	r2, [pc, #328]	; (8002b44 <HAL_GPIO_Init+0x344>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d013      	beq.n	8002a26 <HAL_GPIO_Init+0x226>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a51      	ldr	r2, [pc, #324]	; (8002b48 <HAL_GPIO_Init+0x348>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d00d      	beq.n	8002a22 <HAL_GPIO_Init+0x222>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a50      	ldr	r2, [pc, #320]	; (8002b4c <HAL_GPIO_Init+0x34c>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d007      	beq.n	8002a1e <HAL_GPIO_Init+0x21e>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a4f      	ldr	r2, [pc, #316]	; (8002b50 <HAL_GPIO_Init+0x350>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d101      	bne.n	8002a1a <HAL_GPIO_Init+0x21a>
 8002a16:	2309      	movs	r3, #9
 8002a18:	e012      	b.n	8002a40 <HAL_GPIO_Init+0x240>
 8002a1a:	230a      	movs	r3, #10
 8002a1c:	e010      	b.n	8002a40 <HAL_GPIO_Init+0x240>
 8002a1e:	2308      	movs	r3, #8
 8002a20:	e00e      	b.n	8002a40 <HAL_GPIO_Init+0x240>
 8002a22:	2307      	movs	r3, #7
 8002a24:	e00c      	b.n	8002a40 <HAL_GPIO_Init+0x240>
 8002a26:	2306      	movs	r3, #6
 8002a28:	e00a      	b.n	8002a40 <HAL_GPIO_Init+0x240>
 8002a2a:	2305      	movs	r3, #5
 8002a2c:	e008      	b.n	8002a40 <HAL_GPIO_Init+0x240>
 8002a2e:	2304      	movs	r3, #4
 8002a30:	e006      	b.n	8002a40 <HAL_GPIO_Init+0x240>
 8002a32:	2303      	movs	r3, #3
 8002a34:	e004      	b.n	8002a40 <HAL_GPIO_Init+0x240>
 8002a36:	2302      	movs	r3, #2
 8002a38:	e002      	b.n	8002a40 <HAL_GPIO_Init+0x240>
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e000      	b.n	8002a40 <HAL_GPIO_Init+0x240>
 8002a3e:	2300      	movs	r3, #0
 8002a40:	69fa      	ldr	r2, [r7, #28]
 8002a42:	f002 0203 	and.w	r2, r2, #3
 8002a46:	0092      	lsls	r2, r2, #2
 8002a48:	4093      	lsls	r3, r2
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002a50:	4935      	ldr	r1, [pc, #212]	; (8002b28 <HAL_GPIO_Init+0x328>)
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	089b      	lsrs	r3, r3, #2
 8002a56:	3302      	adds	r3, #2
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a5e:	4b3d      	ldr	r3, [pc, #244]	; (8002b54 <HAL_GPIO_Init+0x354>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	43db      	mvns	r3, r3
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d003      	beq.n	8002a82 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a82:	4a34      	ldr	r2, [pc, #208]	; (8002b54 <HAL_GPIO_Init+0x354>)
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a88:	4b32      	ldr	r3, [pc, #200]	; (8002b54 <HAL_GPIO_Init+0x354>)
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	43db      	mvns	r3, r3
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	4013      	ands	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d003      	beq.n	8002aac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002aac:	4a29      	ldr	r2, [pc, #164]	; (8002b54 <HAL_GPIO_Init+0x354>)
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ab2:	4b28      	ldr	r3, [pc, #160]	; (8002b54 <HAL_GPIO_Init+0x354>)
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	43db      	mvns	r3, r3
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d003      	beq.n	8002ad6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ad6:	4a1f      	ldr	r2, [pc, #124]	; (8002b54 <HAL_GPIO_Init+0x354>)
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002adc:	4b1d      	ldr	r3, [pc, #116]	; (8002b54 <HAL_GPIO_Init+0x354>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	43db      	mvns	r3, r3
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d003      	beq.n	8002b00 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b00:	4a14      	ldr	r2, [pc, #80]	; (8002b54 <HAL_GPIO_Init+0x354>)
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	3301      	adds	r3, #1
 8002b0a:	61fb      	str	r3, [r7, #28]
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	2b0f      	cmp	r3, #15
 8002b10:	f67f ae86 	bls.w	8002820 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002b14:	bf00      	nop
 8002b16:	bf00      	nop
 8002b18:	3724      	adds	r7, #36	; 0x24
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	40023800 	.word	0x40023800
 8002b28:	40013800 	.word	0x40013800
 8002b2c:	40020000 	.word	0x40020000
 8002b30:	40020400 	.word	0x40020400
 8002b34:	40020800 	.word	0x40020800
 8002b38:	40020c00 	.word	0x40020c00
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	40021400 	.word	0x40021400
 8002b44:	40021800 	.word	0x40021800
 8002b48:	40021c00 	.word	0x40021c00
 8002b4c:	40022000 	.word	0x40022000
 8002b50:	40022400 	.word	0x40022400
 8002b54:	40013c00 	.word	0x40013c00

08002b58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	460b      	mov	r3, r1
 8002b62:	807b      	strh	r3, [r7, #2]
 8002b64:	4613      	mov	r3, r2
 8002b66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b68:	787b      	ldrb	r3, [r7, #1]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d003      	beq.n	8002b76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b6e:	887a      	ldrh	r2, [r7, #2]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002b74:	e003      	b.n	8002b7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002b76:	887b      	ldrh	r3, [r7, #2]
 8002b78:	041a      	lsls	r2, r3, #16
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	619a      	str	r2, [r3, #24]
}
 8002b7e:	bf00      	nop
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b085      	sub	sp, #20
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
 8002b92:	460b      	mov	r3, r1
 8002b94:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b9c:	887a      	ldrh	r2, [r7, #2]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	041a      	lsls	r2, r3, #16
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	43d9      	mvns	r1, r3
 8002ba8:	887b      	ldrh	r3, [r7, #2]
 8002baa:	400b      	ands	r3, r1
 8002bac:	431a      	orrs	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	619a      	str	r2, [r3, #24]
}
 8002bb2:	bf00      	nop
 8002bb4:	3714      	adds	r7, #20
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr

08002bbe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002bbe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bc0:	b08f      	sub	sp, #60	; 0x3c
 8002bc2:	af0a      	add	r7, sp, #40	; 0x28
 8002bc4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d101      	bne.n	8002bd0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e116      	b.n	8002dfe <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d106      	bne.n	8002bf0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f7fd ffb0 	bl	8000b50 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2203      	movs	r2, #3
 8002bf4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d102      	bne.n	8002c0a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f002 fbf2 	bl	80053f8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	603b      	str	r3, [r7, #0]
 8002c1a:	687e      	ldr	r6, [r7, #4]
 8002c1c:	466d      	mov	r5, sp
 8002c1e:	f106 0410 	add.w	r4, r6, #16
 8002c22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c2a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c2e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c32:	1d33      	adds	r3, r6, #4
 8002c34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c36:	6838      	ldr	r0, [r7, #0]
 8002c38:	f002 fb86 	bl	8005348 <USB_CoreInit>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d005      	beq.n	8002c4e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2202      	movs	r2, #2
 8002c46:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e0d7      	b.n	8002dfe <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2100      	movs	r1, #0
 8002c54:	4618      	mov	r0, r3
 8002c56:	f002 fbe0 	bl	800541a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	73fb      	strb	r3, [r7, #15]
 8002c5e:	e04a      	b.n	8002cf6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c60:	7bfa      	ldrb	r2, [r7, #15]
 8002c62:	6879      	ldr	r1, [r7, #4]
 8002c64:	4613      	mov	r3, r2
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	4413      	add	r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	440b      	add	r3, r1
 8002c6e:	333d      	adds	r3, #61	; 0x3d
 8002c70:	2201      	movs	r2, #1
 8002c72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c74:	7bfa      	ldrb	r2, [r7, #15]
 8002c76:	6879      	ldr	r1, [r7, #4]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	4413      	add	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	440b      	add	r3, r1
 8002c82:	333c      	adds	r3, #60	; 0x3c
 8002c84:	7bfa      	ldrb	r2, [r7, #15]
 8002c86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c88:	7bfa      	ldrb	r2, [r7, #15]
 8002c8a:	7bfb      	ldrb	r3, [r7, #15]
 8002c8c:	b298      	uxth	r0, r3
 8002c8e:	6879      	ldr	r1, [r7, #4]
 8002c90:	4613      	mov	r3, r2
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	4413      	add	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	440b      	add	r3, r1
 8002c9a:	3344      	adds	r3, #68	; 0x44
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ca0:	7bfa      	ldrb	r2, [r7, #15]
 8002ca2:	6879      	ldr	r1, [r7, #4]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	4413      	add	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	440b      	add	r3, r1
 8002cae:	3340      	adds	r3, #64	; 0x40
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002cb4:	7bfa      	ldrb	r2, [r7, #15]
 8002cb6:	6879      	ldr	r1, [r7, #4]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	4413      	add	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	440b      	add	r3, r1
 8002cc2:	3348      	adds	r3, #72	; 0x48
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002cc8:	7bfa      	ldrb	r2, [r7, #15]
 8002cca:	6879      	ldr	r1, [r7, #4]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	4413      	add	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	440b      	add	r3, r1
 8002cd6:	334c      	adds	r3, #76	; 0x4c
 8002cd8:	2200      	movs	r2, #0
 8002cda:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002cdc:	7bfa      	ldrb	r2, [r7, #15]
 8002cde:	6879      	ldr	r1, [r7, #4]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	4413      	add	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	440b      	add	r3, r1
 8002cea:	3354      	adds	r3, #84	; 0x54
 8002cec:	2200      	movs	r2, #0
 8002cee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cf0:	7bfb      	ldrb	r3, [r7, #15]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	73fb      	strb	r3, [r7, #15]
 8002cf6:	7bfa      	ldrb	r2, [r7, #15]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d3af      	bcc.n	8002c60 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d00:	2300      	movs	r3, #0
 8002d02:	73fb      	strb	r3, [r7, #15]
 8002d04:	e044      	b.n	8002d90 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d06:	7bfa      	ldrb	r2, [r7, #15]
 8002d08:	6879      	ldr	r1, [r7, #4]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	4413      	add	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	440b      	add	r3, r1
 8002d14:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002d18:	2200      	movs	r2, #0
 8002d1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d1c:	7bfa      	ldrb	r2, [r7, #15]
 8002d1e:	6879      	ldr	r1, [r7, #4]
 8002d20:	4613      	mov	r3, r2
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	4413      	add	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	440b      	add	r3, r1
 8002d2a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002d2e:	7bfa      	ldrb	r2, [r7, #15]
 8002d30:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d32:	7bfa      	ldrb	r2, [r7, #15]
 8002d34:	6879      	ldr	r1, [r7, #4]
 8002d36:	4613      	mov	r3, r2
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	4413      	add	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	440b      	add	r3, r1
 8002d40:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002d44:	2200      	movs	r2, #0
 8002d46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d48:	7bfa      	ldrb	r2, [r7, #15]
 8002d4a:	6879      	ldr	r1, [r7, #4]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	4413      	add	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	440b      	add	r3, r1
 8002d56:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d5e:	7bfa      	ldrb	r2, [r7, #15]
 8002d60:	6879      	ldr	r1, [r7, #4]
 8002d62:	4613      	mov	r3, r2
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	4413      	add	r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	440b      	add	r3, r1
 8002d6c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d74:	7bfa      	ldrb	r2, [r7, #15]
 8002d76:	6879      	ldr	r1, [r7, #4]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	4413      	add	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	440b      	add	r3, r1
 8002d82:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002d86:	2200      	movs	r2, #0
 8002d88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d8a:	7bfb      	ldrb	r3, [r7, #15]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	73fb      	strb	r3, [r7, #15]
 8002d90:	7bfa      	ldrb	r2, [r7, #15]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d3b5      	bcc.n	8002d06 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	603b      	str	r3, [r7, #0]
 8002da0:	687e      	ldr	r6, [r7, #4]
 8002da2:	466d      	mov	r5, sp
 8002da4:	f106 0410 	add.w	r4, r6, #16
 8002da8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002daa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002db0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002db4:	e885 0003 	stmia.w	r5, {r0, r1}
 8002db8:	1d33      	adds	r3, r6, #4
 8002dba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dbc:	6838      	ldr	r0, [r7, #0]
 8002dbe:	f002 fb79 	bl	80054b4 <USB_DevInit>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d005      	beq.n	8002dd4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2202      	movs	r2, #2
 8002dcc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e014      	b.n	8002dfe <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d102      	bne.n	8002df2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 f80b 	bl	8002e08 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f002 fd37 	bl	800586a <USB_DevDisconnect>

  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3714      	adds	r7, #20
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002e08 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e36:	4b05      	ldr	r3, [pc, #20]	; (8002e4c <HAL_PCDEx_ActivateLPM+0x44>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3714      	adds	r7, #20
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	10000003 	.word	0x10000003

08002e50 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002e56:	2300      	movs	r3, #0
 8002e58:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002e5a:	4b23      	ldr	r3, [pc, #140]	; (8002ee8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	4a22      	ldr	r2, [pc, #136]	; (8002ee8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e64:	6413      	str	r3, [r2, #64]	; 0x40
 8002e66:	4b20      	ldr	r3, [pc, #128]	; (8002ee8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e6e:	603b      	str	r3, [r7, #0]
 8002e70:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002e72:	4b1e      	ldr	r3, [pc, #120]	; (8002eec <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a1d      	ldr	r2, [pc, #116]	; (8002eec <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e7c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e7e:	f7fe fa8b 	bl	8001398 <HAL_GetTick>
 8002e82:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e84:	e009      	b.n	8002e9a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e86:	f7fe fa87 	bl	8001398 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e94:	d901      	bls.n	8002e9a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e022      	b.n	8002ee0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e9a:	4b14      	ldr	r3, [pc, #80]	; (8002eec <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ea2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ea6:	d1ee      	bne.n	8002e86 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002ea8:	4b10      	ldr	r3, [pc, #64]	; (8002eec <HAL_PWREx_EnableOverDrive+0x9c>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a0f      	ldr	r2, [pc, #60]	; (8002eec <HAL_PWREx_EnableOverDrive+0x9c>)
 8002eae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eb2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002eb4:	f7fe fa70 	bl	8001398 <HAL_GetTick>
 8002eb8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002eba:	e009      	b.n	8002ed0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ebc:	f7fe fa6c 	bl	8001398 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002eca:	d901      	bls.n	8002ed0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e007      	b.n	8002ee0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ed0:	4b06      	ldr	r3, [pc, #24]	; (8002eec <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002edc:	d1ee      	bne.n	8002ebc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3708      	adds	r7, #8
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	40023800 	.word	0x40023800
 8002eec:	40007000 	.word	0x40007000

08002ef0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e29b      	b.n	800343e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f000 8087 	beq.w	8003022 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f14:	4b96      	ldr	r3, [pc, #600]	; (8003170 <HAL_RCC_OscConfig+0x280>)
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f003 030c 	and.w	r3, r3, #12
 8002f1c:	2b04      	cmp	r3, #4
 8002f1e:	d00c      	beq.n	8002f3a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f20:	4b93      	ldr	r3, [pc, #588]	; (8003170 <HAL_RCC_OscConfig+0x280>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f003 030c 	and.w	r3, r3, #12
 8002f28:	2b08      	cmp	r3, #8
 8002f2a:	d112      	bne.n	8002f52 <HAL_RCC_OscConfig+0x62>
 8002f2c:	4b90      	ldr	r3, [pc, #576]	; (8003170 <HAL_RCC_OscConfig+0x280>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f38:	d10b      	bne.n	8002f52 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f3a:	4b8d      	ldr	r3, [pc, #564]	; (8003170 <HAL_RCC_OscConfig+0x280>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d06c      	beq.n	8003020 <HAL_RCC_OscConfig+0x130>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d168      	bne.n	8003020 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e275      	b.n	800343e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f5a:	d106      	bne.n	8002f6a <HAL_RCC_OscConfig+0x7a>
 8002f5c:	4b84      	ldr	r3, [pc, #528]	; (8003170 <HAL_RCC_OscConfig+0x280>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a83      	ldr	r2, [pc, #524]	; (8003170 <HAL_RCC_OscConfig+0x280>)
 8002f62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f66:	6013      	str	r3, [r2, #0]
 8002f68:	e02e      	b.n	8002fc8 <HAL_RCC_OscConfig+0xd8>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10c      	bne.n	8002f8c <HAL_RCC_OscConfig+0x9c>
 8002f72:	4b7f      	ldr	r3, [pc, #508]	; (8003170 <HAL_RCC_OscConfig+0x280>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a7e      	ldr	r2, [pc, #504]	; (8003170 <HAL_RCC_OscConfig+0x280>)
 8002f78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f7c:	6013      	str	r3, [r2, #0]
 8002f7e:	4b7c      	ldr	r3, [pc, #496]	; (8003170 <HAL_RCC_OscConfig+0x280>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a7b      	ldr	r2, [pc, #492]	; (8003170 <HAL_RCC_OscConfig+0x280>)
 8002f84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f88:	6013      	str	r3, [r2, #0]
 8002f8a:	e01d      	b.n	8002fc8 <HAL_RCC_OscConfig+0xd8>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f94:	d10c      	bne.n	8002fb0 <HAL_RCC_OscConfig+0xc0>
 8002f96:	4b76      	ldr	r3, [pc, #472]	; (8003170 <HAL_RCC_OscConfig+0x280>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a75      	ldr	r2, [pc, #468]	; (8003170 <HAL_RCC_OscConfig+0x280>)
 8002f9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fa0:	6013      	str	r3, [r2, #0]
 8002fa2:	4b73      	ldr	r3, [pc, #460]	; (8003170 <HAL_RCC_OscConfig+0x280>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a72      	ldr	r2, [pc, #456]	; (8003170 <HAL_RCC_OscConfig+0x280>)
 8002fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fac:	6013      	str	r3, [r2, #0]
 8002fae:	e00b      	b.n	8002fc8 <HAL_RCC_OscConfig+0xd8>
 8002fb0:	4b6f      	ldr	r3, [pc, #444]	; (8003170 <HAL_RCC_OscConfig+0x280>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a6e      	ldr	r2, [pc, #440]	; (8003170 <HAL_RCC_OscConfig+0x280>)
 8002fb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fba:	6013      	str	r3, [r2, #0]
 8002fbc:	4b6c      	ldr	r3, [pc, #432]	; (8003170 <HAL_RCC_OscConfig+0x280>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a6b      	ldr	r2, [pc, #428]	; (8003170 <HAL_RCC_OscConfig+0x280>)
 8002fc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d013      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd0:	f7fe f9e2 	bl	8001398 <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fd8:	f7fe f9de 	bl	8001398 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b64      	cmp	r3, #100	; 0x64
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e229      	b.n	800343e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fea:	4b61      	ldr	r3, [pc, #388]	; (8003170 <HAL_RCC_OscConfig+0x280>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d0f0      	beq.n	8002fd8 <HAL_RCC_OscConfig+0xe8>
 8002ff6:	e014      	b.n	8003022 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff8:	f7fe f9ce 	bl	8001398 <HAL_GetTick>
 8002ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ffe:	e008      	b.n	8003012 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003000:	f7fe f9ca 	bl	8001398 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b64      	cmp	r3, #100	; 0x64
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e215      	b.n	800343e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003012:	4b57      	ldr	r3, [pc, #348]	; (8003170 <HAL_RCC_OscConfig+0x280>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1f0      	bne.n	8003000 <HAL_RCC_OscConfig+0x110>
 800301e:	e000      	b.n	8003022 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003020:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d069      	beq.n	8003102 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800302e:	4b50      	ldr	r3, [pc, #320]	; (8003170 <HAL_RCC_OscConfig+0x280>)
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f003 030c 	and.w	r3, r3, #12
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00b      	beq.n	8003052 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800303a:	4b4d      	ldr	r3, [pc, #308]	; (8003170 <HAL_RCC_OscConfig+0x280>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f003 030c 	and.w	r3, r3, #12
 8003042:	2b08      	cmp	r3, #8
 8003044:	d11c      	bne.n	8003080 <HAL_RCC_OscConfig+0x190>
 8003046:	4b4a      	ldr	r3, [pc, #296]	; (8003170 <HAL_RCC_OscConfig+0x280>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d116      	bne.n	8003080 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003052:	4b47      	ldr	r3, [pc, #284]	; (8003170 <HAL_RCC_OscConfig+0x280>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d005      	beq.n	800306a <HAL_RCC_OscConfig+0x17a>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d001      	beq.n	800306a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e1e9      	b.n	800343e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800306a:	4b41      	ldr	r3, [pc, #260]	; (8003170 <HAL_RCC_OscConfig+0x280>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	493d      	ldr	r1, [pc, #244]	; (8003170 <HAL_RCC_OscConfig+0x280>)
 800307a:	4313      	orrs	r3, r2
 800307c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800307e:	e040      	b.n	8003102 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d023      	beq.n	80030d0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003088:	4b39      	ldr	r3, [pc, #228]	; (8003170 <HAL_RCC_OscConfig+0x280>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a38      	ldr	r2, [pc, #224]	; (8003170 <HAL_RCC_OscConfig+0x280>)
 800308e:	f043 0301 	orr.w	r3, r3, #1
 8003092:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003094:	f7fe f980 	bl	8001398 <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800309c:	f7fe f97c 	bl	8001398 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e1c7      	b.n	800343e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ae:	4b30      	ldr	r3, [pc, #192]	; (8003170 <HAL_RCC_OscConfig+0x280>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d0f0      	beq.n	800309c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ba:	4b2d      	ldr	r3, [pc, #180]	; (8003170 <HAL_RCC_OscConfig+0x280>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	4929      	ldr	r1, [pc, #164]	; (8003170 <HAL_RCC_OscConfig+0x280>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	600b      	str	r3, [r1, #0]
 80030ce:	e018      	b.n	8003102 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030d0:	4b27      	ldr	r3, [pc, #156]	; (8003170 <HAL_RCC_OscConfig+0x280>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a26      	ldr	r2, [pc, #152]	; (8003170 <HAL_RCC_OscConfig+0x280>)
 80030d6:	f023 0301 	bic.w	r3, r3, #1
 80030da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030dc:	f7fe f95c 	bl	8001398 <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030e4:	f7fe f958 	bl	8001398 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e1a3      	b.n	800343e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030f6:	4b1e      	ldr	r3, [pc, #120]	; (8003170 <HAL_RCC_OscConfig+0x280>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1f0      	bne.n	80030e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0308 	and.w	r3, r3, #8
 800310a:	2b00      	cmp	r3, #0
 800310c:	d038      	beq.n	8003180 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d019      	beq.n	800314a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003116:	4b16      	ldr	r3, [pc, #88]	; (8003170 <HAL_RCC_OscConfig+0x280>)
 8003118:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800311a:	4a15      	ldr	r2, [pc, #84]	; (8003170 <HAL_RCC_OscConfig+0x280>)
 800311c:	f043 0301 	orr.w	r3, r3, #1
 8003120:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003122:	f7fe f939 	bl	8001398 <HAL_GetTick>
 8003126:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003128:	e008      	b.n	800313c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800312a:	f7fe f935 	bl	8001398 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	2b02      	cmp	r3, #2
 8003136:	d901      	bls.n	800313c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e180      	b.n	800343e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800313c:	4b0c      	ldr	r3, [pc, #48]	; (8003170 <HAL_RCC_OscConfig+0x280>)
 800313e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d0f0      	beq.n	800312a <HAL_RCC_OscConfig+0x23a>
 8003148:	e01a      	b.n	8003180 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800314a:	4b09      	ldr	r3, [pc, #36]	; (8003170 <HAL_RCC_OscConfig+0x280>)
 800314c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800314e:	4a08      	ldr	r2, [pc, #32]	; (8003170 <HAL_RCC_OscConfig+0x280>)
 8003150:	f023 0301 	bic.w	r3, r3, #1
 8003154:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003156:	f7fe f91f 	bl	8001398 <HAL_GetTick>
 800315a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800315c:	e00a      	b.n	8003174 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800315e:	f7fe f91b 	bl	8001398 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d903      	bls.n	8003174 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e166      	b.n	800343e <HAL_RCC_OscConfig+0x54e>
 8003170:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003174:	4b92      	ldr	r3, [pc, #584]	; (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 8003176:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1ee      	bne.n	800315e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 80a4 	beq.w	80032d6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800318e:	4b8c      	ldr	r3, [pc, #560]	; (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d10d      	bne.n	80031b6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800319a:	4b89      	ldr	r3, [pc, #548]	; (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 800319c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319e:	4a88      	ldr	r2, [pc, #544]	; (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 80031a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031a4:	6413      	str	r3, [r2, #64]	; 0x40
 80031a6:	4b86      	ldr	r3, [pc, #536]	; (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 80031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ae:	60bb      	str	r3, [r7, #8]
 80031b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031b2:	2301      	movs	r3, #1
 80031b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031b6:	4b83      	ldr	r3, [pc, #524]	; (80033c4 <HAL_RCC_OscConfig+0x4d4>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d118      	bne.n	80031f4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80031c2:	4b80      	ldr	r3, [pc, #512]	; (80033c4 <HAL_RCC_OscConfig+0x4d4>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a7f      	ldr	r2, [pc, #508]	; (80033c4 <HAL_RCC_OscConfig+0x4d4>)
 80031c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031ce:	f7fe f8e3 	bl	8001398 <HAL_GetTick>
 80031d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031d4:	e008      	b.n	80031e8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031d6:	f7fe f8df 	bl	8001398 <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	2b64      	cmp	r3, #100	; 0x64
 80031e2:	d901      	bls.n	80031e8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e12a      	b.n	800343e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031e8:	4b76      	ldr	r3, [pc, #472]	; (80033c4 <HAL_RCC_OscConfig+0x4d4>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d0f0      	beq.n	80031d6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d106      	bne.n	800320a <HAL_RCC_OscConfig+0x31a>
 80031fc:	4b70      	ldr	r3, [pc, #448]	; (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 80031fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003200:	4a6f      	ldr	r2, [pc, #444]	; (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 8003202:	f043 0301 	orr.w	r3, r3, #1
 8003206:	6713      	str	r3, [r2, #112]	; 0x70
 8003208:	e02d      	b.n	8003266 <HAL_RCC_OscConfig+0x376>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d10c      	bne.n	800322c <HAL_RCC_OscConfig+0x33c>
 8003212:	4b6b      	ldr	r3, [pc, #428]	; (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 8003214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003216:	4a6a      	ldr	r2, [pc, #424]	; (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 8003218:	f023 0301 	bic.w	r3, r3, #1
 800321c:	6713      	str	r3, [r2, #112]	; 0x70
 800321e:	4b68      	ldr	r3, [pc, #416]	; (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 8003220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003222:	4a67      	ldr	r2, [pc, #412]	; (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 8003224:	f023 0304 	bic.w	r3, r3, #4
 8003228:	6713      	str	r3, [r2, #112]	; 0x70
 800322a:	e01c      	b.n	8003266 <HAL_RCC_OscConfig+0x376>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	2b05      	cmp	r3, #5
 8003232:	d10c      	bne.n	800324e <HAL_RCC_OscConfig+0x35e>
 8003234:	4b62      	ldr	r3, [pc, #392]	; (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 8003236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003238:	4a61      	ldr	r2, [pc, #388]	; (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 800323a:	f043 0304 	orr.w	r3, r3, #4
 800323e:	6713      	str	r3, [r2, #112]	; 0x70
 8003240:	4b5f      	ldr	r3, [pc, #380]	; (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 8003242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003244:	4a5e      	ldr	r2, [pc, #376]	; (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 8003246:	f043 0301 	orr.w	r3, r3, #1
 800324a:	6713      	str	r3, [r2, #112]	; 0x70
 800324c:	e00b      	b.n	8003266 <HAL_RCC_OscConfig+0x376>
 800324e:	4b5c      	ldr	r3, [pc, #368]	; (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 8003250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003252:	4a5b      	ldr	r2, [pc, #364]	; (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 8003254:	f023 0301 	bic.w	r3, r3, #1
 8003258:	6713      	str	r3, [r2, #112]	; 0x70
 800325a:	4b59      	ldr	r3, [pc, #356]	; (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 800325c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325e:	4a58      	ldr	r2, [pc, #352]	; (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 8003260:	f023 0304 	bic.w	r3, r3, #4
 8003264:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d015      	beq.n	800329a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800326e:	f7fe f893 	bl	8001398 <HAL_GetTick>
 8003272:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003274:	e00a      	b.n	800328c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003276:	f7fe f88f 	bl	8001398 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	f241 3288 	movw	r2, #5000	; 0x1388
 8003284:	4293      	cmp	r3, r2
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e0d8      	b.n	800343e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800328c:	4b4c      	ldr	r3, [pc, #304]	; (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 800328e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d0ee      	beq.n	8003276 <HAL_RCC_OscConfig+0x386>
 8003298:	e014      	b.n	80032c4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800329a:	f7fe f87d 	bl	8001398 <HAL_GetTick>
 800329e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032a0:	e00a      	b.n	80032b8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032a2:	f7fe f879 	bl	8001398 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d901      	bls.n	80032b8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e0c2      	b.n	800343e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032b8:	4b41      	ldr	r3, [pc, #260]	; (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 80032ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1ee      	bne.n	80032a2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80032c4:	7dfb      	ldrb	r3, [r7, #23]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d105      	bne.n	80032d6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032ca:	4b3d      	ldr	r3, [pc, #244]	; (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 80032cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ce:	4a3c      	ldr	r2, [pc, #240]	; (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 80032d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f000 80ae 	beq.w	800343c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032e0:	4b37      	ldr	r3, [pc, #220]	; (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f003 030c 	and.w	r3, r3, #12
 80032e8:	2b08      	cmp	r3, #8
 80032ea:	d06d      	beq.n	80033c8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d14b      	bne.n	800338c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032f4:	4b32      	ldr	r3, [pc, #200]	; (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a31      	ldr	r2, [pc, #196]	; (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 80032fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003300:	f7fe f84a 	bl	8001398 <HAL_GetTick>
 8003304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003306:	e008      	b.n	800331a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003308:	f7fe f846 	bl	8001398 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b02      	cmp	r3, #2
 8003314:	d901      	bls.n	800331a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e091      	b.n	800343e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800331a:	4b29      	ldr	r3, [pc, #164]	; (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1f0      	bne.n	8003308 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	69da      	ldr	r2, [r3, #28]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	431a      	orrs	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003334:	019b      	lsls	r3, r3, #6
 8003336:	431a      	orrs	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333c:	085b      	lsrs	r3, r3, #1
 800333e:	3b01      	subs	r3, #1
 8003340:	041b      	lsls	r3, r3, #16
 8003342:	431a      	orrs	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003348:	061b      	lsls	r3, r3, #24
 800334a:	431a      	orrs	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003350:	071b      	lsls	r3, r3, #28
 8003352:	491b      	ldr	r1, [pc, #108]	; (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 8003354:	4313      	orrs	r3, r2
 8003356:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003358:	4b19      	ldr	r3, [pc, #100]	; (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a18      	ldr	r2, [pc, #96]	; (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 800335e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003362:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003364:	f7fe f818 	bl	8001398 <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800336c:	f7fe f814 	bl	8001398 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e05f      	b.n	800343e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800337e:	4b10      	ldr	r3, [pc, #64]	; (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d0f0      	beq.n	800336c <HAL_RCC_OscConfig+0x47c>
 800338a:	e057      	b.n	800343c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800338c:	4b0c      	ldr	r3, [pc, #48]	; (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a0b      	ldr	r2, [pc, #44]	; (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 8003392:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003396:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003398:	f7fd fffe 	bl	8001398 <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a0:	f7fd fffa 	bl	8001398 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e045      	b.n	800343e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033b2:	4b03      	ldr	r3, [pc, #12]	; (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1f0      	bne.n	80033a0 <HAL_RCC_OscConfig+0x4b0>
 80033be:	e03d      	b.n	800343c <HAL_RCC_OscConfig+0x54c>
 80033c0:	40023800 	.word	0x40023800
 80033c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80033c8:	4b1f      	ldr	r3, [pc, #124]	; (8003448 <HAL_RCC_OscConfig+0x558>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d030      	beq.n	8003438 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d129      	bne.n	8003438 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d122      	bne.n	8003438 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033f8:	4013      	ands	r3, r2
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033fe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003400:	4293      	cmp	r3, r2
 8003402:	d119      	bne.n	8003438 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340e:	085b      	lsrs	r3, r3, #1
 8003410:	3b01      	subs	r3, #1
 8003412:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003414:	429a      	cmp	r2, r3
 8003416:	d10f      	bne.n	8003438 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003422:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003424:	429a      	cmp	r2, r3
 8003426:	d107      	bne.n	8003438 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003432:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003434:	429a      	cmp	r2, r3
 8003436:	d001      	beq.n	800343c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e000      	b.n	800343e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3718      	adds	r7, #24
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	40023800 	.word	0x40023800

0800344c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003456:	2300      	movs	r3, #0
 8003458:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d101      	bne.n	8003464 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e0d0      	b.n	8003606 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003464:	4b6a      	ldr	r3, [pc, #424]	; (8003610 <HAL_RCC_ClockConfig+0x1c4>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 030f 	and.w	r3, r3, #15
 800346c:	683a      	ldr	r2, [r7, #0]
 800346e:	429a      	cmp	r2, r3
 8003470:	d910      	bls.n	8003494 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003472:	4b67      	ldr	r3, [pc, #412]	; (8003610 <HAL_RCC_ClockConfig+0x1c4>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f023 020f 	bic.w	r2, r3, #15
 800347a:	4965      	ldr	r1, [pc, #404]	; (8003610 <HAL_RCC_ClockConfig+0x1c4>)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	4313      	orrs	r3, r2
 8003480:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003482:	4b63      	ldr	r3, [pc, #396]	; (8003610 <HAL_RCC_ClockConfig+0x1c4>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 030f 	and.w	r3, r3, #15
 800348a:	683a      	ldr	r2, [r7, #0]
 800348c:	429a      	cmp	r2, r3
 800348e:	d001      	beq.n	8003494 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e0b8      	b.n	8003606 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d020      	beq.n	80034e2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0304 	and.w	r3, r3, #4
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d005      	beq.n	80034b8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034ac:	4b59      	ldr	r3, [pc, #356]	; (8003614 <HAL_RCC_ClockConfig+0x1c8>)
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	4a58      	ldr	r2, [pc, #352]	; (8003614 <HAL_RCC_ClockConfig+0x1c8>)
 80034b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0308 	and.w	r3, r3, #8
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d005      	beq.n	80034d0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034c4:	4b53      	ldr	r3, [pc, #332]	; (8003614 <HAL_RCC_ClockConfig+0x1c8>)
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	4a52      	ldr	r2, [pc, #328]	; (8003614 <HAL_RCC_ClockConfig+0x1c8>)
 80034ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034d0:	4b50      	ldr	r3, [pc, #320]	; (8003614 <HAL_RCC_ClockConfig+0x1c8>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	494d      	ldr	r1, [pc, #308]	; (8003614 <HAL_RCC_ClockConfig+0x1c8>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d040      	beq.n	8003570 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d107      	bne.n	8003506 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034f6:	4b47      	ldr	r3, [pc, #284]	; (8003614 <HAL_RCC_ClockConfig+0x1c8>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d115      	bne.n	800352e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e07f      	b.n	8003606 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	2b02      	cmp	r3, #2
 800350c:	d107      	bne.n	800351e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800350e:	4b41      	ldr	r3, [pc, #260]	; (8003614 <HAL_RCC_ClockConfig+0x1c8>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d109      	bne.n	800352e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e073      	b.n	8003606 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800351e:	4b3d      	ldr	r3, [pc, #244]	; (8003614 <HAL_RCC_ClockConfig+0x1c8>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e06b      	b.n	8003606 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800352e:	4b39      	ldr	r3, [pc, #228]	; (8003614 <HAL_RCC_ClockConfig+0x1c8>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f023 0203 	bic.w	r2, r3, #3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	4936      	ldr	r1, [pc, #216]	; (8003614 <HAL_RCC_ClockConfig+0x1c8>)
 800353c:	4313      	orrs	r3, r2
 800353e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003540:	f7fd ff2a 	bl	8001398 <HAL_GetTick>
 8003544:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003546:	e00a      	b.n	800355e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003548:	f7fd ff26 	bl	8001398 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	f241 3288 	movw	r2, #5000	; 0x1388
 8003556:	4293      	cmp	r3, r2
 8003558:	d901      	bls.n	800355e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e053      	b.n	8003606 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800355e:	4b2d      	ldr	r3, [pc, #180]	; (8003614 <HAL_RCC_ClockConfig+0x1c8>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f003 020c 	and.w	r2, r3, #12
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	429a      	cmp	r2, r3
 800356e:	d1eb      	bne.n	8003548 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003570:	4b27      	ldr	r3, [pc, #156]	; (8003610 <HAL_RCC_ClockConfig+0x1c4>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 030f 	and.w	r3, r3, #15
 8003578:	683a      	ldr	r2, [r7, #0]
 800357a:	429a      	cmp	r2, r3
 800357c:	d210      	bcs.n	80035a0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800357e:	4b24      	ldr	r3, [pc, #144]	; (8003610 <HAL_RCC_ClockConfig+0x1c4>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f023 020f 	bic.w	r2, r3, #15
 8003586:	4922      	ldr	r1, [pc, #136]	; (8003610 <HAL_RCC_ClockConfig+0x1c4>)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	4313      	orrs	r3, r2
 800358c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800358e:	4b20      	ldr	r3, [pc, #128]	; (8003610 <HAL_RCC_ClockConfig+0x1c4>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 030f 	and.w	r3, r3, #15
 8003596:	683a      	ldr	r2, [r7, #0]
 8003598:	429a      	cmp	r2, r3
 800359a:	d001      	beq.n	80035a0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e032      	b.n	8003606 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0304 	and.w	r3, r3, #4
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d008      	beq.n	80035be <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035ac:	4b19      	ldr	r3, [pc, #100]	; (8003614 <HAL_RCC_ClockConfig+0x1c8>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	4916      	ldr	r1, [pc, #88]	; (8003614 <HAL_RCC_ClockConfig+0x1c8>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0308 	and.w	r3, r3, #8
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d009      	beq.n	80035de <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80035ca:	4b12      	ldr	r3, [pc, #72]	; (8003614 <HAL_RCC_ClockConfig+0x1c8>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	00db      	lsls	r3, r3, #3
 80035d8:	490e      	ldr	r1, [pc, #56]	; (8003614 <HAL_RCC_ClockConfig+0x1c8>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035de:	f000 f821 	bl	8003624 <HAL_RCC_GetSysClockFreq>
 80035e2:	4602      	mov	r2, r0
 80035e4:	4b0b      	ldr	r3, [pc, #44]	; (8003614 <HAL_RCC_ClockConfig+0x1c8>)
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	091b      	lsrs	r3, r3, #4
 80035ea:	f003 030f 	and.w	r3, r3, #15
 80035ee:	490a      	ldr	r1, [pc, #40]	; (8003618 <HAL_RCC_ClockConfig+0x1cc>)
 80035f0:	5ccb      	ldrb	r3, [r1, r3]
 80035f2:	fa22 f303 	lsr.w	r3, r2, r3
 80035f6:	4a09      	ldr	r2, [pc, #36]	; (800361c <HAL_RCC_ClockConfig+0x1d0>)
 80035f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80035fa:	4b09      	ldr	r3, [pc, #36]	; (8003620 <HAL_RCC_ClockConfig+0x1d4>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4618      	mov	r0, r3
 8003600:	f7fd fe86 	bl	8001310 <HAL_InitTick>

  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3710      	adds	r7, #16
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	40023c00 	.word	0x40023c00
 8003614:	40023800 	.word	0x40023800
 8003618:	0801405c 	.word	0x0801405c
 800361c:	20000000 	.word	0x20000000
 8003620:	20000004 	.word	0x20000004

08003624 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003624:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003628:	b094      	sub	sp, #80	; 0x50
 800362a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800362c:	2300      	movs	r3, #0
 800362e:	647b      	str	r3, [r7, #68]	; 0x44
 8003630:	2300      	movs	r3, #0
 8003632:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003634:	2300      	movs	r3, #0
 8003636:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003638:	2300      	movs	r3, #0
 800363a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800363c:	4b79      	ldr	r3, [pc, #484]	; (8003824 <HAL_RCC_GetSysClockFreq+0x200>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f003 030c 	and.w	r3, r3, #12
 8003644:	2b08      	cmp	r3, #8
 8003646:	d00d      	beq.n	8003664 <HAL_RCC_GetSysClockFreq+0x40>
 8003648:	2b08      	cmp	r3, #8
 800364a:	f200 80e1 	bhi.w	8003810 <HAL_RCC_GetSysClockFreq+0x1ec>
 800364e:	2b00      	cmp	r3, #0
 8003650:	d002      	beq.n	8003658 <HAL_RCC_GetSysClockFreq+0x34>
 8003652:	2b04      	cmp	r3, #4
 8003654:	d003      	beq.n	800365e <HAL_RCC_GetSysClockFreq+0x3a>
 8003656:	e0db      	b.n	8003810 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003658:	4b73      	ldr	r3, [pc, #460]	; (8003828 <HAL_RCC_GetSysClockFreq+0x204>)
 800365a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800365c:	e0db      	b.n	8003816 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800365e:	4b73      	ldr	r3, [pc, #460]	; (800382c <HAL_RCC_GetSysClockFreq+0x208>)
 8003660:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003662:	e0d8      	b.n	8003816 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003664:	4b6f      	ldr	r3, [pc, #444]	; (8003824 <HAL_RCC_GetSysClockFreq+0x200>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800366c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800366e:	4b6d      	ldr	r3, [pc, #436]	; (8003824 <HAL_RCC_GetSysClockFreq+0x200>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d063      	beq.n	8003742 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800367a:	4b6a      	ldr	r3, [pc, #424]	; (8003824 <HAL_RCC_GetSysClockFreq+0x200>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	099b      	lsrs	r3, r3, #6
 8003680:	2200      	movs	r2, #0
 8003682:	63bb      	str	r3, [r7, #56]	; 0x38
 8003684:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003688:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800368c:	633b      	str	r3, [r7, #48]	; 0x30
 800368e:	2300      	movs	r3, #0
 8003690:	637b      	str	r3, [r7, #52]	; 0x34
 8003692:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003696:	4622      	mov	r2, r4
 8003698:	462b      	mov	r3, r5
 800369a:	f04f 0000 	mov.w	r0, #0
 800369e:	f04f 0100 	mov.w	r1, #0
 80036a2:	0159      	lsls	r1, r3, #5
 80036a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036a8:	0150      	lsls	r0, r2, #5
 80036aa:	4602      	mov	r2, r0
 80036ac:	460b      	mov	r3, r1
 80036ae:	4621      	mov	r1, r4
 80036b0:	1a51      	subs	r1, r2, r1
 80036b2:	6139      	str	r1, [r7, #16]
 80036b4:	4629      	mov	r1, r5
 80036b6:	eb63 0301 	sbc.w	r3, r3, r1
 80036ba:	617b      	str	r3, [r7, #20]
 80036bc:	f04f 0200 	mov.w	r2, #0
 80036c0:	f04f 0300 	mov.w	r3, #0
 80036c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036c8:	4659      	mov	r1, fp
 80036ca:	018b      	lsls	r3, r1, #6
 80036cc:	4651      	mov	r1, sl
 80036ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036d2:	4651      	mov	r1, sl
 80036d4:	018a      	lsls	r2, r1, #6
 80036d6:	4651      	mov	r1, sl
 80036d8:	ebb2 0801 	subs.w	r8, r2, r1
 80036dc:	4659      	mov	r1, fp
 80036de:	eb63 0901 	sbc.w	r9, r3, r1
 80036e2:	f04f 0200 	mov.w	r2, #0
 80036e6:	f04f 0300 	mov.w	r3, #0
 80036ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036f6:	4690      	mov	r8, r2
 80036f8:	4699      	mov	r9, r3
 80036fa:	4623      	mov	r3, r4
 80036fc:	eb18 0303 	adds.w	r3, r8, r3
 8003700:	60bb      	str	r3, [r7, #8]
 8003702:	462b      	mov	r3, r5
 8003704:	eb49 0303 	adc.w	r3, r9, r3
 8003708:	60fb      	str	r3, [r7, #12]
 800370a:	f04f 0200 	mov.w	r2, #0
 800370e:	f04f 0300 	mov.w	r3, #0
 8003712:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003716:	4629      	mov	r1, r5
 8003718:	024b      	lsls	r3, r1, #9
 800371a:	4621      	mov	r1, r4
 800371c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003720:	4621      	mov	r1, r4
 8003722:	024a      	lsls	r2, r1, #9
 8003724:	4610      	mov	r0, r2
 8003726:	4619      	mov	r1, r3
 8003728:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800372a:	2200      	movs	r2, #0
 800372c:	62bb      	str	r3, [r7, #40]	; 0x28
 800372e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003730:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003734:	f7fc fddc 	bl	80002f0 <__aeabi_uldivmod>
 8003738:	4602      	mov	r2, r0
 800373a:	460b      	mov	r3, r1
 800373c:	4613      	mov	r3, r2
 800373e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003740:	e058      	b.n	80037f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003742:	4b38      	ldr	r3, [pc, #224]	; (8003824 <HAL_RCC_GetSysClockFreq+0x200>)
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	099b      	lsrs	r3, r3, #6
 8003748:	2200      	movs	r2, #0
 800374a:	4618      	mov	r0, r3
 800374c:	4611      	mov	r1, r2
 800374e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003752:	623b      	str	r3, [r7, #32]
 8003754:	2300      	movs	r3, #0
 8003756:	627b      	str	r3, [r7, #36]	; 0x24
 8003758:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800375c:	4642      	mov	r2, r8
 800375e:	464b      	mov	r3, r9
 8003760:	f04f 0000 	mov.w	r0, #0
 8003764:	f04f 0100 	mov.w	r1, #0
 8003768:	0159      	lsls	r1, r3, #5
 800376a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800376e:	0150      	lsls	r0, r2, #5
 8003770:	4602      	mov	r2, r0
 8003772:	460b      	mov	r3, r1
 8003774:	4641      	mov	r1, r8
 8003776:	ebb2 0a01 	subs.w	sl, r2, r1
 800377a:	4649      	mov	r1, r9
 800377c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003780:	f04f 0200 	mov.w	r2, #0
 8003784:	f04f 0300 	mov.w	r3, #0
 8003788:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800378c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003790:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003794:	ebb2 040a 	subs.w	r4, r2, sl
 8003798:	eb63 050b 	sbc.w	r5, r3, fp
 800379c:	f04f 0200 	mov.w	r2, #0
 80037a0:	f04f 0300 	mov.w	r3, #0
 80037a4:	00eb      	lsls	r3, r5, #3
 80037a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037aa:	00e2      	lsls	r2, r4, #3
 80037ac:	4614      	mov	r4, r2
 80037ae:	461d      	mov	r5, r3
 80037b0:	4643      	mov	r3, r8
 80037b2:	18e3      	adds	r3, r4, r3
 80037b4:	603b      	str	r3, [r7, #0]
 80037b6:	464b      	mov	r3, r9
 80037b8:	eb45 0303 	adc.w	r3, r5, r3
 80037bc:	607b      	str	r3, [r7, #4]
 80037be:	f04f 0200 	mov.w	r2, #0
 80037c2:	f04f 0300 	mov.w	r3, #0
 80037c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037ca:	4629      	mov	r1, r5
 80037cc:	028b      	lsls	r3, r1, #10
 80037ce:	4621      	mov	r1, r4
 80037d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037d4:	4621      	mov	r1, r4
 80037d6:	028a      	lsls	r2, r1, #10
 80037d8:	4610      	mov	r0, r2
 80037da:	4619      	mov	r1, r3
 80037dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037de:	2200      	movs	r2, #0
 80037e0:	61bb      	str	r3, [r7, #24]
 80037e2:	61fa      	str	r2, [r7, #28]
 80037e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037e8:	f7fc fd82 	bl	80002f0 <__aeabi_uldivmod>
 80037ec:	4602      	mov	r2, r0
 80037ee:	460b      	mov	r3, r1
 80037f0:	4613      	mov	r3, r2
 80037f2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80037f4:	4b0b      	ldr	r3, [pc, #44]	; (8003824 <HAL_RCC_GetSysClockFreq+0x200>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	0c1b      	lsrs	r3, r3, #16
 80037fa:	f003 0303 	and.w	r3, r3, #3
 80037fe:	3301      	adds	r3, #1
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003804:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003806:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003808:	fbb2 f3f3 	udiv	r3, r2, r3
 800380c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800380e:	e002      	b.n	8003816 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003810:	4b05      	ldr	r3, [pc, #20]	; (8003828 <HAL_RCC_GetSysClockFreq+0x204>)
 8003812:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003814:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003816:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003818:	4618      	mov	r0, r3
 800381a:	3750      	adds	r7, #80	; 0x50
 800381c:	46bd      	mov	sp, r7
 800381e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003822:	bf00      	nop
 8003824:	40023800 	.word	0x40023800
 8003828:	00f42400 	.word	0x00f42400
 800382c:	007a1200 	.word	0x007a1200

08003830 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003830:	b480      	push	{r7}
 8003832:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003834:	4b03      	ldr	r3, [pc, #12]	; (8003844 <HAL_RCC_GetHCLKFreq+0x14>)
 8003836:	681b      	ldr	r3, [r3, #0]
}
 8003838:	4618      	mov	r0, r3
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	20000000 	.word	0x20000000

08003848 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800384c:	f7ff fff0 	bl	8003830 <HAL_RCC_GetHCLKFreq>
 8003850:	4602      	mov	r2, r0
 8003852:	4b05      	ldr	r3, [pc, #20]	; (8003868 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	0a9b      	lsrs	r3, r3, #10
 8003858:	f003 0307 	and.w	r3, r3, #7
 800385c:	4903      	ldr	r1, [pc, #12]	; (800386c <HAL_RCC_GetPCLK1Freq+0x24>)
 800385e:	5ccb      	ldrb	r3, [r1, r3]
 8003860:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003864:	4618      	mov	r0, r3
 8003866:	bd80      	pop	{r7, pc}
 8003868:	40023800 	.word	0x40023800
 800386c:	0801406c 	.word	0x0801406c

08003870 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003874:	f7ff ffdc 	bl	8003830 <HAL_RCC_GetHCLKFreq>
 8003878:	4602      	mov	r2, r0
 800387a:	4b05      	ldr	r3, [pc, #20]	; (8003890 <HAL_RCC_GetPCLK2Freq+0x20>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	0b5b      	lsrs	r3, r3, #13
 8003880:	f003 0307 	and.w	r3, r3, #7
 8003884:	4903      	ldr	r1, [pc, #12]	; (8003894 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003886:	5ccb      	ldrb	r3, [r1, r3]
 8003888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800388c:	4618      	mov	r0, r3
 800388e:	bd80      	pop	{r7, pc}
 8003890:	40023800 	.word	0x40023800
 8003894:	0801406c 	.word	0x0801406c

08003898 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b088      	sub	sp, #32
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80038a0:	2300      	movs	r3, #0
 80038a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80038a4:	2300      	movs	r3, #0
 80038a6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80038a8:	2300      	movs	r3, #0
 80038aa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80038ac:	2300      	movs	r3, #0
 80038ae:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80038b0:	2300      	movs	r3, #0
 80038b2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0301 	and.w	r3, r3, #1
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d012      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80038c0:	4b69      	ldr	r3, [pc, #420]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	4a68      	ldr	r2, [pc, #416]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038c6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80038ca:	6093      	str	r3, [r2, #8]
 80038cc:	4b66      	ldr	r3, [pc, #408]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d4:	4964      	ldr	r1, [pc, #400]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80038e2:	2301      	movs	r3, #1
 80038e4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d017      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038f2:	4b5d      	ldr	r3, [pc, #372]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003900:	4959      	ldr	r1, [pc, #356]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003902:	4313      	orrs	r3, r2
 8003904:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800390c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003910:	d101      	bne.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003912:	2301      	movs	r3, #1
 8003914:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800391e:	2301      	movs	r3, #1
 8003920:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d017      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800392e:	4b4e      	ldr	r3, [pc, #312]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003930:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003934:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393c:	494a      	ldr	r1, [pc, #296]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800393e:	4313      	orrs	r3, r2
 8003940:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003948:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800394c:	d101      	bne.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800394e:	2301      	movs	r3, #1
 8003950:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800395a:	2301      	movs	r3, #1
 800395c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800396a:	2301      	movs	r3, #1
 800396c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0320 	and.w	r3, r3, #32
 8003976:	2b00      	cmp	r3, #0
 8003978:	f000 808b 	beq.w	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800397c:	4b3a      	ldr	r3, [pc, #232]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800397e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003980:	4a39      	ldr	r2, [pc, #228]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003982:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003986:	6413      	str	r3, [r2, #64]	; 0x40
 8003988:	4b37      	ldr	r3, [pc, #220]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800398a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003990:	60bb      	str	r3, [r7, #8]
 8003992:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003994:	4b35      	ldr	r3, [pc, #212]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a34      	ldr	r2, [pc, #208]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800399a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800399e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039a0:	f7fd fcfa 	bl	8001398 <HAL_GetTick>
 80039a4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80039a6:	e008      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039a8:	f7fd fcf6 	bl	8001398 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b64      	cmp	r3, #100	; 0x64
 80039b4:	d901      	bls.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e38f      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80039ba:	4b2c      	ldr	r3, [pc, #176]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d0f0      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039c6:	4b28      	ldr	r3, [pc, #160]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ce:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d035      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d02e      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039e4:	4b20      	ldr	r3, [pc, #128]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039ec:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039ee:	4b1e      	ldr	r3, [pc, #120]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f2:	4a1d      	ldr	r2, [pc, #116]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039f8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039fa:	4b1b      	ldr	r3, [pc, #108]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039fe:	4a1a      	ldr	r2, [pc, #104]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a04:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003a06:	4a18      	ldr	r2, [pc, #96]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003a0c:	4b16      	ldr	r3, [pc, #88]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d114      	bne.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a18:	f7fd fcbe 	bl	8001398 <HAL_GetTick>
 8003a1c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a1e:	e00a      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a20:	f7fd fcba 	bl	8001398 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d901      	bls.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e351      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a36:	4b0c      	ldr	r3, [pc, #48]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d0ee      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a4e:	d111      	bne.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003a50:	4b05      	ldr	r3, [pc, #20]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a5c:	4b04      	ldr	r3, [pc, #16]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003a5e:	400b      	ands	r3, r1
 8003a60:	4901      	ldr	r1, [pc, #4]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	608b      	str	r3, [r1, #8]
 8003a66:	e00b      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003a68:	40023800 	.word	0x40023800
 8003a6c:	40007000 	.word	0x40007000
 8003a70:	0ffffcff 	.word	0x0ffffcff
 8003a74:	4bac      	ldr	r3, [pc, #688]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	4aab      	ldr	r2, [pc, #684]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a7a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003a7e:	6093      	str	r3, [r2, #8]
 8003a80:	4ba9      	ldr	r3, [pc, #676]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a82:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a8c:	49a6      	ldr	r1, [pc, #664]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0310 	and.w	r3, r3, #16
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d010      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a9e:	4ba2      	ldr	r3, [pc, #648]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003aa4:	4aa0      	ldr	r2, [pc, #640]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aa6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003aaa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003aae:	4b9e      	ldr	r3, [pc, #632]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ab0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab8:	499b      	ldr	r1, [pc, #620]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00a      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003acc:	4b96      	ldr	r3, [pc, #600]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ada:	4993      	ldr	r1, [pc, #588]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00a      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003aee:	4b8e      	ldr	r3, [pc, #568]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003afc:	498a      	ldr	r1, [pc, #552]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00a      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b10:	4b85      	ldr	r3, [pc, #532]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b1e:	4982      	ldr	r1, [pc, #520]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00a      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b32:	4b7d      	ldr	r3, [pc, #500]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b38:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b40:	4979      	ldr	r1, [pc, #484]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00a      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b54:	4b74      	ldr	r3, [pc, #464]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b5a:	f023 0203 	bic.w	r2, r3, #3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b62:	4971      	ldr	r1, [pc, #452]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00a      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b76:	4b6c      	ldr	r3, [pc, #432]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b7c:	f023 020c 	bic.w	r2, r3, #12
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b84:	4968      	ldr	r1, [pc, #416]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d00a      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b98:	4b63      	ldr	r3, [pc, #396]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b9e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ba6:	4960      	ldr	r1, [pc, #384]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00a      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003bba:	4b5b      	ldr	r3, [pc, #364]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bc8:	4957      	ldr	r1, [pc, #348]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00a      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003bdc:	4b52      	ldr	r3, [pc, #328]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bea:	494f      	ldr	r1, [pc, #316]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00a      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003bfe:	4b4a      	ldr	r3, [pc, #296]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c04:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c0c:	4946      	ldr	r1, [pc, #280]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d00a      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003c20:	4b41      	ldr	r3, [pc, #260]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c26:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c2e:	493e      	ldr	r1, [pc, #248]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00a      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003c42:	4b39      	ldr	r3, [pc, #228]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c48:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c50:	4935      	ldr	r1, [pc, #212]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00a      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c64:	4b30      	ldr	r3, [pc, #192]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c6a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c72:	492d      	ldr	r1, [pc, #180]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d011      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003c86:	4b28      	ldr	r3, [pc, #160]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c8c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c94:	4924      	ldr	r1, [pc, #144]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ca0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ca4:	d101      	bne.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0308 	and.w	r3, r3, #8
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00a      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cc6:	4b18      	ldr	r3, [pc, #96]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ccc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cd4:	4914      	ldr	r1, [pc, #80]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00b      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ce8:	4b0f      	ldr	r3, [pc, #60]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cee:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cf8:	490b      	ldr	r1, [pc, #44]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00f      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003d0c:	4b06      	ldr	r3, [pc, #24]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d12:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d1c:	4902      	ldr	r1, [pc, #8]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003d24:	e002      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003d26:	bf00      	nop
 8003d28:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d00b      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003d38:	4b8a      	ldr	r3, [pc, #552]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d3e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d48:	4986      	ldr	r1, [pc, #536]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00b      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003d5c:	4b81      	ldr	r3, [pc, #516]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d62:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d6c:	497d      	ldr	r1, [pc, #500]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d006      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f000 80d6 	beq.w	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d88:	4b76      	ldr	r3, [pc, #472]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a75      	ldr	r2, [pc, #468]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d8e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d94:	f7fd fb00 	bl	8001398 <HAL_GetTick>
 8003d98:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d9a:	e008      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d9c:	f7fd fafc 	bl	8001398 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b64      	cmp	r3, #100	; 0x64
 8003da8:	d901      	bls.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e195      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003dae:	4b6d      	ldr	r3, [pc, #436]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1f0      	bne.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d021      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d11d      	bne.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003dce:	4b65      	ldr	r3, [pc, #404]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dd4:	0c1b      	lsrs	r3, r3, #16
 8003dd6:	f003 0303 	and.w	r3, r3, #3
 8003dda:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ddc:	4b61      	ldr	r3, [pc, #388]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003de2:	0e1b      	lsrs	r3, r3, #24
 8003de4:	f003 030f 	and.w	r3, r3, #15
 8003de8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	019a      	lsls	r2, r3, #6
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	041b      	lsls	r3, r3, #16
 8003df4:	431a      	orrs	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	061b      	lsls	r3, r3, #24
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	071b      	lsls	r3, r3, #28
 8003e02:	4958      	ldr	r1, [pc, #352]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d004      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e1e:	d00a      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d02e      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e34:	d129      	bne.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003e36:	4b4b      	ldr	r3, [pc, #300]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e3c:	0c1b      	lsrs	r3, r3, #16
 8003e3e:	f003 0303 	and.w	r3, r3, #3
 8003e42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e44:	4b47      	ldr	r3, [pc, #284]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e4a:	0f1b      	lsrs	r3, r3, #28
 8003e4c:	f003 0307 	and.w	r3, r3, #7
 8003e50:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	019a      	lsls	r2, r3, #6
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	041b      	lsls	r3, r3, #16
 8003e5c:	431a      	orrs	r2, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	061b      	lsls	r3, r3, #24
 8003e64:	431a      	orrs	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	071b      	lsls	r3, r3, #28
 8003e6a:	493e      	ldr	r1, [pc, #248]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003e72:	4b3c      	ldr	r3, [pc, #240]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e78:	f023 021f 	bic.w	r2, r3, #31
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e80:	3b01      	subs	r3, #1
 8003e82:	4938      	ldr	r1, [pc, #224]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d01d      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e96:	4b33      	ldr	r3, [pc, #204]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e9c:	0e1b      	lsrs	r3, r3, #24
 8003e9e:	f003 030f 	and.w	r3, r3, #15
 8003ea2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ea4:	4b2f      	ldr	r3, [pc, #188]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003eaa:	0f1b      	lsrs	r3, r3, #28
 8003eac:	f003 0307 	and.w	r3, r3, #7
 8003eb0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	019a      	lsls	r2, r3, #6
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	041b      	lsls	r3, r3, #16
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	061b      	lsls	r3, r3, #24
 8003ec4:	431a      	orrs	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	071b      	lsls	r3, r3, #28
 8003eca:	4926      	ldr	r1, [pc, #152]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d011      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	019a      	lsls	r2, r3, #6
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	041b      	lsls	r3, r3, #16
 8003eea:	431a      	orrs	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	061b      	lsls	r3, r3, #24
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	071b      	lsls	r3, r3, #28
 8003efa:	491a      	ldr	r1, [pc, #104]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003f02:	4b18      	ldr	r3, [pc, #96]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a17      	ldr	r2, [pc, #92]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f08:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f0e:	f7fd fa43 	bl	8001398 <HAL_GetTick>
 8003f12:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f14:	e008      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003f16:	f7fd fa3f 	bl	8001398 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	2b64      	cmp	r3, #100	; 0x64
 8003f22:	d901      	bls.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e0d8      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f28:	4b0e      	ldr	r3, [pc, #56]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d0f0      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	f040 80ce 	bne.w	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003f3c:	4b09      	ldr	r3, [pc, #36]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a08      	ldr	r2, [pc, #32]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f48:	f7fd fa26 	bl	8001398 <HAL_GetTick>
 8003f4c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f4e:	e00b      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f50:	f7fd fa22 	bl	8001398 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b64      	cmp	r3, #100	; 0x64
 8003f5c:	d904      	bls.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e0bb      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003f62:	bf00      	nop
 8003f64:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f68:	4b5e      	ldr	r3, [pc, #376]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f74:	d0ec      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d003      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d009      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d02e      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d12a      	bne.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003f9e:	4b51      	ldr	r3, [pc, #324]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa4:	0c1b      	lsrs	r3, r3, #16
 8003fa6:	f003 0303 	and.w	r3, r3, #3
 8003faa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003fac:	4b4d      	ldr	r3, [pc, #308]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb2:	0f1b      	lsrs	r3, r3, #28
 8003fb4:	f003 0307 	and.w	r3, r3, #7
 8003fb8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	019a      	lsls	r2, r3, #6
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	041b      	lsls	r3, r3, #16
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	061b      	lsls	r3, r3, #24
 8003fcc:	431a      	orrs	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	071b      	lsls	r3, r3, #28
 8003fd2:	4944      	ldr	r1, [pc, #272]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003fda:	4b42      	ldr	r3, [pc, #264]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fe0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	021b      	lsls	r3, r3, #8
 8003fec:	493d      	ldr	r1, [pc, #244]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d022      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004004:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004008:	d11d      	bne.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800400a:	4b36      	ldr	r3, [pc, #216]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800400c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004010:	0e1b      	lsrs	r3, r3, #24
 8004012:	f003 030f 	and.w	r3, r3, #15
 8004016:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004018:	4b32      	ldr	r3, [pc, #200]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800401a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800401e:	0f1b      	lsrs	r3, r3, #28
 8004020:	f003 0307 	and.w	r3, r3, #7
 8004024:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	019a      	lsls	r2, r3, #6
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a1b      	ldr	r3, [r3, #32]
 8004030:	041b      	lsls	r3, r3, #16
 8004032:	431a      	orrs	r2, r3
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	061b      	lsls	r3, r3, #24
 8004038:	431a      	orrs	r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	071b      	lsls	r3, r3, #28
 800403e:	4929      	ldr	r1, [pc, #164]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004040:	4313      	orrs	r3, r2
 8004042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0308 	and.w	r3, r3, #8
 800404e:	2b00      	cmp	r3, #0
 8004050:	d028      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004052:	4b24      	ldr	r3, [pc, #144]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004058:	0e1b      	lsrs	r3, r3, #24
 800405a:	f003 030f 	and.w	r3, r3, #15
 800405e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004060:	4b20      	ldr	r3, [pc, #128]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004066:	0c1b      	lsrs	r3, r3, #16
 8004068:	f003 0303 	and.w	r3, r3, #3
 800406c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	019a      	lsls	r2, r3, #6
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	041b      	lsls	r3, r3, #16
 8004078:	431a      	orrs	r2, r3
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	061b      	lsls	r3, r3, #24
 800407e:	431a      	orrs	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	69db      	ldr	r3, [r3, #28]
 8004084:	071b      	lsls	r3, r3, #28
 8004086:	4917      	ldr	r1, [pc, #92]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004088:	4313      	orrs	r3, r2
 800408a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800408e:	4b15      	ldr	r3, [pc, #84]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004090:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004094:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409c:	4911      	ldr	r1, [pc, #68]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80040a4:	4b0f      	ldr	r3, [pc, #60]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a0e      	ldr	r2, [pc, #56]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040b0:	f7fd f972 	bl	8001398 <HAL_GetTick>
 80040b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040b6:	e008      	b.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80040b8:	f7fd f96e 	bl	8001398 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b64      	cmp	r3, #100	; 0x64
 80040c4:	d901      	bls.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e007      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040ca:	4b06      	ldr	r3, [pc, #24]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040d6:	d1ef      	bne.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3720      	adds	r7, #32
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	40023800 	.word	0x40023800

080040e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d101      	bne.n	80040fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e049      	b.n	800418e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d106      	bne.n	8004114 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f7fc fc9a 	bl	8000a48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2202      	movs	r2, #2
 8004118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	3304      	adds	r3, #4
 8004124:	4619      	mov	r1, r3
 8004126:	4610      	mov	r0, r2
 8004128:	f000 fac0 	bl	80046ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3708      	adds	r7, #8
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
	...

08004198 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004198:	b480      	push	{r7}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d001      	beq.n	80041b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e054      	b.n	800425a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2202      	movs	r2, #2
 80041b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68da      	ldr	r2, [r3, #12]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f042 0201 	orr.w	r2, r2, #1
 80041c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a26      	ldr	r2, [pc, #152]	; (8004268 <HAL_TIM_Base_Start_IT+0xd0>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d022      	beq.n	8004218 <HAL_TIM_Base_Start_IT+0x80>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041da:	d01d      	beq.n	8004218 <HAL_TIM_Base_Start_IT+0x80>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a22      	ldr	r2, [pc, #136]	; (800426c <HAL_TIM_Base_Start_IT+0xd4>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d018      	beq.n	8004218 <HAL_TIM_Base_Start_IT+0x80>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a21      	ldr	r2, [pc, #132]	; (8004270 <HAL_TIM_Base_Start_IT+0xd8>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d013      	beq.n	8004218 <HAL_TIM_Base_Start_IT+0x80>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a1f      	ldr	r2, [pc, #124]	; (8004274 <HAL_TIM_Base_Start_IT+0xdc>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d00e      	beq.n	8004218 <HAL_TIM_Base_Start_IT+0x80>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a1e      	ldr	r2, [pc, #120]	; (8004278 <HAL_TIM_Base_Start_IT+0xe0>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d009      	beq.n	8004218 <HAL_TIM_Base_Start_IT+0x80>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a1c      	ldr	r2, [pc, #112]	; (800427c <HAL_TIM_Base_Start_IT+0xe4>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d004      	beq.n	8004218 <HAL_TIM_Base_Start_IT+0x80>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a1b      	ldr	r2, [pc, #108]	; (8004280 <HAL_TIM_Base_Start_IT+0xe8>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d115      	bne.n	8004244 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	689a      	ldr	r2, [r3, #8]
 800421e:	4b19      	ldr	r3, [pc, #100]	; (8004284 <HAL_TIM_Base_Start_IT+0xec>)
 8004220:	4013      	ands	r3, r2
 8004222:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2b06      	cmp	r3, #6
 8004228:	d015      	beq.n	8004256 <HAL_TIM_Base_Start_IT+0xbe>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004230:	d011      	beq.n	8004256 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f042 0201 	orr.w	r2, r2, #1
 8004240:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004242:	e008      	b.n	8004256 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f042 0201 	orr.w	r2, r2, #1
 8004252:	601a      	str	r2, [r3, #0]
 8004254:	e000      	b.n	8004258 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004256:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3714      	adds	r7, #20
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	40010000 	.word	0x40010000
 800426c:	40000400 	.word	0x40000400
 8004270:	40000800 	.word	0x40000800
 8004274:	40000c00 	.word	0x40000c00
 8004278:	40010400 	.word	0x40010400
 800427c:	40014000 	.word	0x40014000
 8004280:	40001800 	.word	0x40001800
 8004284:	00010007 	.word	0x00010007

08004288 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b02      	cmp	r3, #2
 800429c:	d122      	bne.n	80042e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	f003 0302 	and.w	r3, r3, #2
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d11b      	bne.n	80042e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f06f 0202 	mvn.w	r2, #2
 80042b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2201      	movs	r2, #1
 80042ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	f003 0303 	and.w	r3, r3, #3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d003      	beq.n	80042d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f9d0 	bl	8004670 <HAL_TIM_IC_CaptureCallback>
 80042d0:	e005      	b.n	80042de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 f9c2 	bl	800465c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f000 f9d3 	bl	8004684 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	f003 0304 	and.w	r3, r3, #4
 80042ee:	2b04      	cmp	r3, #4
 80042f0:	d122      	bne.n	8004338 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	f003 0304 	and.w	r3, r3, #4
 80042fc:	2b04      	cmp	r3, #4
 80042fe:	d11b      	bne.n	8004338 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f06f 0204 	mvn.w	r2, #4
 8004308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2202      	movs	r2, #2
 800430e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800431a:	2b00      	cmp	r3, #0
 800431c:	d003      	beq.n	8004326 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f9a6 	bl	8004670 <HAL_TIM_IC_CaptureCallback>
 8004324:	e005      	b.n	8004332 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 f998 	bl	800465c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f000 f9a9 	bl	8004684 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	f003 0308 	and.w	r3, r3, #8
 8004342:	2b08      	cmp	r3, #8
 8004344:	d122      	bne.n	800438c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	f003 0308 	and.w	r3, r3, #8
 8004350:	2b08      	cmp	r3, #8
 8004352:	d11b      	bne.n	800438c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f06f 0208 	mvn.w	r2, #8
 800435c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2204      	movs	r2, #4
 8004362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	69db      	ldr	r3, [r3, #28]
 800436a:	f003 0303 	and.w	r3, r3, #3
 800436e:	2b00      	cmp	r3, #0
 8004370:	d003      	beq.n	800437a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 f97c 	bl	8004670 <HAL_TIM_IC_CaptureCallback>
 8004378:	e005      	b.n	8004386 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 f96e 	bl	800465c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 f97f 	bl	8004684 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	f003 0310 	and.w	r3, r3, #16
 8004396:	2b10      	cmp	r3, #16
 8004398:	d122      	bne.n	80043e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	f003 0310 	and.w	r3, r3, #16
 80043a4:	2b10      	cmp	r3, #16
 80043a6:	d11b      	bne.n	80043e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f06f 0210 	mvn.w	r2, #16
 80043b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2208      	movs	r2, #8
 80043b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	69db      	ldr	r3, [r3, #28]
 80043be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d003      	beq.n	80043ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 f952 	bl	8004670 <HAL_TIM_IC_CaptureCallback>
 80043cc:	e005      	b.n	80043da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 f944 	bl	800465c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 f955 	bl	8004684 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d10e      	bne.n	800440c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	f003 0301 	and.w	r3, r3, #1
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d107      	bne.n	800440c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f06f 0201 	mvn.w	r2, #1
 8004404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f7fc f8f0 	bl	80005ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004416:	2b80      	cmp	r3, #128	; 0x80
 8004418:	d10e      	bne.n	8004438 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004424:	2b80      	cmp	r3, #128	; 0x80
 8004426:	d107      	bne.n	8004438 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 fb0c 	bl	8004a50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004442:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004446:	d10e      	bne.n	8004466 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004452:	2b80      	cmp	r3, #128	; 0x80
 8004454:	d107      	bne.n	8004466 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800445e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f000 faff 	bl	8004a64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004470:	2b40      	cmp	r3, #64	; 0x40
 8004472:	d10e      	bne.n	8004492 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800447e:	2b40      	cmp	r3, #64	; 0x40
 8004480:	d107      	bne.n	8004492 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800448a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f000 f903 	bl	8004698 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	f003 0320 	and.w	r3, r3, #32
 800449c:	2b20      	cmp	r3, #32
 800449e:	d10e      	bne.n	80044be <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	f003 0320 	and.w	r3, r3, #32
 80044aa:	2b20      	cmp	r3, #32
 80044ac:	d107      	bne.n	80044be <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f06f 0220 	mvn.w	r2, #32
 80044b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 fabf 	bl	8004a3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044be:	bf00      	nop
 80044c0:	3708      	adds	r7, #8
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
	...

080044c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044d2:	2300      	movs	r3, #0
 80044d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d101      	bne.n	80044e4 <HAL_TIM_ConfigClockSource+0x1c>
 80044e0:	2302      	movs	r3, #2
 80044e2:	e0b4      	b.n	800464e <HAL_TIM_ConfigClockSource+0x186>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2202      	movs	r2, #2
 80044f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044fc:	68ba      	ldr	r2, [r7, #8]
 80044fe:	4b56      	ldr	r3, [pc, #344]	; (8004658 <HAL_TIM_ConfigClockSource+0x190>)
 8004500:	4013      	ands	r3, r2
 8004502:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800450a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68ba      	ldr	r2, [r7, #8]
 8004512:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800451c:	d03e      	beq.n	800459c <HAL_TIM_ConfigClockSource+0xd4>
 800451e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004522:	f200 8087 	bhi.w	8004634 <HAL_TIM_ConfigClockSource+0x16c>
 8004526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800452a:	f000 8086 	beq.w	800463a <HAL_TIM_ConfigClockSource+0x172>
 800452e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004532:	d87f      	bhi.n	8004634 <HAL_TIM_ConfigClockSource+0x16c>
 8004534:	2b70      	cmp	r3, #112	; 0x70
 8004536:	d01a      	beq.n	800456e <HAL_TIM_ConfigClockSource+0xa6>
 8004538:	2b70      	cmp	r3, #112	; 0x70
 800453a:	d87b      	bhi.n	8004634 <HAL_TIM_ConfigClockSource+0x16c>
 800453c:	2b60      	cmp	r3, #96	; 0x60
 800453e:	d050      	beq.n	80045e2 <HAL_TIM_ConfigClockSource+0x11a>
 8004540:	2b60      	cmp	r3, #96	; 0x60
 8004542:	d877      	bhi.n	8004634 <HAL_TIM_ConfigClockSource+0x16c>
 8004544:	2b50      	cmp	r3, #80	; 0x50
 8004546:	d03c      	beq.n	80045c2 <HAL_TIM_ConfigClockSource+0xfa>
 8004548:	2b50      	cmp	r3, #80	; 0x50
 800454a:	d873      	bhi.n	8004634 <HAL_TIM_ConfigClockSource+0x16c>
 800454c:	2b40      	cmp	r3, #64	; 0x40
 800454e:	d058      	beq.n	8004602 <HAL_TIM_ConfigClockSource+0x13a>
 8004550:	2b40      	cmp	r3, #64	; 0x40
 8004552:	d86f      	bhi.n	8004634 <HAL_TIM_ConfigClockSource+0x16c>
 8004554:	2b30      	cmp	r3, #48	; 0x30
 8004556:	d064      	beq.n	8004622 <HAL_TIM_ConfigClockSource+0x15a>
 8004558:	2b30      	cmp	r3, #48	; 0x30
 800455a:	d86b      	bhi.n	8004634 <HAL_TIM_ConfigClockSource+0x16c>
 800455c:	2b20      	cmp	r3, #32
 800455e:	d060      	beq.n	8004622 <HAL_TIM_ConfigClockSource+0x15a>
 8004560:	2b20      	cmp	r3, #32
 8004562:	d867      	bhi.n	8004634 <HAL_TIM_ConfigClockSource+0x16c>
 8004564:	2b00      	cmp	r3, #0
 8004566:	d05c      	beq.n	8004622 <HAL_TIM_ConfigClockSource+0x15a>
 8004568:	2b10      	cmp	r3, #16
 800456a:	d05a      	beq.n	8004622 <HAL_TIM_ConfigClockSource+0x15a>
 800456c:	e062      	b.n	8004634 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800457e:	f000 f9af 	bl	80048e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004590:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68ba      	ldr	r2, [r7, #8]
 8004598:	609a      	str	r2, [r3, #8]
      break;
 800459a:	e04f      	b.n	800463c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045ac:	f000 f998 	bl	80048e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	689a      	ldr	r2, [r3, #8]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045be:	609a      	str	r2, [r3, #8]
      break;
 80045c0:	e03c      	b.n	800463c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045ce:	461a      	mov	r2, r3
 80045d0:	f000 f90c 	bl	80047ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2150      	movs	r1, #80	; 0x50
 80045da:	4618      	mov	r0, r3
 80045dc:	f000 f965 	bl	80048aa <TIM_ITRx_SetConfig>
      break;
 80045e0:	e02c      	b.n	800463c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80045ee:	461a      	mov	r2, r3
 80045f0:	f000 f92b 	bl	800484a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2160      	movs	r1, #96	; 0x60
 80045fa:	4618      	mov	r0, r3
 80045fc:	f000 f955 	bl	80048aa <TIM_ITRx_SetConfig>
      break;
 8004600:	e01c      	b.n	800463c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800460e:	461a      	mov	r2, r3
 8004610:	f000 f8ec 	bl	80047ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2140      	movs	r1, #64	; 0x40
 800461a:	4618      	mov	r0, r3
 800461c:	f000 f945 	bl	80048aa <TIM_ITRx_SetConfig>
      break;
 8004620:	e00c      	b.n	800463c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4619      	mov	r1, r3
 800462c:	4610      	mov	r0, r2
 800462e:	f000 f93c 	bl	80048aa <TIM_ITRx_SetConfig>
      break;
 8004632:	e003      	b.n	800463c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	73fb      	strb	r3, [r7, #15]
      break;
 8004638:	e000      	b.n	800463c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800463a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800464c:	7bfb      	ldrb	r3, [r7, #15]
}
 800464e:	4618      	mov	r0, r3
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	fffeff88 	.word	0xfffeff88

0800465c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004664:	bf00      	nop
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800468c:	bf00      	nop
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a40      	ldr	r2, [pc, #256]	; (80047c0 <TIM_Base_SetConfig+0x114>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d013      	beq.n	80046ec <TIM_Base_SetConfig+0x40>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ca:	d00f      	beq.n	80046ec <TIM_Base_SetConfig+0x40>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a3d      	ldr	r2, [pc, #244]	; (80047c4 <TIM_Base_SetConfig+0x118>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d00b      	beq.n	80046ec <TIM_Base_SetConfig+0x40>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a3c      	ldr	r2, [pc, #240]	; (80047c8 <TIM_Base_SetConfig+0x11c>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d007      	beq.n	80046ec <TIM_Base_SetConfig+0x40>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a3b      	ldr	r2, [pc, #236]	; (80047cc <TIM_Base_SetConfig+0x120>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d003      	beq.n	80046ec <TIM_Base_SetConfig+0x40>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a3a      	ldr	r2, [pc, #232]	; (80047d0 <TIM_Base_SetConfig+0x124>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d108      	bne.n	80046fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a2f      	ldr	r2, [pc, #188]	; (80047c0 <TIM_Base_SetConfig+0x114>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d02b      	beq.n	800475e <TIM_Base_SetConfig+0xb2>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800470c:	d027      	beq.n	800475e <TIM_Base_SetConfig+0xb2>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a2c      	ldr	r2, [pc, #176]	; (80047c4 <TIM_Base_SetConfig+0x118>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d023      	beq.n	800475e <TIM_Base_SetConfig+0xb2>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a2b      	ldr	r2, [pc, #172]	; (80047c8 <TIM_Base_SetConfig+0x11c>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d01f      	beq.n	800475e <TIM_Base_SetConfig+0xb2>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a2a      	ldr	r2, [pc, #168]	; (80047cc <TIM_Base_SetConfig+0x120>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d01b      	beq.n	800475e <TIM_Base_SetConfig+0xb2>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a29      	ldr	r2, [pc, #164]	; (80047d0 <TIM_Base_SetConfig+0x124>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d017      	beq.n	800475e <TIM_Base_SetConfig+0xb2>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a28      	ldr	r2, [pc, #160]	; (80047d4 <TIM_Base_SetConfig+0x128>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d013      	beq.n	800475e <TIM_Base_SetConfig+0xb2>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a27      	ldr	r2, [pc, #156]	; (80047d8 <TIM_Base_SetConfig+0x12c>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d00f      	beq.n	800475e <TIM_Base_SetConfig+0xb2>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a26      	ldr	r2, [pc, #152]	; (80047dc <TIM_Base_SetConfig+0x130>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d00b      	beq.n	800475e <TIM_Base_SetConfig+0xb2>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a25      	ldr	r2, [pc, #148]	; (80047e0 <TIM_Base_SetConfig+0x134>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d007      	beq.n	800475e <TIM_Base_SetConfig+0xb2>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a24      	ldr	r2, [pc, #144]	; (80047e4 <TIM_Base_SetConfig+0x138>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d003      	beq.n	800475e <TIM_Base_SetConfig+0xb2>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a23      	ldr	r2, [pc, #140]	; (80047e8 <TIM_Base_SetConfig+0x13c>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d108      	bne.n	8004770 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004764:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	4313      	orrs	r3, r2
 800476e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	4313      	orrs	r3, r2
 800477c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	689a      	ldr	r2, [r3, #8]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a0a      	ldr	r2, [pc, #40]	; (80047c0 <TIM_Base_SetConfig+0x114>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d003      	beq.n	80047a4 <TIM_Base_SetConfig+0xf8>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a0c      	ldr	r2, [pc, #48]	; (80047d0 <TIM_Base_SetConfig+0x124>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d103      	bne.n	80047ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	691a      	ldr	r2, [r3, #16]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	615a      	str	r2, [r3, #20]
}
 80047b2:	bf00      	nop
 80047b4:	3714      	adds	r7, #20
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	40010000 	.word	0x40010000
 80047c4:	40000400 	.word	0x40000400
 80047c8:	40000800 	.word	0x40000800
 80047cc:	40000c00 	.word	0x40000c00
 80047d0:	40010400 	.word	0x40010400
 80047d4:	40014000 	.word	0x40014000
 80047d8:	40014400 	.word	0x40014400
 80047dc:	40014800 	.word	0x40014800
 80047e0:	40001800 	.word	0x40001800
 80047e4:	40001c00 	.word	0x40001c00
 80047e8:	40002000 	.word	0x40002000

080047ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b087      	sub	sp, #28
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6a1b      	ldr	r3, [r3, #32]
 80047fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6a1b      	ldr	r3, [r3, #32]
 8004802:	f023 0201 	bic.w	r2, r3, #1
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004816:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	011b      	lsls	r3, r3, #4
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	4313      	orrs	r3, r2
 8004820:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	f023 030a 	bic.w	r3, r3, #10
 8004828:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	4313      	orrs	r3, r2
 8004830:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	693a      	ldr	r2, [r7, #16]
 8004836:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	621a      	str	r2, [r3, #32]
}
 800483e:	bf00      	nop
 8004840:	371c      	adds	r7, #28
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr

0800484a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800484a:	b480      	push	{r7}
 800484c:	b087      	sub	sp, #28
 800484e:	af00      	add	r7, sp, #0
 8004850:	60f8      	str	r0, [r7, #12]
 8004852:	60b9      	str	r1, [r7, #8]
 8004854:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	f023 0210 	bic.w	r2, r3, #16
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6a1b      	ldr	r3, [r3, #32]
 800486c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004874:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	031b      	lsls	r3, r3, #12
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	4313      	orrs	r3, r2
 800487e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004886:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	011b      	lsls	r3, r3, #4
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	4313      	orrs	r3, r2
 8004890:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	621a      	str	r2, [r3, #32]
}
 800489e:	bf00      	nop
 80048a0:	371c      	adds	r7, #28
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr

080048aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048aa:	b480      	push	{r7}
 80048ac:	b085      	sub	sp, #20
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
 80048b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048c2:	683a      	ldr	r2, [r7, #0]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	f043 0307 	orr.w	r3, r3, #7
 80048cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	609a      	str	r2, [r3, #8]
}
 80048d4:	bf00      	nop
 80048d6:	3714      	adds	r7, #20
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b087      	sub	sp, #28
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
 80048ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	021a      	lsls	r2, r3, #8
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	431a      	orrs	r2, r3
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	4313      	orrs	r3, r2
 8004908:	697a      	ldr	r2, [r7, #20]
 800490a:	4313      	orrs	r3, r2
 800490c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	697a      	ldr	r2, [r7, #20]
 8004912:	609a      	str	r2, [r3, #8]
}
 8004914:	bf00      	nop
 8004916:	371c      	adds	r7, #28
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004930:	2b01      	cmp	r3, #1
 8004932:	d101      	bne.n	8004938 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004934:	2302      	movs	r3, #2
 8004936:	e06d      	b.n	8004a14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2202      	movs	r2, #2
 8004944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a30      	ldr	r2, [pc, #192]	; (8004a20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d004      	beq.n	800496c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a2f      	ldr	r2, [pc, #188]	; (8004a24 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d108      	bne.n	800497e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004972:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	4313      	orrs	r3, r2
 800497c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004984:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	4313      	orrs	r3, r2
 800498e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a20      	ldr	r2, [pc, #128]	; (8004a20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d022      	beq.n	80049e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049aa:	d01d      	beq.n	80049e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a1d      	ldr	r2, [pc, #116]	; (8004a28 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d018      	beq.n	80049e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a1c      	ldr	r2, [pc, #112]	; (8004a2c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d013      	beq.n	80049e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a1a      	ldr	r2, [pc, #104]	; (8004a30 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d00e      	beq.n	80049e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a15      	ldr	r2, [pc, #84]	; (8004a24 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d009      	beq.n	80049e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a16      	ldr	r2, [pc, #88]	; (8004a34 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d004      	beq.n	80049e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a15      	ldr	r2, [pc, #84]	; (8004a38 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d10c      	bne.n	8004a02 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	68ba      	ldr	r2, [r7, #8]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68ba      	ldr	r2, [r7, #8]
 8004a00:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3714      	adds	r7, #20
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr
 8004a20:	40010000 	.word	0x40010000
 8004a24:	40010400 	.word	0x40010400
 8004a28:	40000400 	.word	0x40000400
 8004a2c:	40000800 	.word	0x40000800
 8004a30:	40000c00 	.word	0x40000c00
 8004a34:	40014000 	.word	0x40014000
 8004a38:	40001800 	.word	0x40001800

08004a3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a44:	bf00      	nop
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a58:	bf00      	nop
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d101      	bne.n	8004a8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e040      	b.n	8004b0c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d106      	bne.n	8004aa0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f7fb fff8 	bl	8000a90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2224      	movs	r2, #36	; 0x24
 8004aa4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f022 0201 	bic.w	r2, r2, #1
 8004ab4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 f82c 	bl	8004b14 <UART_SetConfig>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d101      	bne.n	8004ac6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e022      	b.n	8004b0c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d002      	beq.n	8004ad4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 fa84 	bl	8004fdc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	685a      	ldr	r2, [r3, #4]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ae2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	689a      	ldr	r2, [r3, #8]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004af2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f042 0201 	orr.w	r2, r2, #1
 8004b02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 fb0b 	bl	8005120 <UART_CheckIdleState>
 8004b0a:	4603      	mov	r3, r0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3708      	adds	r7, #8
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b088      	sub	sp, #32
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	689a      	ldr	r2, [r3, #8]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	431a      	orrs	r2, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	431a      	orrs	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	69db      	ldr	r3, [r3, #28]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	4ba6      	ldr	r3, [pc, #664]	; (8004dd8 <UART_SetConfig+0x2c4>)
 8004b40:	4013      	ands	r3, r2
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	6812      	ldr	r2, [r2, #0]
 8004b46:	6979      	ldr	r1, [r7, #20]
 8004b48:	430b      	orrs	r3, r1
 8004b4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68da      	ldr	r2, [r3, #12]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a1b      	ldr	r3, [r3, #32]
 8004b6c:	697a      	ldr	r2, [r7, #20]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	697a      	ldr	r2, [r7, #20]
 8004b82:	430a      	orrs	r2, r1
 8004b84:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a94      	ldr	r2, [pc, #592]	; (8004ddc <UART_SetConfig+0x2c8>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d120      	bne.n	8004bd2 <UART_SetConfig+0xbe>
 8004b90:	4b93      	ldr	r3, [pc, #588]	; (8004de0 <UART_SetConfig+0x2cc>)
 8004b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b96:	f003 0303 	and.w	r3, r3, #3
 8004b9a:	2b03      	cmp	r3, #3
 8004b9c:	d816      	bhi.n	8004bcc <UART_SetConfig+0xb8>
 8004b9e:	a201      	add	r2, pc, #4	; (adr r2, 8004ba4 <UART_SetConfig+0x90>)
 8004ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba4:	08004bb5 	.word	0x08004bb5
 8004ba8:	08004bc1 	.word	0x08004bc1
 8004bac:	08004bbb 	.word	0x08004bbb
 8004bb0:	08004bc7 	.word	0x08004bc7
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	77fb      	strb	r3, [r7, #31]
 8004bb8:	e150      	b.n	8004e5c <UART_SetConfig+0x348>
 8004bba:	2302      	movs	r3, #2
 8004bbc:	77fb      	strb	r3, [r7, #31]
 8004bbe:	e14d      	b.n	8004e5c <UART_SetConfig+0x348>
 8004bc0:	2304      	movs	r3, #4
 8004bc2:	77fb      	strb	r3, [r7, #31]
 8004bc4:	e14a      	b.n	8004e5c <UART_SetConfig+0x348>
 8004bc6:	2308      	movs	r3, #8
 8004bc8:	77fb      	strb	r3, [r7, #31]
 8004bca:	e147      	b.n	8004e5c <UART_SetConfig+0x348>
 8004bcc:	2310      	movs	r3, #16
 8004bce:	77fb      	strb	r3, [r7, #31]
 8004bd0:	e144      	b.n	8004e5c <UART_SetConfig+0x348>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a83      	ldr	r2, [pc, #524]	; (8004de4 <UART_SetConfig+0x2d0>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d132      	bne.n	8004c42 <UART_SetConfig+0x12e>
 8004bdc:	4b80      	ldr	r3, [pc, #512]	; (8004de0 <UART_SetConfig+0x2cc>)
 8004bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be2:	f003 030c 	and.w	r3, r3, #12
 8004be6:	2b0c      	cmp	r3, #12
 8004be8:	d828      	bhi.n	8004c3c <UART_SetConfig+0x128>
 8004bea:	a201      	add	r2, pc, #4	; (adr r2, 8004bf0 <UART_SetConfig+0xdc>)
 8004bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf0:	08004c25 	.word	0x08004c25
 8004bf4:	08004c3d 	.word	0x08004c3d
 8004bf8:	08004c3d 	.word	0x08004c3d
 8004bfc:	08004c3d 	.word	0x08004c3d
 8004c00:	08004c31 	.word	0x08004c31
 8004c04:	08004c3d 	.word	0x08004c3d
 8004c08:	08004c3d 	.word	0x08004c3d
 8004c0c:	08004c3d 	.word	0x08004c3d
 8004c10:	08004c2b 	.word	0x08004c2b
 8004c14:	08004c3d 	.word	0x08004c3d
 8004c18:	08004c3d 	.word	0x08004c3d
 8004c1c:	08004c3d 	.word	0x08004c3d
 8004c20:	08004c37 	.word	0x08004c37
 8004c24:	2300      	movs	r3, #0
 8004c26:	77fb      	strb	r3, [r7, #31]
 8004c28:	e118      	b.n	8004e5c <UART_SetConfig+0x348>
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	77fb      	strb	r3, [r7, #31]
 8004c2e:	e115      	b.n	8004e5c <UART_SetConfig+0x348>
 8004c30:	2304      	movs	r3, #4
 8004c32:	77fb      	strb	r3, [r7, #31]
 8004c34:	e112      	b.n	8004e5c <UART_SetConfig+0x348>
 8004c36:	2308      	movs	r3, #8
 8004c38:	77fb      	strb	r3, [r7, #31]
 8004c3a:	e10f      	b.n	8004e5c <UART_SetConfig+0x348>
 8004c3c:	2310      	movs	r3, #16
 8004c3e:	77fb      	strb	r3, [r7, #31]
 8004c40:	e10c      	b.n	8004e5c <UART_SetConfig+0x348>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a68      	ldr	r2, [pc, #416]	; (8004de8 <UART_SetConfig+0x2d4>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d120      	bne.n	8004c8e <UART_SetConfig+0x17a>
 8004c4c:	4b64      	ldr	r3, [pc, #400]	; (8004de0 <UART_SetConfig+0x2cc>)
 8004c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c52:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004c56:	2b30      	cmp	r3, #48	; 0x30
 8004c58:	d013      	beq.n	8004c82 <UART_SetConfig+0x16e>
 8004c5a:	2b30      	cmp	r3, #48	; 0x30
 8004c5c:	d814      	bhi.n	8004c88 <UART_SetConfig+0x174>
 8004c5e:	2b20      	cmp	r3, #32
 8004c60:	d009      	beq.n	8004c76 <UART_SetConfig+0x162>
 8004c62:	2b20      	cmp	r3, #32
 8004c64:	d810      	bhi.n	8004c88 <UART_SetConfig+0x174>
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d002      	beq.n	8004c70 <UART_SetConfig+0x15c>
 8004c6a:	2b10      	cmp	r3, #16
 8004c6c:	d006      	beq.n	8004c7c <UART_SetConfig+0x168>
 8004c6e:	e00b      	b.n	8004c88 <UART_SetConfig+0x174>
 8004c70:	2300      	movs	r3, #0
 8004c72:	77fb      	strb	r3, [r7, #31]
 8004c74:	e0f2      	b.n	8004e5c <UART_SetConfig+0x348>
 8004c76:	2302      	movs	r3, #2
 8004c78:	77fb      	strb	r3, [r7, #31]
 8004c7a:	e0ef      	b.n	8004e5c <UART_SetConfig+0x348>
 8004c7c:	2304      	movs	r3, #4
 8004c7e:	77fb      	strb	r3, [r7, #31]
 8004c80:	e0ec      	b.n	8004e5c <UART_SetConfig+0x348>
 8004c82:	2308      	movs	r3, #8
 8004c84:	77fb      	strb	r3, [r7, #31]
 8004c86:	e0e9      	b.n	8004e5c <UART_SetConfig+0x348>
 8004c88:	2310      	movs	r3, #16
 8004c8a:	77fb      	strb	r3, [r7, #31]
 8004c8c:	e0e6      	b.n	8004e5c <UART_SetConfig+0x348>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a56      	ldr	r2, [pc, #344]	; (8004dec <UART_SetConfig+0x2d8>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d120      	bne.n	8004cda <UART_SetConfig+0x1c6>
 8004c98:	4b51      	ldr	r3, [pc, #324]	; (8004de0 <UART_SetConfig+0x2cc>)
 8004c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c9e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004ca2:	2bc0      	cmp	r3, #192	; 0xc0
 8004ca4:	d013      	beq.n	8004cce <UART_SetConfig+0x1ba>
 8004ca6:	2bc0      	cmp	r3, #192	; 0xc0
 8004ca8:	d814      	bhi.n	8004cd4 <UART_SetConfig+0x1c0>
 8004caa:	2b80      	cmp	r3, #128	; 0x80
 8004cac:	d009      	beq.n	8004cc2 <UART_SetConfig+0x1ae>
 8004cae:	2b80      	cmp	r3, #128	; 0x80
 8004cb0:	d810      	bhi.n	8004cd4 <UART_SetConfig+0x1c0>
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d002      	beq.n	8004cbc <UART_SetConfig+0x1a8>
 8004cb6:	2b40      	cmp	r3, #64	; 0x40
 8004cb8:	d006      	beq.n	8004cc8 <UART_SetConfig+0x1b4>
 8004cba:	e00b      	b.n	8004cd4 <UART_SetConfig+0x1c0>
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	77fb      	strb	r3, [r7, #31]
 8004cc0:	e0cc      	b.n	8004e5c <UART_SetConfig+0x348>
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	77fb      	strb	r3, [r7, #31]
 8004cc6:	e0c9      	b.n	8004e5c <UART_SetConfig+0x348>
 8004cc8:	2304      	movs	r3, #4
 8004cca:	77fb      	strb	r3, [r7, #31]
 8004ccc:	e0c6      	b.n	8004e5c <UART_SetConfig+0x348>
 8004cce:	2308      	movs	r3, #8
 8004cd0:	77fb      	strb	r3, [r7, #31]
 8004cd2:	e0c3      	b.n	8004e5c <UART_SetConfig+0x348>
 8004cd4:	2310      	movs	r3, #16
 8004cd6:	77fb      	strb	r3, [r7, #31]
 8004cd8:	e0c0      	b.n	8004e5c <UART_SetConfig+0x348>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a44      	ldr	r2, [pc, #272]	; (8004df0 <UART_SetConfig+0x2dc>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d125      	bne.n	8004d30 <UART_SetConfig+0x21c>
 8004ce4:	4b3e      	ldr	r3, [pc, #248]	; (8004de0 <UART_SetConfig+0x2cc>)
 8004ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cf2:	d017      	beq.n	8004d24 <UART_SetConfig+0x210>
 8004cf4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cf8:	d817      	bhi.n	8004d2a <UART_SetConfig+0x216>
 8004cfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cfe:	d00b      	beq.n	8004d18 <UART_SetConfig+0x204>
 8004d00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d04:	d811      	bhi.n	8004d2a <UART_SetConfig+0x216>
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d003      	beq.n	8004d12 <UART_SetConfig+0x1fe>
 8004d0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d0e:	d006      	beq.n	8004d1e <UART_SetConfig+0x20a>
 8004d10:	e00b      	b.n	8004d2a <UART_SetConfig+0x216>
 8004d12:	2300      	movs	r3, #0
 8004d14:	77fb      	strb	r3, [r7, #31]
 8004d16:	e0a1      	b.n	8004e5c <UART_SetConfig+0x348>
 8004d18:	2302      	movs	r3, #2
 8004d1a:	77fb      	strb	r3, [r7, #31]
 8004d1c:	e09e      	b.n	8004e5c <UART_SetConfig+0x348>
 8004d1e:	2304      	movs	r3, #4
 8004d20:	77fb      	strb	r3, [r7, #31]
 8004d22:	e09b      	b.n	8004e5c <UART_SetConfig+0x348>
 8004d24:	2308      	movs	r3, #8
 8004d26:	77fb      	strb	r3, [r7, #31]
 8004d28:	e098      	b.n	8004e5c <UART_SetConfig+0x348>
 8004d2a:	2310      	movs	r3, #16
 8004d2c:	77fb      	strb	r3, [r7, #31]
 8004d2e:	e095      	b.n	8004e5c <UART_SetConfig+0x348>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a2f      	ldr	r2, [pc, #188]	; (8004df4 <UART_SetConfig+0x2e0>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d125      	bne.n	8004d86 <UART_SetConfig+0x272>
 8004d3a:	4b29      	ldr	r3, [pc, #164]	; (8004de0 <UART_SetConfig+0x2cc>)
 8004d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d40:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d48:	d017      	beq.n	8004d7a <UART_SetConfig+0x266>
 8004d4a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d4e:	d817      	bhi.n	8004d80 <UART_SetConfig+0x26c>
 8004d50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d54:	d00b      	beq.n	8004d6e <UART_SetConfig+0x25a>
 8004d56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d5a:	d811      	bhi.n	8004d80 <UART_SetConfig+0x26c>
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d003      	beq.n	8004d68 <UART_SetConfig+0x254>
 8004d60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d64:	d006      	beq.n	8004d74 <UART_SetConfig+0x260>
 8004d66:	e00b      	b.n	8004d80 <UART_SetConfig+0x26c>
 8004d68:	2301      	movs	r3, #1
 8004d6a:	77fb      	strb	r3, [r7, #31]
 8004d6c:	e076      	b.n	8004e5c <UART_SetConfig+0x348>
 8004d6e:	2302      	movs	r3, #2
 8004d70:	77fb      	strb	r3, [r7, #31]
 8004d72:	e073      	b.n	8004e5c <UART_SetConfig+0x348>
 8004d74:	2304      	movs	r3, #4
 8004d76:	77fb      	strb	r3, [r7, #31]
 8004d78:	e070      	b.n	8004e5c <UART_SetConfig+0x348>
 8004d7a:	2308      	movs	r3, #8
 8004d7c:	77fb      	strb	r3, [r7, #31]
 8004d7e:	e06d      	b.n	8004e5c <UART_SetConfig+0x348>
 8004d80:	2310      	movs	r3, #16
 8004d82:	77fb      	strb	r3, [r7, #31]
 8004d84:	e06a      	b.n	8004e5c <UART_SetConfig+0x348>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a1b      	ldr	r2, [pc, #108]	; (8004df8 <UART_SetConfig+0x2e4>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d138      	bne.n	8004e02 <UART_SetConfig+0x2ee>
 8004d90:	4b13      	ldr	r3, [pc, #76]	; (8004de0 <UART_SetConfig+0x2cc>)
 8004d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d96:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004d9a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004d9e:	d017      	beq.n	8004dd0 <UART_SetConfig+0x2bc>
 8004da0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004da4:	d82a      	bhi.n	8004dfc <UART_SetConfig+0x2e8>
 8004da6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004daa:	d00b      	beq.n	8004dc4 <UART_SetConfig+0x2b0>
 8004dac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004db0:	d824      	bhi.n	8004dfc <UART_SetConfig+0x2e8>
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d003      	beq.n	8004dbe <UART_SetConfig+0x2aa>
 8004db6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dba:	d006      	beq.n	8004dca <UART_SetConfig+0x2b6>
 8004dbc:	e01e      	b.n	8004dfc <UART_SetConfig+0x2e8>
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	77fb      	strb	r3, [r7, #31]
 8004dc2:	e04b      	b.n	8004e5c <UART_SetConfig+0x348>
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	77fb      	strb	r3, [r7, #31]
 8004dc8:	e048      	b.n	8004e5c <UART_SetConfig+0x348>
 8004dca:	2304      	movs	r3, #4
 8004dcc:	77fb      	strb	r3, [r7, #31]
 8004dce:	e045      	b.n	8004e5c <UART_SetConfig+0x348>
 8004dd0:	2308      	movs	r3, #8
 8004dd2:	77fb      	strb	r3, [r7, #31]
 8004dd4:	e042      	b.n	8004e5c <UART_SetConfig+0x348>
 8004dd6:	bf00      	nop
 8004dd8:	efff69f3 	.word	0xefff69f3
 8004ddc:	40011000 	.word	0x40011000
 8004de0:	40023800 	.word	0x40023800
 8004de4:	40004400 	.word	0x40004400
 8004de8:	40004800 	.word	0x40004800
 8004dec:	40004c00 	.word	0x40004c00
 8004df0:	40005000 	.word	0x40005000
 8004df4:	40011400 	.word	0x40011400
 8004df8:	40007800 	.word	0x40007800
 8004dfc:	2310      	movs	r3, #16
 8004dfe:	77fb      	strb	r3, [r7, #31]
 8004e00:	e02c      	b.n	8004e5c <UART_SetConfig+0x348>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a72      	ldr	r2, [pc, #456]	; (8004fd0 <UART_SetConfig+0x4bc>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d125      	bne.n	8004e58 <UART_SetConfig+0x344>
 8004e0c:	4b71      	ldr	r3, [pc, #452]	; (8004fd4 <UART_SetConfig+0x4c0>)
 8004e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e12:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004e16:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004e1a:	d017      	beq.n	8004e4c <UART_SetConfig+0x338>
 8004e1c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004e20:	d817      	bhi.n	8004e52 <UART_SetConfig+0x33e>
 8004e22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e26:	d00b      	beq.n	8004e40 <UART_SetConfig+0x32c>
 8004e28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e2c:	d811      	bhi.n	8004e52 <UART_SetConfig+0x33e>
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d003      	beq.n	8004e3a <UART_SetConfig+0x326>
 8004e32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e36:	d006      	beq.n	8004e46 <UART_SetConfig+0x332>
 8004e38:	e00b      	b.n	8004e52 <UART_SetConfig+0x33e>
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	77fb      	strb	r3, [r7, #31]
 8004e3e:	e00d      	b.n	8004e5c <UART_SetConfig+0x348>
 8004e40:	2302      	movs	r3, #2
 8004e42:	77fb      	strb	r3, [r7, #31]
 8004e44:	e00a      	b.n	8004e5c <UART_SetConfig+0x348>
 8004e46:	2304      	movs	r3, #4
 8004e48:	77fb      	strb	r3, [r7, #31]
 8004e4a:	e007      	b.n	8004e5c <UART_SetConfig+0x348>
 8004e4c:	2308      	movs	r3, #8
 8004e4e:	77fb      	strb	r3, [r7, #31]
 8004e50:	e004      	b.n	8004e5c <UART_SetConfig+0x348>
 8004e52:	2310      	movs	r3, #16
 8004e54:	77fb      	strb	r3, [r7, #31]
 8004e56:	e001      	b.n	8004e5c <UART_SetConfig+0x348>
 8004e58:	2310      	movs	r3, #16
 8004e5a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	69db      	ldr	r3, [r3, #28]
 8004e60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e64:	d15b      	bne.n	8004f1e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004e66:	7ffb      	ldrb	r3, [r7, #31]
 8004e68:	2b08      	cmp	r3, #8
 8004e6a:	d828      	bhi.n	8004ebe <UART_SetConfig+0x3aa>
 8004e6c:	a201      	add	r2, pc, #4	; (adr r2, 8004e74 <UART_SetConfig+0x360>)
 8004e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e72:	bf00      	nop
 8004e74:	08004e99 	.word	0x08004e99
 8004e78:	08004ea1 	.word	0x08004ea1
 8004e7c:	08004ea9 	.word	0x08004ea9
 8004e80:	08004ebf 	.word	0x08004ebf
 8004e84:	08004eaf 	.word	0x08004eaf
 8004e88:	08004ebf 	.word	0x08004ebf
 8004e8c:	08004ebf 	.word	0x08004ebf
 8004e90:	08004ebf 	.word	0x08004ebf
 8004e94:	08004eb7 	.word	0x08004eb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e98:	f7fe fcd6 	bl	8003848 <HAL_RCC_GetPCLK1Freq>
 8004e9c:	61b8      	str	r0, [r7, #24]
        break;
 8004e9e:	e013      	b.n	8004ec8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ea0:	f7fe fce6 	bl	8003870 <HAL_RCC_GetPCLK2Freq>
 8004ea4:	61b8      	str	r0, [r7, #24]
        break;
 8004ea6:	e00f      	b.n	8004ec8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ea8:	4b4b      	ldr	r3, [pc, #300]	; (8004fd8 <UART_SetConfig+0x4c4>)
 8004eaa:	61bb      	str	r3, [r7, #24]
        break;
 8004eac:	e00c      	b.n	8004ec8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eae:	f7fe fbb9 	bl	8003624 <HAL_RCC_GetSysClockFreq>
 8004eb2:	61b8      	str	r0, [r7, #24]
        break;
 8004eb4:	e008      	b.n	8004ec8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004eba:	61bb      	str	r3, [r7, #24]
        break;
 8004ebc:	e004      	b.n	8004ec8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	77bb      	strb	r3, [r7, #30]
        break;
 8004ec6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d074      	beq.n	8004fb8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	005a      	lsls	r2, r3, #1
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	085b      	lsrs	r3, r3, #1
 8004ed8:	441a      	add	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	2b0f      	cmp	r3, #15
 8004ee8:	d916      	bls.n	8004f18 <UART_SetConfig+0x404>
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ef0:	d212      	bcs.n	8004f18 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	f023 030f 	bic.w	r3, r3, #15
 8004efa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	085b      	lsrs	r3, r3, #1
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	f003 0307 	and.w	r3, r3, #7
 8004f06:	b29a      	uxth	r2, r3
 8004f08:	89fb      	ldrh	r3, [r7, #14]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	89fa      	ldrh	r2, [r7, #14]
 8004f14:	60da      	str	r2, [r3, #12]
 8004f16:	e04f      	b.n	8004fb8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	77bb      	strb	r3, [r7, #30]
 8004f1c:	e04c      	b.n	8004fb8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f1e:	7ffb      	ldrb	r3, [r7, #31]
 8004f20:	2b08      	cmp	r3, #8
 8004f22:	d828      	bhi.n	8004f76 <UART_SetConfig+0x462>
 8004f24:	a201      	add	r2, pc, #4	; (adr r2, 8004f2c <UART_SetConfig+0x418>)
 8004f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f2a:	bf00      	nop
 8004f2c:	08004f51 	.word	0x08004f51
 8004f30:	08004f59 	.word	0x08004f59
 8004f34:	08004f61 	.word	0x08004f61
 8004f38:	08004f77 	.word	0x08004f77
 8004f3c:	08004f67 	.word	0x08004f67
 8004f40:	08004f77 	.word	0x08004f77
 8004f44:	08004f77 	.word	0x08004f77
 8004f48:	08004f77 	.word	0x08004f77
 8004f4c:	08004f6f 	.word	0x08004f6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f50:	f7fe fc7a 	bl	8003848 <HAL_RCC_GetPCLK1Freq>
 8004f54:	61b8      	str	r0, [r7, #24]
        break;
 8004f56:	e013      	b.n	8004f80 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f58:	f7fe fc8a 	bl	8003870 <HAL_RCC_GetPCLK2Freq>
 8004f5c:	61b8      	str	r0, [r7, #24]
        break;
 8004f5e:	e00f      	b.n	8004f80 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f60:	4b1d      	ldr	r3, [pc, #116]	; (8004fd8 <UART_SetConfig+0x4c4>)
 8004f62:	61bb      	str	r3, [r7, #24]
        break;
 8004f64:	e00c      	b.n	8004f80 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f66:	f7fe fb5d 	bl	8003624 <HAL_RCC_GetSysClockFreq>
 8004f6a:	61b8      	str	r0, [r7, #24]
        break;
 8004f6c:	e008      	b.n	8004f80 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f72:	61bb      	str	r3, [r7, #24]
        break;
 8004f74:	e004      	b.n	8004f80 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004f76:	2300      	movs	r3, #0
 8004f78:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	77bb      	strb	r3, [r7, #30]
        break;
 8004f7e:	bf00      	nop
    }

    if (pclk != 0U)
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d018      	beq.n	8004fb8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	085a      	lsrs	r2, r3, #1
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	441a      	add	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f98:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	2b0f      	cmp	r3, #15
 8004f9e:	d909      	bls.n	8004fb4 <UART_SetConfig+0x4a0>
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fa6:	d205      	bcs.n	8004fb4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	b29a      	uxth	r2, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	60da      	str	r2, [r3, #12]
 8004fb2:	e001      	b.n	8004fb8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004fc4:	7fbb      	ldrb	r3, [r7, #30]
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3720      	adds	r7, #32
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	40007c00 	.word	0x40007c00
 8004fd4:	40023800 	.word	0x40023800
 8004fd8:	00f42400 	.word	0x00f42400

08004fdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe8:	f003 0301 	and.w	r3, r3, #1
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d00a      	beq.n	8005006 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	430a      	orrs	r2, r1
 8005004:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500a:	f003 0302 	and.w	r3, r3, #2
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00a      	beq.n	8005028 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	430a      	orrs	r2, r1
 8005026:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502c:	f003 0304 	and.w	r3, r3, #4
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00a      	beq.n	800504a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	430a      	orrs	r2, r1
 8005048:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504e:	f003 0308 	and.w	r3, r3, #8
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00a      	beq.n	800506c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	430a      	orrs	r2, r1
 800506a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005070:	f003 0310 	and.w	r3, r3, #16
 8005074:	2b00      	cmp	r3, #0
 8005076:	d00a      	beq.n	800508e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	430a      	orrs	r2, r1
 800508c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005092:	f003 0320 	and.w	r3, r3, #32
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00a      	beq.n	80050b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	430a      	orrs	r2, r1
 80050ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d01a      	beq.n	80050f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	430a      	orrs	r2, r1
 80050d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050da:	d10a      	bne.n	80050f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	430a      	orrs	r2, r1
 80050f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00a      	beq.n	8005114 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	430a      	orrs	r2, r1
 8005112:	605a      	str	r2, [r3, #4]
  }
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b086      	sub	sp, #24
 8005124:	af02      	add	r7, sp, #8
 8005126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005130:	f7fc f932 	bl	8001398 <HAL_GetTick>
 8005134:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0308 	and.w	r3, r3, #8
 8005140:	2b08      	cmp	r3, #8
 8005142:	d10e      	bne.n	8005162 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005144:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005148:	9300      	str	r3, [sp, #0]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 f831 	bl	80051ba <UART_WaitOnFlagUntilTimeout>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d001      	beq.n	8005162 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e027      	b.n	80051b2 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0304 	and.w	r3, r3, #4
 800516c:	2b04      	cmp	r3, #4
 800516e:	d10e      	bne.n	800518e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005170:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005174:	9300      	str	r3, [sp, #0]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2200      	movs	r2, #0
 800517a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 f81b 	bl	80051ba <UART_WaitOnFlagUntilTimeout>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e011      	b.n	80051b2 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2220      	movs	r2, #32
 8005192:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2220      	movs	r2, #32
 8005198:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}

080051ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051ba:	b580      	push	{r7, lr}
 80051bc:	b09c      	sub	sp, #112	; 0x70
 80051be:	af00      	add	r7, sp, #0
 80051c0:	60f8      	str	r0, [r7, #12]
 80051c2:	60b9      	str	r1, [r7, #8]
 80051c4:	603b      	str	r3, [r7, #0]
 80051c6:	4613      	mov	r3, r2
 80051c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051ca:	e0a7      	b.n	800531c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d2:	f000 80a3 	beq.w	800531c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051d6:	f7fc f8df 	bl	8001398 <HAL_GetTick>
 80051da:	4602      	mov	r2, r0
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d302      	bcc.n	80051ec <UART_WaitOnFlagUntilTimeout+0x32>
 80051e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d13f      	bne.n	800526c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051f4:	e853 3f00 	ldrex	r3, [r3]
 80051f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80051fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005200:	667b      	str	r3, [r7, #100]	; 0x64
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	461a      	mov	r2, r3
 8005208:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800520a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800520c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005210:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005212:	e841 2300 	strex	r3, r2, [r1]
 8005216:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005218:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800521a:	2b00      	cmp	r3, #0
 800521c:	d1e6      	bne.n	80051ec <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	3308      	adds	r3, #8
 8005224:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005228:	e853 3f00 	ldrex	r3, [r3]
 800522c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800522e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005230:	f023 0301 	bic.w	r3, r3, #1
 8005234:	663b      	str	r3, [r7, #96]	; 0x60
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	3308      	adds	r3, #8
 800523c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800523e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005240:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005242:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005244:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005246:	e841 2300 	strex	r3, r2, [r1]
 800524a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800524c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800524e:	2b00      	cmp	r3, #0
 8005250:	d1e5      	bne.n	800521e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2220      	movs	r2, #32
 8005256:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2220      	movs	r2, #32
 800525c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e068      	b.n	800533e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0304 	and.w	r3, r3, #4
 8005276:	2b00      	cmp	r3, #0
 8005278:	d050      	beq.n	800531c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	69db      	ldr	r3, [r3, #28]
 8005280:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005284:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005288:	d148      	bne.n	800531c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005292:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529c:	e853 3f00 	ldrex	r3, [r3]
 80052a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80052a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	461a      	mov	r2, r3
 80052b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052b2:	637b      	str	r3, [r7, #52]	; 0x34
 80052b4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052ba:	e841 2300 	strex	r3, r2, [r1]
 80052be:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80052c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1e6      	bne.n	8005294 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	3308      	adds	r3, #8
 80052cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	e853 3f00 	ldrex	r3, [r3]
 80052d4:	613b      	str	r3, [r7, #16]
   return(result);
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	f023 0301 	bic.w	r3, r3, #1
 80052dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	3308      	adds	r3, #8
 80052e4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80052e6:	623a      	str	r2, [r7, #32]
 80052e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ea:	69f9      	ldr	r1, [r7, #28]
 80052ec:	6a3a      	ldr	r2, [r7, #32]
 80052ee:	e841 2300 	strex	r3, r2, [r1]
 80052f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1e5      	bne.n	80052c6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2220      	movs	r2, #32
 80052fe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2220      	movs	r2, #32
 8005304:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2220      	movs	r2, #32
 800530c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2200      	movs	r2, #0
 8005314:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e010      	b.n	800533e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	69da      	ldr	r2, [r3, #28]
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	4013      	ands	r3, r2
 8005326:	68ba      	ldr	r2, [r7, #8]
 8005328:	429a      	cmp	r2, r3
 800532a:	bf0c      	ite	eq
 800532c:	2301      	moveq	r3, #1
 800532e:	2300      	movne	r3, #0
 8005330:	b2db      	uxtb	r3, r3
 8005332:	461a      	mov	r2, r3
 8005334:	79fb      	ldrb	r3, [r7, #7]
 8005336:	429a      	cmp	r2, r3
 8005338:	f43f af48 	beq.w	80051cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3770      	adds	r7, #112	; 0x70
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
	...

08005348 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005348:	b084      	sub	sp, #16
 800534a:	b580      	push	{r7, lr}
 800534c:	b084      	sub	sp, #16
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
 8005352:	f107 001c 	add.w	r0, r7, #28
 8005356:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800535a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535c:	2b01      	cmp	r3, #1
 800535e:	d120      	bne.n	80053a2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005364:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	68da      	ldr	r2, [r3, #12]
 8005370:	4b20      	ldr	r3, [pc, #128]	; (80053f4 <USB_CoreInit+0xac>)
 8005372:	4013      	ands	r3, r2
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005386:	2b01      	cmp	r3, #1
 8005388:	d105      	bne.n	8005396 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 fa96 	bl	80058c8 <USB_CoreReset>
 800539c:	4603      	mov	r3, r0
 800539e:	73fb      	strb	r3, [r7, #15]
 80053a0:	e010      	b.n	80053c4 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 fa8a 	bl	80058c8 <USB_CoreReset>
 80053b4:	4603      	mov	r3, r0
 80053b6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053bc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80053c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d10b      	bne.n	80053e2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	f043 0206 	orr.w	r2, r3, #6
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f043 0220 	orr.w	r2, r3, #32
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80053e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3710      	adds	r7, #16
 80053e8:	46bd      	mov	sp, r7
 80053ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053ee:	b004      	add	sp, #16
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	ffbdffbf 	.word	0xffbdffbf

080053f8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f023 0201 	bic.w	r2, r3, #1
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	370c      	adds	r7, #12
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr

0800541a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800541a:	b580      	push	{r7, lr}
 800541c:	b084      	sub	sp, #16
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
 8005422:	460b      	mov	r3, r1
 8005424:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005426:	2300      	movs	r3, #0
 8005428:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005436:	78fb      	ldrb	r3, [r7, #3]
 8005438:	2b01      	cmp	r3, #1
 800543a:	d115      	bne.n	8005468 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005448:	2001      	movs	r0, #1
 800544a:	f7fb ffb1 	bl	80013b0 <HAL_Delay>
      ms++;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	3301      	adds	r3, #1
 8005452:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 fa29 	bl	80058ac <USB_GetMode>
 800545a:	4603      	mov	r3, r0
 800545c:	2b01      	cmp	r3, #1
 800545e:	d01e      	beq.n	800549e <USB_SetCurrentMode+0x84>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2b31      	cmp	r3, #49	; 0x31
 8005464:	d9f0      	bls.n	8005448 <USB_SetCurrentMode+0x2e>
 8005466:	e01a      	b.n	800549e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005468:	78fb      	ldrb	r3, [r7, #3]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d115      	bne.n	800549a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800547a:	2001      	movs	r0, #1
 800547c:	f7fb ff98 	bl	80013b0 <HAL_Delay>
      ms++;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	3301      	adds	r3, #1
 8005484:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 fa10 	bl	80058ac <USB_GetMode>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d005      	beq.n	800549e <USB_SetCurrentMode+0x84>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2b31      	cmp	r3, #49	; 0x31
 8005496:	d9f0      	bls.n	800547a <USB_SetCurrentMode+0x60>
 8005498:	e001      	b.n	800549e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e005      	b.n	80054aa <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2b32      	cmp	r3, #50	; 0x32
 80054a2:	d101      	bne.n	80054a8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e000      	b.n	80054aa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
	...

080054b4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054b4:	b084      	sub	sp, #16
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b086      	sub	sp, #24
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
 80054be:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80054c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80054c6:	2300      	movs	r3, #0
 80054c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80054ce:	2300      	movs	r3, #0
 80054d0:	613b      	str	r3, [r7, #16]
 80054d2:	e009      	b.n	80054e8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	3340      	adds	r3, #64	; 0x40
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	4413      	add	r3, r2
 80054de:	2200      	movs	r2, #0
 80054e0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	3301      	adds	r3, #1
 80054e6:	613b      	str	r3, [r7, #16]
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	2b0e      	cmp	r3, #14
 80054ec:	d9f2      	bls.n	80054d4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80054ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d11c      	bne.n	800552e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005502:	f043 0302 	orr.w	r3, r3, #2
 8005506:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	601a      	str	r2, [r3, #0]
 800552c:	e005      	b.n	800553a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005532:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005540:	461a      	mov	r2, r3
 8005542:	2300      	movs	r3, #0
 8005544:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800554c:	4619      	mov	r1, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005554:	461a      	mov	r2, r3
 8005556:	680b      	ldr	r3, [r1, #0]
 8005558:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800555a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800555c:	2b01      	cmp	r3, #1
 800555e:	d10c      	bne.n	800557a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005562:	2b00      	cmp	r3, #0
 8005564:	d104      	bne.n	8005570 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005566:	2100      	movs	r1, #0
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 f965 	bl	8005838 <USB_SetDevSpeed>
 800556e:	e008      	b.n	8005582 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005570:	2101      	movs	r1, #1
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 f960 	bl	8005838 <USB_SetDevSpeed>
 8005578:	e003      	b.n	8005582 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800557a:	2103      	movs	r1, #3
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 f95b 	bl	8005838 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005582:	2110      	movs	r1, #16
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 f8f3 	bl	8005770 <USB_FlushTxFifo>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d001      	beq.n	8005594 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 f91f 	bl	80057d8 <USB_FlushRxFifo>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d001      	beq.n	80055a4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055aa:	461a      	mov	r2, r3
 80055ac:	2300      	movs	r3, #0
 80055ae:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055b6:	461a      	mov	r2, r3
 80055b8:	2300      	movs	r3, #0
 80055ba:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055c2:	461a      	mov	r2, r3
 80055c4:	2300      	movs	r3, #0
 80055c6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055c8:	2300      	movs	r3, #0
 80055ca:	613b      	str	r3, [r7, #16]
 80055cc:	e043      	b.n	8005656 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	015a      	lsls	r2, r3, #5
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	4413      	add	r3, r2
 80055d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055e4:	d118      	bne.n	8005618 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d10a      	bne.n	8005602 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	015a      	lsls	r2, r3, #5
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	4413      	add	r3, r2
 80055f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f8:	461a      	mov	r2, r3
 80055fa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80055fe:	6013      	str	r3, [r2, #0]
 8005600:	e013      	b.n	800562a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	015a      	lsls	r2, r3, #5
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	4413      	add	r3, r2
 800560a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800560e:	461a      	mov	r2, r3
 8005610:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005614:	6013      	str	r3, [r2, #0]
 8005616:	e008      	b.n	800562a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	015a      	lsls	r2, r3, #5
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	4413      	add	r3, r2
 8005620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005624:	461a      	mov	r2, r3
 8005626:	2300      	movs	r3, #0
 8005628:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	015a      	lsls	r2, r3, #5
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	4413      	add	r3, r2
 8005632:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005636:	461a      	mov	r2, r3
 8005638:	2300      	movs	r3, #0
 800563a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	015a      	lsls	r2, r3, #5
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	4413      	add	r3, r2
 8005644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005648:	461a      	mov	r2, r3
 800564a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800564e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	3301      	adds	r3, #1
 8005654:	613b      	str	r3, [r7, #16]
 8005656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005658:	693a      	ldr	r2, [r7, #16]
 800565a:	429a      	cmp	r2, r3
 800565c:	d3b7      	bcc.n	80055ce <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800565e:	2300      	movs	r3, #0
 8005660:	613b      	str	r3, [r7, #16]
 8005662:	e043      	b.n	80056ec <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	015a      	lsls	r2, r3, #5
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	4413      	add	r3, r2
 800566c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005676:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800567a:	d118      	bne.n	80056ae <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d10a      	bne.n	8005698 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	015a      	lsls	r2, r3, #5
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	4413      	add	r3, r2
 800568a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800568e:	461a      	mov	r2, r3
 8005690:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005694:	6013      	str	r3, [r2, #0]
 8005696:	e013      	b.n	80056c0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	015a      	lsls	r2, r3, #5
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	4413      	add	r3, r2
 80056a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a4:	461a      	mov	r2, r3
 80056a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80056aa:	6013      	str	r3, [r2, #0]
 80056ac:	e008      	b.n	80056c0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	015a      	lsls	r2, r3, #5
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	4413      	add	r3, r2
 80056b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ba:	461a      	mov	r2, r3
 80056bc:	2300      	movs	r3, #0
 80056be:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	015a      	lsls	r2, r3, #5
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	4413      	add	r3, r2
 80056c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056cc:	461a      	mov	r2, r3
 80056ce:	2300      	movs	r3, #0
 80056d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	015a      	lsls	r2, r3, #5
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	4413      	add	r3, r2
 80056da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056de:	461a      	mov	r2, r3
 80056e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80056e4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	3301      	adds	r3, #1
 80056ea:	613b      	str	r3, [r7, #16]
 80056ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ee:	693a      	ldr	r2, [r7, #16]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d3b7      	bcc.n	8005664 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005702:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005706:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005714:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005718:	2b00      	cmp	r3, #0
 800571a:	d105      	bne.n	8005728 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	f043 0210 	orr.w	r2, r3, #16
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	699a      	ldr	r2, [r3, #24]
 800572c:	4b0e      	ldr	r3, [pc, #56]	; (8005768 <USB_DevInit+0x2b4>)
 800572e:	4313      	orrs	r3, r2
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005736:	2b00      	cmp	r3, #0
 8005738:	d005      	beq.n	8005746 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	f043 0208 	orr.w	r2, r3, #8
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005748:	2b01      	cmp	r3, #1
 800574a:	d105      	bne.n	8005758 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	699a      	ldr	r2, [r3, #24]
 8005750:	4b06      	ldr	r3, [pc, #24]	; (800576c <USB_DevInit+0x2b8>)
 8005752:	4313      	orrs	r3, r2
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005758:	7dfb      	ldrb	r3, [r7, #23]
}
 800575a:	4618      	mov	r0, r3
 800575c:	3718      	adds	r7, #24
 800575e:	46bd      	mov	sp, r7
 8005760:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005764:	b004      	add	sp, #16
 8005766:	4770      	bx	lr
 8005768:	803c3800 	.word	0x803c3800
 800576c:	40000004 	.word	0x40000004

08005770 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800577a:	2300      	movs	r3, #0
 800577c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	3301      	adds	r3, #1
 8005782:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	4a13      	ldr	r2, [pc, #76]	; (80057d4 <USB_FlushTxFifo+0x64>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d901      	bls.n	8005790 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	e01b      	b.n	80057c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	2b00      	cmp	r3, #0
 8005796:	daf2      	bge.n	800577e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005798:	2300      	movs	r3, #0
 800579a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	019b      	lsls	r3, r3, #6
 80057a0:	f043 0220 	orr.w	r2, r3, #32
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	3301      	adds	r3, #1
 80057ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	4a08      	ldr	r2, [pc, #32]	; (80057d4 <USB_FlushTxFifo+0x64>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d901      	bls.n	80057ba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e006      	b.n	80057c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	f003 0320 	and.w	r3, r3, #32
 80057c2:	2b20      	cmp	r3, #32
 80057c4:	d0f0      	beq.n	80057a8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80057c6:	2300      	movs	r3, #0
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3714      	adds	r7, #20
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr
 80057d4:	00030d40 	.word	0x00030d40

080057d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057e0:	2300      	movs	r3, #0
 80057e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	3301      	adds	r3, #1
 80057e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	4a11      	ldr	r2, [pc, #68]	; (8005834 <USB_FlushRxFifo+0x5c>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d901      	bls.n	80057f6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e018      	b.n	8005828 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	daf2      	bge.n	80057e4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80057fe:	2300      	movs	r3, #0
 8005800:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2210      	movs	r2, #16
 8005806:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	3301      	adds	r3, #1
 800580c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	4a08      	ldr	r2, [pc, #32]	; (8005834 <USB_FlushRxFifo+0x5c>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d901      	bls.n	800581a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	e006      	b.n	8005828 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	f003 0310 	and.w	r3, r3, #16
 8005822:	2b10      	cmp	r3, #16
 8005824:	d0f0      	beq.n	8005808 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005826:	2300      	movs	r3, #0
}
 8005828:	4618      	mov	r0, r3
 800582a:	3714      	adds	r7, #20
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr
 8005834:	00030d40 	.word	0x00030d40

08005838 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005838:	b480      	push	{r7}
 800583a:	b085      	sub	sp, #20
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	460b      	mov	r3, r1
 8005842:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	78fb      	ldrb	r3, [r7, #3]
 8005852:	68f9      	ldr	r1, [r7, #12]
 8005854:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005858:	4313      	orrs	r3, r2
 800585a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800585c:	2300      	movs	r3, #0
}
 800585e:	4618      	mov	r0, r3
 8005860:	3714      	adds	r7, #20
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr

0800586a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800586a:	b480      	push	{r7}
 800586c:	b085      	sub	sp, #20
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005884:	f023 0303 	bic.w	r3, r3, #3
 8005888:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	68fa      	ldr	r2, [r7, #12]
 8005894:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005898:	f043 0302 	orr.w	r3, r3, #2
 800589c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3714      	adds	r7, #20
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	695b      	ldr	r3, [r3, #20]
 80058b8:	f003 0301 	and.w	r3, r3, #1
}
 80058bc:	4618      	mov	r0, r3
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b085      	sub	sp, #20
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058d0:	2300      	movs	r3, #0
 80058d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	3301      	adds	r3, #1
 80058d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	4a13      	ldr	r2, [pc, #76]	; (800592c <USB_CoreReset+0x64>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d901      	bls.n	80058e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e01b      	b.n	800591e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	daf2      	bge.n	80058d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80058ee:	2300      	movs	r3, #0
 80058f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	f043 0201 	orr.w	r2, r3, #1
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	3301      	adds	r3, #1
 8005902:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	4a09      	ldr	r2, [pc, #36]	; (800592c <USB_CoreReset+0x64>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d901      	bls.n	8005910 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800590c:	2303      	movs	r3, #3
 800590e:	e006      	b.n	800591e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	f003 0301 	and.w	r3, r3, #1
 8005918:	2b01      	cmp	r3, #1
 800591a:	d0f0      	beq.n	80058fe <USB_CoreReset+0x36>

  return HAL_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3714      	adds	r7, #20
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	00030d40 	.word	0x00030d40

08005930 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 8005936:	4b87      	ldr	r3, [pc, #540]	; (8005b54 <MX_LWIP_Init+0x224>)
 8005938:	220a      	movs	r2, #10
 800593a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 102;
 800593c:	4b85      	ldr	r3, [pc, #532]	; (8005b54 <MX_LWIP_Init+0x224>)
 800593e:	2266      	movs	r2, #102	; 0x66
 8005940:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 2;
 8005942:	4b84      	ldr	r3, [pc, #528]	; (8005b54 <MX_LWIP_Init+0x224>)
 8005944:	2202      	movs	r2, #2
 8005946:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 86;
 8005948:	4b82      	ldr	r3, [pc, #520]	; (8005b54 <MX_LWIP_Init+0x224>)
 800594a:	2256      	movs	r2, #86	; 0x56
 800594c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800594e:	4b82      	ldr	r3, [pc, #520]	; (8005b58 <MX_LWIP_Init+0x228>)
 8005950:	22ff      	movs	r2, #255	; 0xff
 8005952:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8005954:	4b80      	ldr	r3, [pc, #512]	; (8005b58 <MX_LWIP_Init+0x228>)
 8005956:	22ff      	movs	r2, #255	; 0xff
 8005958:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800595a:	4b7f      	ldr	r3, [pc, #508]	; (8005b58 <MX_LWIP_Init+0x228>)
 800595c:	22ff      	movs	r2, #255	; 0xff
 800595e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8005960:	4b7d      	ldr	r3, [pc, #500]	; (8005b58 <MX_LWIP_Init+0x228>)
 8005962:	2200      	movs	r2, #0
 8005964:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 8005966:	4b7d      	ldr	r3, [pc, #500]	; (8005b5c <MX_LWIP_Init+0x22c>)
 8005968:	220a      	movs	r2, #10
 800596a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 102;
 800596c:	4b7b      	ldr	r3, [pc, #492]	; (8005b5c <MX_LWIP_Init+0x22c>)
 800596e:	2266      	movs	r2, #102	; 0x66
 8005970:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 2;
 8005972:	4b7a      	ldr	r3, [pc, #488]	; (8005b5c <MX_LWIP_Init+0x22c>)
 8005974:	2202      	movs	r2, #2
 8005976:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 254;
 8005978:	4b78      	ldr	r3, [pc, #480]	; (8005b5c <MX_LWIP_Init+0x22c>)
 800597a:	22fe      	movs	r2, #254	; 0xfe
 800597c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800597e:	f000 fd31 	bl	80063e4 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8005982:	4b74      	ldr	r3, [pc, #464]	; (8005b54 <MX_LWIP_Init+0x224>)
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	061a      	lsls	r2, r3, #24
 8005988:	4b72      	ldr	r3, [pc, #456]	; (8005b54 <MX_LWIP_Init+0x224>)
 800598a:	785b      	ldrb	r3, [r3, #1]
 800598c:	041b      	lsls	r3, r3, #16
 800598e:	431a      	orrs	r2, r3
 8005990:	4b70      	ldr	r3, [pc, #448]	; (8005b54 <MX_LWIP_Init+0x224>)
 8005992:	789b      	ldrb	r3, [r3, #2]
 8005994:	021b      	lsls	r3, r3, #8
 8005996:	4313      	orrs	r3, r2
 8005998:	4a6e      	ldr	r2, [pc, #440]	; (8005b54 <MX_LWIP_Init+0x224>)
 800599a:	78d2      	ldrb	r2, [r2, #3]
 800599c:	4313      	orrs	r3, r2
 800599e:	061a      	lsls	r2, r3, #24
 80059a0:	4b6c      	ldr	r3, [pc, #432]	; (8005b54 <MX_LWIP_Init+0x224>)
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	0619      	lsls	r1, r3, #24
 80059a6:	4b6b      	ldr	r3, [pc, #428]	; (8005b54 <MX_LWIP_Init+0x224>)
 80059a8:	785b      	ldrb	r3, [r3, #1]
 80059aa:	041b      	lsls	r3, r3, #16
 80059ac:	4319      	orrs	r1, r3
 80059ae:	4b69      	ldr	r3, [pc, #420]	; (8005b54 <MX_LWIP_Init+0x224>)
 80059b0:	789b      	ldrb	r3, [r3, #2]
 80059b2:	021b      	lsls	r3, r3, #8
 80059b4:	430b      	orrs	r3, r1
 80059b6:	4967      	ldr	r1, [pc, #412]	; (8005b54 <MX_LWIP_Init+0x224>)
 80059b8:	78c9      	ldrb	r1, [r1, #3]
 80059ba:	430b      	orrs	r3, r1
 80059bc:	021b      	lsls	r3, r3, #8
 80059be:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80059c2:	431a      	orrs	r2, r3
 80059c4:	4b63      	ldr	r3, [pc, #396]	; (8005b54 <MX_LWIP_Init+0x224>)
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	0619      	lsls	r1, r3, #24
 80059ca:	4b62      	ldr	r3, [pc, #392]	; (8005b54 <MX_LWIP_Init+0x224>)
 80059cc:	785b      	ldrb	r3, [r3, #1]
 80059ce:	041b      	lsls	r3, r3, #16
 80059d0:	4319      	orrs	r1, r3
 80059d2:	4b60      	ldr	r3, [pc, #384]	; (8005b54 <MX_LWIP_Init+0x224>)
 80059d4:	789b      	ldrb	r3, [r3, #2]
 80059d6:	021b      	lsls	r3, r3, #8
 80059d8:	430b      	orrs	r3, r1
 80059da:	495e      	ldr	r1, [pc, #376]	; (8005b54 <MX_LWIP_Init+0x224>)
 80059dc:	78c9      	ldrb	r1, [r1, #3]
 80059de:	430b      	orrs	r3, r1
 80059e0:	0a1b      	lsrs	r3, r3, #8
 80059e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80059e6:	431a      	orrs	r2, r3
 80059e8:	4b5a      	ldr	r3, [pc, #360]	; (8005b54 <MX_LWIP_Init+0x224>)
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	0619      	lsls	r1, r3, #24
 80059ee:	4b59      	ldr	r3, [pc, #356]	; (8005b54 <MX_LWIP_Init+0x224>)
 80059f0:	785b      	ldrb	r3, [r3, #1]
 80059f2:	041b      	lsls	r3, r3, #16
 80059f4:	4319      	orrs	r1, r3
 80059f6:	4b57      	ldr	r3, [pc, #348]	; (8005b54 <MX_LWIP_Init+0x224>)
 80059f8:	789b      	ldrb	r3, [r3, #2]
 80059fa:	021b      	lsls	r3, r3, #8
 80059fc:	430b      	orrs	r3, r1
 80059fe:	4955      	ldr	r1, [pc, #340]	; (8005b54 <MX_LWIP_Init+0x224>)
 8005a00:	78c9      	ldrb	r1, [r1, #3]
 8005a02:	430b      	orrs	r3, r1
 8005a04:	0e1b      	lsrs	r3, r3, #24
 8005a06:	4313      	orrs	r3, r2
 8005a08:	4a55      	ldr	r2, [pc, #340]	; (8005b60 <MX_LWIP_Init+0x230>)
 8005a0a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8005a0c:	4b52      	ldr	r3, [pc, #328]	; (8005b58 <MX_LWIP_Init+0x228>)
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	061a      	lsls	r2, r3, #24
 8005a12:	4b51      	ldr	r3, [pc, #324]	; (8005b58 <MX_LWIP_Init+0x228>)
 8005a14:	785b      	ldrb	r3, [r3, #1]
 8005a16:	041b      	lsls	r3, r3, #16
 8005a18:	431a      	orrs	r2, r3
 8005a1a:	4b4f      	ldr	r3, [pc, #316]	; (8005b58 <MX_LWIP_Init+0x228>)
 8005a1c:	789b      	ldrb	r3, [r3, #2]
 8005a1e:	021b      	lsls	r3, r3, #8
 8005a20:	4313      	orrs	r3, r2
 8005a22:	4a4d      	ldr	r2, [pc, #308]	; (8005b58 <MX_LWIP_Init+0x228>)
 8005a24:	78d2      	ldrb	r2, [r2, #3]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	061a      	lsls	r2, r3, #24
 8005a2a:	4b4b      	ldr	r3, [pc, #300]	; (8005b58 <MX_LWIP_Init+0x228>)
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	0619      	lsls	r1, r3, #24
 8005a30:	4b49      	ldr	r3, [pc, #292]	; (8005b58 <MX_LWIP_Init+0x228>)
 8005a32:	785b      	ldrb	r3, [r3, #1]
 8005a34:	041b      	lsls	r3, r3, #16
 8005a36:	4319      	orrs	r1, r3
 8005a38:	4b47      	ldr	r3, [pc, #284]	; (8005b58 <MX_LWIP_Init+0x228>)
 8005a3a:	789b      	ldrb	r3, [r3, #2]
 8005a3c:	021b      	lsls	r3, r3, #8
 8005a3e:	430b      	orrs	r3, r1
 8005a40:	4945      	ldr	r1, [pc, #276]	; (8005b58 <MX_LWIP_Init+0x228>)
 8005a42:	78c9      	ldrb	r1, [r1, #3]
 8005a44:	430b      	orrs	r3, r1
 8005a46:	021b      	lsls	r3, r3, #8
 8005a48:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005a4c:	431a      	orrs	r2, r3
 8005a4e:	4b42      	ldr	r3, [pc, #264]	; (8005b58 <MX_LWIP_Init+0x228>)
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	0619      	lsls	r1, r3, #24
 8005a54:	4b40      	ldr	r3, [pc, #256]	; (8005b58 <MX_LWIP_Init+0x228>)
 8005a56:	785b      	ldrb	r3, [r3, #1]
 8005a58:	041b      	lsls	r3, r3, #16
 8005a5a:	4319      	orrs	r1, r3
 8005a5c:	4b3e      	ldr	r3, [pc, #248]	; (8005b58 <MX_LWIP_Init+0x228>)
 8005a5e:	789b      	ldrb	r3, [r3, #2]
 8005a60:	021b      	lsls	r3, r3, #8
 8005a62:	430b      	orrs	r3, r1
 8005a64:	493c      	ldr	r1, [pc, #240]	; (8005b58 <MX_LWIP_Init+0x228>)
 8005a66:	78c9      	ldrb	r1, [r1, #3]
 8005a68:	430b      	orrs	r3, r1
 8005a6a:	0a1b      	lsrs	r3, r3, #8
 8005a6c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005a70:	431a      	orrs	r2, r3
 8005a72:	4b39      	ldr	r3, [pc, #228]	; (8005b58 <MX_LWIP_Init+0x228>)
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	0619      	lsls	r1, r3, #24
 8005a78:	4b37      	ldr	r3, [pc, #220]	; (8005b58 <MX_LWIP_Init+0x228>)
 8005a7a:	785b      	ldrb	r3, [r3, #1]
 8005a7c:	041b      	lsls	r3, r3, #16
 8005a7e:	4319      	orrs	r1, r3
 8005a80:	4b35      	ldr	r3, [pc, #212]	; (8005b58 <MX_LWIP_Init+0x228>)
 8005a82:	789b      	ldrb	r3, [r3, #2]
 8005a84:	021b      	lsls	r3, r3, #8
 8005a86:	430b      	orrs	r3, r1
 8005a88:	4933      	ldr	r1, [pc, #204]	; (8005b58 <MX_LWIP_Init+0x228>)
 8005a8a:	78c9      	ldrb	r1, [r1, #3]
 8005a8c:	430b      	orrs	r3, r1
 8005a8e:	0e1b      	lsrs	r3, r3, #24
 8005a90:	4313      	orrs	r3, r2
 8005a92:	4a34      	ldr	r2, [pc, #208]	; (8005b64 <MX_LWIP_Init+0x234>)
 8005a94:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8005a96:	4b31      	ldr	r3, [pc, #196]	; (8005b5c <MX_LWIP_Init+0x22c>)
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	061a      	lsls	r2, r3, #24
 8005a9c:	4b2f      	ldr	r3, [pc, #188]	; (8005b5c <MX_LWIP_Init+0x22c>)
 8005a9e:	785b      	ldrb	r3, [r3, #1]
 8005aa0:	041b      	lsls	r3, r3, #16
 8005aa2:	431a      	orrs	r2, r3
 8005aa4:	4b2d      	ldr	r3, [pc, #180]	; (8005b5c <MX_LWIP_Init+0x22c>)
 8005aa6:	789b      	ldrb	r3, [r3, #2]
 8005aa8:	021b      	lsls	r3, r3, #8
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	4a2b      	ldr	r2, [pc, #172]	; (8005b5c <MX_LWIP_Init+0x22c>)
 8005aae:	78d2      	ldrb	r2, [r2, #3]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	061a      	lsls	r2, r3, #24
 8005ab4:	4b29      	ldr	r3, [pc, #164]	; (8005b5c <MX_LWIP_Init+0x22c>)
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	0619      	lsls	r1, r3, #24
 8005aba:	4b28      	ldr	r3, [pc, #160]	; (8005b5c <MX_LWIP_Init+0x22c>)
 8005abc:	785b      	ldrb	r3, [r3, #1]
 8005abe:	041b      	lsls	r3, r3, #16
 8005ac0:	4319      	orrs	r1, r3
 8005ac2:	4b26      	ldr	r3, [pc, #152]	; (8005b5c <MX_LWIP_Init+0x22c>)
 8005ac4:	789b      	ldrb	r3, [r3, #2]
 8005ac6:	021b      	lsls	r3, r3, #8
 8005ac8:	430b      	orrs	r3, r1
 8005aca:	4924      	ldr	r1, [pc, #144]	; (8005b5c <MX_LWIP_Init+0x22c>)
 8005acc:	78c9      	ldrb	r1, [r1, #3]
 8005ace:	430b      	orrs	r3, r1
 8005ad0:	021b      	lsls	r3, r3, #8
 8005ad2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005ad6:	431a      	orrs	r2, r3
 8005ad8:	4b20      	ldr	r3, [pc, #128]	; (8005b5c <MX_LWIP_Init+0x22c>)
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	0619      	lsls	r1, r3, #24
 8005ade:	4b1f      	ldr	r3, [pc, #124]	; (8005b5c <MX_LWIP_Init+0x22c>)
 8005ae0:	785b      	ldrb	r3, [r3, #1]
 8005ae2:	041b      	lsls	r3, r3, #16
 8005ae4:	4319      	orrs	r1, r3
 8005ae6:	4b1d      	ldr	r3, [pc, #116]	; (8005b5c <MX_LWIP_Init+0x22c>)
 8005ae8:	789b      	ldrb	r3, [r3, #2]
 8005aea:	021b      	lsls	r3, r3, #8
 8005aec:	430b      	orrs	r3, r1
 8005aee:	491b      	ldr	r1, [pc, #108]	; (8005b5c <MX_LWIP_Init+0x22c>)
 8005af0:	78c9      	ldrb	r1, [r1, #3]
 8005af2:	430b      	orrs	r3, r1
 8005af4:	0a1b      	lsrs	r3, r3, #8
 8005af6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005afa:	431a      	orrs	r2, r3
 8005afc:	4b17      	ldr	r3, [pc, #92]	; (8005b5c <MX_LWIP_Init+0x22c>)
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	0619      	lsls	r1, r3, #24
 8005b02:	4b16      	ldr	r3, [pc, #88]	; (8005b5c <MX_LWIP_Init+0x22c>)
 8005b04:	785b      	ldrb	r3, [r3, #1]
 8005b06:	041b      	lsls	r3, r3, #16
 8005b08:	4319      	orrs	r1, r3
 8005b0a:	4b14      	ldr	r3, [pc, #80]	; (8005b5c <MX_LWIP_Init+0x22c>)
 8005b0c:	789b      	ldrb	r3, [r3, #2]
 8005b0e:	021b      	lsls	r3, r3, #8
 8005b10:	430b      	orrs	r3, r1
 8005b12:	4912      	ldr	r1, [pc, #72]	; (8005b5c <MX_LWIP_Init+0x22c>)
 8005b14:	78c9      	ldrb	r1, [r1, #3]
 8005b16:	430b      	orrs	r3, r1
 8005b18:	0e1b      	lsrs	r3, r3, #24
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	4a12      	ldr	r2, [pc, #72]	; (8005b68 <MX_LWIP_Init+0x238>)
 8005b1e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8005b20:	4b12      	ldr	r3, [pc, #72]	; (8005b6c <MX_LWIP_Init+0x23c>)
 8005b22:	9302      	str	r3, [sp, #8]
 8005b24:	4b12      	ldr	r3, [pc, #72]	; (8005b70 <MX_LWIP_Init+0x240>)
 8005b26:	9301      	str	r3, [sp, #4]
 8005b28:	2300      	movs	r3, #0
 8005b2a:	9300      	str	r3, [sp, #0]
 8005b2c:	4b0e      	ldr	r3, [pc, #56]	; (8005b68 <MX_LWIP_Init+0x238>)
 8005b2e:	4a0d      	ldr	r2, [pc, #52]	; (8005b64 <MX_LWIP_Init+0x234>)
 8005b30:	490b      	ldr	r1, [pc, #44]	; (8005b60 <MX_LWIP_Init+0x230>)
 8005b32:	4810      	ldr	r0, [pc, #64]	; (8005b74 <MX_LWIP_Init+0x244>)
 8005b34:	f001 f942 	bl	8006dbc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005b38:	480e      	ldr	r0, [pc, #56]	; (8005b74 <MX_LWIP_Init+0x244>)
 8005b3a:	f001 faf1 	bl	8007120 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8005b3e:	480d      	ldr	r0, [pc, #52]	; (8005b74 <MX_LWIP_Init+0x244>)
 8005b40:	f001 fafe 	bl	8007140 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8005b44:	490c      	ldr	r1, [pc, #48]	; (8005b78 <MX_LWIP_Init+0x248>)
 8005b46:	480b      	ldr	r0, [pc, #44]	; (8005b74 <MX_LWIP_Init+0x244>)
 8005b48:	f001 fbfc 	bl	8007344 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005b4c:	bf00      	nop
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	20000894 	.word	0x20000894
 8005b58:	20000898 	.word	0x20000898
 8005b5c:	2000089c 	.word	0x2000089c
 8005b60:	20000888 	.word	0x20000888
 8005b64:	2000088c 	.word	0x2000088c
 8005b68:	20000890 	.word	0x20000890
 8005b6c:	08010469 	.word	0x08010469
 8005b70:	08005ee1 	.word	0x08005ee1
 8005b74:	20000854 	.word	0x20000854
 8005b78:	08005bcd 	.word	0x08005bcd

08005b7c <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8005b84:	f7fb fc08 	bl	8001398 <HAL_GetTick>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	4b08      	ldr	r3, [pc, #32]	; (8005bac <Ethernet_Link_Periodic_Handle+0x30>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	2b63      	cmp	r3, #99	; 0x63
 8005b92:	d907      	bls.n	8005ba4 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8005b94:	f7fb fc00 	bl	8001398 <HAL_GetTick>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	4a04      	ldr	r2, [pc, #16]	; (8005bac <Ethernet_Link_Periodic_Handle+0x30>)
 8005b9c:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 faf4 	bl	800618c <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8005ba4:	bf00      	nop
 8005ba6:	3708      	adds	r7, #8
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	20000850 	.word	0x20000850

08005bb0 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8005bb4:	4804      	ldr	r0, [pc, #16]	; (8005bc8 <MX_LWIP_Process+0x18>)
 8005bb6:	f000 f973 	bl	8005ea0 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8005bba:	f007 fcd7 	bl	800d56c <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8005bbe:	4802      	ldr	r0, [pc, #8]	; (8005bc8 <MX_LWIP_Process+0x18>)
 8005bc0:	f7ff ffdc 	bl	8005b7c <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8005bc4:	bf00      	nop
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	20000854 	.word	0x20000854

08005bcc <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8005bd4:	bf00      	nop
 8005bd6:	370c      	adds	r7, #12
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <SCB_InvalidateDCache_by_Addr>:
{
 8005be0:	b480      	push	{r7}
 8005be2:	b087      	sub	sp, #28
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8005bf2:	2320      	movs	r3, #32
 8005bf4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005bf6:	f3bf 8f4f 	dsb	sy
}
 8005bfa:	bf00      	nop
    while (op_size > 0) {
 8005bfc:	e00b      	b.n	8005c16 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8005bfe:	4a0d      	ldr	r2, [pc, #52]	; (8005c34 <SCB_InvalidateDCache_by_Addr+0x54>)
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	693a      	ldr	r2, [r7, #16]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8005c0e:	697a      	ldr	r2, [r7, #20]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	dcf0      	bgt.n	8005bfe <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8005c1c:	f3bf 8f4f 	dsb	sy
}
 8005c20:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005c22:	f3bf 8f6f 	isb	sy
}
 8005c26:	bf00      	nop
}
 8005c28:	bf00      	nop
 8005c2a:	371c      	adds	r7, #28
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr
 8005c34:	e000ed00 	.word	0xe000ed00

08005c38 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8005c40:	2300      	movs	r3, #0
 8005c42:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005c44:	4b40      	ldr	r3, [pc, #256]	; (8005d48 <low_level_init+0x110>)
 8005c46:	4a41      	ldr	r2, [pc, #260]	; (8005d4c <low_level_init+0x114>)
 8005c48:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8005c4e:	2380      	movs	r3, #128	; 0x80
 8005c50:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8005c52:	23e1      	movs	r3, #225	; 0xe1
 8005c54:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8005c56:	2300      	movs	r3, #0
 8005c58:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8005c62:	4a39      	ldr	r2, [pc, #228]	; (8005d48 <low_level_init+0x110>)
 8005c64:	f107 0308 	add.w	r3, r7, #8
 8005c68:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005c6a:	4b37      	ldr	r3, [pc, #220]	; (8005d48 <low_level_init+0x110>)
 8005c6c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005c70:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8005c72:	4b35      	ldr	r3, [pc, #212]	; (8005d48 <low_level_init+0x110>)
 8005c74:	4a36      	ldr	r2, [pc, #216]	; (8005d50 <low_level_init+0x118>)
 8005c76:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005c78:	4b33      	ldr	r3, [pc, #204]	; (8005d48 <low_level_init+0x110>)
 8005c7a:	4a36      	ldr	r2, [pc, #216]	; (8005d54 <low_level_init+0x11c>)
 8005c7c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8005c7e:	4b32      	ldr	r3, [pc, #200]	; (8005d48 <low_level_init+0x110>)
 8005c80:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005c84:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005c86:	4830      	ldr	r0, [pc, #192]	; (8005d48 <low_level_init+0x110>)
 8005c88:	f7fb fcc8 	bl	800161c <HAL_ETH_Init>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005c90:	2238      	movs	r2, #56	; 0x38
 8005c92:	2100      	movs	r1, #0
 8005c94:	4830      	ldr	r0, [pc, #192]	; (8005d58 <low_level_init+0x120>)
 8005c96:	f00a fe22 	bl	80108de <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005c9a:	4b2f      	ldr	r3, [pc, #188]	; (8005d58 <low_level_init+0x120>)
 8005c9c:	2221      	movs	r2, #33	; 0x21
 8005c9e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005ca0:	4b2d      	ldr	r3, [pc, #180]	; (8005d58 <low_level_init+0x120>)
 8005ca2:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8005ca6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8005ca8:	4b2b      	ldr	r3, [pc, #172]	; (8005d58 <low_level_init+0x120>)
 8005caa:	2200      	movs	r2, #0
 8005cac:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005cae:	482b      	ldr	r0, [pc, #172]	; (8005d5c <low_level_init+0x124>)
 8005cb0:	f000 ff4c 	bl	8006b4c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2206      	movs	r2, #6
 8005cb8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005cbc:	4b22      	ldr	r3, [pc, #136]	; (8005d48 <low_level_init+0x110>)
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	781a      	ldrb	r2, [r3, #0]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005cc8:	4b1f      	ldr	r3, [pc, #124]	; (8005d48 <low_level_init+0x110>)
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	785a      	ldrb	r2, [r3, #1]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005cd4:	4b1c      	ldr	r3, [pc, #112]	; (8005d48 <low_level_init+0x110>)
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	789a      	ldrb	r2, [r3, #2]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005ce0:	4b19      	ldr	r3, [pc, #100]	; (8005d48 <low_level_init+0x110>)
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	78da      	ldrb	r2, [r3, #3]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005cec:	4b16      	ldr	r3, [pc, #88]	; (8005d48 <low_level_init+0x110>)
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	791a      	ldrb	r2, [r3, #4]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005cf8:	4b13      	ldr	r3, [pc, #76]	; (8005d48 <low_level_init+0x110>)
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	795a      	ldrb	r2, [r3, #5]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005d0a:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005d12:	f043 030a 	orr.w	r3, r3, #10
 8005d16:	b2da      	uxtb	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8005d1e:	4910      	ldr	r1, [pc, #64]	; (8005d60 <low_level_init+0x128>)
 8005d20:	4810      	ldr	r0, [pc, #64]	; (8005d64 <low_level_init+0x12c>)
 8005d22:	f7fb f986 	bl	8001032 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8005d26:	480f      	ldr	r0, [pc, #60]	; (8005d64 <low_level_init+0x12c>)
 8005d28:	f7fb f9b5 	bl	8001096 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8005d2c:	7bfb      	ldrb	r3, [r7, #15]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d103      	bne.n	8005d3a <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 fa2a 	bl	800618c <ethernet_link_check_state>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 8005d38:	e001      	b.n	8005d3e <low_level_init+0x106>
    Error_Handler();
 8005d3a:	f7fa fe55 	bl	80009e8 <Error_Handler>
}
 8005d3e:	bf00      	nop
 8005d40:	3710      	adds	r7, #16
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	2000522c 	.word	0x2000522c
 8005d4c:	40028000 	.word	0x40028000
 8005d50:	20000128 	.word	0x20000128
 8005d54:	20000088 	.word	0x20000088
 8005d58:	200052dc 	.word	0x200052dc
 8005d5c:	08014074 	.word	0x08014074
 8005d60:	2000000c 	.word	0x2000000c
 8005d64:	20005314 	.word	0x20005314

08005d68 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b092      	sub	sp, #72	; 0x48
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8005d72:	2300      	movs	r3, #0
 8005d74:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8005d76:	2300      	movs	r3, #0
 8005d78:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8005d80:	f107 030c 	add.w	r3, r7, #12
 8005d84:	2230      	movs	r2, #48	; 0x30
 8005d86:	2100      	movs	r1, #0
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f00a fda8 	bl	80108de <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8005d8e:	f107 030c 	add.w	r3, r7, #12
 8005d92:	2230      	movs	r2, #48	; 0x30
 8005d94:	2100      	movs	r1, #0
 8005d96:	4618      	mov	r0, r3
 8005d98:	f00a fda1 	bl	80108de <memset>

  for(q = p; q != NULL; q = q->next)
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	643b      	str	r3, [r7, #64]	; 0x40
 8005da0:	e045      	b.n	8005e2e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8005da2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005da4:	2b03      	cmp	r3, #3
 8005da6:	d902      	bls.n	8005dae <low_level_output+0x46>
      return ERR_IF;
 8005da8:	f06f 030b 	mvn.w	r3, #11
 8005dac:	e055      	b.n	8005e5a <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8005dae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005db0:	6859      	ldr	r1, [r3, #4]
 8005db2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005db4:	4613      	mov	r3, r2
 8005db6:	005b      	lsls	r3, r3, #1
 8005db8:	4413      	add	r3, r2
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	3348      	adds	r3, #72	; 0x48
 8005dbe:	443b      	add	r3, r7
 8005dc0:	3b3c      	subs	r3, #60	; 0x3c
 8005dc2:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dc6:	895b      	ldrh	r3, [r3, #10]
 8005dc8:	4619      	mov	r1, r3
 8005dca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dcc:	4613      	mov	r3, r2
 8005dce:	005b      	lsls	r3, r3, #1
 8005dd0:	4413      	add	r3, r2
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	3348      	adds	r3, #72	; 0x48
 8005dd6:	443b      	add	r3, r7
 8005dd8:	3b38      	subs	r3, #56	; 0x38
 8005dda:	6019      	str	r1, [r3, #0]

    if(i>0)
 8005ddc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d011      	beq.n	8005e06 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8005de2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005de4:	1e5a      	subs	r2, r3, #1
 8005de6:	f107 000c 	add.w	r0, r7, #12
 8005dea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005dec:	460b      	mov	r3, r1
 8005dee:	005b      	lsls	r3, r3, #1
 8005df0:	440b      	add	r3, r1
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	18c1      	adds	r1, r0, r3
 8005df6:	4613      	mov	r3, r2
 8005df8:	005b      	lsls	r3, r3, #1
 8005dfa:	4413      	add	r3, r2
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	3348      	adds	r3, #72	; 0x48
 8005e00:	443b      	add	r3, r7
 8005e02:	3b34      	subs	r3, #52	; 0x34
 8005e04:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8005e06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d109      	bne.n	8005e22 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8005e0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e10:	4613      	mov	r3, r2
 8005e12:	005b      	lsls	r3, r3, #1
 8005e14:	4413      	add	r3, r2
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	3348      	adds	r3, #72	; 0x48
 8005e1a:	443b      	add	r3, r7
 8005e1c:	3b34      	subs	r3, #52	; 0x34
 8005e1e:	2200      	movs	r2, #0
 8005e20:	601a      	str	r2, [r3, #0]
    }

    i++;
 8005e22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e24:	3301      	adds	r3, #1
 8005e26:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8005e28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	643b      	str	r3, [r7, #64]	; 0x40
 8005e2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d1b6      	bne.n	8005da2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	891b      	ldrh	r3, [r3, #8]
 8005e38:	461a      	mov	r2, r3
 8005e3a:	4b0a      	ldr	r3, [pc, #40]	; (8005e64 <low_level_output+0xfc>)
 8005e3c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8005e3e:	4a09      	ldr	r2, [pc, #36]	; (8005e64 <low_level_output+0xfc>)
 8005e40:	f107 030c 	add.w	r3, r7, #12
 8005e44:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8005e46:	4a07      	ldr	r2, [pc, #28]	; (8005e64 <low_level_output+0xfc>)
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8005e4c:	2214      	movs	r2, #20
 8005e4e:	4905      	ldr	r1, [pc, #20]	; (8005e64 <low_level_output+0xfc>)
 8005e50:	4805      	ldr	r0, [pc, #20]	; (8005e68 <low_level_output+0x100>)
 8005e52:	f7fb fd17 	bl	8001884 <HAL_ETH_Transmit>

  return errval;
 8005e56:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3748      	adds	r7, #72	; 0x48
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	200052dc 	.word	0x200052dc
 8005e68:	2000522c 	.word	0x2000522c

08005e6c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005e74:	2300      	movs	r3, #0
 8005e76:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8005e78:	4b07      	ldr	r3, [pc, #28]	; (8005e98 <low_level_input+0x2c>)
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d105      	bne.n	8005e8c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8005e80:	f107 030c 	add.w	r3, r7, #12
 8005e84:	4619      	mov	r1, r3
 8005e86:	4805      	ldr	r0, [pc, #20]	; (8005e9c <low_level_input+0x30>)
 8005e88:	f7fb fd90 	bl	80019ac <HAL_ETH_ReadData>
  }

  return p;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3710      	adds	r7, #16
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	20005228 	.word	0x20005228
 8005e9c:	2000522c 	.word	0x2000522c

08005ea0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f7ff ffdd 	bl	8005e6c <low_level_input>
 8005eb2:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d00a      	beq.n	8005ed0 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	6879      	ldr	r1, [r7, #4]
 8005ec0:	68f8      	ldr	r0, [r7, #12]
 8005ec2:	4798      	blx	r3
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d002      	beq.n	8005ed0 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8005eca:	68f8      	ldr	r0, [r7, #12]
 8005ecc:	f001 fdba 	bl	8007a44 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d1ea      	bne.n	8005eac <ethernetif_input+0xc>
}
 8005ed6:	bf00      	nop
 8005ed8:	bf00      	nop
 8005eda:	3710      	adds	r7, #16
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d106      	bne.n	8005efc <ethernetif_init+0x1c>
 8005eee:	4b0e      	ldr	r3, [pc, #56]	; (8005f28 <ethernetif_init+0x48>)
 8005ef0:	f240 127b 	movw	r2, #379	; 0x17b
 8005ef4:	490d      	ldr	r1, [pc, #52]	; (8005f2c <ethernetif_init+0x4c>)
 8005ef6:	480e      	ldr	r0, [pc, #56]	; (8005f30 <ethernetif_init+0x50>)
 8005ef8:	f00a fc8c 	bl	8010814 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2273      	movs	r2, #115	; 0x73
 8005f00:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2274      	movs	r2, #116	; 0x74
 8005f08:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a09      	ldr	r2, [pc, #36]	; (8005f34 <ethernetif_init+0x54>)
 8005f10:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4a08      	ldr	r2, [pc, #32]	; (8005f38 <ethernetif_init+0x58>)
 8005f16:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f7ff fe8d 	bl	8005c38 <low_level_init>

  return ERR_OK;
 8005f1e:	2300      	movs	r3, #0
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3708      	adds	r7, #8
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	0801167c 	.word	0x0801167c
 8005f2c:	08011698 	.word	0x08011698
 8005f30:	080116a8 	.word	0x080116a8
 8005f34:	0800e921 	.word	0x0800e921
 8005f38:	08005d69 	.word	0x08005d69

08005f3c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8005f48:	68f9      	ldr	r1, [r7, #12]
 8005f4a:	4807      	ldr	r0, [pc, #28]	; (8005f68 <pbuf_free_custom+0x2c>)
 8005f4c:	f000 fee0 	bl	8006d10 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8005f50:	4b06      	ldr	r3, [pc, #24]	; (8005f6c <pbuf_free_custom+0x30>)
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d102      	bne.n	8005f5e <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8005f58:	4b04      	ldr	r3, [pc, #16]	; (8005f6c <pbuf_free_custom+0x30>)
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	701a      	strb	r2, [r3, #0]
  }
}
 8005f5e:	bf00      	nop
 8005f60:	3710      	adds	r7, #16
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	08014074 	.word	0x08014074
 8005f6c:	20005228 	.word	0x20005228

08005f70 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005f74:	f7fb fa10 	bl	8001398 <HAL_GetTick>
 8005f78:	4603      	mov	r3, r0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	bd80      	pop	{r7, pc}
	...

08005f80 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b08e      	sub	sp, #56	; 0x38
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	601a      	str	r2, [r3, #0]
 8005f90:	605a      	str	r2, [r3, #4]
 8005f92:	609a      	str	r2, [r3, #8]
 8005f94:	60da      	str	r2, [r3, #12]
 8005f96:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a4e      	ldr	r2, [pc, #312]	; (80060d8 <HAL_ETH_MspInit+0x158>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	f040 8096 	bne.w	80060d0 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005fa4:	4b4d      	ldr	r3, [pc, #308]	; (80060dc <HAL_ETH_MspInit+0x15c>)
 8005fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa8:	4a4c      	ldr	r2, [pc, #304]	; (80060dc <HAL_ETH_MspInit+0x15c>)
 8005faa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005fae:	6313      	str	r3, [r2, #48]	; 0x30
 8005fb0:	4b4a      	ldr	r3, [pc, #296]	; (80060dc <HAL_ETH_MspInit+0x15c>)
 8005fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fb8:	623b      	str	r3, [r7, #32]
 8005fba:	6a3b      	ldr	r3, [r7, #32]
 8005fbc:	4b47      	ldr	r3, [pc, #284]	; (80060dc <HAL_ETH_MspInit+0x15c>)
 8005fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc0:	4a46      	ldr	r2, [pc, #280]	; (80060dc <HAL_ETH_MspInit+0x15c>)
 8005fc2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005fc6:	6313      	str	r3, [r2, #48]	; 0x30
 8005fc8:	4b44      	ldr	r3, [pc, #272]	; (80060dc <HAL_ETH_MspInit+0x15c>)
 8005fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fcc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005fd0:	61fb      	str	r3, [r7, #28]
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	4b41      	ldr	r3, [pc, #260]	; (80060dc <HAL_ETH_MspInit+0x15c>)
 8005fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd8:	4a40      	ldr	r2, [pc, #256]	; (80060dc <HAL_ETH_MspInit+0x15c>)
 8005fda:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005fde:	6313      	str	r3, [r2, #48]	; 0x30
 8005fe0:	4b3e      	ldr	r3, [pc, #248]	; (80060dc <HAL_ETH_MspInit+0x15c>)
 8005fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fe8:	61bb      	str	r3, [r7, #24]
 8005fea:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005fec:	4b3b      	ldr	r3, [pc, #236]	; (80060dc <HAL_ETH_MspInit+0x15c>)
 8005fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff0:	4a3a      	ldr	r2, [pc, #232]	; (80060dc <HAL_ETH_MspInit+0x15c>)
 8005ff2:	f043 0304 	orr.w	r3, r3, #4
 8005ff6:	6313      	str	r3, [r2, #48]	; 0x30
 8005ff8:	4b38      	ldr	r3, [pc, #224]	; (80060dc <HAL_ETH_MspInit+0x15c>)
 8005ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ffc:	f003 0304 	and.w	r3, r3, #4
 8006000:	617b      	str	r3, [r7, #20]
 8006002:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006004:	4b35      	ldr	r3, [pc, #212]	; (80060dc <HAL_ETH_MspInit+0x15c>)
 8006006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006008:	4a34      	ldr	r2, [pc, #208]	; (80060dc <HAL_ETH_MspInit+0x15c>)
 800600a:	f043 0301 	orr.w	r3, r3, #1
 800600e:	6313      	str	r3, [r2, #48]	; 0x30
 8006010:	4b32      	ldr	r3, [pc, #200]	; (80060dc <HAL_ETH_MspInit+0x15c>)
 8006012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006014:	f003 0301 	and.w	r3, r3, #1
 8006018:	613b      	str	r3, [r7, #16]
 800601a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800601c:	4b2f      	ldr	r3, [pc, #188]	; (80060dc <HAL_ETH_MspInit+0x15c>)
 800601e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006020:	4a2e      	ldr	r2, [pc, #184]	; (80060dc <HAL_ETH_MspInit+0x15c>)
 8006022:	f043 0302 	orr.w	r3, r3, #2
 8006026:	6313      	str	r3, [r2, #48]	; 0x30
 8006028:	4b2c      	ldr	r3, [pc, #176]	; (80060dc <HAL_ETH_MspInit+0x15c>)
 800602a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800602c:	f003 0302 	and.w	r3, r3, #2
 8006030:	60fb      	str	r3, [r7, #12]
 8006032:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006034:	4b29      	ldr	r3, [pc, #164]	; (80060dc <HAL_ETH_MspInit+0x15c>)
 8006036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006038:	4a28      	ldr	r2, [pc, #160]	; (80060dc <HAL_ETH_MspInit+0x15c>)
 800603a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800603e:	6313      	str	r3, [r2, #48]	; 0x30
 8006040:	4b26      	ldr	r3, [pc, #152]	; (80060dc <HAL_ETH_MspInit+0x15c>)
 8006042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006048:	60bb      	str	r3, [r7, #8]
 800604a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800604c:	2332      	movs	r3, #50	; 0x32
 800604e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006050:	2302      	movs	r3, #2
 8006052:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006054:	2300      	movs	r3, #0
 8006056:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006058:	2303      	movs	r3, #3
 800605a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800605c:	230b      	movs	r3, #11
 800605e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006060:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006064:	4619      	mov	r1, r3
 8006066:	481e      	ldr	r0, [pc, #120]	; (80060e0 <HAL_ETH_MspInit+0x160>)
 8006068:	f7fc fbca 	bl	8002800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800606c:	2386      	movs	r3, #134	; 0x86
 800606e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006070:	2302      	movs	r3, #2
 8006072:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006074:	2300      	movs	r3, #0
 8006076:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006078:	2303      	movs	r3, #3
 800607a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800607c:	230b      	movs	r3, #11
 800607e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006080:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006084:	4619      	mov	r1, r3
 8006086:	4817      	ldr	r0, [pc, #92]	; (80060e4 <HAL_ETH_MspInit+0x164>)
 8006088:	f7fc fbba 	bl	8002800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800608c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006090:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006092:	2302      	movs	r3, #2
 8006094:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006096:	2300      	movs	r3, #0
 8006098:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800609a:	2303      	movs	r3, #3
 800609c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800609e:	230b      	movs	r3, #11
 80060a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80060a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060a6:	4619      	mov	r1, r3
 80060a8:	480f      	ldr	r0, [pc, #60]	; (80060e8 <HAL_ETH_MspInit+0x168>)
 80060aa:	f7fc fba9 	bl	8002800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80060ae:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80060b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060b4:	2302      	movs	r3, #2
 80060b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060b8:	2300      	movs	r3, #0
 80060ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060bc:	2303      	movs	r3, #3
 80060be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80060c0:	230b      	movs	r3, #11
 80060c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80060c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060c8:	4619      	mov	r1, r3
 80060ca:	4808      	ldr	r0, [pc, #32]	; (80060ec <HAL_ETH_MspInit+0x16c>)
 80060cc:	f7fc fb98 	bl	8002800 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80060d0:	bf00      	nop
 80060d2:	3738      	adds	r7, #56	; 0x38
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}
 80060d8:	40028000 	.word	0x40028000
 80060dc:	40023800 	.word	0x40023800
 80060e0:	40020800 	.word	0x40020800
 80060e4:	40020000 	.word	0x40020000
 80060e8:	40020400 	.word	0x40020400
 80060ec:	40021800 	.word	0x40021800

080060f0 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80060f4:	4802      	ldr	r0, [pc, #8]	; (8006100 <ETH_PHY_IO_Init+0x10>)
 80060f6:	f7fb ff29 	bl	8001f4c <HAL_ETH_SetMDIOClockRange>

  return 0;
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	bd80      	pop	{r7, pc}
 8006100:	2000522c 	.word	0x2000522c

08006104 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8006104:	b480      	push	{r7}
 8006106:	af00      	add	r7, sp, #0
  return 0;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	68ba      	ldr	r2, [r7, #8]
 8006124:	68f9      	ldr	r1, [r7, #12]
 8006126:	4807      	ldr	r0, [pc, #28]	; (8006144 <ETH_PHY_IO_ReadReg+0x30>)
 8006128:	f7fb fd78 	bl	8001c1c <HAL_ETH_ReadPHYRegister>
 800612c:	4603      	mov	r3, r0
 800612e:	2b00      	cmp	r3, #0
 8006130:	d002      	beq.n	8006138 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8006132:	f04f 33ff 	mov.w	r3, #4294967295
 8006136:	e000      	b.n	800613a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3710      	adds	r7, #16
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	2000522c 	.word	0x2000522c

08006148 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	68ba      	ldr	r2, [r7, #8]
 8006158:	68f9      	ldr	r1, [r7, #12]
 800615a:	4807      	ldr	r0, [pc, #28]	; (8006178 <ETH_PHY_IO_WriteReg+0x30>)
 800615c:	f7fb fda9 	bl	8001cb2 <HAL_ETH_WritePHYRegister>
 8006160:	4603      	mov	r3, r0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d002      	beq.n	800616c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8006166:	f04f 33ff 	mov.w	r3, #4294967295
 800616a:	e000      	b.n	800616e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3710      	adds	r7, #16
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	2000522c 	.word	0x2000522c

0800617c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006180:	f7fb f90a 	bl	8001398 <HAL_GetTick>
 8006184:	4603      	mov	r3, r0
}
 8006186:	4618      	mov	r0, r3
 8006188:	bd80      	pop	{r7, pc}
	...

0800618c <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b0a0      	sub	sp, #128	; 0x80
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8006194:	f107 030c 	add.w	r3, r7, #12
 8006198:	2264      	movs	r2, #100	; 0x64
 800619a:	2100      	movs	r1, #0
 800619c:	4618      	mov	r0, r3
 800619e:	f00a fb9e 	bl	80108de <memset>
  int32_t PHYLinkState = 0;
 80061a2:	2300      	movs	r3, #0
 80061a4:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80061a6:	2300      	movs	r3, #0
 80061a8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80061aa:	2300      	movs	r3, #0
 80061ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80061ae:	2300      	movs	r3, #0
 80061b0:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80061b2:	483a      	ldr	r0, [pc, #232]	; (800629c <ethernet_link_check_state+0x110>)
 80061b4:	f7fb f817 	bl	80011e6 <LAN8742_GetLinkState>
 80061b8:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80061c0:	089b      	lsrs	r3, r3, #2
 80061c2:	f003 0301 	and.w	r3, r3, #1
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d00c      	beq.n	80061e6 <ethernet_link_check_state+0x5a>
 80061cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	dc09      	bgt.n	80061e6 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 80061d2:	4833      	ldr	r0, [pc, #204]	; (80062a0 <ethernet_link_check_state+0x114>)
 80061d4:	f7fb fafd 	bl	80017d2 <HAL_ETH_Stop>
    netif_set_down(netif);
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f001 f81d 	bl	8007218 <netif_set_down>
    netif_set_link_down(netif);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f001 f880 	bl	80072e4 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 80061e4:	e055      	b.n	8006292 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80061ec:	f003 0304 	and.w	r3, r3, #4
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d14e      	bne.n	8006292 <ethernet_link_check_state+0x106>
 80061f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	dd4b      	ble.n	8006292 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 80061fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061fc:	3b02      	subs	r3, #2
 80061fe:	2b03      	cmp	r3, #3
 8006200:	d82a      	bhi.n	8006258 <ethernet_link_check_state+0xcc>
 8006202:	a201      	add	r2, pc, #4	; (adr r2, 8006208 <ethernet_link_check_state+0x7c>)
 8006204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006208:	08006219 	.word	0x08006219
 800620c:	0800622b 	.word	0x0800622b
 8006210:	0800623b 	.word	0x0800623b
 8006214:	0800624b 	.word	0x0800624b
      duplex = ETH_FULLDUPLEX_MODE;
 8006218:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800621c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800621e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006222:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8006224:	2301      	movs	r3, #1
 8006226:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8006228:	e017      	b.n	800625a <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800622a:	2300      	movs	r3, #0
 800622c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800622e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006232:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8006234:	2301      	movs	r3, #1
 8006236:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8006238:	e00f      	b.n	800625a <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800623a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800623e:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8006240:	2300      	movs	r3, #0
 8006242:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8006244:	2301      	movs	r3, #1
 8006246:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8006248:	e007      	b.n	800625a <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800624a:	2300      	movs	r3, #0
 800624c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800624e:	2300      	movs	r3, #0
 8006250:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8006252:	2301      	movs	r3, #1
 8006254:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8006256:	e000      	b.n	800625a <ethernet_link_check_state+0xce>
      break;
 8006258:	bf00      	nop
    if(linkchanged)
 800625a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800625c:	2b00      	cmp	r3, #0
 800625e:	d018      	beq.n	8006292 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8006260:	f107 030c 	add.w	r3, r7, #12
 8006264:	4619      	mov	r1, r3
 8006266:	480e      	ldr	r0, [pc, #56]	; (80062a0 <ethernet_link_check_state+0x114>)
 8006268:	f7fb fd6c 	bl	8001d44 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800626c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800626e:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8006270:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006272:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8006274:	f107 030c 	add.w	r3, r7, #12
 8006278:	4619      	mov	r1, r3
 800627a:	4809      	ldr	r0, [pc, #36]	; (80062a0 <ethernet_link_check_state+0x114>)
 800627c:	f7fb fe4c 	bl	8001f18 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8006280:	4807      	ldr	r0, [pc, #28]	; (80062a0 <ethernet_link_check_state+0x114>)
 8006282:	f7fb fa47 	bl	8001714 <HAL_ETH_Start>
      netif_set_up(netif);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 ff5a 	bl	8007140 <netif_set_up>
      netif_set_link_up(netif);
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 fff5 	bl	800727c <netif_set_link_up>
}
 8006292:	bf00      	nop
 8006294:	3780      	adds	r7, #128	; 0x80
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	20005314 	.word	0x20005314
 80062a0:	2000522c 	.word	0x2000522c

080062a4 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b086      	sub	sp, #24
 80062a8:	af02      	add	r7, sp, #8
 80062aa:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80062ac:	4812      	ldr	r0, [pc, #72]	; (80062f8 <HAL_ETH_RxAllocateCallback+0x54>)
 80062ae:	f000 fcc1 	bl	8006c34 <memp_malloc_pool>
 80062b2:	60f8      	str	r0, [r7, #12]
  if (p)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d014      	beq.n	80062e4 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f103 0220 	add.w	r2, r3, #32
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	4a0d      	ldr	r2, [pc, #52]	; (80062fc <HAL_ETH_RxAllocateCallback+0x58>)
 80062c8:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80062d2:	9201      	str	r2, [sp, #4]
 80062d4:	9300      	str	r3, [sp, #0]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2241      	movs	r2, #65	; 0x41
 80062da:	2100      	movs	r1, #0
 80062dc:	2000      	movs	r0, #0
 80062de:	f001 f9f7 	bl	80076d0 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80062e2:	e005      	b.n	80062f0 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80062e4:	4b06      	ldr	r3, [pc, #24]	; (8006300 <HAL_ETH_RxAllocateCallback+0x5c>)
 80062e6:	2201      	movs	r2, #1
 80062e8:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2200      	movs	r2, #0
 80062ee:	601a      	str	r2, [r3, #0]
}
 80062f0:	bf00      	nop
 80062f2:	3710      	adds	r7, #16
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	08014074 	.word	0x08014074
 80062fc:	08005f3d 	.word	0x08005f3d
 8006300:	20005228 	.word	0x20005228

08006304 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b088      	sub	sp, #32
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]
 8006310:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800631a:	2300      	movs	r3, #0
 800631c:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	3b20      	subs	r3, #32
 8006322:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	2200      	movs	r2, #0
 8006328:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	2200      	movs	r2, #0
 800632e:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	887a      	ldrh	r2, [r7, #2]
 8006334:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8006336:	69bb      	ldr	r3, [r7, #24]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d103      	bne.n	8006346 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	69fa      	ldr	r2, [r7, #28]
 8006342:	601a      	str	r2, [r3, #0]
 8006344:	e003      	b.n	800634e <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	69fa      	ldr	r2, [r7, #28]
 800634c:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	69fa      	ldr	r2, [r7, #28]
 8006352:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	61fb      	str	r3, [r7, #28]
 800635a:	e009      	b.n	8006370 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	891a      	ldrh	r2, [r3, #8]
 8006360:	887b      	ldrh	r3, [r7, #2]
 8006362:	4413      	add	r3, r2
 8006364:	b29a      	uxth	r2, r3
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	61fb      	str	r3, [r7, #28]
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d1f2      	bne.n	800635c <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8006376:	887b      	ldrh	r3, [r7, #2]
 8006378:	4619      	mov	r1, r3
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f7ff fc30 	bl	8005be0 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8006380:	bf00      	nop
 8006382:	3720      	adds	r7, #32
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	4603      	mov	r3, r0
 8006390:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8006392:	88fb      	ldrh	r3, [r7, #6]
 8006394:	021b      	lsls	r3, r3, #8
 8006396:	b21a      	sxth	r2, r3
 8006398:	88fb      	ldrh	r3, [r7, #6]
 800639a:	0a1b      	lsrs	r3, r3, #8
 800639c:	b29b      	uxth	r3, r3
 800639e:	b21b      	sxth	r3, r3
 80063a0:	4313      	orrs	r3, r2
 80063a2:	b21b      	sxth	r3, r3
 80063a4:	b29b      	uxth	r3, r3
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	370c      	adds	r7, #12
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr

080063b2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80063b2:	b480      	push	{r7}
 80063b4:	b083      	sub	sp, #12
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	061a      	lsls	r2, r3, #24
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	021b      	lsls	r3, r3, #8
 80063c2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80063c6:	431a      	orrs	r2, r3
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	0a1b      	lsrs	r3, r3, #8
 80063cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80063d0:	431a      	orrs	r2, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	0e1b      	lsrs	r3, r3, #24
 80063d6:	4313      	orrs	r3, r2
}
 80063d8:	4618      	mov	r0, r3
 80063da:	370c      	adds	r7, #12
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80063ea:	2300      	movs	r3, #0
 80063ec:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80063ee:	f000 f8d5 	bl	800659c <mem_init>
  memp_init();
 80063f2:	f000 fbdb 	bl	8006bac <memp_init>
  pbuf_init();
  netif_init();
 80063f6:	f000 fcd9 	bl	8006dac <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80063fa:	f007 f8f9 	bl	800d5f0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80063fe:	f001 fe51 	bl	80080a4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8006402:	f007 f86b 	bl	800d4dc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8006406:	bf00      	nop
 8006408:	3708      	adds	r7, #8
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
	...

08006410 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	4603      	mov	r3, r0
 8006418:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800641a:	4b05      	ldr	r3, [pc, #20]	; (8006430 <ptr_to_mem+0x20>)
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	88fb      	ldrh	r3, [r7, #6]
 8006420:	4413      	add	r3, r2
}
 8006422:	4618      	mov	r0, r3
 8006424:	370c      	adds	r7, #12
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr
 800642e:	bf00      	nop
 8006430:	200059a0 	.word	0x200059a0

08006434 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800643c:	4b05      	ldr	r3, [pc, #20]	; (8006454 <mem_to_ptr+0x20>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	1ad3      	subs	r3, r2, r3
 8006444:	b29b      	uxth	r3, r3
}
 8006446:	4618      	mov	r0, r3
 8006448:	370c      	adds	r7, #12
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr
 8006452:	bf00      	nop
 8006454:	200059a0 	.word	0x200059a0

08006458 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8006458:	b590      	push	{r4, r7, lr}
 800645a:	b085      	sub	sp, #20
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8006460:	4b45      	ldr	r3, [pc, #276]	; (8006578 <plug_holes+0x120>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	429a      	cmp	r2, r3
 8006468:	d206      	bcs.n	8006478 <plug_holes+0x20>
 800646a:	4b44      	ldr	r3, [pc, #272]	; (800657c <plug_holes+0x124>)
 800646c:	f240 12df 	movw	r2, #479	; 0x1df
 8006470:	4943      	ldr	r1, [pc, #268]	; (8006580 <plug_holes+0x128>)
 8006472:	4844      	ldr	r0, [pc, #272]	; (8006584 <plug_holes+0x12c>)
 8006474:	f00a f9ce 	bl	8010814 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8006478:	4b43      	ldr	r3, [pc, #268]	; (8006588 <plug_holes+0x130>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	429a      	cmp	r2, r3
 8006480:	d306      	bcc.n	8006490 <plug_holes+0x38>
 8006482:	4b3e      	ldr	r3, [pc, #248]	; (800657c <plug_holes+0x124>)
 8006484:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8006488:	4940      	ldr	r1, [pc, #256]	; (800658c <plug_holes+0x134>)
 800648a:	483e      	ldr	r0, [pc, #248]	; (8006584 <plug_holes+0x12c>)
 800648c:	f00a f9c2 	bl	8010814 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	791b      	ldrb	r3, [r3, #4]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d006      	beq.n	80064a6 <plug_holes+0x4e>
 8006498:	4b38      	ldr	r3, [pc, #224]	; (800657c <plug_holes+0x124>)
 800649a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800649e:	493c      	ldr	r1, [pc, #240]	; (8006590 <plug_holes+0x138>)
 80064a0:	4838      	ldr	r0, [pc, #224]	; (8006584 <plug_holes+0x12c>)
 80064a2:	f00a f9b7 	bl	8010814 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	881b      	ldrh	r3, [r3, #0]
 80064aa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80064ae:	d906      	bls.n	80064be <plug_holes+0x66>
 80064b0:	4b32      	ldr	r3, [pc, #200]	; (800657c <plug_holes+0x124>)
 80064b2:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80064b6:	4937      	ldr	r1, [pc, #220]	; (8006594 <plug_holes+0x13c>)
 80064b8:	4832      	ldr	r0, [pc, #200]	; (8006584 <plug_holes+0x12c>)
 80064ba:	f00a f9ab 	bl	8010814 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	881b      	ldrh	r3, [r3, #0]
 80064c2:	4618      	mov	r0, r3
 80064c4:	f7ff ffa4 	bl	8006410 <ptr_to_mem>
 80064c8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d024      	beq.n	800651c <plug_holes+0xc4>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	791b      	ldrb	r3, [r3, #4]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d120      	bne.n	800651c <plug_holes+0xc4>
 80064da:	4b2b      	ldr	r3, [pc, #172]	; (8006588 <plug_holes+0x130>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d01b      	beq.n	800651c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80064e4:	4b2c      	ldr	r3, [pc, #176]	; (8006598 <plug_holes+0x140>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d102      	bne.n	80064f4 <plug_holes+0x9c>
      lfree = mem;
 80064ee:	4a2a      	ldr	r2, [pc, #168]	; (8006598 <plug_holes+0x140>)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	881a      	ldrh	r2, [r3, #0]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	881b      	ldrh	r3, [r3, #0]
 8006500:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006504:	d00a      	beq.n	800651c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	881b      	ldrh	r3, [r3, #0]
 800650a:	4618      	mov	r0, r3
 800650c:	f7ff ff80 	bl	8006410 <ptr_to_mem>
 8006510:	4604      	mov	r4, r0
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f7ff ff8e 	bl	8006434 <mem_to_ptr>
 8006518:	4603      	mov	r3, r0
 800651a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	885b      	ldrh	r3, [r3, #2]
 8006520:	4618      	mov	r0, r3
 8006522:	f7ff ff75 	bl	8006410 <ptr_to_mem>
 8006526:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8006528:	68ba      	ldr	r2, [r7, #8]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	429a      	cmp	r2, r3
 800652e:	d01f      	beq.n	8006570 <plug_holes+0x118>
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	791b      	ldrb	r3, [r3, #4]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d11b      	bne.n	8006570 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8006538:	4b17      	ldr	r3, [pc, #92]	; (8006598 <plug_holes+0x140>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	429a      	cmp	r2, r3
 8006540:	d102      	bne.n	8006548 <plug_holes+0xf0>
      lfree = pmem;
 8006542:	4a15      	ldr	r2, [pc, #84]	; (8006598 <plug_holes+0x140>)
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	881a      	ldrh	r2, [r3, #0]
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	881b      	ldrh	r3, [r3, #0]
 8006554:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006558:	d00a      	beq.n	8006570 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	881b      	ldrh	r3, [r3, #0]
 800655e:	4618      	mov	r0, r3
 8006560:	f7ff ff56 	bl	8006410 <ptr_to_mem>
 8006564:	4604      	mov	r4, r0
 8006566:	68b8      	ldr	r0, [r7, #8]
 8006568:	f7ff ff64 	bl	8006434 <mem_to_ptr>
 800656c:	4603      	mov	r3, r0
 800656e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8006570:	bf00      	nop
 8006572:	3714      	adds	r7, #20
 8006574:	46bd      	mov	sp, r7
 8006576:	bd90      	pop	{r4, r7, pc}
 8006578:	200059a0 	.word	0x200059a0
 800657c:	080116d0 	.word	0x080116d0
 8006580:	08011700 	.word	0x08011700
 8006584:	08011718 	.word	0x08011718
 8006588:	200059a4 	.word	0x200059a4
 800658c:	08011740 	.word	0x08011740
 8006590:	0801175c 	.word	0x0801175c
 8006594:	08011778 	.word	0x08011778
 8006598:	200059a8 	.word	0x200059a8

0800659c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80065a2:	4b18      	ldr	r3, [pc, #96]	; (8006604 <mem_init+0x68>)
 80065a4:	3303      	adds	r3, #3
 80065a6:	f023 0303 	bic.w	r3, r3, #3
 80065aa:	461a      	mov	r2, r3
 80065ac:	4b16      	ldr	r3, [pc, #88]	; (8006608 <mem_init+0x6c>)
 80065ae:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80065b0:	4b15      	ldr	r3, [pc, #84]	; (8006608 <mem_init+0x6c>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80065bc:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80065ca:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80065ce:	f7ff ff1f 	bl	8006410 <ptr_to_mem>
 80065d2:	4603      	mov	r3, r0
 80065d4:	4a0d      	ldr	r2, [pc, #52]	; (800660c <mem_init+0x70>)
 80065d6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80065d8:	4b0c      	ldr	r3, [pc, #48]	; (800660c <mem_init+0x70>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2201      	movs	r2, #1
 80065de:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80065e0:	4b0a      	ldr	r3, [pc, #40]	; (800660c <mem_init+0x70>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80065e8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80065ea:	4b08      	ldr	r3, [pc, #32]	; (800660c <mem_init+0x70>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80065f2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80065f4:	4b04      	ldr	r3, [pc, #16]	; (8006608 <mem_init+0x6c>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a05      	ldr	r2, [pc, #20]	; (8006610 <mem_init+0x74>)
 80065fa:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80065fc:	bf00      	nop
 80065fe:	3708      	adds	r7, #8
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}
 8006604:	2000534c 	.word	0x2000534c
 8006608:	200059a0 	.word	0x200059a0
 800660c:	200059a4 	.word	0x200059a4
 8006610:	200059a8 	.word	0x200059a8

08006614 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b086      	sub	sp, #24
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f7ff ff09 	bl	8006434 <mem_to_ptr>
 8006622:	4603      	mov	r3, r0
 8006624:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	881b      	ldrh	r3, [r3, #0]
 800662a:	4618      	mov	r0, r3
 800662c:	f7ff fef0 	bl	8006410 <ptr_to_mem>
 8006630:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	885b      	ldrh	r3, [r3, #2]
 8006636:	4618      	mov	r0, r3
 8006638:	f7ff feea 	bl	8006410 <ptr_to_mem>
 800663c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	881b      	ldrh	r3, [r3, #0]
 8006642:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006646:	d818      	bhi.n	800667a <mem_link_valid+0x66>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	885b      	ldrh	r3, [r3, #2]
 800664c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006650:	d813      	bhi.n	800667a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8006656:	8afa      	ldrh	r2, [r7, #22]
 8006658:	429a      	cmp	r2, r3
 800665a:	d004      	beq.n	8006666 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	881b      	ldrh	r3, [r3, #0]
 8006660:	8afa      	ldrh	r2, [r7, #22]
 8006662:	429a      	cmp	r2, r3
 8006664:	d109      	bne.n	800667a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8006666:	4b08      	ldr	r3, [pc, #32]	; (8006688 <mem_link_valid+0x74>)
 8006668:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800666a:	693a      	ldr	r2, [r7, #16]
 800666c:	429a      	cmp	r2, r3
 800666e:	d006      	beq.n	800667e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	885b      	ldrh	r3, [r3, #2]
 8006674:	8afa      	ldrh	r2, [r7, #22]
 8006676:	429a      	cmp	r2, r3
 8006678:	d001      	beq.n	800667e <mem_link_valid+0x6a>
    return 0;
 800667a:	2300      	movs	r3, #0
 800667c:	e000      	b.n	8006680 <mem_link_valid+0x6c>
  }
  return 1;
 800667e:	2301      	movs	r3, #1
}
 8006680:	4618      	mov	r0, r3
 8006682:	3718      	adds	r7, #24
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}
 8006688:	200059a4 	.word	0x200059a4

0800668c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d04c      	beq.n	8006734 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f003 0303 	and.w	r3, r3, #3
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d007      	beq.n	80066b4 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80066a4:	4b25      	ldr	r3, [pc, #148]	; (800673c <mem_free+0xb0>)
 80066a6:	f240 2273 	movw	r2, #627	; 0x273
 80066aa:	4925      	ldr	r1, [pc, #148]	; (8006740 <mem_free+0xb4>)
 80066ac:	4825      	ldr	r0, [pc, #148]	; (8006744 <mem_free+0xb8>)
 80066ae:	f00a f8b1 	bl	8010814 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80066b2:	e040      	b.n	8006736 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	3b08      	subs	r3, #8
 80066b8:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80066ba:	4b23      	ldr	r3, [pc, #140]	; (8006748 <mem_free+0xbc>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	68fa      	ldr	r2, [r7, #12]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d306      	bcc.n	80066d2 <mem_free+0x46>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f103 020c 	add.w	r2, r3, #12
 80066ca:	4b20      	ldr	r3, [pc, #128]	; (800674c <mem_free+0xc0>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d907      	bls.n	80066e2 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80066d2:	4b1a      	ldr	r3, [pc, #104]	; (800673c <mem_free+0xb0>)
 80066d4:	f240 227f 	movw	r2, #639	; 0x27f
 80066d8:	491d      	ldr	r1, [pc, #116]	; (8006750 <mem_free+0xc4>)
 80066da:	481a      	ldr	r0, [pc, #104]	; (8006744 <mem_free+0xb8>)
 80066dc:	f00a f89a 	bl	8010814 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80066e0:	e029      	b.n	8006736 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	791b      	ldrb	r3, [r3, #4]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d107      	bne.n	80066fa <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80066ea:	4b14      	ldr	r3, [pc, #80]	; (800673c <mem_free+0xb0>)
 80066ec:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80066f0:	4918      	ldr	r1, [pc, #96]	; (8006754 <mem_free+0xc8>)
 80066f2:	4814      	ldr	r0, [pc, #80]	; (8006744 <mem_free+0xb8>)
 80066f4:	f00a f88e 	bl	8010814 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80066f8:	e01d      	b.n	8006736 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80066fa:	68f8      	ldr	r0, [r7, #12]
 80066fc:	f7ff ff8a 	bl	8006614 <mem_link_valid>
 8006700:	4603      	mov	r3, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d107      	bne.n	8006716 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8006706:	4b0d      	ldr	r3, [pc, #52]	; (800673c <mem_free+0xb0>)
 8006708:	f240 2295 	movw	r2, #661	; 0x295
 800670c:	4912      	ldr	r1, [pc, #72]	; (8006758 <mem_free+0xcc>)
 800670e:	480d      	ldr	r0, [pc, #52]	; (8006744 <mem_free+0xb8>)
 8006710:	f00a f880 	bl	8010814 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006714:	e00f      	b.n	8006736 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2200      	movs	r2, #0
 800671a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800671c:	4b0f      	ldr	r3, [pc, #60]	; (800675c <mem_free+0xd0>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	68fa      	ldr	r2, [r7, #12]
 8006722:	429a      	cmp	r2, r3
 8006724:	d202      	bcs.n	800672c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8006726:	4a0d      	ldr	r2, [pc, #52]	; (800675c <mem_free+0xd0>)
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800672c:	68f8      	ldr	r0, [r7, #12]
 800672e:	f7ff fe93 	bl	8006458 <plug_holes>
 8006732:	e000      	b.n	8006736 <mem_free+0xaa>
    return;
 8006734:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8006736:	3710      	adds	r7, #16
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}
 800673c:	080116d0 	.word	0x080116d0
 8006740:	080117a4 	.word	0x080117a4
 8006744:	08011718 	.word	0x08011718
 8006748:	200059a0 	.word	0x200059a0
 800674c:	200059a4 	.word	0x200059a4
 8006750:	080117c8 	.word	0x080117c8
 8006754:	080117e4 	.word	0x080117e4
 8006758:	0801180c 	.word	0x0801180c
 800675c:	200059a8 	.word	0x200059a8

08006760 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b088      	sub	sp, #32
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	460b      	mov	r3, r1
 800676a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800676c:	887b      	ldrh	r3, [r7, #2]
 800676e:	3303      	adds	r3, #3
 8006770:	b29b      	uxth	r3, r3
 8006772:	f023 0303 	bic.w	r3, r3, #3
 8006776:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8006778:	8bfb      	ldrh	r3, [r7, #30]
 800677a:	2b0b      	cmp	r3, #11
 800677c:	d801      	bhi.n	8006782 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800677e:	230c      	movs	r3, #12
 8006780:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8006782:	8bfb      	ldrh	r3, [r7, #30]
 8006784:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006788:	d803      	bhi.n	8006792 <mem_trim+0x32>
 800678a:	8bfa      	ldrh	r2, [r7, #30]
 800678c:	887b      	ldrh	r3, [r7, #2]
 800678e:	429a      	cmp	r2, r3
 8006790:	d201      	bcs.n	8006796 <mem_trim+0x36>
    return NULL;
 8006792:	2300      	movs	r3, #0
 8006794:	e0cc      	b.n	8006930 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8006796:	4b68      	ldr	r3, [pc, #416]	; (8006938 <mem_trim+0x1d8>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	429a      	cmp	r2, r3
 800679e:	d304      	bcc.n	80067aa <mem_trim+0x4a>
 80067a0:	4b66      	ldr	r3, [pc, #408]	; (800693c <mem_trim+0x1dc>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d306      	bcc.n	80067b8 <mem_trim+0x58>
 80067aa:	4b65      	ldr	r3, [pc, #404]	; (8006940 <mem_trim+0x1e0>)
 80067ac:	f240 22d1 	movw	r2, #721	; 0x2d1
 80067b0:	4964      	ldr	r1, [pc, #400]	; (8006944 <mem_trim+0x1e4>)
 80067b2:	4865      	ldr	r0, [pc, #404]	; (8006948 <mem_trim+0x1e8>)
 80067b4:	f00a f82e 	bl	8010814 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80067b8:	4b5f      	ldr	r3, [pc, #380]	; (8006938 <mem_trim+0x1d8>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	429a      	cmp	r2, r3
 80067c0:	d304      	bcc.n	80067cc <mem_trim+0x6c>
 80067c2:	4b5e      	ldr	r3, [pc, #376]	; (800693c <mem_trim+0x1dc>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d301      	bcc.n	80067d0 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	e0af      	b.n	8006930 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	3b08      	subs	r3, #8
 80067d4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80067d6:	69b8      	ldr	r0, [r7, #24]
 80067d8:	f7ff fe2c 	bl	8006434 <mem_to_ptr>
 80067dc:	4603      	mov	r3, r0
 80067de:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80067e0:	69bb      	ldr	r3, [r7, #24]
 80067e2:	881a      	ldrh	r2, [r3, #0]
 80067e4:	8afb      	ldrh	r3, [r7, #22]
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	3b08      	subs	r3, #8
 80067ec:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80067ee:	8bfa      	ldrh	r2, [r7, #30]
 80067f0:	8abb      	ldrh	r3, [r7, #20]
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d906      	bls.n	8006804 <mem_trim+0xa4>
 80067f6:	4b52      	ldr	r3, [pc, #328]	; (8006940 <mem_trim+0x1e0>)
 80067f8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80067fc:	4953      	ldr	r1, [pc, #332]	; (800694c <mem_trim+0x1ec>)
 80067fe:	4852      	ldr	r0, [pc, #328]	; (8006948 <mem_trim+0x1e8>)
 8006800:	f00a f808 	bl	8010814 <iprintf>
  if (newsize > size) {
 8006804:	8bfa      	ldrh	r2, [r7, #30]
 8006806:	8abb      	ldrh	r3, [r7, #20]
 8006808:	429a      	cmp	r2, r3
 800680a:	d901      	bls.n	8006810 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800680c:	2300      	movs	r3, #0
 800680e:	e08f      	b.n	8006930 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8006810:	8bfa      	ldrh	r2, [r7, #30]
 8006812:	8abb      	ldrh	r3, [r7, #20]
 8006814:	429a      	cmp	r2, r3
 8006816:	d101      	bne.n	800681c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	e089      	b.n	8006930 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800681c:	69bb      	ldr	r3, [r7, #24]
 800681e:	881b      	ldrh	r3, [r3, #0]
 8006820:	4618      	mov	r0, r3
 8006822:	f7ff fdf5 	bl	8006410 <ptr_to_mem>
 8006826:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	791b      	ldrb	r3, [r3, #4]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d13f      	bne.n	80068b0 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	881b      	ldrh	r3, [r3, #0]
 8006834:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006838:	d106      	bne.n	8006848 <mem_trim+0xe8>
 800683a:	4b41      	ldr	r3, [pc, #260]	; (8006940 <mem_trim+0x1e0>)
 800683c:	f240 22f5 	movw	r2, #757	; 0x2f5
 8006840:	4943      	ldr	r1, [pc, #268]	; (8006950 <mem_trim+0x1f0>)
 8006842:	4841      	ldr	r0, [pc, #260]	; (8006948 <mem_trim+0x1e8>)
 8006844:	f009 ffe6 	bl	8010814 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	881b      	ldrh	r3, [r3, #0]
 800684c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800684e:	8afa      	ldrh	r2, [r7, #22]
 8006850:	8bfb      	ldrh	r3, [r7, #30]
 8006852:	4413      	add	r3, r2
 8006854:	b29b      	uxth	r3, r3
 8006856:	3308      	adds	r3, #8
 8006858:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800685a:	4b3e      	ldr	r3, [pc, #248]	; (8006954 <mem_trim+0x1f4>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	693a      	ldr	r2, [r7, #16]
 8006860:	429a      	cmp	r2, r3
 8006862:	d106      	bne.n	8006872 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8006864:	89fb      	ldrh	r3, [r7, #14]
 8006866:	4618      	mov	r0, r3
 8006868:	f7ff fdd2 	bl	8006410 <ptr_to_mem>
 800686c:	4603      	mov	r3, r0
 800686e:	4a39      	ldr	r2, [pc, #228]	; (8006954 <mem_trim+0x1f4>)
 8006870:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8006872:	89fb      	ldrh	r3, [r7, #14]
 8006874:	4618      	mov	r0, r3
 8006876:	f7ff fdcb 	bl	8006410 <ptr_to_mem>
 800687a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	2200      	movs	r2, #0
 8006880:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	89ba      	ldrh	r2, [r7, #12]
 8006886:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	8afa      	ldrh	r2, [r7, #22]
 800688c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	89fa      	ldrh	r2, [r7, #14]
 8006892:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	881b      	ldrh	r3, [r3, #0]
 8006898:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800689c:	d047      	beq.n	800692e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	881b      	ldrh	r3, [r3, #0]
 80068a2:	4618      	mov	r0, r3
 80068a4:	f7ff fdb4 	bl	8006410 <ptr_to_mem>
 80068a8:	4602      	mov	r2, r0
 80068aa:	89fb      	ldrh	r3, [r7, #14]
 80068ac:	8053      	strh	r3, [r2, #2]
 80068ae:	e03e      	b.n	800692e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80068b0:	8bfb      	ldrh	r3, [r7, #30]
 80068b2:	f103 0214 	add.w	r2, r3, #20
 80068b6:	8abb      	ldrh	r3, [r7, #20]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d838      	bhi.n	800692e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80068bc:	8afa      	ldrh	r2, [r7, #22]
 80068be:	8bfb      	ldrh	r3, [r7, #30]
 80068c0:	4413      	add	r3, r2
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	3308      	adds	r3, #8
 80068c6:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	881b      	ldrh	r3, [r3, #0]
 80068cc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80068d0:	d106      	bne.n	80068e0 <mem_trim+0x180>
 80068d2:	4b1b      	ldr	r3, [pc, #108]	; (8006940 <mem_trim+0x1e0>)
 80068d4:	f240 3216 	movw	r2, #790	; 0x316
 80068d8:	491d      	ldr	r1, [pc, #116]	; (8006950 <mem_trim+0x1f0>)
 80068da:	481b      	ldr	r0, [pc, #108]	; (8006948 <mem_trim+0x1e8>)
 80068dc:	f009 ff9a 	bl	8010814 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80068e0:	89fb      	ldrh	r3, [r7, #14]
 80068e2:	4618      	mov	r0, r3
 80068e4:	f7ff fd94 	bl	8006410 <ptr_to_mem>
 80068e8:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80068ea:	4b1a      	ldr	r3, [pc, #104]	; (8006954 <mem_trim+0x1f4>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	693a      	ldr	r2, [r7, #16]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d202      	bcs.n	80068fa <mem_trim+0x19a>
      lfree = mem2;
 80068f4:	4a17      	ldr	r2, [pc, #92]	; (8006954 <mem_trim+0x1f4>)
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	2200      	movs	r2, #0
 80068fe:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	881a      	ldrh	r2, [r3, #0]
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	8afa      	ldrh	r2, [r7, #22]
 800690c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800690e:	69bb      	ldr	r3, [r7, #24]
 8006910:	89fa      	ldrh	r2, [r7, #14]
 8006912:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	881b      	ldrh	r3, [r3, #0]
 8006918:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800691c:	d007      	beq.n	800692e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	881b      	ldrh	r3, [r3, #0]
 8006922:	4618      	mov	r0, r3
 8006924:	f7ff fd74 	bl	8006410 <ptr_to_mem>
 8006928:	4602      	mov	r2, r0
 800692a:	89fb      	ldrh	r3, [r7, #14]
 800692c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800692e:	687b      	ldr	r3, [r7, #4]
}
 8006930:	4618      	mov	r0, r3
 8006932:	3720      	adds	r7, #32
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}
 8006938:	200059a0 	.word	0x200059a0
 800693c:	200059a4 	.word	0x200059a4
 8006940:	080116d0 	.word	0x080116d0
 8006944:	08011840 	.word	0x08011840
 8006948:	08011718 	.word	0x08011718
 800694c:	08011858 	.word	0x08011858
 8006950:	08011878 	.word	0x08011878
 8006954:	200059a8 	.word	0x200059a8

08006958 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b088      	sub	sp, #32
 800695c:	af00      	add	r7, sp, #0
 800695e:	4603      	mov	r3, r0
 8006960:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8006962:	88fb      	ldrh	r3, [r7, #6]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d101      	bne.n	800696c <mem_malloc+0x14>
    return NULL;
 8006968:	2300      	movs	r3, #0
 800696a:	e0d9      	b.n	8006b20 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800696c:	88fb      	ldrh	r3, [r7, #6]
 800696e:	3303      	adds	r3, #3
 8006970:	b29b      	uxth	r3, r3
 8006972:	f023 0303 	bic.w	r3, r3, #3
 8006976:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8006978:	8bbb      	ldrh	r3, [r7, #28]
 800697a:	2b0b      	cmp	r3, #11
 800697c:	d801      	bhi.n	8006982 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800697e:	230c      	movs	r3, #12
 8006980:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8006982:	8bbb      	ldrh	r3, [r7, #28]
 8006984:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006988:	d803      	bhi.n	8006992 <mem_malloc+0x3a>
 800698a:	8bba      	ldrh	r2, [r7, #28]
 800698c:	88fb      	ldrh	r3, [r7, #6]
 800698e:	429a      	cmp	r2, r3
 8006990:	d201      	bcs.n	8006996 <mem_malloc+0x3e>
    return NULL;
 8006992:	2300      	movs	r3, #0
 8006994:	e0c4      	b.n	8006b20 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006996:	4b64      	ldr	r3, [pc, #400]	; (8006b28 <mem_malloc+0x1d0>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4618      	mov	r0, r3
 800699c:	f7ff fd4a 	bl	8006434 <mem_to_ptr>
 80069a0:	4603      	mov	r3, r0
 80069a2:	83fb      	strh	r3, [r7, #30]
 80069a4:	e0b4      	b.n	8006b10 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80069a6:	8bfb      	ldrh	r3, [r7, #30]
 80069a8:	4618      	mov	r0, r3
 80069aa:	f7ff fd31 	bl	8006410 <ptr_to_mem>
 80069ae:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	791b      	ldrb	r3, [r3, #4]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	f040 80a4 	bne.w	8006b02 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	881b      	ldrh	r3, [r3, #0]
 80069be:	461a      	mov	r2, r3
 80069c0:	8bfb      	ldrh	r3, [r7, #30]
 80069c2:	1ad3      	subs	r3, r2, r3
 80069c4:	f1a3 0208 	sub.w	r2, r3, #8
 80069c8:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80069ca:	429a      	cmp	r2, r3
 80069cc:	f0c0 8099 	bcc.w	8006b02 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	881b      	ldrh	r3, [r3, #0]
 80069d4:	461a      	mov	r2, r3
 80069d6:	8bfb      	ldrh	r3, [r7, #30]
 80069d8:	1ad3      	subs	r3, r2, r3
 80069da:	f1a3 0208 	sub.w	r2, r3, #8
 80069de:	8bbb      	ldrh	r3, [r7, #28]
 80069e0:	3314      	adds	r3, #20
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d333      	bcc.n	8006a4e <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80069e6:	8bfa      	ldrh	r2, [r7, #30]
 80069e8:	8bbb      	ldrh	r3, [r7, #28]
 80069ea:	4413      	add	r3, r2
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	3308      	adds	r3, #8
 80069f0:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80069f2:	8a7b      	ldrh	r3, [r7, #18]
 80069f4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80069f8:	d106      	bne.n	8006a08 <mem_malloc+0xb0>
 80069fa:	4b4c      	ldr	r3, [pc, #304]	; (8006b2c <mem_malloc+0x1d4>)
 80069fc:	f240 3287 	movw	r2, #903	; 0x387
 8006a00:	494b      	ldr	r1, [pc, #300]	; (8006b30 <mem_malloc+0x1d8>)
 8006a02:	484c      	ldr	r0, [pc, #304]	; (8006b34 <mem_malloc+0x1dc>)
 8006a04:	f009 ff06 	bl	8010814 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8006a08:	8a7b      	ldrh	r3, [r7, #18]
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f7ff fd00 	bl	8006410 <ptr_to_mem>
 8006a10:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2200      	movs	r2, #0
 8006a16:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	881a      	ldrh	r2, [r3, #0]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	8bfa      	ldrh	r2, [r7, #30]
 8006a24:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	8a7a      	ldrh	r2, [r7, #18]
 8006a2a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	881b      	ldrh	r3, [r3, #0]
 8006a36:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006a3a:	d00b      	beq.n	8006a54 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	881b      	ldrh	r3, [r3, #0]
 8006a40:	4618      	mov	r0, r3
 8006a42:	f7ff fce5 	bl	8006410 <ptr_to_mem>
 8006a46:	4602      	mov	r2, r0
 8006a48:	8a7b      	ldrh	r3, [r7, #18]
 8006a4a:	8053      	strh	r3, [r2, #2]
 8006a4c:	e002      	b.n	8006a54 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	2201      	movs	r2, #1
 8006a52:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8006a54:	4b34      	ldr	r3, [pc, #208]	; (8006b28 <mem_malloc+0x1d0>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	697a      	ldr	r2, [r7, #20]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d127      	bne.n	8006aae <mem_malloc+0x156>
          struct mem *cur = lfree;
 8006a5e:	4b32      	ldr	r3, [pc, #200]	; (8006b28 <mem_malloc+0x1d0>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8006a64:	e005      	b.n	8006a72 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8006a66:	69bb      	ldr	r3, [r7, #24]
 8006a68:	881b      	ldrh	r3, [r3, #0]
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f7ff fcd0 	bl	8006410 <ptr_to_mem>
 8006a70:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	791b      	ldrb	r3, [r3, #4]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d004      	beq.n	8006a84 <mem_malloc+0x12c>
 8006a7a:	4b2f      	ldr	r3, [pc, #188]	; (8006b38 <mem_malloc+0x1e0>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	69ba      	ldr	r2, [r7, #24]
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d1f0      	bne.n	8006a66 <mem_malloc+0x10e>
          }
          lfree = cur;
 8006a84:	4a28      	ldr	r2, [pc, #160]	; (8006b28 <mem_malloc+0x1d0>)
 8006a86:	69bb      	ldr	r3, [r7, #24]
 8006a88:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8006a8a:	4b27      	ldr	r3, [pc, #156]	; (8006b28 <mem_malloc+0x1d0>)
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	4b2a      	ldr	r3, [pc, #168]	; (8006b38 <mem_malloc+0x1e0>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d00b      	beq.n	8006aae <mem_malloc+0x156>
 8006a96:	4b24      	ldr	r3, [pc, #144]	; (8006b28 <mem_malloc+0x1d0>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	791b      	ldrb	r3, [r3, #4]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d006      	beq.n	8006aae <mem_malloc+0x156>
 8006aa0:	4b22      	ldr	r3, [pc, #136]	; (8006b2c <mem_malloc+0x1d4>)
 8006aa2:	f240 32b5 	movw	r2, #949	; 0x3b5
 8006aa6:	4925      	ldr	r1, [pc, #148]	; (8006b3c <mem_malloc+0x1e4>)
 8006aa8:	4822      	ldr	r0, [pc, #136]	; (8006b34 <mem_malloc+0x1dc>)
 8006aaa:	f009 feb3 	bl	8010814 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8006aae:	8bba      	ldrh	r2, [r7, #28]
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	4413      	add	r3, r2
 8006ab4:	3308      	adds	r3, #8
 8006ab6:	4a20      	ldr	r2, [pc, #128]	; (8006b38 <mem_malloc+0x1e0>)
 8006ab8:	6812      	ldr	r2, [r2, #0]
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d906      	bls.n	8006acc <mem_malloc+0x174>
 8006abe:	4b1b      	ldr	r3, [pc, #108]	; (8006b2c <mem_malloc+0x1d4>)
 8006ac0:	f240 32b9 	movw	r2, #953	; 0x3b9
 8006ac4:	491e      	ldr	r1, [pc, #120]	; (8006b40 <mem_malloc+0x1e8>)
 8006ac6:	481b      	ldr	r0, [pc, #108]	; (8006b34 <mem_malloc+0x1dc>)
 8006ac8:	f009 fea4 	bl	8010814 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	f003 0303 	and.w	r3, r3, #3
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d006      	beq.n	8006ae4 <mem_malloc+0x18c>
 8006ad6:	4b15      	ldr	r3, [pc, #84]	; (8006b2c <mem_malloc+0x1d4>)
 8006ad8:	f240 32bb 	movw	r2, #955	; 0x3bb
 8006adc:	4919      	ldr	r1, [pc, #100]	; (8006b44 <mem_malloc+0x1ec>)
 8006ade:	4815      	ldr	r0, [pc, #84]	; (8006b34 <mem_malloc+0x1dc>)
 8006ae0:	f009 fe98 	bl	8010814 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	f003 0303 	and.w	r3, r3, #3
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d006      	beq.n	8006afc <mem_malloc+0x1a4>
 8006aee:	4b0f      	ldr	r3, [pc, #60]	; (8006b2c <mem_malloc+0x1d4>)
 8006af0:	f240 32bd 	movw	r2, #957	; 0x3bd
 8006af4:	4914      	ldr	r1, [pc, #80]	; (8006b48 <mem_malloc+0x1f0>)
 8006af6:	480f      	ldr	r0, [pc, #60]	; (8006b34 <mem_malloc+0x1dc>)
 8006af8:	f009 fe8c 	bl	8010814 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	3308      	adds	r3, #8
 8006b00:	e00e      	b.n	8006b20 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8006b02:	8bfb      	ldrh	r3, [r7, #30]
 8006b04:	4618      	mov	r0, r3
 8006b06:	f7ff fc83 	bl	8006410 <ptr_to_mem>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	881b      	ldrh	r3, [r3, #0]
 8006b0e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006b10:	8bfa      	ldrh	r2, [r7, #30]
 8006b12:	8bbb      	ldrh	r3, [r7, #28]
 8006b14:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	f4ff af44 	bcc.w	80069a6 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8006b1e:	2300      	movs	r3, #0
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3720      	adds	r7, #32
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	200059a8 	.word	0x200059a8
 8006b2c:	080116d0 	.word	0x080116d0
 8006b30:	08011878 	.word	0x08011878
 8006b34:	08011718 	.word	0x08011718
 8006b38:	200059a4 	.word	0x200059a4
 8006b3c:	0801188c 	.word	0x0801188c
 8006b40:	080118a8 	.word	0x080118a8
 8006b44:	080118d8 	.word	0x080118d8
 8006b48:	08011908 	.word	0x08011908

08006b4c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b085      	sub	sp, #20
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	3303      	adds	r3, #3
 8006b62:	f023 0303 	bic.w	r3, r3, #3
 8006b66:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8006b68:	2300      	movs	r3, #0
 8006b6a:	60fb      	str	r3, [r7, #12]
 8006b6c:	e011      	b.n	8006b92 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	68ba      	ldr	r2, [r7, #8]
 8006b7e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	881b      	ldrh	r3, [r3, #0]
 8006b84:	461a      	mov	r2, r3
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	4413      	add	r3, r2
 8006b8a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	3301      	adds	r3, #1
 8006b90:	60fb      	str	r3, [r7, #12]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	885b      	ldrh	r3, [r3, #2]
 8006b96:	461a      	mov	r2, r3
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	dbe7      	blt.n	8006b6e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8006b9e:	bf00      	nop
 8006ba0:	bf00      	nop
 8006ba2:	3714      	adds	r7, #20
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b082      	sub	sp, #8
 8006bb0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	80fb      	strh	r3, [r7, #6]
 8006bb6:	e009      	b.n	8006bcc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8006bb8:	88fb      	ldrh	r3, [r7, #6]
 8006bba:	4a08      	ldr	r2, [pc, #32]	; (8006bdc <memp_init+0x30>)
 8006bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f7ff ffc3 	bl	8006b4c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006bc6:	88fb      	ldrh	r3, [r7, #6]
 8006bc8:	3301      	adds	r3, #1
 8006bca:	80fb      	strh	r3, [r7, #6]
 8006bcc:	88fb      	ldrh	r3, [r7, #6]
 8006bce:	2b08      	cmp	r3, #8
 8006bd0:	d9f2      	bls.n	8006bb8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8006bd2:	bf00      	nop
 8006bd4:	bf00      	nop
 8006bd6:	3708      	adds	r7, #8
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	080140ec 	.word	0x080140ec

08006be0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b084      	sub	sp, #16
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d012      	beq.n	8006c1c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	6812      	ldr	r2, [r2, #0]
 8006bfe:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f003 0303 	and.w	r3, r3, #3
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d006      	beq.n	8006c18 <do_memp_malloc_pool+0x38>
 8006c0a:	4b07      	ldr	r3, [pc, #28]	; (8006c28 <do_memp_malloc_pool+0x48>)
 8006c0c:	f44f 728c 	mov.w	r2, #280	; 0x118
 8006c10:	4906      	ldr	r1, [pc, #24]	; (8006c2c <do_memp_malloc_pool+0x4c>)
 8006c12:	4807      	ldr	r0, [pc, #28]	; (8006c30 <do_memp_malloc_pool+0x50>)
 8006c14:	f009 fdfe 	bl	8010814 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	e000      	b.n	8006c1e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8006c1c:	2300      	movs	r3, #0
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3710      	adds	r7, #16
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	0801192c 	.word	0x0801192c
 8006c2c:	0801195c 	.word	0x0801195c
 8006c30:	08011980 	.word	0x08011980

08006c34 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b082      	sub	sp, #8
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d106      	bne.n	8006c50 <memp_malloc_pool+0x1c>
 8006c42:	4b0a      	ldr	r3, [pc, #40]	; (8006c6c <memp_malloc_pool+0x38>)
 8006c44:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8006c48:	4909      	ldr	r1, [pc, #36]	; (8006c70 <memp_malloc_pool+0x3c>)
 8006c4a:	480a      	ldr	r0, [pc, #40]	; (8006c74 <memp_malloc_pool+0x40>)
 8006c4c:	f009 fde2 	bl	8010814 <iprintf>
  if (desc == NULL) {
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d101      	bne.n	8006c5a <memp_malloc_pool+0x26>
    return NULL;
 8006c56:	2300      	movs	r3, #0
 8006c58:	e003      	b.n	8006c62 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f7ff ffc0 	bl	8006be0 <do_memp_malloc_pool>
 8006c60:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3708      	adds	r7, #8
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	0801192c 	.word	0x0801192c
 8006c70:	080119a8 	.word	0x080119a8
 8006c74:	08011980 	.word	0x08011980

08006c78 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	4603      	mov	r3, r0
 8006c80:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006c82:	79fb      	ldrb	r3, [r7, #7]
 8006c84:	2b08      	cmp	r3, #8
 8006c86:	d908      	bls.n	8006c9a <memp_malloc+0x22>
 8006c88:	4b0a      	ldr	r3, [pc, #40]	; (8006cb4 <memp_malloc+0x3c>)
 8006c8a:	f240 1257 	movw	r2, #343	; 0x157
 8006c8e:	490a      	ldr	r1, [pc, #40]	; (8006cb8 <memp_malloc+0x40>)
 8006c90:	480a      	ldr	r0, [pc, #40]	; (8006cbc <memp_malloc+0x44>)
 8006c92:	f009 fdbf 	bl	8010814 <iprintf>
 8006c96:	2300      	movs	r3, #0
 8006c98:	e008      	b.n	8006cac <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8006c9a:	79fb      	ldrb	r3, [r7, #7]
 8006c9c:	4a08      	ldr	r2, [pc, #32]	; (8006cc0 <memp_malloc+0x48>)
 8006c9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f7ff ff9c 	bl	8006be0 <do_memp_malloc_pool>
 8006ca8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8006caa:	68fb      	ldr	r3, [r7, #12]
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3710      	adds	r7, #16
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	0801192c 	.word	0x0801192c
 8006cb8:	080119bc 	.word	0x080119bc
 8006cbc:	08011980 	.word	0x08011980
 8006cc0:	080140ec 	.word	0x080140ec

08006cc4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	f003 0303 	and.w	r3, r3, #3
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d006      	beq.n	8006ce6 <do_memp_free_pool+0x22>
 8006cd8:	4b0a      	ldr	r3, [pc, #40]	; (8006d04 <do_memp_free_pool+0x40>)
 8006cda:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8006cde:	490a      	ldr	r1, [pc, #40]	; (8006d08 <do_memp_free_pool+0x44>)
 8006ce0:	480a      	ldr	r0, [pc, #40]	; (8006d0c <do_memp_free_pool+0x48>)
 8006ce2:	f009 fd97 	bl	8010814 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8006cfc:	bf00      	nop
 8006cfe:	3710      	adds	r7, #16
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}
 8006d04:	0801192c 	.word	0x0801192c
 8006d08:	080119dc 	.word	0x080119dc
 8006d0c:	08011980 	.word	0x08011980

08006d10 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b082      	sub	sp, #8
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d106      	bne.n	8006d2e <memp_free_pool+0x1e>
 8006d20:	4b0a      	ldr	r3, [pc, #40]	; (8006d4c <memp_free_pool+0x3c>)
 8006d22:	f240 1295 	movw	r2, #405	; 0x195
 8006d26:	490a      	ldr	r1, [pc, #40]	; (8006d50 <memp_free_pool+0x40>)
 8006d28:	480a      	ldr	r0, [pc, #40]	; (8006d54 <memp_free_pool+0x44>)
 8006d2a:	f009 fd73 	bl	8010814 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d007      	beq.n	8006d44 <memp_free_pool+0x34>
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d004      	beq.n	8006d44 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8006d3a:	6839      	ldr	r1, [r7, #0]
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f7ff ffc1 	bl	8006cc4 <do_memp_free_pool>
 8006d42:	e000      	b.n	8006d46 <memp_free_pool+0x36>
    return;
 8006d44:	bf00      	nop
}
 8006d46:	3708      	adds	r7, #8
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}
 8006d4c:	0801192c 	.word	0x0801192c
 8006d50:	080119a8 	.word	0x080119a8
 8006d54:	08011980 	.word	0x08011980

08006d58 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	4603      	mov	r3, r0
 8006d60:	6039      	str	r1, [r7, #0]
 8006d62:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8006d64:	79fb      	ldrb	r3, [r7, #7]
 8006d66:	2b08      	cmp	r3, #8
 8006d68:	d907      	bls.n	8006d7a <memp_free+0x22>
 8006d6a:	4b0c      	ldr	r3, [pc, #48]	; (8006d9c <memp_free+0x44>)
 8006d6c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8006d70:	490b      	ldr	r1, [pc, #44]	; (8006da0 <memp_free+0x48>)
 8006d72:	480c      	ldr	r0, [pc, #48]	; (8006da4 <memp_free+0x4c>)
 8006d74:	f009 fd4e 	bl	8010814 <iprintf>
 8006d78:	e00c      	b.n	8006d94 <memp_free+0x3c>

  if (mem == NULL) {
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d008      	beq.n	8006d92 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8006d80:	79fb      	ldrb	r3, [r7, #7]
 8006d82:	4a09      	ldr	r2, [pc, #36]	; (8006da8 <memp_free+0x50>)
 8006d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d88:	6839      	ldr	r1, [r7, #0]
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f7ff ff9a 	bl	8006cc4 <do_memp_free_pool>
 8006d90:	e000      	b.n	8006d94 <memp_free+0x3c>
    return;
 8006d92:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8006d94:	3708      	adds	r7, #8
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
 8006d9a:	bf00      	nop
 8006d9c:	0801192c 	.word	0x0801192c
 8006da0:	080119fc 	.word	0x080119fc
 8006da4:	08011980 	.word	0x08011980
 8006da8:	080140ec 	.word	0x080140ec

08006dac <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8006dac:	b480      	push	{r7}
 8006dae:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8006db0:	bf00      	nop
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr
	...

08006dbc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b086      	sub	sp, #24
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	60b9      	str	r1, [r7, #8]
 8006dc6:	607a      	str	r2, [r7, #4]
 8006dc8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d108      	bne.n	8006de2 <netif_add+0x26>
 8006dd0:	4b57      	ldr	r3, [pc, #348]	; (8006f30 <netif_add+0x174>)
 8006dd2:	f240 1227 	movw	r2, #295	; 0x127
 8006dd6:	4957      	ldr	r1, [pc, #348]	; (8006f34 <netif_add+0x178>)
 8006dd8:	4857      	ldr	r0, [pc, #348]	; (8006f38 <netif_add+0x17c>)
 8006dda:	f009 fd1b 	bl	8010814 <iprintf>
 8006dde:	2300      	movs	r3, #0
 8006de0:	e0a2      	b.n	8006f28 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8006de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d108      	bne.n	8006dfa <netif_add+0x3e>
 8006de8:	4b51      	ldr	r3, [pc, #324]	; (8006f30 <netif_add+0x174>)
 8006dea:	f44f 7294 	mov.w	r2, #296	; 0x128
 8006dee:	4953      	ldr	r1, [pc, #332]	; (8006f3c <netif_add+0x180>)
 8006df0:	4851      	ldr	r0, [pc, #324]	; (8006f38 <netif_add+0x17c>)
 8006df2:	f009 fd0f 	bl	8010814 <iprintf>
 8006df6:	2300      	movs	r3, #0
 8006df8:	e096      	b.n	8006f28 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d101      	bne.n	8006e04 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8006e00:	4b4f      	ldr	r3, [pc, #316]	; (8006f40 <netif_add+0x184>)
 8006e02:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d101      	bne.n	8006e0e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8006e0a:	4b4d      	ldr	r3, [pc, #308]	; (8006f40 <netif_add+0x184>)
 8006e0c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d101      	bne.n	8006e18 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8006e14:	4b4a      	ldr	r3, [pc, #296]	; (8006f40 <netif_add+0x184>)
 8006e16:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2200      	movs	r2, #0
 8006e22:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2200      	movs	r2, #0
 8006e28:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	4a45      	ldr	r2, [pc, #276]	; (8006f44 <netif_add+0x188>)
 8006e2e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2200      	movs	r2, #0
 8006e34:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2200      	movs	r2, #0
 8006e42:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	6a3a      	ldr	r2, [r7, #32]
 8006e48:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8006e4a:	4b3f      	ldr	r3, [pc, #252]	; (8006f48 <netif_add+0x18c>)
 8006e4c:	781a      	ldrb	r2, [r3, #0]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e58:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	68b9      	ldr	r1, [r7, #8]
 8006e60:	68f8      	ldr	r0, [r7, #12]
 8006e62:	f000 f913 	bl	800708c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8006e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e68:	68f8      	ldr	r0, [r7, #12]
 8006e6a:	4798      	blx	r3
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d001      	beq.n	8006e76 <netif_add+0xba>
    return NULL;
 8006e72:	2300      	movs	r3, #0
 8006e74:	e058      	b.n	8006f28 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006e7c:	2bff      	cmp	r3, #255	; 0xff
 8006e7e:	d103      	bne.n	8006e88 <netif_add+0xcc>
        netif->num = 0;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2200      	movs	r2, #0
 8006e84:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006e8c:	4b2f      	ldr	r3, [pc, #188]	; (8006f4c <netif_add+0x190>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	617b      	str	r3, [r7, #20]
 8006e92:	e02b      	b.n	8006eec <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8006e94:	697a      	ldr	r2, [r7, #20]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d106      	bne.n	8006eaa <netif_add+0xee>
 8006e9c:	4b24      	ldr	r3, [pc, #144]	; (8006f30 <netif_add+0x174>)
 8006e9e:	f240 128b 	movw	r2, #395	; 0x18b
 8006ea2:	492b      	ldr	r1, [pc, #172]	; (8006f50 <netif_add+0x194>)
 8006ea4:	4824      	ldr	r0, [pc, #144]	; (8006f38 <netif_add+0x17c>)
 8006ea6:	f009 fcb5 	bl	8010814 <iprintf>
        num_netifs++;
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	3301      	adds	r3, #1
 8006eae:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	2bff      	cmp	r3, #255	; 0xff
 8006eb4:	dd06      	ble.n	8006ec4 <netif_add+0x108>
 8006eb6:	4b1e      	ldr	r3, [pc, #120]	; (8006f30 <netif_add+0x174>)
 8006eb8:	f240 128d 	movw	r2, #397	; 0x18d
 8006ebc:	4925      	ldr	r1, [pc, #148]	; (8006f54 <netif_add+0x198>)
 8006ebe:	481e      	ldr	r0, [pc, #120]	; (8006f38 <netif_add+0x17c>)
 8006ec0:	f009 fca8 	bl	8010814 <iprintf>
        if (netif2->num == netif->num) {
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d108      	bne.n	8006ee6 <netif_add+0x12a>
          netif->num++;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006eda:	3301      	adds	r3, #1
 8006edc:	b2da      	uxtb	r2, r3
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8006ee4:	e005      	b.n	8006ef2 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	617b      	str	r3, [r7, #20]
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d1d0      	bne.n	8006e94 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d1be      	bne.n	8006e76 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006efe:	2bfe      	cmp	r3, #254	; 0xfe
 8006f00:	d103      	bne.n	8006f0a <netif_add+0x14e>
    netif_num = 0;
 8006f02:	4b11      	ldr	r3, [pc, #68]	; (8006f48 <netif_add+0x18c>)
 8006f04:	2200      	movs	r2, #0
 8006f06:	701a      	strb	r2, [r3, #0]
 8006f08:	e006      	b.n	8006f18 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006f10:	3301      	adds	r3, #1
 8006f12:	b2da      	uxtb	r2, r3
 8006f14:	4b0c      	ldr	r3, [pc, #48]	; (8006f48 <netif_add+0x18c>)
 8006f16:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8006f18:	4b0c      	ldr	r3, [pc, #48]	; (8006f4c <netif_add+0x190>)
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8006f20:	4a0a      	ldr	r2, [pc, #40]	; (8006f4c <netif_add+0x190>)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8006f26:	68fb      	ldr	r3, [r7, #12]
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3718      	adds	r7, #24
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}
 8006f30:	08011a18 	.word	0x08011a18
 8006f34:	08011aac 	.word	0x08011aac
 8006f38:	08011a68 	.word	0x08011a68
 8006f3c:	08011ac8 	.word	0x08011ac8
 8006f40:	08014150 	.word	0x08014150
 8006f44:	08007367 	.word	0x08007367
 8006f48:	200088a0 	.word	0x200088a0
 8006f4c:	20008898 	.word	0x20008898
 8006f50:	08011aec 	.word	0x08011aec
 8006f54:	08011b00 	.word	0x08011b00

08006f58 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b082      	sub	sp, #8
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8006f62:	6839      	ldr	r1, [r7, #0]
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f002 fbe5 	bl	8009734 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8006f6a:	6839      	ldr	r1, [r7, #0]
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f007 f85b 	bl	800e028 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8006f72:	bf00      	nop
 8006f74:	3708      	adds	r7, #8
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
	...

08006f7c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b086      	sub	sp, #24
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d106      	bne.n	8006f9c <netif_do_set_ipaddr+0x20>
 8006f8e:	4b1d      	ldr	r3, [pc, #116]	; (8007004 <netif_do_set_ipaddr+0x88>)
 8006f90:	f240 12cb 	movw	r2, #459	; 0x1cb
 8006f94:	491c      	ldr	r1, [pc, #112]	; (8007008 <netif_do_set_ipaddr+0x8c>)
 8006f96:	481d      	ldr	r0, [pc, #116]	; (800700c <netif_do_set_ipaddr+0x90>)
 8006f98:	f009 fc3c 	bl	8010814 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d106      	bne.n	8006fb0 <netif_do_set_ipaddr+0x34>
 8006fa2:	4b18      	ldr	r3, [pc, #96]	; (8007004 <netif_do_set_ipaddr+0x88>)
 8006fa4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8006fa8:	4917      	ldr	r1, [pc, #92]	; (8007008 <netif_do_set_ipaddr+0x8c>)
 8006faa:	4818      	ldr	r0, [pc, #96]	; (800700c <netif_do_set_ipaddr+0x90>)
 8006fac:	f009 fc32 	bl	8010814 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	3304      	adds	r3, #4
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d01c      	beq.n	8006ff8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	3304      	adds	r3, #4
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8006fce:	f107 0314 	add.w	r3, r7, #20
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f7ff ffbf 	bl	8006f58 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d002      	beq.n	8006fe6 <netif_do_set_ipaddr+0x6a>
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	e000      	b.n	8006fe8 <netif_do_set_ipaddr+0x6c>
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	68fa      	ldr	r2, [r7, #12]
 8006fea:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8006fec:	2101      	movs	r1, #1
 8006fee:	68f8      	ldr	r0, [r7, #12]
 8006ff0:	f000 f8d2 	bl	8007198 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e000      	b.n	8006ffa <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8006ff8:	2300      	movs	r3, #0
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3718      	adds	r7, #24
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	08011a18 	.word	0x08011a18
 8007008:	08011b30 	.word	0x08011b30
 800700c:	08011a68 	.word	0x08011a68

08007010 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8007010:	b480      	push	{r7}
 8007012:	b085      	sub	sp, #20
 8007014:	af00      	add	r7, sp, #0
 8007016:	60f8      	str	r0, [r7, #12]
 8007018:	60b9      	str	r1, [r7, #8]
 800701a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	3308      	adds	r3, #8
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	429a      	cmp	r2, r3
 8007028:	d00a      	beq.n	8007040 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d002      	beq.n	8007036 <netif_do_set_netmask+0x26>
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	e000      	b.n	8007038 <netif_do_set_netmask+0x28>
 8007036:	2300      	movs	r3, #0
 8007038:	68fa      	ldr	r2, [r7, #12]
 800703a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800703c:	2301      	movs	r3, #1
 800703e:	e000      	b.n	8007042 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8007040:	2300      	movs	r3, #0
}
 8007042:	4618      	mov	r0, r3
 8007044:	3714      	adds	r7, #20
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr

0800704e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800704e:	b480      	push	{r7}
 8007050:	b085      	sub	sp, #20
 8007052:	af00      	add	r7, sp, #0
 8007054:	60f8      	str	r0, [r7, #12]
 8007056:	60b9      	str	r1, [r7, #8]
 8007058:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	330c      	adds	r3, #12
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	429a      	cmp	r2, r3
 8007066:	d00a      	beq.n	800707e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d002      	beq.n	8007074 <netif_do_set_gw+0x26>
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	e000      	b.n	8007076 <netif_do_set_gw+0x28>
 8007074:	2300      	movs	r3, #0
 8007076:	68fa      	ldr	r2, [r7, #12]
 8007078:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800707a:	2301      	movs	r3, #1
 800707c:	e000      	b.n	8007080 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800707e:	2300      	movs	r3, #0
}
 8007080:	4618      	mov	r0, r3
 8007082:	3714      	adds	r7, #20
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr

0800708c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b088      	sub	sp, #32
 8007090:	af00      	add	r7, sp, #0
 8007092:	60f8      	str	r0, [r7, #12]
 8007094:	60b9      	str	r1, [r7, #8]
 8007096:	607a      	str	r2, [r7, #4]
 8007098:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800709a:	2300      	movs	r3, #0
 800709c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800709e:	2300      	movs	r3, #0
 80070a0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d101      	bne.n	80070ac <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80070a8:	4b1c      	ldr	r3, [pc, #112]	; (800711c <netif_set_addr+0x90>)
 80070aa:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d101      	bne.n	80070b6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80070b2:	4b1a      	ldr	r3, [pc, #104]	; (800711c <netif_set_addr+0x90>)
 80070b4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d101      	bne.n	80070c0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80070bc:	4b17      	ldr	r3, [pc, #92]	; (800711c <netif_set_addr+0x90>)
 80070be:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d003      	beq.n	80070ce <netif_set_addr+0x42>
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d101      	bne.n	80070d2 <netif_set_addr+0x46>
 80070ce:	2301      	movs	r3, #1
 80070d0:	e000      	b.n	80070d4 <netif_set_addr+0x48>
 80070d2:	2300      	movs	r3, #0
 80070d4:	617b      	str	r3, [r7, #20]
  if (remove) {
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d006      	beq.n	80070ea <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80070dc:	f107 0310 	add.w	r3, r7, #16
 80070e0:	461a      	mov	r2, r3
 80070e2:	68b9      	ldr	r1, [r7, #8]
 80070e4:	68f8      	ldr	r0, [r7, #12]
 80070e6:	f7ff ff49 	bl	8006f7c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80070ea:	69fa      	ldr	r2, [r7, #28]
 80070ec:	6879      	ldr	r1, [r7, #4]
 80070ee:	68f8      	ldr	r0, [r7, #12]
 80070f0:	f7ff ff8e 	bl	8007010 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80070f4:	69ba      	ldr	r2, [r7, #24]
 80070f6:	6839      	ldr	r1, [r7, #0]
 80070f8:	68f8      	ldr	r0, [r7, #12]
 80070fa:	f7ff ffa8 	bl	800704e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d106      	bne.n	8007112 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007104:	f107 0310 	add.w	r3, r7, #16
 8007108:	461a      	mov	r2, r3
 800710a:	68b9      	ldr	r1, [r7, #8]
 800710c:	68f8      	ldr	r0, [r7, #12]
 800710e:	f7ff ff35 	bl	8006f7c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8007112:	bf00      	nop
 8007114:	3720      	adds	r7, #32
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
 800711a:	bf00      	nop
 800711c:	08014150 	.word	0x08014150

08007120 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8007120:	b480      	push	{r7}
 8007122:	b083      	sub	sp, #12
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8007128:	4a04      	ldr	r2, [pc, #16]	; (800713c <netif_set_default+0x1c>)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800712e:	bf00      	nop
 8007130:	370c      	adds	r7, #12
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr
 800713a:	bf00      	nop
 800713c:	2000889c 	.word	0x2000889c

08007140 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b082      	sub	sp, #8
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d107      	bne.n	800715e <netif_set_up+0x1e>
 800714e:	4b0f      	ldr	r3, [pc, #60]	; (800718c <netif_set_up+0x4c>)
 8007150:	f44f 7254 	mov.w	r2, #848	; 0x350
 8007154:	490e      	ldr	r1, [pc, #56]	; (8007190 <netif_set_up+0x50>)
 8007156:	480f      	ldr	r0, [pc, #60]	; (8007194 <netif_set_up+0x54>)
 8007158:	f009 fb5c 	bl	8010814 <iprintf>
 800715c:	e013      	b.n	8007186 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007164:	f003 0301 	and.w	r3, r3, #1
 8007168:	2b00      	cmp	r3, #0
 800716a:	d10c      	bne.n	8007186 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007172:	f043 0301 	orr.w	r3, r3, #1
 8007176:	b2da      	uxtb	r2, r3
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800717e:	2103      	movs	r1, #3
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 f809 	bl	8007198 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8007186:	3708      	adds	r7, #8
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}
 800718c:	08011a18 	.word	0x08011a18
 8007190:	08011ba0 	.word	0x08011ba0
 8007194:	08011a68 	.word	0x08011a68

08007198 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b082      	sub	sp, #8
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	460b      	mov	r3, r1
 80071a2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d106      	bne.n	80071b8 <netif_issue_reports+0x20>
 80071aa:	4b18      	ldr	r3, [pc, #96]	; (800720c <netif_issue_reports+0x74>)
 80071ac:	f240 326d 	movw	r2, #877	; 0x36d
 80071b0:	4917      	ldr	r1, [pc, #92]	; (8007210 <netif_issue_reports+0x78>)
 80071b2:	4818      	ldr	r0, [pc, #96]	; (8007214 <netif_issue_reports+0x7c>)
 80071b4:	f009 fb2e 	bl	8010814 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80071be:	f003 0304 	and.w	r3, r3, #4
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d01e      	beq.n	8007204 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80071cc:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d017      	beq.n	8007204 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80071d4:	78fb      	ldrb	r3, [r7, #3]
 80071d6:	f003 0301 	and.w	r3, r3, #1
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d013      	beq.n	8007206 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	3304      	adds	r3, #4
 80071e2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d00e      	beq.n	8007206 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80071ee:	f003 0308 	and.w	r3, r3, #8
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d007      	beq.n	8007206 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	3304      	adds	r3, #4
 80071fa:	4619      	mov	r1, r3
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f007 fe7d 	bl	800eefc <etharp_request>
 8007202:	e000      	b.n	8007206 <netif_issue_reports+0x6e>
    return;
 8007204:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8007206:	3708      	adds	r7, #8
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}
 800720c:	08011a18 	.word	0x08011a18
 8007210:	08011bbc 	.word	0x08011bbc
 8007214:	08011a68 	.word	0x08011a68

08007218 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b082      	sub	sp, #8
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d107      	bne.n	8007236 <netif_set_down+0x1e>
 8007226:	4b12      	ldr	r3, [pc, #72]	; (8007270 <netif_set_down+0x58>)
 8007228:	f240 329b 	movw	r2, #923	; 0x39b
 800722c:	4911      	ldr	r1, [pc, #68]	; (8007274 <netif_set_down+0x5c>)
 800722e:	4812      	ldr	r0, [pc, #72]	; (8007278 <netif_set_down+0x60>)
 8007230:	f009 faf0 	bl	8010814 <iprintf>
 8007234:	e019      	b.n	800726a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800723c:	f003 0301 	and.w	r3, r3, #1
 8007240:	2b00      	cmp	r3, #0
 8007242:	d012      	beq.n	800726a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800724a:	f023 0301 	bic.w	r3, r3, #1
 800724e:	b2da      	uxtb	r2, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800725c:	f003 0308 	and.w	r3, r3, #8
 8007260:	2b00      	cmp	r3, #0
 8007262:	d002      	beq.n	800726a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f007 fa07 	bl	800e678 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800726a:	3708      	adds	r7, #8
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}
 8007270:	08011a18 	.word	0x08011a18
 8007274:	08011be0 	.word	0x08011be0
 8007278:	08011a68 	.word	0x08011a68

0800727c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d107      	bne.n	800729a <netif_set_link_up+0x1e>
 800728a:	4b13      	ldr	r3, [pc, #76]	; (80072d8 <netif_set_link_up+0x5c>)
 800728c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8007290:	4912      	ldr	r1, [pc, #72]	; (80072dc <netif_set_link_up+0x60>)
 8007292:	4813      	ldr	r0, [pc, #76]	; (80072e0 <netif_set_link_up+0x64>)
 8007294:	f009 fabe 	bl	8010814 <iprintf>
 8007298:	e01b      	b.n	80072d2 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80072a0:	f003 0304 	and.w	r3, r3, #4
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d114      	bne.n	80072d2 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80072ae:	f043 0304 	orr.w	r3, r3, #4
 80072b2:	b2da      	uxtb	r2, r3
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80072ba:	2103      	movs	r1, #3
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f7ff ff6b 	bl	8007198 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	69db      	ldr	r3, [r3, #28]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d003      	beq.n	80072d2 <netif_set_link_up+0x56>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	69db      	ldr	r3, [r3, #28]
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80072d2:	3708      	adds	r7, #8
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}
 80072d8:	08011a18 	.word	0x08011a18
 80072dc:	08011c00 	.word	0x08011c00
 80072e0:	08011a68 	.word	0x08011a68

080072e4 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b082      	sub	sp, #8
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d107      	bne.n	8007302 <netif_set_link_down+0x1e>
 80072f2:	4b11      	ldr	r3, [pc, #68]	; (8007338 <netif_set_link_down+0x54>)
 80072f4:	f240 4206 	movw	r2, #1030	; 0x406
 80072f8:	4910      	ldr	r1, [pc, #64]	; (800733c <netif_set_link_down+0x58>)
 80072fa:	4811      	ldr	r0, [pc, #68]	; (8007340 <netif_set_link_down+0x5c>)
 80072fc:	f009 fa8a 	bl	8010814 <iprintf>
 8007300:	e017      	b.n	8007332 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007308:	f003 0304 	and.w	r3, r3, #4
 800730c:	2b00      	cmp	r3, #0
 800730e:	d010      	beq.n	8007332 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007316:	f023 0304 	bic.w	r3, r3, #4
 800731a:	b2da      	uxtb	r2, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	69db      	ldr	r3, [r3, #28]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d003      	beq.n	8007332 <netif_set_link_down+0x4e>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	69db      	ldr	r3, [r3, #28]
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8007332:	3708      	adds	r7, #8
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}
 8007338:	08011a18 	.word	0x08011a18
 800733c:	08011c24 	.word	0x08011c24
 8007340:	08011a68 	.word	0x08011a68

08007344 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d002      	beq.n	800735a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	683a      	ldr	r2, [r7, #0]
 8007358:	61da      	str	r2, [r3, #28]
  }
}
 800735a:	bf00      	nop
 800735c:	370c      	adds	r7, #12
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr

08007366 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8007366:	b480      	push	{r7}
 8007368:	b085      	sub	sp, #20
 800736a:	af00      	add	r7, sp, #0
 800736c:	60f8      	str	r0, [r7, #12]
 800736e:	60b9      	str	r1, [r7, #8]
 8007370:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8007372:	f06f 030b 	mvn.w	r3, #11
}
 8007376:	4618      	mov	r0, r3
 8007378:	3714      	adds	r7, #20
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr
	...

08007384 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8007384:	b480      	push	{r7}
 8007386:	b085      	sub	sp, #20
 8007388:	af00      	add	r7, sp, #0
 800738a:	4603      	mov	r3, r0
 800738c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800738e:	79fb      	ldrb	r3, [r7, #7]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d013      	beq.n	80073bc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8007394:	4b0d      	ldr	r3, [pc, #52]	; (80073cc <netif_get_by_index+0x48>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	60fb      	str	r3, [r7, #12]
 800739a:	e00c      	b.n	80073b6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80073a2:	3301      	adds	r3, #1
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	79fa      	ldrb	r2, [r7, #7]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d101      	bne.n	80073b0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	e006      	b.n	80073be <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	60fb      	str	r3, [r7, #12]
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d1ef      	bne.n	800739c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80073bc:	2300      	movs	r3, #0
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3714      	adds	r7, #20
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr
 80073ca:	bf00      	nop
 80073cc:	20008898 	.word	0x20008898

080073d0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b082      	sub	sp, #8
 80073d4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80073d6:	4b0c      	ldr	r3, [pc, #48]	; (8007408 <pbuf_free_ooseq+0x38>)
 80073d8:	2200      	movs	r2, #0
 80073da:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80073dc:	4b0b      	ldr	r3, [pc, #44]	; (800740c <pbuf_free_ooseq+0x3c>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	607b      	str	r3, [r7, #4]
 80073e2:	e00a      	b.n	80073fa <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d003      	beq.n	80073f4 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f002 f9df 	bl	80097b0 <tcp_free_ooseq>
      return;
 80073f2:	e005      	b.n	8007400 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	607b      	str	r3, [r7, #4]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d1f1      	bne.n	80073e4 <pbuf_free_ooseq+0x14>
    }
  }
}
 8007400:	3708      	adds	r7, #8
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}
 8007406:	bf00      	nop
 8007408:	200088a1 	.word	0x200088a1
 800740c:	200088b0 	.word	0x200088b0

08007410 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8007410:	b480      	push	{r7}
 8007412:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8007414:	4b03      	ldr	r3, [pc, #12]	; (8007424 <pbuf_pool_is_empty+0x14>)
 8007416:	2201      	movs	r2, #1
 8007418:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800741a:	bf00      	nop
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr
 8007424:	200088a1 	.word	0x200088a1

08007428 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8007428:	b480      	push	{r7}
 800742a:	b085      	sub	sp, #20
 800742c:	af00      	add	r7, sp, #0
 800742e:	60f8      	str	r0, [r7, #12]
 8007430:	60b9      	str	r1, [r7, #8]
 8007432:	4611      	mov	r1, r2
 8007434:	461a      	mov	r2, r3
 8007436:	460b      	mov	r3, r1
 8007438:	80fb      	strh	r3, [r7, #6]
 800743a:	4613      	mov	r3, r2
 800743c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2200      	movs	r2, #0
 8007442:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	68ba      	ldr	r2, [r7, #8]
 8007448:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	88fa      	ldrh	r2, [r7, #6]
 800744e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	88ba      	ldrh	r2, [r7, #4]
 8007454:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8007456:	8b3b      	ldrh	r3, [r7, #24]
 8007458:	b2da      	uxtb	r2, r3
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	7f3a      	ldrb	r2, [r7, #28]
 8007462:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2201      	movs	r2, #1
 8007468:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2200      	movs	r2, #0
 800746e:	73da      	strb	r2, [r3, #15]
}
 8007470:	bf00      	nop
 8007472:	3714      	adds	r7, #20
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr

0800747c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b08c      	sub	sp, #48	; 0x30
 8007480:	af02      	add	r7, sp, #8
 8007482:	4603      	mov	r3, r0
 8007484:	71fb      	strb	r3, [r7, #7]
 8007486:	460b      	mov	r3, r1
 8007488:	80bb      	strh	r3, [r7, #4]
 800748a:	4613      	mov	r3, r2
 800748c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800748e:	79fb      	ldrb	r3, [r7, #7]
 8007490:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8007492:	887b      	ldrh	r3, [r7, #2]
 8007494:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8007498:	d07f      	beq.n	800759a <pbuf_alloc+0x11e>
 800749a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800749e:	f300 80c8 	bgt.w	8007632 <pbuf_alloc+0x1b6>
 80074a2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80074a6:	d010      	beq.n	80074ca <pbuf_alloc+0x4e>
 80074a8:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80074ac:	f300 80c1 	bgt.w	8007632 <pbuf_alloc+0x1b6>
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d002      	beq.n	80074ba <pbuf_alloc+0x3e>
 80074b4:	2b41      	cmp	r3, #65	; 0x41
 80074b6:	f040 80bc 	bne.w	8007632 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80074ba:	887a      	ldrh	r2, [r7, #2]
 80074bc:	88bb      	ldrh	r3, [r7, #4]
 80074be:	4619      	mov	r1, r3
 80074c0:	2000      	movs	r0, #0
 80074c2:	f000 f8d1 	bl	8007668 <pbuf_alloc_reference>
 80074c6:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80074c8:	e0bd      	b.n	8007646 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80074ca:	2300      	movs	r3, #0
 80074cc:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80074ce:	2300      	movs	r3, #0
 80074d0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80074d2:	88bb      	ldrh	r3, [r7, #4]
 80074d4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80074d6:	2008      	movs	r0, #8
 80074d8:	f7ff fbce 	bl	8006c78 <memp_malloc>
 80074dc:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d109      	bne.n	80074f8 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80074e4:	f7ff ff94 	bl	8007410 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80074e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d002      	beq.n	80074f4 <pbuf_alloc+0x78>
            pbuf_free(p);
 80074ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80074f0:	f000 faa8 	bl	8007a44 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80074f4:	2300      	movs	r3, #0
 80074f6:	e0a7      	b.n	8007648 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80074f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80074fa:	3303      	adds	r3, #3
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	f023 0303 	bic.w	r3, r3, #3
 8007502:	b29b      	uxth	r3, r3
 8007504:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8007508:	b29b      	uxth	r3, r3
 800750a:	8b7a      	ldrh	r2, [r7, #26]
 800750c:	4293      	cmp	r3, r2
 800750e:	bf28      	it	cs
 8007510:	4613      	movcs	r3, r2
 8007512:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8007514:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007516:	3310      	adds	r3, #16
 8007518:	693a      	ldr	r2, [r7, #16]
 800751a:	4413      	add	r3, r2
 800751c:	3303      	adds	r3, #3
 800751e:	f023 0303 	bic.w	r3, r3, #3
 8007522:	4618      	mov	r0, r3
 8007524:	89f9      	ldrh	r1, [r7, #14]
 8007526:	8b7a      	ldrh	r2, [r7, #26]
 8007528:	2300      	movs	r3, #0
 800752a:	9301      	str	r3, [sp, #4]
 800752c:	887b      	ldrh	r3, [r7, #2]
 800752e:	9300      	str	r3, [sp, #0]
 8007530:	460b      	mov	r3, r1
 8007532:	4601      	mov	r1, r0
 8007534:	6938      	ldr	r0, [r7, #16]
 8007536:	f7ff ff77 	bl	8007428 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	f003 0303 	and.w	r3, r3, #3
 8007542:	2b00      	cmp	r3, #0
 8007544:	d006      	beq.n	8007554 <pbuf_alloc+0xd8>
 8007546:	4b42      	ldr	r3, [pc, #264]	; (8007650 <pbuf_alloc+0x1d4>)
 8007548:	f44f 7280 	mov.w	r2, #256	; 0x100
 800754c:	4941      	ldr	r1, [pc, #260]	; (8007654 <pbuf_alloc+0x1d8>)
 800754e:	4842      	ldr	r0, [pc, #264]	; (8007658 <pbuf_alloc+0x1dc>)
 8007550:	f009 f960 	bl	8010814 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8007554:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007556:	3303      	adds	r3, #3
 8007558:	f023 0303 	bic.w	r3, r3, #3
 800755c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8007560:	d106      	bne.n	8007570 <pbuf_alloc+0xf4>
 8007562:	4b3b      	ldr	r3, [pc, #236]	; (8007650 <pbuf_alloc+0x1d4>)
 8007564:	f44f 7281 	mov.w	r2, #258	; 0x102
 8007568:	493c      	ldr	r1, [pc, #240]	; (800765c <pbuf_alloc+0x1e0>)
 800756a:	483b      	ldr	r0, [pc, #236]	; (8007658 <pbuf_alloc+0x1dc>)
 800756c:	f009 f952 	bl	8010814 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8007570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007572:	2b00      	cmp	r3, #0
 8007574:	d102      	bne.n	800757c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	627b      	str	r3, [r7, #36]	; 0x24
 800757a:	e002      	b.n	8007582 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800757c:	69fb      	ldr	r3, [r7, #28]
 800757e:	693a      	ldr	r2, [r7, #16]
 8007580:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8007586:	8b7a      	ldrh	r2, [r7, #26]
 8007588:	89fb      	ldrh	r3, [r7, #14]
 800758a:	1ad3      	subs	r3, r2, r3
 800758c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800758e:	2300      	movs	r3, #0
 8007590:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8007592:	8b7b      	ldrh	r3, [r7, #26]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d19e      	bne.n	80074d6 <pbuf_alloc+0x5a>
      break;
 8007598:	e055      	b.n	8007646 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800759a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800759c:	3303      	adds	r3, #3
 800759e:	b29b      	uxth	r3, r3
 80075a0:	f023 0303 	bic.w	r3, r3, #3
 80075a4:	b29a      	uxth	r2, r3
 80075a6:	88bb      	ldrh	r3, [r7, #4]
 80075a8:	3303      	adds	r3, #3
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	f023 0303 	bic.w	r3, r3, #3
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	4413      	add	r3, r2
 80075b4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80075b6:	8b3b      	ldrh	r3, [r7, #24]
 80075b8:	3310      	adds	r3, #16
 80075ba:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80075bc:	8b3a      	ldrh	r2, [r7, #24]
 80075be:	88bb      	ldrh	r3, [r7, #4]
 80075c0:	3303      	adds	r3, #3
 80075c2:	f023 0303 	bic.w	r3, r3, #3
 80075c6:	429a      	cmp	r2, r3
 80075c8:	d306      	bcc.n	80075d8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80075ca:	8afa      	ldrh	r2, [r7, #22]
 80075cc:	88bb      	ldrh	r3, [r7, #4]
 80075ce:	3303      	adds	r3, #3
 80075d0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d201      	bcs.n	80075dc <pbuf_alloc+0x160>
        return NULL;
 80075d8:	2300      	movs	r3, #0
 80075da:	e035      	b.n	8007648 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80075dc:	8afb      	ldrh	r3, [r7, #22]
 80075de:	4618      	mov	r0, r3
 80075e0:	f7ff f9ba 	bl	8006958 <mem_malloc>
 80075e4:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80075e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d101      	bne.n	80075f0 <pbuf_alloc+0x174>
        return NULL;
 80075ec:	2300      	movs	r3, #0
 80075ee:	e02b      	b.n	8007648 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80075f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80075f2:	3310      	adds	r3, #16
 80075f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075f6:	4413      	add	r3, r2
 80075f8:	3303      	adds	r3, #3
 80075fa:	f023 0303 	bic.w	r3, r3, #3
 80075fe:	4618      	mov	r0, r3
 8007600:	88b9      	ldrh	r1, [r7, #4]
 8007602:	88ba      	ldrh	r2, [r7, #4]
 8007604:	2300      	movs	r3, #0
 8007606:	9301      	str	r3, [sp, #4]
 8007608:	887b      	ldrh	r3, [r7, #2]
 800760a:	9300      	str	r3, [sp, #0]
 800760c:	460b      	mov	r3, r1
 800760e:	4601      	mov	r1, r0
 8007610:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007612:	f7ff ff09 	bl	8007428 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8007616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	f003 0303 	and.w	r3, r3, #3
 800761e:	2b00      	cmp	r3, #0
 8007620:	d010      	beq.n	8007644 <pbuf_alloc+0x1c8>
 8007622:	4b0b      	ldr	r3, [pc, #44]	; (8007650 <pbuf_alloc+0x1d4>)
 8007624:	f44f 7291 	mov.w	r2, #290	; 0x122
 8007628:	490d      	ldr	r1, [pc, #52]	; (8007660 <pbuf_alloc+0x1e4>)
 800762a:	480b      	ldr	r0, [pc, #44]	; (8007658 <pbuf_alloc+0x1dc>)
 800762c:	f009 f8f2 	bl	8010814 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8007630:	e008      	b.n	8007644 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8007632:	4b07      	ldr	r3, [pc, #28]	; (8007650 <pbuf_alloc+0x1d4>)
 8007634:	f240 1227 	movw	r2, #295	; 0x127
 8007638:	490a      	ldr	r1, [pc, #40]	; (8007664 <pbuf_alloc+0x1e8>)
 800763a:	4807      	ldr	r0, [pc, #28]	; (8007658 <pbuf_alloc+0x1dc>)
 800763c:	f009 f8ea 	bl	8010814 <iprintf>
      return NULL;
 8007640:	2300      	movs	r3, #0
 8007642:	e001      	b.n	8007648 <pbuf_alloc+0x1cc>
      break;
 8007644:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8007646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007648:	4618      	mov	r0, r3
 800764a:	3728      	adds	r7, #40	; 0x28
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}
 8007650:	08011c48 	.word	0x08011c48
 8007654:	08011c78 	.word	0x08011c78
 8007658:	08011ca8 	.word	0x08011ca8
 800765c:	08011cd0 	.word	0x08011cd0
 8007660:	08011d04 	.word	0x08011d04
 8007664:	08011d30 	.word	0x08011d30

08007668 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b086      	sub	sp, #24
 800766c:	af02      	add	r7, sp, #8
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	460b      	mov	r3, r1
 8007672:	807b      	strh	r3, [r7, #2]
 8007674:	4613      	mov	r3, r2
 8007676:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8007678:	883b      	ldrh	r3, [r7, #0]
 800767a:	2b41      	cmp	r3, #65	; 0x41
 800767c:	d009      	beq.n	8007692 <pbuf_alloc_reference+0x2a>
 800767e:	883b      	ldrh	r3, [r7, #0]
 8007680:	2b01      	cmp	r3, #1
 8007682:	d006      	beq.n	8007692 <pbuf_alloc_reference+0x2a>
 8007684:	4b0f      	ldr	r3, [pc, #60]	; (80076c4 <pbuf_alloc_reference+0x5c>)
 8007686:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800768a:	490f      	ldr	r1, [pc, #60]	; (80076c8 <pbuf_alloc_reference+0x60>)
 800768c:	480f      	ldr	r0, [pc, #60]	; (80076cc <pbuf_alloc_reference+0x64>)
 800768e:	f009 f8c1 	bl	8010814 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8007692:	2007      	movs	r0, #7
 8007694:	f7ff faf0 	bl	8006c78 <memp_malloc>
 8007698:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d101      	bne.n	80076a4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80076a0:	2300      	movs	r3, #0
 80076a2:	e00b      	b.n	80076bc <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80076a4:	8879      	ldrh	r1, [r7, #2]
 80076a6:	887a      	ldrh	r2, [r7, #2]
 80076a8:	2300      	movs	r3, #0
 80076aa:	9301      	str	r3, [sp, #4]
 80076ac:	883b      	ldrh	r3, [r7, #0]
 80076ae:	9300      	str	r3, [sp, #0]
 80076b0:	460b      	mov	r3, r1
 80076b2:	6879      	ldr	r1, [r7, #4]
 80076b4:	68f8      	ldr	r0, [r7, #12]
 80076b6:	f7ff feb7 	bl	8007428 <pbuf_init_alloced_pbuf>
  return p;
 80076ba:	68fb      	ldr	r3, [r7, #12]
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3710      	adds	r7, #16
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}
 80076c4:	08011c48 	.word	0x08011c48
 80076c8:	08011d4c 	.word	0x08011d4c
 80076cc:	08011ca8 	.word	0x08011ca8

080076d0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b088      	sub	sp, #32
 80076d4:	af02      	add	r7, sp, #8
 80076d6:	607b      	str	r3, [r7, #4]
 80076d8:	4603      	mov	r3, r0
 80076da:	73fb      	strb	r3, [r7, #15]
 80076dc:	460b      	mov	r3, r1
 80076de:	81bb      	strh	r3, [r7, #12]
 80076e0:	4613      	mov	r3, r2
 80076e2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80076e4:	7bfb      	ldrb	r3, [r7, #15]
 80076e6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80076e8:	8a7b      	ldrh	r3, [r7, #18]
 80076ea:	3303      	adds	r3, #3
 80076ec:	f023 0203 	bic.w	r2, r3, #3
 80076f0:	89bb      	ldrh	r3, [r7, #12]
 80076f2:	441a      	add	r2, r3
 80076f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80076f6:	429a      	cmp	r2, r3
 80076f8:	d901      	bls.n	80076fe <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80076fa:	2300      	movs	r3, #0
 80076fc:	e018      	b.n	8007730 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80076fe:	6a3b      	ldr	r3, [r7, #32]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d007      	beq.n	8007714 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8007704:	8a7b      	ldrh	r3, [r7, #18]
 8007706:	3303      	adds	r3, #3
 8007708:	f023 0303 	bic.w	r3, r3, #3
 800770c:	6a3a      	ldr	r2, [r7, #32]
 800770e:	4413      	add	r3, r2
 8007710:	617b      	str	r3, [r7, #20]
 8007712:	e001      	b.n	8007718 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8007714:	2300      	movs	r3, #0
 8007716:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	89b9      	ldrh	r1, [r7, #12]
 800771c:	89ba      	ldrh	r2, [r7, #12]
 800771e:	2302      	movs	r3, #2
 8007720:	9301      	str	r3, [sp, #4]
 8007722:	897b      	ldrh	r3, [r7, #10]
 8007724:	9300      	str	r3, [sp, #0]
 8007726:	460b      	mov	r3, r1
 8007728:	6979      	ldr	r1, [r7, #20]
 800772a:	f7ff fe7d 	bl	8007428 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800772e:	687b      	ldr	r3, [r7, #4]
}
 8007730:	4618      	mov	r0, r3
 8007732:	3718      	adds	r7, #24
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	460b      	mov	r3, r1
 8007742:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d106      	bne.n	8007758 <pbuf_realloc+0x20>
 800774a:	4b3a      	ldr	r3, [pc, #232]	; (8007834 <pbuf_realloc+0xfc>)
 800774c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8007750:	4939      	ldr	r1, [pc, #228]	; (8007838 <pbuf_realloc+0x100>)
 8007752:	483a      	ldr	r0, [pc, #232]	; (800783c <pbuf_realloc+0x104>)
 8007754:	f009 f85e 	bl	8010814 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	891b      	ldrh	r3, [r3, #8]
 800775c:	887a      	ldrh	r2, [r7, #2]
 800775e:	429a      	cmp	r2, r3
 8007760:	d263      	bcs.n	800782a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	891a      	ldrh	r2, [r3, #8]
 8007766:	887b      	ldrh	r3, [r7, #2]
 8007768:	1ad3      	subs	r3, r2, r3
 800776a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800776c:	887b      	ldrh	r3, [r7, #2]
 800776e:	817b      	strh	r3, [r7, #10]
  q = p;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8007774:	e018      	b.n	80077a8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	895b      	ldrh	r3, [r3, #10]
 800777a:	897a      	ldrh	r2, [r7, #10]
 800777c:	1ad3      	subs	r3, r2, r3
 800777e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	891a      	ldrh	r2, [r3, #8]
 8007784:	893b      	ldrh	r3, [r7, #8]
 8007786:	1ad3      	subs	r3, r2, r3
 8007788:	b29a      	uxth	r2, r3
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d106      	bne.n	80077a8 <pbuf_realloc+0x70>
 800779a:	4b26      	ldr	r3, [pc, #152]	; (8007834 <pbuf_realloc+0xfc>)
 800779c:	f240 12af 	movw	r2, #431	; 0x1af
 80077a0:	4927      	ldr	r1, [pc, #156]	; (8007840 <pbuf_realloc+0x108>)
 80077a2:	4826      	ldr	r0, [pc, #152]	; (800783c <pbuf_realloc+0x104>)
 80077a4:	f009 f836 	bl	8010814 <iprintf>
  while (rem_len > q->len) {
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	895b      	ldrh	r3, [r3, #10]
 80077ac:	897a      	ldrh	r2, [r7, #10]
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d8e1      	bhi.n	8007776 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	7b1b      	ldrb	r3, [r3, #12]
 80077b6:	f003 030f 	and.w	r3, r3, #15
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d121      	bne.n	8007802 <pbuf_realloc+0xca>
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	895b      	ldrh	r3, [r3, #10]
 80077c2:	897a      	ldrh	r2, [r7, #10]
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d01c      	beq.n	8007802 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	7b5b      	ldrb	r3, [r3, #13]
 80077cc:	f003 0302 	and.w	r3, r3, #2
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d116      	bne.n	8007802 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	685a      	ldr	r2, [r3, #4]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	1ad3      	subs	r3, r2, r3
 80077dc:	b29a      	uxth	r2, r3
 80077de:	897b      	ldrh	r3, [r7, #10]
 80077e0:	4413      	add	r3, r2
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	4619      	mov	r1, r3
 80077e6:	68f8      	ldr	r0, [r7, #12]
 80077e8:	f7fe ffba 	bl	8006760 <mem_trim>
 80077ec:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d106      	bne.n	8007802 <pbuf_realloc+0xca>
 80077f4:	4b0f      	ldr	r3, [pc, #60]	; (8007834 <pbuf_realloc+0xfc>)
 80077f6:	f240 12bd 	movw	r2, #445	; 0x1bd
 80077fa:	4912      	ldr	r1, [pc, #72]	; (8007844 <pbuf_realloc+0x10c>)
 80077fc:	480f      	ldr	r0, [pc, #60]	; (800783c <pbuf_realloc+0x104>)
 80077fe:	f009 f809 	bl	8010814 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	897a      	ldrh	r2, [r7, #10]
 8007806:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	895a      	ldrh	r2, [r3, #10]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d004      	beq.n	8007822 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4618      	mov	r0, r3
 800781e:	f000 f911 	bl	8007a44 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2200      	movs	r2, #0
 8007826:	601a      	str	r2, [r3, #0]
 8007828:	e000      	b.n	800782c <pbuf_realloc+0xf4>
    return;
 800782a:	bf00      	nop

}
 800782c:	3710      	adds	r7, #16
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
 8007832:	bf00      	nop
 8007834:	08011c48 	.word	0x08011c48
 8007838:	08011d60 	.word	0x08011d60
 800783c:	08011ca8 	.word	0x08011ca8
 8007840:	08011d78 	.word	0x08011d78
 8007844:	08011d90 	.word	0x08011d90

08007848 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b086      	sub	sp, #24
 800784c:	af00      	add	r7, sp, #0
 800784e:	60f8      	str	r0, [r7, #12]
 8007850:	60b9      	str	r1, [r7, #8]
 8007852:	4613      	mov	r3, r2
 8007854:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d106      	bne.n	800786a <pbuf_add_header_impl+0x22>
 800785c:	4b2b      	ldr	r3, [pc, #172]	; (800790c <pbuf_add_header_impl+0xc4>)
 800785e:	f240 12df 	movw	r2, #479	; 0x1df
 8007862:	492b      	ldr	r1, [pc, #172]	; (8007910 <pbuf_add_header_impl+0xc8>)
 8007864:	482b      	ldr	r0, [pc, #172]	; (8007914 <pbuf_add_header_impl+0xcc>)
 8007866:	f008 ffd5 	bl	8010814 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d003      	beq.n	8007878 <pbuf_add_header_impl+0x30>
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007876:	d301      	bcc.n	800787c <pbuf_add_header_impl+0x34>
    return 1;
 8007878:	2301      	movs	r3, #1
 800787a:	e043      	b.n	8007904 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d101      	bne.n	8007886 <pbuf_add_header_impl+0x3e>
    return 0;
 8007882:	2300      	movs	r3, #0
 8007884:	e03e      	b.n	8007904 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	891a      	ldrh	r2, [r3, #8]
 800788e:	8a7b      	ldrh	r3, [r7, #18]
 8007890:	4413      	add	r3, r2
 8007892:	b29b      	uxth	r3, r3
 8007894:	8a7a      	ldrh	r2, [r7, #18]
 8007896:	429a      	cmp	r2, r3
 8007898:	d901      	bls.n	800789e <pbuf_add_header_impl+0x56>
    return 1;
 800789a:	2301      	movs	r3, #1
 800789c:	e032      	b.n	8007904 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	7b1b      	ldrb	r3, [r3, #12]
 80078a2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80078a4:	8a3b      	ldrh	r3, [r7, #16]
 80078a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d00c      	beq.n	80078c8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	685a      	ldr	r2, [r3, #4]
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	425b      	negs	r3, r3
 80078b6:	4413      	add	r3, r2
 80078b8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	3310      	adds	r3, #16
 80078be:	697a      	ldr	r2, [r7, #20]
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d20d      	bcs.n	80078e0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80078c4:	2301      	movs	r3, #1
 80078c6:	e01d      	b.n	8007904 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80078c8:	79fb      	ldrb	r3, [r7, #7]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d006      	beq.n	80078dc <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	685a      	ldr	r2, [r3, #4]
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	425b      	negs	r3, r3
 80078d6:	4413      	add	r3, r2
 80078d8:	617b      	str	r3, [r7, #20]
 80078da:	e001      	b.n	80078e0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80078dc:	2301      	movs	r3, #1
 80078de:	e011      	b.n	8007904 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	697a      	ldr	r2, [r7, #20]
 80078e4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	895a      	ldrh	r2, [r3, #10]
 80078ea:	8a7b      	ldrh	r3, [r7, #18]
 80078ec:	4413      	add	r3, r2
 80078ee:	b29a      	uxth	r2, r3
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	891a      	ldrh	r2, [r3, #8]
 80078f8:	8a7b      	ldrh	r3, [r7, #18]
 80078fa:	4413      	add	r3, r2
 80078fc:	b29a      	uxth	r2, r3
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	811a      	strh	r2, [r3, #8]


  return 0;
 8007902:	2300      	movs	r3, #0
}
 8007904:	4618      	mov	r0, r3
 8007906:	3718      	adds	r7, #24
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}
 800790c:	08011c48 	.word	0x08011c48
 8007910:	08011dac 	.word	0x08011dac
 8007914:	08011ca8 	.word	0x08011ca8

08007918 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8007922:	2200      	movs	r2, #0
 8007924:	6839      	ldr	r1, [r7, #0]
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f7ff ff8e 	bl	8007848 <pbuf_add_header_impl>
 800792c:	4603      	mov	r3, r0
}
 800792e:	4618      	mov	r0, r3
 8007930:	3708      	adds	r7, #8
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
	...

08007938 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b084      	sub	sp, #16
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d106      	bne.n	8007956 <pbuf_remove_header+0x1e>
 8007948:	4b20      	ldr	r3, [pc, #128]	; (80079cc <pbuf_remove_header+0x94>)
 800794a:	f240 224b 	movw	r2, #587	; 0x24b
 800794e:	4920      	ldr	r1, [pc, #128]	; (80079d0 <pbuf_remove_header+0x98>)
 8007950:	4820      	ldr	r0, [pc, #128]	; (80079d4 <pbuf_remove_header+0x9c>)
 8007952:	f008 ff5f 	bl	8010814 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d003      	beq.n	8007964 <pbuf_remove_header+0x2c>
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007962:	d301      	bcc.n	8007968 <pbuf_remove_header+0x30>
    return 1;
 8007964:	2301      	movs	r3, #1
 8007966:	e02c      	b.n	80079c2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d101      	bne.n	8007972 <pbuf_remove_header+0x3a>
    return 0;
 800796e:	2300      	movs	r3, #0
 8007970:	e027      	b.n	80079c2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	895b      	ldrh	r3, [r3, #10]
 800797a:	89fa      	ldrh	r2, [r7, #14]
 800797c:	429a      	cmp	r2, r3
 800797e:	d908      	bls.n	8007992 <pbuf_remove_header+0x5a>
 8007980:	4b12      	ldr	r3, [pc, #72]	; (80079cc <pbuf_remove_header+0x94>)
 8007982:	f240 2255 	movw	r2, #597	; 0x255
 8007986:	4914      	ldr	r1, [pc, #80]	; (80079d8 <pbuf_remove_header+0xa0>)
 8007988:	4812      	ldr	r0, [pc, #72]	; (80079d4 <pbuf_remove_header+0x9c>)
 800798a:	f008 ff43 	bl	8010814 <iprintf>
 800798e:	2301      	movs	r3, #1
 8007990:	e017      	b.n	80079c2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	685a      	ldr	r2, [r3, #4]
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	441a      	add	r2, r3
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	895a      	ldrh	r2, [r3, #10]
 80079a8:	89fb      	ldrh	r3, [r7, #14]
 80079aa:	1ad3      	subs	r3, r2, r3
 80079ac:	b29a      	uxth	r2, r3
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	891a      	ldrh	r2, [r3, #8]
 80079b6:	89fb      	ldrh	r3, [r7, #14]
 80079b8:	1ad3      	subs	r3, r2, r3
 80079ba:	b29a      	uxth	r2, r3
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3710      	adds	r7, #16
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	08011c48 	.word	0x08011c48
 80079d0:	08011dac 	.word	0x08011dac
 80079d4:	08011ca8 	.word	0x08011ca8
 80079d8:	08011db8 	.word	0x08011db8

080079dc <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	460b      	mov	r3, r1
 80079e6:	807b      	strh	r3, [r7, #2]
 80079e8:	4613      	mov	r3, r2
 80079ea:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80079ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	da08      	bge.n	8007a06 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80079f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80079f8:	425b      	negs	r3, r3
 80079fa:	4619      	mov	r1, r3
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f7ff ff9b 	bl	8007938 <pbuf_remove_header>
 8007a02:	4603      	mov	r3, r0
 8007a04:	e007      	b.n	8007a16 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8007a06:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007a0a:	787a      	ldrb	r2, [r7, #1]
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f7ff ff1a 	bl	8007848 <pbuf_add_header_impl>
 8007a14:	4603      	mov	r3, r0
  }
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3708      	adds	r7, #8
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}

08007a1e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8007a1e:	b580      	push	{r7, lr}
 8007a20:	b082      	sub	sp, #8
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	6078      	str	r0, [r7, #4]
 8007a26:	460b      	mov	r3, r1
 8007a28:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8007a2a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	4619      	mov	r1, r3
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f7ff ffd2 	bl	80079dc <pbuf_header_impl>
 8007a38:	4603      	mov	r3, r0
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3708      	adds	r7, #8
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
	...

08007a44 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b086      	sub	sp, #24
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d10b      	bne.n	8007a6a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d106      	bne.n	8007a66 <pbuf_free+0x22>
 8007a58:	4b38      	ldr	r3, [pc, #224]	; (8007b3c <pbuf_free+0xf8>)
 8007a5a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8007a5e:	4938      	ldr	r1, [pc, #224]	; (8007b40 <pbuf_free+0xfc>)
 8007a60:	4838      	ldr	r0, [pc, #224]	; (8007b44 <pbuf_free+0x100>)
 8007a62:	f008 fed7 	bl	8010814 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8007a66:	2300      	movs	r3, #0
 8007a68:	e063      	b.n	8007b32 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8007a6e:	e05c      	b.n	8007b2a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	7b9b      	ldrb	r3, [r3, #14]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d106      	bne.n	8007a86 <pbuf_free+0x42>
 8007a78:	4b30      	ldr	r3, [pc, #192]	; (8007b3c <pbuf_free+0xf8>)
 8007a7a:	f240 22f1 	movw	r2, #753	; 0x2f1
 8007a7e:	4932      	ldr	r1, [pc, #200]	; (8007b48 <pbuf_free+0x104>)
 8007a80:	4830      	ldr	r0, [pc, #192]	; (8007b44 <pbuf_free+0x100>)
 8007a82:	f008 fec7 	bl	8010814 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	7b9b      	ldrb	r3, [r3, #14]
 8007a8a:	3b01      	subs	r3, #1
 8007a8c:	b2da      	uxtb	r2, r3
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	739a      	strb	r2, [r3, #14]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	7b9b      	ldrb	r3, [r3, #14]
 8007a96:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8007a98:	7dbb      	ldrb	r3, [r7, #22]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d143      	bne.n	8007b26 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	7b1b      	ldrb	r3, [r3, #12]
 8007aa8:	f003 030f 	and.w	r3, r3, #15
 8007aac:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	7b5b      	ldrb	r3, [r3, #13]
 8007ab2:	f003 0302 	and.w	r3, r3, #2
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d011      	beq.n	8007ade <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	691b      	ldr	r3, [r3, #16]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d106      	bne.n	8007ad4 <pbuf_free+0x90>
 8007ac6:	4b1d      	ldr	r3, [pc, #116]	; (8007b3c <pbuf_free+0xf8>)
 8007ac8:	f240 22ff 	movw	r2, #767	; 0x2ff
 8007acc:	491f      	ldr	r1, [pc, #124]	; (8007b4c <pbuf_free+0x108>)
 8007ace:	481d      	ldr	r0, [pc, #116]	; (8007b44 <pbuf_free+0x100>)
 8007ad0:	f008 fea0 	bl	8010814 <iprintf>
        pc->custom_free_function(p);
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	691b      	ldr	r3, [r3, #16]
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	4798      	blx	r3
 8007adc:	e01d      	b.n	8007b1a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8007ade:	7bfb      	ldrb	r3, [r7, #15]
 8007ae0:	2b02      	cmp	r3, #2
 8007ae2:	d104      	bne.n	8007aee <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8007ae4:	6879      	ldr	r1, [r7, #4]
 8007ae6:	2008      	movs	r0, #8
 8007ae8:	f7ff f936 	bl	8006d58 <memp_free>
 8007aec:	e015      	b.n	8007b1a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8007aee:	7bfb      	ldrb	r3, [r7, #15]
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d104      	bne.n	8007afe <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8007af4:	6879      	ldr	r1, [r7, #4]
 8007af6:	2007      	movs	r0, #7
 8007af8:	f7ff f92e 	bl	8006d58 <memp_free>
 8007afc:	e00d      	b.n	8007b1a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8007afe:	7bfb      	ldrb	r3, [r7, #15]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d103      	bne.n	8007b0c <pbuf_free+0xc8>
          mem_free(p);
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f7fe fdc1 	bl	800668c <mem_free>
 8007b0a:	e006      	b.n	8007b1a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8007b0c:	4b0b      	ldr	r3, [pc, #44]	; (8007b3c <pbuf_free+0xf8>)
 8007b0e:	f240 320f 	movw	r2, #783	; 0x30f
 8007b12:	490f      	ldr	r1, [pc, #60]	; (8007b50 <pbuf_free+0x10c>)
 8007b14:	480b      	ldr	r0, [pc, #44]	; (8007b44 <pbuf_free+0x100>)
 8007b16:	f008 fe7d 	bl	8010814 <iprintf>
        }
      }
      count++;
 8007b1a:	7dfb      	ldrb	r3, [r7, #23]
 8007b1c:	3301      	adds	r3, #1
 8007b1e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	607b      	str	r3, [r7, #4]
 8007b24:	e001      	b.n	8007b2a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8007b26:	2300      	movs	r3, #0
 8007b28:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d19f      	bne.n	8007a70 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8007b30:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3718      	adds	r7, #24
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	08011c48 	.word	0x08011c48
 8007b40:	08011dac 	.word	0x08011dac
 8007b44:	08011ca8 	.word	0x08011ca8
 8007b48:	08011dd8 	.word	0x08011dd8
 8007b4c:	08011df0 	.word	0x08011df0
 8007b50:	08011e14 	.word	0x08011e14

08007b54 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b085      	sub	sp, #20
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8007b60:	e005      	b.n	8007b6e <pbuf_clen+0x1a>
    ++len;
 8007b62:	89fb      	ldrh	r3, [r7, #14]
 8007b64:	3301      	adds	r3, #1
 8007b66:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d1f6      	bne.n	8007b62 <pbuf_clen+0xe>
  }
  return len;
 8007b74:	89fb      	ldrh	r3, [r7, #14]
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3714      	adds	r7, #20
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b80:	4770      	bx	lr
	...

08007b84 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b082      	sub	sp, #8
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d010      	beq.n	8007bb4 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	7b9b      	ldrb	r3, [r3, #14]
 8007b96:	3301      	adds	r3, #1
 8007b98:	b2da      	uxtb	r2, r3
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	7b9b      	ldrb	r3, [r3, #14]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d106      	bne.n	8007bb4 <pbuf_ref+0x30>
 8007ba6:	4b05      	ldr	r3, [pc, #20]	; (8007bbc <pbuf_ref+0x38>)
 8007ba8:	f240 3242 	movw	r2, #834	; 0x342
 8007bac:	4904      	ldr	r1, [pc, #16]	; (8007bc0 <pbuf_ref+0x3c>)
 8007bae:	4805      	ldr	r0, [pc, #20]	; (8007bc4 <pbuf_ref+0x40>)
 8007bb0:	f008 fe30 	bl	8010814 <iprintf>
  }
}
 8007bb4:	bf00      	nop
 8007bb6:	3708      	adds	r7, #8
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}
 8007bbc:	08011c48 	.word	0x08011c48
 8007bc0:	08011e28 	.word	0x08011e28
 8007bc4:	08011ca8 	.word	0x08011ca8

08007bc8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d002      	beq.n	8007bde <pbuf_cat+0x16>
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d107      	bne.n	8007bee <pbuf_cat+0x26>
 8007bde:	4b20      	ldr	r3, [pc, #128]	; (8007c60 <pbuf_cat+0x98>)
 8007be0:	f240 3259 	movw	r2, #857	; 0x359
 8007be4:	491f      	ldr	r1, [pc, #124]	; (8007c64 <pbuf_cat+0x9c>)
 8007be6:	4820      	ldr	r0, [pc, #128]	; (8007c68 <pbuf_cat+0xa0>)
 8007be8:	f008 fe14 	bl	8010814 <iprintf>
 8007bec:	e034      	b.n	8007c58 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	60fb      	str	r3, [r7, #12]
 8007bf2:	e00a      	b.n	8007c0a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	891a      	ldrh	r2, [r3, #8]
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	891b      	ldrh	r3, [r3, #8]
 8007bfc:	4413      	add	r3, r2
 8007bfe:	b29a      	uxth	r2, r3
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	60fb      	str	r3, [r7, #12]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d1f0      	bne.n	8007bf4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	891a      	ldrh	r2, [r3, #8]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	895b      	ldrh	r3, [r3, #10]
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d006      	beq.n	8007c2c <pbuf_cat+0x64>
 8007c1e:	4b10      	ldr	r3, [pc, #64]	; (8007c60 <pbuf_cat+0x98>)
 8007c20:	f240 3262 	movw	r2, #866	; 0x362
 8007c24:	4911      	ldr	r1, [pc, #68]	; (8007c6c <pbuf_cat+0xa4>)
 8007c26:	4810      	ldr	r0, [pc, #64]	; (8007c68 <pbuf_cat+0xa0>)
 8007c28:	f008 fdf4 	bl	8010814 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d006      	beq.n	8007c42 <pbuf_cat+0x7a>
 8007c34:	4b0a      	ldr	r3, [pc, #40]	; (8007c60 <pbuf_cat+0x98>)
 8007c36:	f240 3263 	movw	r2, #867	; 0x363
 8007c3a:	490d      	ldr	r1, [pc, #52]	; (8007c70 <pbuf_cat+0xa8>)
 8007c3c:	480a      	ldr	r0, [pc, #40]	; (8007c68 <pbuf_cat+0xa0>)
 8007c3e:	f008 fde9 	bl	8010814 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	891a      	ldrh	r2, [r3, #8]
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	891b      	ldrh	r3, [r3, #8]
 8007c4a:	4413      	add	r3, r2
 8007c4c:	b29a      	uxth	r2, r3
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	683a      	ldr	r2, [r7, #0]
 8007c56:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8007c58:	3710      	adds	r7, #16
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	08011c48 	.word	0x08011c48
 8007c64:	08011e3c 	.word	0x08011e3c
 8007c68:	08011ca8 	.word	0x08011ca8
 8007c6c:	08011e74 	.word	0x08011e74
 8007c70:	08011ea4 	.word	0x08011ea4

08007c74 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b082      	sub	sp, #8
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8007c7e:	6839      	ldr	r1, [r7, #0]
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f7ff ffa1 	bl	8007bc8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8007c86:	6838      	ldr	r0, [r7, #0]
 8007c88:	f7ff ff7c 	bl	8007b84 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8007c8c:	bf00      	nop
 8007c8e:	3708      	adds	r7, #8
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b086      	sub	sp, #24
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	617b      	str	r3, [r7, #20]
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d008      	beq.n	8007cbe <pbuf_copy+0x2a>
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d005      	beq.n	8007cbe <pbuf_copy+0x2a>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	891a      	ldrh	r2, [r3, #8]
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	891b      	ldrh	r3, [r3, #8]
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d209      	bcs.n	8007cd2 <pbuf_copy+0x3e>
 8007cbe:	4b57      	ldr	r3, [pc, #348]	; (8007e1c <pbuf_copy+0x188>)
 8007cc0:	f240 32c9 	movw	r2, #969	; 0x3c9
 8007cc4:	4956      	ldr	r1, [pc, #344]	; (8007e20 <pbuf_copy+0x18c>)
 8007cc6:	4857      	ldr	r0, [pc, #348]	; (8007e24 <pbuf_copy+0x190>)
 8007cc8:	f008 fda4 	bl	8010814 <iprintf>
 8007ccc:	f06f 030f 	mvn.w	r3, #15
 8007cd0:	e09f      	b.n	8007e12 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	895b      	ldrh	r3, [r3, #10]
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	1ad2      	subs	r2, r2, r3
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	895b      	ldrh	r3, [r3, #10]
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	1acb      	subs	r3, r1, r3
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	d306      	bcc.n	8007cf8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	895b      	ldrh	r3, [r3, #10]
 8007cee:	461a      	mov	r2, r3
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	1ad3      	subs	r3, r2, r3
 8007cf4:	60fb      	str	r3, [r7, #12]
 8007cf6:	e005      	b.n	8007d04 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	895b      	ldrh	r3, [r3, #10]
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	1ad3      	subs	r3, r2, r3
 8007d02:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	685a      	ldr	r2, [r3, #4]
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	18d0      	adds	r0, r2, r3
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	685a      	ldr	r2, [r3, #4]
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	4413      	add	r3, r2
 8007d14:	68fa      	ldr	r2, [r7, #12]
 8007d16:	4619      	mov	r1, r3
 8007d18:	f008 fe69 	bl	80109ee <memcpy>
    offset_to += len;
 8007d1c:	697a      	ldr	r2, [r7, #20]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	4413      	add	r3, r2
 8007d22:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8007d24:	693a      	ldr	r2, [r7, #16]
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	4413      	add	r3, r2
 8007d2a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	895b      	ldrh	r3, [r3, #10]
 8007d30:	461a      	mov	r2, r3
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d906      	bls.n	8007d46 <pbuf_copy+0xb2>
 8007d38:	4b38      	ldr	r3, [pc, #224]	; (8007e1c <pbuf_copy+0x188>)
 8007d3a:	f240 32d9 	movw	r2, #985	; 0x3d9
 8007d3e:	493a      	ldr	r1, [pc, #232]	; (8007e28 <pbuf_copy+0x194>)
 8007d40:	4838      	ldr	r0, [pc, #224]	; (8007e24 <pbuf_copy+0x190>)
 8007d42:	f008 fd67 	bl	8010814 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	895b      	ldrh	r3, [r3, #10]
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d906      	bls.n	8007d60 <pbuf_copy+0xcc>
 8007d52:	4b32      	ldr	r3, [pc, #200]	; (8007e1c <pbuf_copy+0x188>)
 8007d54:	f240 32da 	movw	r2, #986	; 0x3da
 8007d58:	4934      	ldr	r1, [pc, #208]	; (8007e2c <pbuf_copy+0x198>)
 8007d5a:	4832      	ldr	r0, [pc, #200]	; (8007e24 <pbuf_copy+0x190>)
 8007d5c:	f008 fd5a 	bl	8010814 <iprintf>
    if (offset_from >= p_from->len) {
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	895b      	ldrh	r3, [r3, #10]
 8007d64:	461a      	mov	r2, r3
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d304      	bcc.n	8007d76 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	895b      	ldrh	r3, [r3, #10]
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d114      	bne.n	8007dac <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8007d82:	2300      	movs	r3, #0
 8007d84:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d10c      	bne.n	8007dac <pbuf_copy+0x118>
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d009      	beq.n	8007dac <pbuf_copy+0x118>
 8007d98:	4b20      	ldr	r3, [pc, #128]	; (8007e1c <pbuf_copy+0x188>)
 8007d9a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8007d9e:	4924      	ldr	r1, [pc, #144]	; (8007e30 <pbuf_copy+0x19c>)
 8007da0:	4820      	ldr	r0, [pc, #128]	; (8007e24 <pbuf_copy+0x190>)
 8007da2:	f008 fd37 	bl	8010814 <iprintf>
 8007da6:	f06f 030f 	mvn.w	r3, #15
 8007daa:	e032      	b.n	8007e12 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d013      	beq.n	8007dda <pbuf_copy+0x146>
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	895a      	ldrh	r2, [r3, #10]
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	891b      	ldrh	r3, [r3, #8]
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d10d      	bne.n	8007dda <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d009      	beq.n	8007dda <pbuf_copy+0x146>
 8007dc6:	4b15      	ldr	r3, [pc, #84]	; (8007e1c <pbuf_copy+0x188>)
 8007dc8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8007dcc:	4919      	ldr	r1, [pc, #100]	; (8007e34 <pbuf_copy+0x1a0>)
 8007dce:	4815      	ldr	r0, [pc, #84]	; (8007e24 <pbuf_copy+0x190>)
 8007dd0:	f008 fd20 	bl	8010814 <iprintf>
 8007dd4:	f06f 0305 	mvn.w	r3, #5
 8007dd8:	e01b      	b.n	8007e12 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d013      	beq.n	8007e08 <pbuf_copy+0x174>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	895a      	ldrh	r2, [r3, #10]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	891b      	ldrh	r3, [r3, #8]
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d10d      	bne.n	8007e08 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d009      	beq.n	8007e08 <pbuf_copy+0x174>
 8007df4:	4b09      	ldr	r3, [pc, #36]	; (8007e1c <pbuf_copy+0x188>)
 8007df6:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8007dfa:	490e      	ldr	r1, [pc, #56]	; (8007e34 <pbuf_copy+0x1a0>)
 8007dfc:	4809      	ldr	r0, [pc, #36]	; (8007e24 <pbuf_copy+0x190>)
 8007dfe:	f008 fd09 	bl	8010814 <iprintf>
 8007e02:	f06f 0305 	mvn.w	r3, #5
 8007e06:	e004      	b.n	8007e12 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	f47f af61 	bne.w	8007cd2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8007e10:	2300      	movs	r3, #0
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3718      	adds	r7, #24
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
 8007e1a:	bf00      	nop
 8007e1c:	08011c48 	.word	0x08011c48
 8007e20:	08011ef0 	.word	0x08011ef0
 8007e24:	08011ca8 	.word	0x08011ca8
 8007e28:	08011f20 	.word	0x08011f20
 8007e2c:	08011f38 	.word	0x08011f38
 8007e30:	08011f54 	.word	0x08011f54
 8007e34:	08011f64 	.word	0x08011f64

08007e38 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b088      	sub	sp, #32
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	60f8      	str	r0, [r7, #12]
 8007e40:	60b9      	str	r1, [r7, #8]
 8007e42:	4611      	mov	r1, r2
 8007e44:	461a      	mov	r2, r3
 8007e46:	460b      	mov	r3, r1
 8007e48:	80fb      	strh	r3, [r7, #6]
 8007e4a:	4613      	mov	r3, r2
 8007e4c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8007e52:	2300      	movs	r3, #0
 8007e54:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d108      	bne.n	8007e6e <pbuf_copy_partial+0x36>
 8007e5c:	4b2b      	ldr	r3, [pc, #172]	; (8007f0c <pbuf_copy_partial+0xd4>)
 8007e5e:	f240 420a 	movw	r2, #1034	; 0x40a
 8007e62:	492b      	ldr	r1, [pc, #172]	; (8007f10 <pbuf_copy_partial+0xd8>)
 8007e64:	482b      	ldr	r0, [pc, #172]	; (8007f14 <pbuf_copy_partial+0xdc>)
 8007e66:	f008 fcd5 	bl	8010814 <iprintf>
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	e04a      	b.n	8007f04 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d108      	bne.n	8007e86 <pbuf_copy_partial+0x4e>
 8007e74:	4b25      	ldr	r3, [pc, #148]	; (8007f0c <pbuf_copy_partial+0xd4>)
 8007e76:	f240 420b 	movw	r2, #1035	; 0x40b
 8007e7a:	4927      	ldr	r1, [pc, #156]	; (8007f18 <pbuf_copy_partial+0xe0>)
 8007e7c:	4825      	ldr	r0, [pc, #148]	; (8007f14 <pbuf_copy_partial+0xdc>)
 8007e7e:	f008 fcc9 	bl	8010814 <iprintf>
 8007e82:	2300      	movs	r3, #0
 8007e84:	e03e      	b.n	8007f04 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	61fb      	str	r3, [r7, #28]
 8007e8a:	e034      	b.n	8007ef6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8007e8c:	88bb      	ldrh	r3, [r7, #4]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d00a      	beq.n	8007ea8 <pbuf_copy_partial+0x70>
 8007e92:	69fb      	ldr	r3, [r7, #28]
 8007e94:	895b      	ldrh	r3, [r3, #10]
 8007e96:	88ba      	ldrh	r2, [r7, #4]
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d305      	bcc.n	8007ea8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	895b      	ldrh	r3, [r3, #10]
 8007ea0:	88ba      	ldrh	r2, [r7, #4]
 8007ea2:	1ad3      	subs	r3, r2, r3
 8007ea4:	80bb      	strh	r3, [r7, #4]
 8007ea6:	e023      	b.n	8007ef0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8007ea8:	69fb      	ldr	r3, [r7, #28]
 8007eaa:	895a      	ldrh	r2, [r3, #10]
 8007eac:	88bb      	ldrh	r3, [r7, #4]
 8007eae:	1ad3      	subs	r3, r2, r3
 8007eb0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8007eb2:	8b3a      	ldrh	r2, [r7, #24]
 8007eb4:	88fb      	ldrh	r3, [r7, #6]
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d901      	bls.n	8007ebe <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8007eba:	88fb      	ldrh	r3, [r7, #6]
 8007ebc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8007ebe:	8b7b      	ldrh	r3, [r7, #26]
 8007ec0:	68ba      	ldr	r2, [r7, #8]
 8007ec2:	18d0      	adds	r0, r2, r3
 8007ec4:	69fb      	ldr	r3, [r7, #28]
 8007ec6:	685a      	ldr	r2, [r3, #4]
 8007ec8:	88bb      	ldrh	r3, [r7, #4]
 8007eca:	4413      	add	r3, r2
 8007ecc:	8b3a      	ldrh	r2, [r7, #24]
 8007ece:	4619      	mov	r1, r3
 8007ed0:	f008 fd8d 	bl	80109ee <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8007ed4:	8afa      	ldrh	r2, [r7, #22]
 8007ed6:	8b3b      	ldrh	r3, [r7, #24]
 8007ed8:	4413      	add	r3, r2
 8007eda:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8007edc:	8b7a      	ldrh	r2, [r7, #26]
 8007ede:	8b3b      	ldrh	r3, [r7, #24]
 8007ee0:	4413      	add	r3, r2
 8007ee2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8007ee4:	88fa      	ldrh	r2, [r7, #6]
 8007ee6:	8b3b      	ldrh	r3, [r7, #24]
 8007ee8:	1ad3      	subs	r3, r2, r3
 8007eea:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8007eec:	2300      	movs	r3, #0
 8007eee:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	61fb      	str	r3, [r7, #28]
 8007ef6:	88fb      	ldrh	r3, [r7, #6]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d002      	beq.n	8007f02 <pbuf_copy_partial+0xca>
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d1c4      	bne.n	8007e8c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8007f02:	8afb      	ldrh	r3, [r7, #22]
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3720      	adds	r7, #32
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}
 8007f0c:	08011c48 	.word	0x08011c48
 8007f10:	08011f90 	.word	0x08011f90
 8007f14:	08011ca8 	.word	0x08011ca8
 8007f18:	08011fb0 	.word	0x08011fb0

08007f1c <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b088      	sub	sp, #32
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	60f8      	str	r0, [r7, #12]
 8007f24:	60b9      	str	r1, [r7, #8]
 8007f26:	4613      	mov	r3, r2
 8007f28:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 8007f2a:	88fb      	ldrh	r3, [r7, #6]
 8007f2c:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d109      	bne.n	8007f4c <pbuf_take+0x30>
 8007f38:	4b3a      	ldr	r3, [pc, #232]	; (8008024 <pbuf_take+0x108>)
 8007f3a:	f240 42b3 	movw	r2, #1203	; 0x4b3
 8007f3e:	493a      	ldr	r1, [pc, #232]	; (8008028 <pbuf_take+0x10c>)
 8007f40:	483a      	ldr	r0, [pc, #232]	; (800802c <pbuf_take+0x110>)
 8007f42:	f008 fc67 	bl	8010814 <iprintf>
 8007f46:	f06f 030f 	mvn.w	r3, #15
 8007f4a:	e067      	b.n	800801c <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d109      	bne.n	8007f66 <pbuf_take+0x4a>
 8007f52:	4b34      	ldr	r3, [pc, #208]	; (8008024 <pbuf_take+0x108>)
 8007f54:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8007f58:	4935      	ldr	r1, [pc, #212]	; (8008030 <pbuf_take+0x114>)
 8007f5a:	4834      	ldr	r0, [pc, #208]	; (800802c <pbuf_take+0x110>)
 8007f5c:	f008 fc5a 	bl	8010814 <iprintf>
 8007f60:	f06f 030f 	mvn.w	r3, #15
 8007f64:	e05a      	b.n	800801c <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	891b      	ldrh	r3, [r3, #8]
 8007f6a:	88fa      	ldrh	r2, [r7, #6]
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d909      	bls.n	8007f84 <pbuf_take+0x68>
 8007f70:	4b2c      	ldr	r3, [pc, #176]	; (8008024 <pbuf_take+0x108>)
 8007f72:	f240 42b5 	movw	r2, #1205	; 0x4b5
 8007f76:	492f      	ldr	r1, [pc, #188]	; (8008034 <pbuf_take+0x118>)
 8007f78:	482c      	ldr	r0, [pc, #176]	; (800802c <pbuf_take+0x110>)
 8007f7a:	f008 fc4b 	bl	8010814 <iprintf>
 8007f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8007f82:	e04b      	b.n	800801c <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d007      	beq.n	8007f9a <pbuf_take+0x7e>
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d004      	beq.n	8007f9a <pbuf_take+0x7e>
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	891b      	ldrh	r3, [r3, #8]
 8007f94:	88fa      	ldrh	r2, [r7, #6]
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d902      	bls.n	8007fa0 <pbuf_take+0x84>
    return ERR_ARG;
 8007f9a:	f06f 030f 	mvn.w	r3, #15
 8007f9e:	e03d      	b.n	800801c <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	61fb      	str	r3, [r7, #28]
 8007fa4:	e028      	b.n	8007ff8 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8007fa6:	69fb      	ldr	r3, [r7, #28]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d106      	bne.n	8007fba <pbuf_take+0x9e>
 8007fac:	4b1d      	ldr	r3, [pc, #116]	; (8008024 <pbuf_take+0x108>)
 8007fae:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8007fb2:	4921      	ldr	r1, [pc, #132]	; (8008038 <pbuf_take+0x11c>)
 8007fb4:	481d      	ldr	r0, [pc, #116]	; (800802c <pbuf_take+0x110>)
 8007fb6:	f008 fc2d 	bl	8010814 <iprintf>
    buf_copy_len = total_copy_len;
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8007fbe:	69fb      	ldr	r3, [r7, #28]
 8007fc0:	895b      	ldrh	r3, [r3, #10]
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	69bb      	ldr	r3, [r7, #24]
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d902      	bls.n	8007fd0 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8007fca:	69fb      	ldr	r3, [r7, #28]
 8007fcc:	895b      	ldrh	r3, [r3, #10]
 8007fce:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8007fd0:	69fb      	ldr	r3, [r7, #28]
 8007fd2:	6858      	ldr	r0, [r3, #4]
 8007fd4:	68ba      	ldr	r2, [r7, #8]
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	4413      	add	r3, r2
 8007fda:	69ba      	ldr	r2, [r7, #24]
 8007fdc:	4619      	mov	r1, r3
 8007fde:	f008 fd06 	bl	80109ee <memcpy>
    total_copy_len -= buf_copy_len;
 8007fe2:	697a      	ldr	r2, [r7, #20]
 8007fe4:	69bb      	ldr	r3, [r7, #24]
 8007fe6:	1ad3      	subs	r3, r2, r3
 8007fe8:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 8007fea:	693a      	ldr	r2, [r7, #16]
 8007fec:	69bb      	ldr	r3, [r7, #24]
 8007fee:	4413      	add	r3, r2
 8007ff0:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8007ff2:	69fb      	ldr	r3, [r7, #28]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	61fb      	str	r3, [r7, #28]
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d1d3      	bne.n	8007fa6 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d103      	bne.n	800800c <pbuf_take+0xf0>
 8008004:	88fb      	ldrh	r3, [r7, #6]
 8008006:	693a      	ldr	r2, [r7, #16]
 8008008:	429a      	cmp	r2, r3
 800800a:	d006      	beq.n	800801a <pbuf_take+0xfe>
 800800c:	4b05      	ldr	r3, [pc, #20]	; (8008024 <pbuf_take+0x108>)
 800800e:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8008012:	490a      	ldr	r1, [pc, #40]	; (800803c <pbuf_take+0x120>)
 8008014:	4805      	ldr	r0, [pc, #20]	; (800802c <pbuf_take+0x110>)
 8008016:	f008 fbfd 	bl	8010814 <iprintf>
  return ERR_OK;
 800801a:	2300      	movs	r3, #0
}
 800801c:	4618      	mov	r0, r3
 800801e:	3720      	adds	r7, #32
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}
 8008024:	08011c48 	.word	0x08011c48
 8008028:	08012020 	.word	0x08012020
 800802c:	08011ca8 	.word	0x08011ca8
 8008030:	08012038 	.word	0x08012038
 8008034:	08012054 	.word	0x08012054
 8008038:	08012074 	.word	0x08012074
 800803c:	0801208c 	.word	0x0801208c

08008040 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	4603      	mov	r3, r0
 8008048:	603a      	str	r2, [r7, #0]
 800804a:	71fb      	strb	r3, [r7, #7]
 800804c:	460b      	mov	r3, r1
 800804e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	8919      	ldrh	r1, [r3, #8]
 8008054:	88ba      	ldrh	r2, [r7, #4]
 8008056:	79fb      	ldrb	r3, [r7, #7]
 8008058:	4618      	mov	r0, r3
 800805a:	f7ff fa0f 	bl	800747c <pbuf_alloc>
 800805e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d101      	bne.n	800806a <pbuf_clone+0x2a>
    return NULL;
 8008066:	2300      	movs	r3, #0
 8008068:	e011      	b.n	800808e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800806a:	6839      	ldr	r1, [r7, #0]
 800806c:	68f8      	ldr	r0, [r7, #12]
 800806e:	f7ff fe11 	bl	8007c94 <pbuf_copy>
 8008072:	4603      	mov	r3, r0
 8008074:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8008076:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d006      	beq.n	800808c <pbuf_clone+0x4c>
 800807e:	4b06      	ldr	r3, [pc, #24]	; (8008098 <pbuf_clone+0x58>)
 8008080:	f240 5224 	movw	r2, #1316	; 0x524
 8008084:	4905      	ldr	r1, [pc, #20]	; (800809c <pbuf_clone+0x5c>)
 8008086:	4806      	ldr	r0, [pc, #24]	; (80080a0 <pbuf_clone+0x60>)
 8008088:	f008 fbc4 	bl	8010814 <iprintf>
  return q;
 800808c:	68fb      	ldr	r3, [r7, #12]
}
 800808e:	4618      	mov	r0, r3
 8008090:	3710      	adds	r7, #16
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
 8008096:	bf00      	nop
 8008098:	08011c48 	.word	0x08011c48
 800809c:	080120bc 	.word	0x080120bc
 80080a0:	08011ca8 	.word	0x08011ca8

080080a4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80080a8:	f008 fab4 	bl	8010614 <rand>
 80080ac:	4603      	mov	r3, r0
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80080ba:	b29a      	uxth	r2, r3
 80080bc:	4b01      	ldr	r3, [pc, #4]	; (80080c4 <tcp_init+0x20>)
 80080be:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80080c0:	bf00      	nop
 80080c2:	bd80      	pop	{r7, pc}
 80080c4:	20000020 	.word	0x20000020

080080c8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	7d1b      	ldrb	r3, [r3, #20]
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d105      	bne.n	80080e4 <tcp_free+0x1c>
 80080d8:	4b06      	ldr	r3, [pc, #24]	; (80080f4 <tcp_free+0x2c>)
 80080da:	22d4      	movs	r2, #212	; 0xd4
 80080dc:	4906      	ldr	r1, [pc, #24]	; (80080f8 <tcp_free+0x30>)
 80080de:	4807      	ldr	r0, [pc, #28]	; (80080fc <tcp_free+0x34>)
 80080e0:	f008 fb98 	bl	8010814 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80080e4:	6879      	ldr	r1, [r7, #4]
 80080e6:	2001      	movs	r0, #1
 80080e8:	f7fe fe36 	bl	8006d58 <memp_free>
}
 80080ec:	bf00      	nop
 80080ee:	3708      	adds	r7, #8
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}
 80080f4:	08012148 	.word	0x08012148
 80080f8:	08012178 	.word	0x08012178
 80080fc:	0801218c 	.word	0x0801218c

08008100 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b082      	sub	sp, #8
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	7d1b      	ldrb	r3, [r3, #20]
 800810c:	2b01      	cmp	r3, #1
 800810e:	d105      	bne.n	800811c <tcp_free_listen+0x1c>
 8008110:	4b06      	ldr	r3, [pc, #24]	; (800812c <tcp_free_listen+0x2c>)
 8008112:	22df      	movs	r2, #223	; 0xdf
 8008114:	4906      	ldr	r1, [pc, #24]	; (8008130 <tcp_free_listen+0x30>)
 8008116:	4807      	ldr	r0, [pc, #28]	; (8008134 <tcp_free_listen+0x34>)
 8008118:	f008 fb7c 	bl	8010814 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800811c:	6879      	ldr	r1, [r7, #4]
 800811e:	2002      	movs	r0, #2
 8008120:	f7fe fe1a 	bl	8006d58 <memp_free>
}
 8008124:	bf00      	nop
 8008126:	3708      	adds	r7, #8
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}
 800812c:	08012148 	.word	0x08012148
 8008130:	080121b4 	.word	0x080121b4
 8008134:	0801218c 	.word	0x0801218c

08008138 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800813c:	f000 fea2 	bl	8008e84 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8008140:	4b07      	ldr	r3, [pc, #28]	; (8008160 <tcp_tmr+0x28>)
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	3301      	adds	r3, #1
 8008146:	b2da      	uxtb	r2, r3
 8008148:	4b05      	ldr	r3, [pc, #20]	; (8008160 <tcp_tmr+0x28>)
 800814a:	701a      	strb	r2, [r3, #0]
 800814c:	4b04      	ldr	r3, [pc, #16]	; (8008160 <tcp_tmr+0x28>)
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	f003 0301 	and.w	r3, r3, #1
 8008154:	2b00      	cmp	r3, #0
 8008156:	d001      	beq.n	800815c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8008158:	f000 fb54 	bl	8008804 <tcp_slowtmr>
  }
}
 800815c:	bf00      	nop
 800815e:	bd80      	pop	{r7, pc}
 8008160:	200088b9 	.word	0x200088b9

08008164 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d105      	bne.n	8008180 <tcp_remove_listener+0x1c>
 8008174:	4b0d      	ldr	r3, [pc, #52]	; (80081ac <tcp_remove_listener+0x48>)
 8008176:	22ff      	movs	r2, #255	; 0xff
 8008178:	490d      	ldr	r1, [pc, #52]	; (80081b0 <tcp_remove_listener+0x4c>)
 800817a:	480e      	ldr	r0, [pc, #56]	; (80081b4 <tcp_remove_listener+0x50>)
 800817c:	f008 fb4a 	bl	8010814 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	60fb      	str	r3, [r7, #12]
 8008184:	e00a      	b.n	800819c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800818a:	683a      	ldr	r2, [r7, #0]
 800818c:	429a      	cmp	r2, r3
 800818e:	d102      	bne.n	8008196 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2200      	movs	r2, #0
 8008194:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	68db      	ldr	r3, [r3, #12]
 800819a:	60fb      	str	r3, [r7, #12]
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d1f1      	bne.n	8008186 <tcp_remove_listener+0x22>
    }
  }
}
 80081a2:	bf00      	nop
 80081a4:	bf00      	nop
 80081a6:	3710      	adds	r7, #16
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}
 80081ac:	08012148 	.word	0x08012148
 80081b0:	080121d0 	.word	0x080121d0
 80081b4:	0801218c 	.word	0x0801218c

080081b8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b084      	sub	sp, #16
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d106      	bne.n	80081d4 <tcp_listen_closed+0x1c>
 80081c6:	4b14      	ldr	r3, [pc, #80]	; (8008218 <tcp_listen_closed+0x60>)
 80081c8:	f240 1211 	movw	r2, #273	; 0x111
 80081cc:	4913      	ldr	r1, [pc, #76]	; (800821c <tcp_listen_closed+0x64>)
 80081ce:	4814      	ldr	r0, [pc, #80]	; (8008220 <tcp_listen_closed+0x68>)
 80081d0:	f008 fb20 	bl	8010814 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	7d1b      	ldrb	r3, [r3, #20]
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d006      	beq.n	80081ea <tcp_listen_closed+0x32>
 80081dc:	4b0e      	ldr	r3, [pc, #56]	; (8008218 <tcp_listen_closed+0x60>)
 80081de:	f44f 7289 	mov.w	r2, #274	; 0x112
 80081e2:	4910      	ldr	r1, [pc, #64]	; (8008224 <tcp_listen_closed+0x6c>)
 80081e4:	480e      	ldr	r0, [pc, #56]	; (8008220 <tcp_listen_closed+0x68>)
 80081e6:	f008 fb15 	bl	8010814 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80081ea:	2301      	movs	r3, #1
 80081ec:	60fb      	str	r3, [r7, #12]
 80081ee:	e00b      	b.n	8008208 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80081f0:	4a0d      	ldr	r2, [pc, #52]	; (8008228 <tcp_listen_closed+0x70>)
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	6879      	ldr	r1, [r7, #4]
 80081fc:	4618      	mov	r0, r3
 80081fe:	f7ff ffb1 	bl	8008164 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	3301      	adds	r3, #1
 8008206:	60fb      	str	r3, [r7, #12]
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2b03      	cmp	r3, #3
 800820c:	d9f0      	bls.n	80081f0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800820e:	bf00      	nop
 8008210:	bf00      	nop
 8008212:	3710      	adds	r7, #16
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}
 8008218:	08012148 	.word	0x08012148
 800821c:	080121f8 	.word	0x080121f8
 8008220:	0801218c 	.word	0x0801218c
 8008224:	08012204 	.word	0x08012204
 8008228:	08014128 	.word	0x08014128

0800822c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800822c:	b5b0      	push	{r4, r5, r7, lr}
 800822e:	b088      	sub	sp, #32
 8008230:	af04      	add	r7, sp, #16
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	460b      	mov	r3, r1
 8008236:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d106      	bne.n	800824c <tcp_close_shutdown+0x20>
 800823e:	4b63      	ldr	r3, [pc, #396]	; (80083cc <tcp_close_shutdown+0x1a0>)
 8008240:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8008244:	4962      	ldr	r1, [pc, #392]	; (80083d0 <tcp_close_shutdown+0x1a4>)
 8008246:	4863      	ldr	r0, [pc, #396]	; (80083d4 <tcp_close_shutdown+0x1a8>)
 8008248:	f008 fae4 	bl	8010814 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800824c:	78fb      	ldrb	r3, [r7, #3]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d066      	beq.n	8008320 <tcp_close_shutdown+0xf4>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	7d1b      	ldrb	r3, [r3, #20]
 8008256:	2b04      	cmp	r3, #4
 8008258:	d003      	beq.n	8008262 <tcp_close_shutdown+0x36>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	7d1b      	ldrb	r3, [r3, #20]
 800825e:	2b07      	cmp	r3, #7
 8008260:	d15e      	bne.n	8008320 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008266:	2b00      	cmp	r3, #0
 8008268:	d104      	bne.n	8008274 <tcp_close_shutdown+0x48>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800826e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008272:	d055      	beq.n	8008320 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	8b5b      	ldrh	r3, [r3, #26]
 8008278:	f003 0310 	and.w	r3, r3, #16
 800827c:	2b00      	cmp	r3, #0
 800827e:	d106      	bne.n	800828e <tcp_close_shutdown+0x62>
 8008280:	4b52      	ldr	r3, [pc, #328]	; (80083cc <tcp_close_shutdown+0x1a0>)
 8008282:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8008286:	4954      	ldr	r1, [pc, #336]	; (80083d8 <tcp_close_shutdown+0x1ac>)
 8008288:	4852      	ldr	r0, [pc, #328]	; (80083d4 <tcp_close_shutdown+0x1a8>)
 800828a:	f008 fac3 	bl	8010814 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8008296:	687d      	ldr	r5, [r7, #4]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	3304      	adds	r3, #4
 800829c:	687a      	ldr	r2, [r7, #4]
 800829e:	8ad2      	ldrh	r2, [r2, #22]
 80082a0:	6879      	ldr	r1, [r7, #4]
 80082a2:	8b09      	ldrh	r1, [r1, #24]
 80082a4:	9102      	str	r1, [sp, #8]
 80082a6:	9201      	str	r2, [sp, #4]
 80082a8:	9300      	str	r3, [sp, #0]
 80082aa:	462b      	mov	r3, r5
 80082ac:	4622      	mov	r2, r4
 80082ae:	4601      	mov	r1, r0
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f004 fe91 	bl	800cfd8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f001 f8c6 	bl	8009448 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80082bc:	4b47      	ldr	r3, [pc, #284]	; (80083dc <tcp_close_shutdown+0x1b0>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d105      	bne.n	80082d2 <tcp_close_shutdown+0xa6>
 80082c6:	4b45      	ldr	r3, [pc, #276]	; (80083dc <tcp_close_shutdown+0x1b0>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	68db      	ldr	r3, [r3, #12]
 80082cc:	4a43      	ldr	r2, [pc, #268]	; (80083dc <tcp_close_shutdown+0x1b0>)
 80082ce:	6013      	str	r3, [r2, #0]
 80082d0:	e013      	b.n	80082fa <tcp_close_shutdown+0xce>
 80082d2:	4b42      	ldr	r3, [pc, #264]	; (80083dc <tcp_close_shutdown+0x1b0>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	60fb      	str	r3, [r7, #12]
 80082d8:	e00c      	b.n	80082f4 <tcp_close_shutdown+0xc8>
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	68db      	ldr	r3, [r3, #12]
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d104      	bne.n	80082ee <tcp_close_shutdown+0xc2>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	68da      	ldr	r2, [r3, #12]
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	60da      	str	r2, [r3, #12]
 80082ec:	e005      	b.n	80082fa <tcp_close_shutdown+0xce>
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	68db      	ldr	r3, [r3, #12]
 80082f2:	60fb      	str	r3, [r7, #12]
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d1ef      	bne.n	80082da <tcp_close_shutdown+0xae>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2200      	movs	r2, #0
 80082fe:	60da      	str	r2, [r3, #12]
 8008300:	4b37      	ldr	r3, [pc, #220]	; (80083e0 <tcp_close_shutdown+0x1b4>)
 8008302:	2201      	movs	r2, #1
 8008304:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8008306:	4b37      	ldr	r3, [pc, #220]	; (80083e4 <tcp_close_shutdown+0x1b8>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	429a      	cmp	r2, r3
 800830e:	d102      	bne.n	8008316 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8008310:	f003 fd5e 	bl	800bdd0 <tcp_trigger_input_pcb_close>
 8008314:	e002      	b.n	800831c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f7ff fed6 	bl	80080c8 <tcp_free>
      }
      return ERR_OK;
 800831c:	2300      	movs	r3, #0
 800831e:	e050      	b.n	80083c2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	7d1b      	ldrb	r3, [r3, #20]
 8008324:	2b02      	cmp	r3, #2
 8008326:	d03b      	beq.n	80083a0 <tcp_close_shutdown+0x174>
 8008328:	2b02      	cmp	r3, #2
 800832a:	dc44      	bgt.n	80083b6 <tcp_close_shutdown+0x18a>
 800832c:	2b00      	cmp	r3, #0
 800832e:	d002      	beq.n	8008336 <tcp_close_shutdown+0x10a>
 8008330:	2b01      	cmp	r3, #1
 8008332:	d02a      	beq.n	800838a <tcp_close_shutdown+0x15e>
 8008334:	e03f      	b.n	80083b6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	8adb      	ldrh	r3, [r3, #22]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d021      	beq.n	8008382 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800833e:	4b2a      	ldr	r3, [pc, #168]	; (80083e8 <tcp_close_shutdown+0x1bc>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	429a      	cmp	r2, r3
 8008346:	d105      	bne.n	8008354 <tcp_close_shutdown+0x128>
 8008348:	4b27      	ldr	r3, [pc, #156]	; (80083e8 <tcp_close_shutdown+0x1bc>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	68db      	ldr	r3, [r3, #12]
 800834e:	4a26      	ldr	r2, [pc, #152]	; (80083e8 <tcp_close_shutdown+0x1bc>)
 8008350:	6013      	str	r3, [r2, #0]
 8008352:	e013      	b.n	800837c <tcp_close_shutdown+0x150>
 8008354:	4b24      	ldr	r3, [pc, #144]	; (80083e8 <tcp_close_shutdown+0x1bc>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	60bb      	str	r3, [r7, #8]
 800835a:	e00c      	b.n	8008376 <tcp_close_shutdown+0x14a>
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	68db      	ldr	r3, [r3, #12]
 8008360:	687a      	ldr	r2, [r7, #4]
 8008362:	429a      	cmp	r2, r3
 8008364:	d104      	bne.n	8008370 <tcp_close_shutdown+0x144>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	68da      	ldr	r2, [r3, #12]
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	60da      	str	r2, [r3, #12]
 800836e:	e005      	b.n	800837c <tcp_close_shutdown+0x150>
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	68db      	ldr	r3, [r3, #12]
 8008374:	60bb      	str	r3, [r7, #8]
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d1ef      	bne.n	800835c <tcp_close_shutdown+0x130>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f7ff fea0 	bl	80080c8 <tcp_free>
      break;
 8008388:	e01a      	b.n	80083c0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f7ff ff14 	bl	80081b8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8008390:	6879      	ldr	r1, [r7, #4]
 8008392:	4816      	ldr	r0, [pc, #88]	; (80083ec <tcp_close_shutdown+0x1c0>)
 8008394:	f001 f8a8 	bl	80094e8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f7ff feb1 	bl	8008100 <tcp_free_listen>
      break;
 800839e:	e00f      	b.n	80083c0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80083a0:	6879      	ldr	r1, [r7, #4]
 80083a2:	480e      	ldr	r0, [pc, #56]	; (80083dc <tcp_close_shutdown+0x1b0>)
 80083a4:	f001 f8a0 	bl	80094e8 <tcp_pcb_remove>
 80083a8:	4b0d      	ldr	r3, [pc, #52]	; (80083e0 <tcp_close_shutdown+0x1b4>)
 80083aa:	2201      	movs	r2, #1
 80083ac:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f7ff fe8a 	bl	80080c8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80083b4:	e004      	b.n	80083c0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 f81a 	bl	80083f0 <tcp_close_shutdown_fin>
 80083bc:	4603      	mov	r3, r0
 80083be:	e000      	b.n	80083c2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80083c0:	2300      	movs	r3, #0
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3710      	adds	r7, #16
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bdb0      	pop	{r4, r5, r7, pc}
 80083ca:	bf00      	nop
 80083cc:	08012148 	.word	0x08012148
 80083d0:	0801221c 	.word	0x0801221c
 80083d4:	0801218c 	.word	0x0801218c
 80083d8:	0801223c 	.word	0x0801223c
 80083dc:	200088b0 	.word	0x200088b0
 80083e0:	200088b8 	.word	0x200088b8
 80083e4:	200088f0 	.word	0x200088f0
 80083e8:	200088a8 	.word	0x200088a8
 80083ec:	200088ac 	.word	0x200088ac

080083f0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b084      	sub	sp, #16
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d106      	bne.n	800840c <tcp_close_shutdown_fin+0x1c>
 80083fe:	4b2e      	ldr	r3, [pc, #184]	; (80084b8 <tcp_close_shutdown_fin+0xc8>)
 8008400:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8008404:	492d      	ldr	r1, [pc, #180]	; (80084bc <tcp_close_shutdown_fin+0xcc>)
 8008406:	482e      	ldr	r0, [pc, #184]	; (80084c0 <tcp_close_shutdown_fin+0xd0>)
 8008408:	f008 fa04 	bl	8010814 <iprintf>

  switch (pcb->state) {
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	7d1b      	ldrb	r3, [r3, #20]
 8008410:	2b07      	cmp	r3, #7
 8008412:	d020      	beq.n	8008456 <tcp_close_shutdown_fin+0x66>
 8008414:	2b07      	cmp	r3, #7
 8008416:	dc2b      	bgt.n	8008470 <tcp_close_shutdown_fin+0x80>
 8008418:	2b03      	cmp	r3, #3
 800841a:	d002      	beq.n	8008422 <tcp_close_shutdown_fin+0x32>
 800841c:	2b04      	cmp	r3, #4
 800841e:	d00d      	beq.n	800843c <tcp_close_shutdown_fin+0x4c>
 8008420:	e026      	b.n	8008470 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f003 fee6 	bl	800c1f4 <tcp_send_fin>
 8008428:	4603      	mov	r3, r0
 800842a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800842c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d11f      	bne.n	8008474 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2205      	movs	r2, #5
 8008438:	751a      	strb	r2, [r3, #20]
      }
      break;
 800843a:	e01b      	b.n	8008474 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f003 fed9 	bl	800c1f4 <tcp_send_fin>
 8008442:	4603      	mov	r3, r0
 8008444:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d114      	bne.n	8008478 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2205      	movs	r2, #5
 8008452:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008454:	e010      	b.n	8008478 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f003 fecc 	bl	800c1f4 <tcp_send_fin>
 800845c:	4603      	mov	r3, r0
 800845e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008460:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d109      	bne.n	800847c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2209      	movs	r2, #9
 800846c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800846e:	e005      	b.n	800847c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8008470:	2300      	movs	r3, #0
 8008472:	e01c      	b.n	80084ae <tcp_close_shutdown_fin+0xbe>
      break;
 8008474:	bf00      	nop
 8008476:	e002      	b.n	800847e <tcp_close_shutdown_fin+0x8e>
      break;
 8008478:	bf00      	nop
 800847a:	e000      	b.n	800847e <tcp_close_shutdown_fin+0x8e>
      break;
 800847c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800847e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d103      	bne.n	800848e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f003 fff2 	bl	800c470 <tcp_output>
 800848c:	e00d      	b.n	80084aa <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800848e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008496:	d108      	bne.n	80084aa <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	8b5b      	ldrh	r3, [r3, #26]
 800849c:	f043 0308 	orr.w	r3, r3, #8
 80084a0:	b29a      	uxth	r2, r3
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80084a6:	2300      	movs	r3, #0
 80084a8:	e001      	b.n	80084ae <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80084aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3710      	adds	r7, #16
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
 80084b6:	bf00      	nop
 80084b8:	08012148 	.word	0x08012148
 80084bc:	080121f8 	.word	0x080121f8
 80084c0:	0801218c 	.word	0x0801218c

080084c4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b082      	sub	sp, #8
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d109      	bne.n	80084e6 <tcp_close+0x22>
 80084d2:	4b0f      	ldr	r3, [pc, #60]	; (8008510 <tcp_close+0x4c>)
 80084d4:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80084d8:	490e      	ldr	r1, [pc, #56]	; (8008514 <tcp_close+0x50>)
 80084da:	480f      	ldr	r0, [pc, #60]	; (8008518 <tcp_close+0x54>)
 80084dc:	f008 f99a 	bl	8010814 <iprintf>
 80084e0:	f06f 030f 	mvn.w	r3, #15
 80084e4:	e00f      	b.n	8008506 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	7d1b      	ldrb	r3, [r3, #20]
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	d006      	beq.n	80084fc <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	8b5b      	ldrh	r3, [r3, #26]
 80084f2:	f043 0310 	orr.w	r3, r3, #16
 80084f6:	b29a      	uxth	r2, r3
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80084fc:	2101      	movs	r1, #1
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f7ff fe94 	bl	800822c <tcp_close_shutdown>
 8008504:	4603      	mov	r3, r0
}
 8008506:	4618      	mov	r0, r3
 8008508:	3708      	adds	r7, #8
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	08012148 	.word	0x08012148
 8008514:	08012258 	.word	0x08012258
 8008518:	0801218c 	.word	0x0801218c

0800851c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b08e      	sub	sp, #56	; 0x38
 8008520:	af04      	add	r7, sp, #16
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d107      	bne.n	800853c <tcp_abandon+0x20>
 800852c:	4b52      	ldr	r3, [pc, #328]	; (8008678 <tcp_abandon+0x15c>)
 800852e:	f240 223d 	movw	r2, #573	; 0x23d
 8008532:	4952      	ldr	r1, [pc, #328]	; (800867c <tcp_abandon+0x160>)
 8008534:	4852      	ldr	r0, [pc, #328]	; (8008680 <tcp_abandon+0x164>)
 8008536:	f008 f96d 	bl	8010814 <iprintf>
 800853a:	e099      	b.n	8008670 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	7d1b      	ldrb	r3, [r3, #20]
 8008540:	2b01      	cmp	r3, #1
 8008542:	d106      	bne.n	8008552 <tcp_abandon+0x36>
 8008544:	4b4c      	ldr	r3, [pc, #304]	; (8008678 <tcp_abandon+0x15c>)
 8008546:	f44f 7210 	mov.w	r2, #576	; 0x240
 800854a:	494e      	ldr	r1, [pc, #312]	; (8008684 <tcp_abandon+0x168>)
 800854c:	484c      	ldr	r0, [pc, #304]	; (8008680 <tcp_abandon+0x164>)
 800854e:	f008 f961 	bl	8010814 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	7d1b      	ldrb	r3, [r3, #20]
 8008556:	2b0a      	cmp	r3, #10
 8008558:	d107      	bne.n	800856a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800855a:	6879      	ldr	r1, [r7, #4]
 800855c:	484a      	ldr	r0, [pc, #296]	; (8008688 <tcp_abandon+0x16c>)
 800855e:	f000 ffc3 	bl	80094e8 <tcp_pcb_remove>
    tcp_free(pcb);
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f7ff fdb0 	bl	80080c8 <tcp_free>
 8008568:	e082      	b.n	8008670 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800856a:	2300      	movs	r3, #0
 800856c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800856e:	2300      	movs	r3, #0
 8008570:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008576:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800857c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008584:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	691b      	ldr	r3, [r3, #16]
 800858a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	7d1b      	ldrb	r3, [r3, #20]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d126      	bne.n	80085e2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	8adb      	ldrh	r3, [r3, #22]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d02e      	beq.n	80085fa <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800859c:	4b3b      	ldr	r3, [pc, #236]	; (800868c <tcp_abandon+0x170>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d105      	bne.n	80085b2 <tcp_abandon+0x96>
 80085a6:	4b39      	ldr	r3, [pc, #228]	; (800868c <tcp_abandon+0x170>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	68db      	ldr	r3, [r3, #12]
 80085ac:	4a37      	ldr	r2, [pc, #220]	; (800868c <tcp_abandon+0x170>)
 80085ae:	6013      	str	r3, [r2, #0]
 80085b0:	e013      	b.n	80085da <tcp_abandon+0xbe>
 80085b2:	4b36      	ldr	r3, [pc, #216]	; (800868c <tcp_abandon+0x170>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	61fb      	str	r3, [r7, #28]
 80085b8:	e00c      	b.n	80085d4 <tcp_abandon+0xb8>
 80085ba:	69fb      	ldr	r3, [r7, #28]
 80085bc:	68db      	ldr	r3, [r3, #12]
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d104      	bne.n	80085ce <tcp_abandon+0xb2>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	68da      	ldr	r2, [r3, #12]
 80085c8:	69fb      	ldr	r3, [r7, #28]
 80085ca:	60da      	str	r2, [r3, #12]
 80085cc:	e005      	b.n	80085da <tcp_abandon+0xbe>
 80085ce:	69fb      	ldr	r3, [r7, #28]
 80085d0:	68db      	ldr	r3, [r3, #12]
 80085d2:	61fb      	str	r3, [r7, #28]
 80085d4:	69fb      	ldr	r3, [r7, #28]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d1ef      	bne.n	80085ba <tcp_abandon+0x9e>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2200      	movs	r2, #0
 80085de:	60da      	str	r2, [r3, #12]
 80085e0:	e00b      	b.n	80085fa <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	8adb      	ldrh	r3, [r3, #22]
 80085ea:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80085ec:	6879      	ldr	r1, [r7, #4]
 80085ee:	4828      	ldr	r0, [pc, #160]	; (8008690 <tcp_abandon+0x174>)
 80085f0:	f000 ff7a 	bl	80094e8 <tcp_pcb_remove>
 80085f4:	4b27      	ldr	r3, [pc, #156]	; (8008694 <tcp_abandon+0x178>)
 80085f6:	2201      	movs	r2, #1
 80085f8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d004      	beq.n	800860c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008606:	4618      	mov	r0, r3
 8008608:	f000 fd1c 	bl	8009044 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008610:	2b00      	cmp	r3, #0
 8008612:	d004      	beq.n	800861e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008618:	4618      	mov	r0, r3
 800861a:	f000 fd13 	bl	8009044 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008622:	2b00      	cmp	r3, #0
 8008624:	d004      	beq.n	8008630 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800862a:	4618      	mov	r0, r3
 800862c:	f000 fd0a 	bl	8009044 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8008630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008632:	2b00      	cmp	r3, #0
 8008634:	d00e      	beq.n	8008654 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8008636:	6879      	ldr	r1, [r7, #4]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	3304      	adds	r3, #4
 800863c:	687a      	ldr	r2, [r7, #4]
 800863e:	8b12      	ldrh	r2, [r2, #24]
 8008640:	9202      	str	r2, [sp, #8]
 8008642:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008644:	9201      	str	r2, [sp, #4]
 8008646:	9300      	str	r3, [sp, #0]
 8008648:	460b      	mov	r3, r1
 800864a:	697a      	ldr	r2, [r7, #20]
 800864c:	69b9      	ldr	r1, [r7, #24]
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f004 fcc2 	bl	800cfd8 <tcp_rst>
    }
    last_state = pcb->state;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	7d1b      	ldrb	r3, [r3, #20]
 8008658:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f7ff fd34 	bl	80080c8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d004      	beq.n	8008670 <tcp_abandon+0x154>
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	f06f 010c 	mvn.w	r1, #12
 800866c:	68f8      	ldr	r0, [r7, #12]
 800866e:	4798      	blx	r3
  }
}
 8008670:	3728      	adds	r7, #40	; 0x28
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	08012148 	.word	0x08012148
 800867c:	0801228c 	.word	0x0801228c
 8008680:	0801218c 	.word	0x0801218c
 8008684:	080122a8 	.word	0x080122a8
 8008688:	200088b4 	.word	0x200088b4
 800868c:	200088a8 	.word	0x200088a8
 8008690:	200088b0 	.word	0x200088b0
 8008694:	200088b8 	.word	0x200088b8

08008698 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b082      	sub	sp, #8
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80086a0:	2101      	movs	r1, #1
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f7ff ff3a 	bl	800851c <tcp_abandon>
}
 80086a8:	bf00      	nop
 80086aa:	3708      	adds	r7, #8
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d106      	bne.n	80086cc <tcp_update_rcv_ann_wnd+0x1c>
 80086be:	4b25      	ldr	r3, [pc, #148]	; (8008754 <tcp_update_rcv_ann_wnd+0xa4>)
 80086c0:	f240 32a6 	movw	r2, #934	; 0x3a6
 80086c4:	4924      	ldr	r1, [pc, #144]	; (8008758 <tcp_update_rcv_ann_wnd+0xa8>)
 80086c6:	4825      	ldr	r0, [pc, #148]	; (800875c <tcp_update_rcv_ann_wnd+0xac>)
 80086c8:	f008 f8a4 	bl	8010814 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d0:	687a      	ldr	r2, [r7, #4]
 80086d2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80086d4:	4413      	add	r3, r2
 80086d6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80086e0:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80086e4:	bf28      	it	cs
 80086e6:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80086ea:	b292      	uxth	r2, r2
 80086ec:	4413      	add	r3, r2
 80086ee:	68fa      	ldr	r2, [r7, #12]
 80086f0:	1ad3      	subs	r3, r2, r3
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	db08      	blt.n	8008708 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008702:	68fa      	ldr	r2, [r7, #12]
 8008704:	1ad3      	subs	r3, r2, r3
 8008706:	e020      	b.n	800874a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008710:	1ad3      	subs	r3, r2, r3
 8008712:	2b00      	cmp	r3, #0
 8008714:	dd03      	ble.n	800871e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2200      	movs	r2, #0
 800871a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800871c:	e014      	b.n	8008748 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008726:	1ad3      	subs	r3, r2, r3
 8008728:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008730:	d306      	bcc.n	8008740 <tcp_update_rcv_ann_wnd+0x90>
 8008732:	4b08      	ldr	r3, [pc, #32]	; (8008754 <tcp_update_rcv_ann_wnd+0xa4>)
 8008734:	f240 32b6 	movw	r2, #950	; 0x3b6
 8008738:	4909      	ldr	r1, [pc, #36]	; (8008760 <tcp_update_rcv_ann_wnd+0xb0>)
 800873a:	4808      	ldr	r0, [pc, #32]	; (800875c <tcp_update_rcv_ann_wnd+0xac>)
 800873c:	f008 f86a 	bl	8010814 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	b29a      	uxth	r2, r3
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8008748:	2300      	movs	r3, #0
  }
}
 800874a:	4618      	mov	r0, r3
 800874c:	3710      	adds	r7, #16
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
 8008752:	bf00      	nop
 8008754:	08012148 	.word	0x08012148
 8008758:	080123a4 	.word	0x080123a4
 800875c:	0801218c 	.word	0x0801218c
 8008760:	080123c8 	.word	0x080123c8

08008764 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b084      	sub	sp, #16
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	460b      	mov	r3, r1
 800876e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d107      	bne.n	8008786 <tcp_recved+0x22>
 8008776:	4b1f      	ldr	r3, [pc, #124]	; (80087f4 <tcp_recved+0x90>)
 8008778:	f240 32cf 	movw	r2, #975	; 0x3cf
 800877c:	491e      	ldr	r1, [pc, #120]	; (80087f8 <tcp_recved+0x94>)
 800877e:	481f      	ldr	r0, [pc, #124]	; (80087fc <tcp_recved+0x98>)
 8008780:	f008 f848 	bl	8010814 <iprintf>
 8008784:	e032      	b.n	80087ec <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	7d1b      	ldrb	r3, [r3, #20]
 800878a:	2b01      	cmp	r3, #1
 800878c:	d106      	bne.n	800879c <tcp_recved+0x38>
 800878e:	4b19      	ldr	r3, [pc, #100]	; (80087f4 <tcp_recved+0x90>)
 8008790:	f240 32d2 	movw	r2, #978	; 0x3d2
 8008794:	491a      	ldr	r1, [pc, #104]	; (8008800 <tcp_recved+0x9c>)
 8008796:	4819      	ldr	r0, [pc, #100]	; (80087fc <tcp_recved+0x98>)
 8008798:	f008 f83c 	bl	8010814 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80087a0:	887b      	ldrh	r3, [r7, #2]
 80087a2:	4413      	add	r3, r2
 80087a4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80087a6:	89fb      	ldrh	r3, [r7, #14]
 80087a8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80087ac:	d804      	bhi.n	80087b8 <tcp_recved+0x54>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087b2:	89fa      	ldrh	r2, [r7, #14]
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d204      	bcs.n	80087c2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80087be:	851a      	strh	r2, [r3, #40]	; 0x28
 80087c0:	e002      	b.n	80087c8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	89fa      	ldrh	r2, [r7, #14]
 80087c6:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f7ff ff71 	bl	80086b0 <tcp_update_rcv_ann_wnd>
 80087ce:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80087d6:	d309      	bcc.n	80087ec <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	8b5b      	ldrh	r3, [r3, #26]
 80087dc:	f043 0302 	orr.w	r3, r3, #2
 80087e0:	b29a      	uxth	r2, r3
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f003 fe42 	bl	800c470 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80087ec:	3710      	adds	r7, #16
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}
 80087f2:	bf00      	nop
 80087f4:	08012148 	.word	0x08012148
 80087f8:	080123e4 	.word	0x080123e4
 80087fc:	0801218c 	.word	0x0801218c
 8008800:	080123fc 	.word	0x080123fc

08008804 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8008804:	b5b0      	push	{r4, r5, r7, lr}
 8008806:	b090      	sub	sp, #64	; 0x40
 8008808:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800880a:	2300      	movs	r3, #0
 800880c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8008810:	4b94      	ldr	r3, [pc, #592]	; (8008a64 <tcp_slowtmr+0x260>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	3301      	adds	r3, #1
 8008816:	4a93      	ldr	r2, [pc, #588]	; (8008a64 <tcp_slowtmr+0x260>)
 8008818:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800881a:	4b93      	ldr	r3, [pc, #588]	; (8008a68 <tcp_slowtmr+0x264>)
 800881c:	781b      	ldrb	r3, [r3, #0]
 800881e:	3301      	adds	r3, #1
 8008820:	b2da      	uxtb	r2, r3
 8008822:	4b91      	ldr	r3, [pc, #580]	; (8008a68 <tcp_slowtmr+0x264>)
 8008824:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8008826:	2300      	movs	r3, #0
 8008828:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800882a:	4b90      	ldr	r3, [pc, #576]	; (8008a6c <tcp_slowtmr+0x268>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8008830:	e29d      	b.n	8008d6e <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8008832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008834:	7d1b      	ldrb	r3, [r3, #20]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d106      	bne.n	8008848 <tcp_slowtmr+0x44>
 800883a:	4b8d      	ldr	r3, [pc, #564]	; (8008a70 <tcp_slowtmr+0x26c>)
 800883c:	f240 42be 	movw	r2, #1214	; 0x4be
 8008840:	498c      	ldr	r1, [pc, #560]	; (8008a74 <tcp_slowtmr+0x270>)
 8008842:	488d      	ldr	r0, [pc, #564]	; (8008a78 <tcp_slowtmr+0x274>)
 8008844:	f007 ffe6 	bl	8010814 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8008848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800884a:	7d1b      	ldrb	r3, [r3, #20]
 800884c:	2b01      	cmp	r3, #1
 800884e:	d106      	bne.n	800885e <tcp_slowtmr+0x5a>
 8008850:	4b87      	ldr	r3, [pc, #540]	; (8008a70 <tcp_slowtmr+0x26c>)
 8008852:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8008856:	4989      	ldr	r1, [pc, #548]	; (8008a7c <tcp_slowtmr+0x278>)
 8008858:	4887      	ldr	r0, [pc, #540]	; (8008a78 <tcp_slowtmr+0x274>)
 800885a:	f007 ffdb 	bl	8010814 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800885e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008860:	7d1b      	ldrb	r3, [r3, #20]
 8008862:	2b0a      	cmp	r3, #10
 8008864:	d106      	bne.n	8008874 <tcp_slowtmr+0x70>
 8008866:	4b82      	ldr	r3, [pc, #520]	; (8008a70 <tcp_slowtmr+0x26c>)
 8008868:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800886c:	4984      	ldr	r1, [pc, #528]	; (8008a80 <tcp_slowtmr+0x27c>)
 800886e:	4882      	ldr	r0, [pc, #520]	; (8008a78 <tcp_slowtmr+0x274>)
 8008870:	f007 ffd0 	bl	8010814 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8008874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008876:	7f9a      	ldrb	r2, [r3, #30]
 8008878:	4b7b      	ldr	r3, [pc, #492]	; (8008a68 <tcp_slowtmr+0x264>)
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	429a      	cmp	r2, r3
 800887e:	d105      	bne.n	800888c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8008880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008882:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8008884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008886:	68db      	ldr	r3, [r3, #12]
 8008888:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800888a:	e270      	b.n	8008d6e <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800888c:	4b76      	ldr	r3, [pc, #472]	; (8008a68 <tcp_slowtmr+0x264>)
 800888e:	781a      	ldrb	r2, [r3, #0]
 8008890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008892:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8008894:	2300      	movs	r3, #0
 8008896:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800889a:	2300      	movs	r3, #0
 800889c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80088a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a2:	7d1b      	ldrb	r3, [r3, #20]
 80088a4:	2b02      	cmp	r3, #2
 80088a6:	d10a      	bne.n	80088be <tcp_slowtmr+0xba>
 80088a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80088ae:	2b05      	cmp	r3, #5
 80088b0:	d905      	bls.n	80088be <tcp_slowtmr+0xba>
      ++pcb_remove;
 80088b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80088b6:	3301      	adds	r3, #1
 80088b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80088bc:	e11e      	b.n	8008afc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80088be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80088c4:	2b0b      	cmp	r3, #11
 80088c6:	d905      	bls.n	80088d4 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80088c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80088cc:	3301      	adds	r3, #1
 80088ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80088d2:	e113      	b.n	8008afc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80088d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088d6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d075      	beq.n	80089ca <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80088de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d006      	beq.n	80088f4 <tcp_slowtmr+0xf0>
 80088e6:	4b62      	ldr	r3, [pc, #392]	; (8008a70 <tcp_slowtmr+0x26c>)
 80088e8:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80088ec:	4965      	ldr	r1, [pc, #404]	; (8008a84 <tcp_slowtmr+0x280>)
 80088ee:	4862      	ldr	r0, [pc, #392]	; (8008a78 <tcp_slowtmr+0x274>)
 80088f0:	f007 ff90 	bl	8010814 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80088f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d106      	bne.n	800890a <tcp_slowtmr+0x106>
 80088fc:	4b5c      	ldr	r3, [pc, #368]	; (8008a70 <tcp_slowtmr+0x26c>)
 80088fe:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8008902:	4961      	ldr	r1, [pc, #388]	; (8008a88 <tcp_slowtmr+0x284>)
 8008904:	485c      	ldr	r0, [pc, #368]	; (8008a78 <tcp_slowtmr+0x274>)
 8008906:	f007 ff85 	bl	8010814 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800890a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800890c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8008910:	2b0b      	cmp	r3, #11
 8008912:	d905      	bls.n	8008920 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8008914:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008918:	3301      	adds	r3, #1
 800891a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800891e:	e0ed      	b.n	8008afc <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8008920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008922:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008926:	3b01      	subs	r3, #1
 8008928:	4a58      	ldr	r2, [pc, #352]	; (8008a8c <tcp_slowtmr+0x288>)
 800892a:	5cd3      	ldrb	r3, [r2, r3]
 800892c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800892e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008930:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008934:	7c7a      	ldrb	r2, [r7, #17]
 8008936:	429a      	cmp	r2, r3
 8008938:	d907      	bls.n	800894a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800893a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800893c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008940:	3301      	adds	r3, #1
 8008942:	b2da      	uxtb	r2, r3
 8008944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008946:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800894a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800894c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008950:	7c7a      	ldrb	r2, [r7, #17]
 8008952:	429a      	cmp	r2, r3
 8008954:	f200 80d2 	bhi.w	8008afc <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8008958:	2301      	movs	r3, #1
 800895a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800895c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800895e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008962:	2b00      	cmp	r3, #0
 8008964:	d108      	bne.n	8008978 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8008966:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008968:	f004 fc2a 	bl	800d1c0 <tcp_zero_window_probe>
 800896c:	4603      	mov	r3, r0
 800896e:	2b00      	cmp	r3, #0
 8008970:	d014      	beq.n	800899c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8008972:	2300      	movs	r3, #0
 8008974:	623b      	str	r3, [r7, #32]
 8008976:	e011      	b.n	800899c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8008978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800897a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800897e:	4619      	mov	r1, r3
 8008980:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008982:	f003 faef 	bl	800bf64 <tcp_split_unsent_seg>
 8008986:	4603      	mov	r3, r0
 8008988:	2b00      	cmp	r3, #0
 800898a:	d107      	bne.n	800899c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800898c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800898e:	f003 fd6f 	bl	800c470 <tcp_output>
 8008992:	4603      	mov	r3, r0
 8008994:	2b00      	cmp	r3, #0
 8008996:	d101      	bne.n	800899c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8008998:	2300      	movs	r3, #0
 800899a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800899c:	6a3b      	ldr	r3, [r7, #32]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	f000 80ac 	beq.w	8008afc <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80089a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089a6:	2200      	movs	r2, #0
 80089a8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80089ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ae:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80089b2:	2b06      	cmp	r3, #6
 80089b4:	f200 80a2 	bhi.w	8008afc <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80089b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ba:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80089be:	3301      	adds	r3, #1
 80089c0:	b2da      	uxtb	r2, r3
 80089c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089c4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80089c8:	e098      	b.n	8008afc <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80089ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089cc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	db0f      	blt.n	80089f4 <tcp_slowtmr+0x1f0>
 80089d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089d6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80089da:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80089de:	4293      	cmp	r3, r2
 80089e0:	d008      	beq.n	80089f4 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80089e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089e4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	3301      	adds	r3, #1
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	b21a      	sxth	r2, r3
 80089f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089f2:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80089f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089f6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80089fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089fc:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8008a00:	429a      	cmp	r2, r3
 8008a02:	db7b      	blt.n	8008afc <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8008a04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008a06:	f004 f827 	bl	800ca58 <tcp_rexmit_rto_prepare>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d007      	beq.n	8008a20 <tcp_slowtmr+0x21c>
 8008a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d171      	bne.n	8008afc <tcp_slowtmr+0x2f8>
 8008a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d06d      	beq.n	8008afc <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8008a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a22:	7d1b      	ldrb	r3, [r3, #20]
 8008a24:	2b02      	cmp	r3, #2
 8008a26:	d03a      	beq.n	8008a9e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8008a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a2a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008a2e:	2b0c      	cmp	r3, #12
 8008a30:	bf28      	it	cs
 8008a32:	230c      	movcs	r3, #12
 8008a34:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8008a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a38:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008a3c:	10db      	asrs	r3, r3, #3
 8008a3e:	b21b      	sxth	r3, r3
 8008a40:	461a      	mov	r2, r3
 8008a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a44:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008a48:	4413      	add	r3, r2
 8008a4a:	7efa      	ldrb	r2, [r7, #27]
 8008a4c:	4910      	ldr	r1, [pc, #64]	; (8008a90 <tcp_slowtmr+0x28c>)
 8008a4e:	5c8a      	ldrb	r2, [r1, r2]
 8008a50:	4093      	lsls	r3, r2
 8008a52:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	dc1a      	bgt.n	8008a94 <tcp_slowtmr+0x290>
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	b21a      	sxth	r2, r3
 8008a62:	e019      	b.n	8008a98 <tcp_slowtmr+0x294>
 8008a64:	200088a4 	.word	0x200088a4
 8008a68:	200088ba 	.word	0x200088ba
 8008a6c:	200088b0 	.word	0x200088b0
 8008a70:	08012148 	.word	0x08012148
 8008a74:	0801248c 	.word	0x0801248c
 8008a78:	0801218c 	.word	0x0801218c
 8008a7c:	080124b8 	.word	0x080124b8
 8008a80:	080124e4 	.word	0x080124e4
 8008a84:	08012514 	.word	0x08012514
 8008a88:	08012548 	.word	0x08012548
 8008a8c:	08014120 	.word	0x08014120
 8008a90:	08014110 	.word	0x08014110
 8008a94:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a9a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8008a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8008aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aa6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	bf28      	it	cs
 8008ab4:	4613      	movcs	r3, r2
 8008ab6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8008ab8:	8a7b      	ldrh	r3, [r7, #18]
 8008aba:	085b      	lsrs	r3, r3, #1
 8008abc:	b29a      	uxth	r2, r3
 8008abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8008ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8008aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008acc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008ace:	005b      	lsls	r3, r3, #1
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	d206      	bcs.n	8008ae4 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8008ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008ada:	005b      	lsls	r3, r3, #1
 8008adc:	b29a      	uxth	r2, r3
 8008ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8008ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8008ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8008aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af0:	2200      	movs	r2, #0
 8008af2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8008af6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008af8:	f004 f81e 	bl	800cb38 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8008afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008afe:	7d1b      	ldrb	r3, [r3, #20]
 8008b00:	2b06      	cmp	r3, #6
 8008b02:	d111      	bne.n	8008b28 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8008b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b06:	8b5b      	ldrh	r3, [r3, #26]
 8008b08:	f003 0310 	and.w	r3, r3, #16
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d00b      	beq.n	8008b28 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008b10:	4b9c      	ldr	r3, [pc, #624]	; (8008d84 <tcp_slowtmr+0x580>)
 8008b12:	681a      	ldr	r2, [r3, #0]
 8008b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b16:	6a1b      	ldr	r3, [r3, #32]
 8008b18:	1ad3      	subs	r3, r2, r3
 8008b1a:	2b28      	cmp	r3, #40	; 0x28
 8008b1c:	d904      	bls.n	8008b28 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8008b1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b22:	3301      	adds	r3, #1
 8008b24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b2a:	7a5b      	ldrb	r3, [r3, #9]
 8008b2c:	f003 0308 	and.w	r3, r3, #8
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d04a      	beq.n	8008bca <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8008b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b36:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008b38:	2b04      	cmp	r3, #4
 8008b3a:	d003      	beq.n	8008b44 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8008b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b3e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8008b40:	2b07      	cmp	r3, #7
 8008b42:	d142      	bne.n	8008bca <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008b44:	4b8f      	ldr	r3, [pc, #572]	; (8008d84 <tcp_slowtmr+0x580>)
 8008b46:	681a      	ldr	r2, [r3, #0]
 8008b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b4a:	6a1b      	ldr	r3, [r3, #32]
 8008b4c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8008b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b50:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8008b54:	4b8c      	ldr	r3, [pc, #560]	; (8008d88 <tcp_slowtmr+0x584>)
 8008b56:	440b      	add	r3, r1
 8008b58:	498c      	ldr	r1, [pc, #560]	; (8008d8c <tcp_slowtmr+0x588>)
 8008b5a:	fba1 1303 	umull	r1, r3, r1, r3
 8008b5e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d90a      	bls.n	8008b7a <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8008b64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b68:	3301      	adds	r3, #1
 8008b6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8008b6e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008b72:	3301      	adds	r3, #1
 8008b74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008b78:	e027      	b.n	8008bca <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008b7a:	4b82      	ldr	r3, [pc, #520]	; (8008d84 <tcp_slowtmr+0x580>)
 8008b7c:	681a      	ldr	r2, [r3, #0]
 8008b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b80:	6a1b      	ldr	r3, [r3, #32]
 8008b82:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8008b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b86:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8008b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b8c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8008b90:	4618      	mov	r0, r3
 8008b92:	4b7f      	ldr	r3, [pc, #508]	; (8008d90 <tcp_slowtmr+0x58c>)
 8008b94:	fb00 f303 	mul.w	r3, r0, r3
 8008b98:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8008b9a:	497c      	ldr	r1, [pc, #496]	; (8008d8c <tcp_slowtmr+0x588>)
 8008b9c:	fba1 1303 	umull	r1, r3, r1, r3
 8008ba0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008ba2:	429a      	cmp	r2, r3
 8008ba4:	d911      	bls.n	8008bca <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8008ba6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ba8:	f004 faca 	bl	800d140 <tcp_keepalive>
 8008bac:	4603      	mov	r3, r0
 8008bae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8008bb2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d107      	bne.n	8008bca <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8008bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bbc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8008bc0:	3301      	adds	r3, #1
 8008bc2:	b2da      	uxtb	r2, r3
 8008bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bc6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8008bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d011      	beq.n	8008bf6 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8008bd2:	4b6c      	ldr	r3, [pc, #432]	; (8008d84 <tcp_slowtmr+0x580>)
 8008bd4:	681a      	ldr	r2, [r3, #0]
 8008bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd8:	6a1b      	ldr	r3, [r3, #32]
 8008bda:	1ad2      	subs	r2, r2, r3
 8008bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bde:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8008be2:	4619      	mov	r1, r3
 8008be4:	460b      	mov	r3, r1
 8008be6:	005b      	lsls	r3, r3, #1
 8008be8:	440b      	add	r3, r1
 8008bea:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d302      	bcc.n	8008bf6 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8008bf0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008bf2:	f000 fddd 	bl	80097b0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8008bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf8:	7d1b      	ldrb	r3, [r3, #20]
 8008bfa:	2b03      	cmp	r3, #3
 8008bfc:	d10b      	bne.n	8008c16 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008bfe:	4b61      	ldr	r3, [pc, #388]	; (8008d84 <tcp_slowtmr+0x580>)
 8008c00:	681a      	ldr	r2, [r3, #0]
 8008c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c04:	6a1b      	ldr	r3, [r3, #32]
 8008c06:	1ad3      	subs	r3, r2, r3
 8008c08:	2b28      	cmp	r3, #40	; 0x28
 8008c0a:	d904      	bls.n	8008c16 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8008c0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c10:	3301      	adds	r3, #1
 8008c12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8008c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c18:	7d1b      	ldrb	r3, [r3, #20]
 8008c1a:	2b09      	cmp	r3, #9
 8008c1c:	d10b      	bne.n	8008c36 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008c1e:	4b59      	ldr	r3, [pc, #356]	; (8008d84 <tcp_slowtmr+0x580>)
 8008c20:	681a      	ldr	r2, [r3, #0]
 8008c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c24:	6a1b      	ldr	r3, [r3, #32]
 8008c26:	1ad3      	subs	r3, r2, r3
 8008c28:	2bf0      	cmp	r3, #240	; 0xf0
 8008c2a:	d904      	bls.n	8008c36 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8008c2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c30:	3301      	adds	r3, #1
 8008c32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8008c36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d060      	beq.n	8008d00 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8008c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c44:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8008c46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008c48:	f000 fbfe 	bl	8009448 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8008c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d010      	beq.n	8008c74 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8008c52:	4b50      	ldr	r3, [pc, #320]	; (8008d94 <tcp_slowtmr+0x590>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d106      	bne.n	8008c6a <tcp_slowtmr+0x466>
 8008c5c:	4b4e      	ldr	r3, [pc, #312]	; (8008d98 <tcp_slowtmr+0x594>)
 8008c5e:	f240 526d 	movw	r2, #1389	; 0x56d
 8008c62:	494e      	ldr	r1, [pc, #312]	; (8008d9c <tcp_slowtmr+0x598>)
 8008c64:	484e      	ldr	r0, [pc, #312]	; (8008da0 <tcp_slowtmr+0x59c>)
 8008c66:	f007 fdd5 	bl	8010814 <iprintf>
        prev->next = pcb->next;
 8008c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c6c:	68da      	ldr	r2, [r3, #12]
 8008c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c70:	60da      	str	r2, [r3, #12]
 8008c72:	e00f      	b.n	8008c94 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8008c74:	4b47      	ldr	r3, [pc, #284]	; (8008d94 <tcp_slowtmr+0x590>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	d006      	beq.n	8008c8c <tcp_slowtmr+0x488>
 8008c7e:	4b46      	ldr	r3, [pc, #280]	; (8008d98 <tcp_slowtmr+0x594>)
 8008c80:	f240 5271 	movw	r2, #1393	; 0x571
 8008c84:	4947      	ldr	r1, [pc, #284]	; (8008da4 <tcp_slowtmr+0x5a0>)
 8008c86:	4846      	ldr	r0, [pc, #280]	; (8008da0 <tcp_slowtmr+0x59c>)
 8008c88:	f007 fdc4 	bl	8010814 <iprintf>
        tcp_active_pcbs = pcb->next;
 8008c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c8e:	68db      	ldr	r3, [r3, #12]
 8008c90:	4a40      	ldr	r2, [pc, #256]	; (8008d94 <tcp_slowtmr+0x590>)
 8008c92:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8008c94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d013      	beq.n	8008cc4 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c9e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8008ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ca2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8008ca4:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8008ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ca8:	3304      	adds	r3, #4
 8008caa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cac:	8ad2      	ldrh	r2, [r2, #22]
 8008cae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008cb0:	8b09      	ldrh	r1, [r1, #24]
 8008cb2:	9102      	str	r1, [sp, #8]
 8008cb4:	9201      	str	r2, [sp, #4]
 8008cb6:	9300      	str	r3, [sp, #0]
 8008cb8:	462b      	mov	r3, r5
 8008cba:	4622      	mov	r2, r4
 8008cbc:	4601      	mov	r1, r0
 8008cbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008cc0:	f004 f98a 	bl	800cfd8 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8008cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cc6:	691b      	ldr	r3, [r3, #16]
 8008cc8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8008cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ccc:	7d1b      	ldrb	r3, [r3, #20]
 8008cce:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8008cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cd2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8008cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cd6:	68db      	ldr	r3, [r3, #12]
 8008cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8008cda:	6838      	ldr	r0, [r7, #0]
 8008cdc:	f7ff f9f4 	bl	80080c8 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8008ce0:	4b31      	ldr	r3, [pc, #196]	; (8008da8 <tcp_slowtmr+0x5a4>)
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d004      	beq.n	8008cf6 <tcp_slowtmr+0x4f2>
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f06f 010c 	mvn.w	r1, #12
 8008cf2:	68b8      	ldr	r0, [r7, #8]
 8008cf4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8008cf6:	4b2c      	ldr	r3, [pc, #176]	; (8008da8 <tcp_slowtmr+0x5a4>)
 8008cf8:	781b      	ldrb	r3, [r3, #0]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d037      	beq.n	8008d6e <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8008cfe:	e592      	b.n	8008826 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8008d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d02:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8008d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d06:	68db      	ldr	r3, [r3, #12]
 8008d08:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8008d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d0c:	7f1b      	ldrb	r3, [r3, #28]
 8008d0e:	3301      	adds	r3, #1
 8008d10:	b2da      	uxtb	r2, r3
 8008d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d14:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8008d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d18:	7f1a      	ldrb	r2, [r3, #28]
 8008d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d1c:	7f5b      	ldrb	r3, [r3, #29]
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	d325      	bcc.n	8008d6e <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8008d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d24:	2200      	movs	r2, #0
 8008d26:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8008d28:	4b1f      	ldr	r3, [pc, #124]	; (8008da8 <tcp_slowtmr+0x5a4>)
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8008d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d00b      	beq.n	8008d50 <tcp_slowtmr+0x54c>
 8008d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d40:	6912      	ldr	r2, [r2, #16]
 8008d42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d44:	4610      	mov	r0, r2
 8008d46:	4798      	blx	r3
 8008d48:	4603      	mov	r3, r0
 8008d4a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8008d4e:	e002      	b.n	8008d56 <tcp_slowtmr+0x552>
 8008d50:	2300      	movs	r3, #0
 8008d52:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8008d56:	4b14      	ldr	r3, [pc, #80]	; (8008da8 <tcp_slowtmr+0x5a4>)
 8008d58:	781b      	ldrb	r3, [r3, #0]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d000      	beq.n	8008d60 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8008d5e:	e562      	b.n	8008826 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8008d60:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d102      	bne.n	8008d6e <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8008d68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d6a:	f003 fb81 	bl	800c470 <tcp_output>
  while (pcb != NULL) {
 8008d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	f47f ad5e 	bne.w	8008832 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8008d76:	2300      	movs	r3, #0
 8008d78:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8008d7a:	4b0c      	ldr	r3, [pc, #48]	; (8008dac <tcp_slowtmr+0x5a8>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8008d80:	e069      	b.n	8008e56 <tcp_slowtmr+0x652>
 8008d82:	bf00      	nop
 8008d84:	200088a4 	.word	0x200088a4
 8008d88:	000a4cb8 	.word	0x000a4cb8
 8008d8c:	10624dd3 	.word	0x10624dd3
 8008d90:	000124f8 	.word	0x000124f8
 8008d94:	200088b0 	.word	0x200088b0
 8008d98:	08012148 	.word	0x08012148
 8008d9c:	08012580 	.word	0x08012580
 8008da0:	0801218c 	.word	0x0801218c
 8008da4:	080125ac 	.word	0x080125ac
 8008da8:	200088b8 	.word	0x200088b8
 8008dac:	200088b4 	.word	0x200088b4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008db2:	7d1b      	ldrb	r3, [r3, #20]
 8008db4:	2b0a      	cmp	r3, #10
 8008db6:	d006      	beq.n	8008dc6 <tcp_slowtmr+0x5c2>
 8008db8:	4b2b      	ldr	r3, [pc, #172]	; (8008e68 <tcp_slowtmr+0x664>)
 8008dba:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8008dbe:	492b      	ldr	r1, [pc, #172]	; (8008e6c <tcp_slowtmr+0x668>)
 8008dc0:	482b      	ldr	r0, [pc, #172]	; (8008e70 <tcp_slowtmr+0x66c>)
 8008dc2:	f007 fd27 	bl	8010814 <iprintf>
    pcb_remove = 0;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008dcc:	4b29      	ldr	r3, [pc, #164]	; (8008e74 <tcp_slowtmr+0x670>)
 8008dce:	681a      	ldr	r2, [r3, #0]
 8008dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dd2:	6a1b      	ldr	r3, [r3, #32]
 8008dd4:	1ad3      	subs	r3, r2, r3
 8008dd6:	2bf0      	cmp	r3, #240	; 0xf0
 8008dd8:	d904      	bls.n	8008de4 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8008dda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008dde:	3301      	adds	r3, #1
 8008de0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8008de4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d02f      	beq.n	8008e4c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8008dec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008dee:	f000 fb2b 	bl	8009448 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8008df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d010      	beq.n	8008e1a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8008df8:	4b1f      	ldr	r3, [pc, #124]	; (8008e78 <tcp_slowtmr+0x674>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d106      	bne.n	8008e10 <tcp_slowtmr+0x60c>
 8008e02:	4b19      	ldr	r3, [pc, #100]	; (8008e68 <tcp_slowtmr+0x664>)
 8008e04:	f240 52af 	movw	r2, #1455	; 0x5af
 8008e08:	491c      	ldr	r1, [pc, #112]	; (8008e7c <tcp_slowtmr+0x678>)
 8008e0a:	4819      	ldr	r0, [pc, #100]	; (8008e70 <tcp_slowtmr+0x66c>)
 8008e0c:	f007 fd02 	bl	8010814 <iprintf>
        prev->next = pcb->next;
 8008e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e12:	68da      	ldr	r2, [r3, #12]
 8008e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e16:	60da      	str	r2, [r3, #12]
 8008e18:	e00f      	b.n	8008e3a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8008e1a:	4b17      	ldr	r3, [pc, #92]	; (8008e78 <tcp_slowtmr+0x674>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e20:	429a      	cmp	r2, r3
 8008e22:	d006      	beq.n	8008e32 <tcp_slowtmr+0x62e>
 8008e24:	4b10      	ldr	r3, [pc, #64]	; (8008e68 <tcp_slowtmr+0x664>)
 8008e26:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8008e2a:	4915      	ldr	r1, [pc, #84]	; (8008e80 <tcp_slowtmr+0x67c>)
 8008e2c:	4810      	ldr	r0, [pc, #64]	; (8008e70 <tcp_slowtmr+0x66c>)
 8008e2e:	f007 fcf1 	bl	8010814 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8008e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e34:	68db      	ldr	r3, [r3, #12]
 8008e36:	4a10      	ldr	r2, [pc, #64]	; (8008e78 <tcp_slowtmr+0x674>)
 8008e38:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8008e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e3c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8008e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e40:	68db      	ldr	r3, [r3, #12]
 8008e42:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8008e44:	69f8      	ldr	r0, [r7, #28]
 8008e46:	f7ff f93f 	bl	80080c8 <tcp_free>
 8008e4a:	e004      	b.n	8008e56 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8008e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e4e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8008e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e52:	68db      	ldr	r3, [r3, #12]
 8008e54:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8008e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d1a9      	bne.n	8008db0 <tcp_slowtmr+0x5ac>
    }
  }
}
 8008e5c:	bf00      	nop
 8008e5e:	bf00      	nop
 8008e60:	3730      	adds	r7, #48	; 0x30
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bdb0      	pop	{r4, r5, r7, pc}
 8008e66:	bf00      	nop
 8008e68:	08012148 	.word	0x08012148
 8008e6c:	080125d8 	.word	0x080125d8
 8008e70:	0801218c 	.word	0x0801218c
 8008e74:	200088a4 	.word	0x200088a4
 8008e78:	200088b4 	.word	0x200088b4
 8008e7c:	08012608 	.word	0x08012608
 8008e80:	08012630 	.word	0x08012630

08008e84 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b082      	sub	sp, #8
 8008e88:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8008e8a:	4b2d      	ldr	r3, [pc, #180]	; (8008f40 <tcp_fasttmr+0xbc>)
 8008e8c:	781b      	ldrb	r3, [r3, #0]
 8008e8e:	3301      	adds	r3, #1
 8008e90:	b2da      	uxtb	r2, r3
 8008e92:	4b2b      	ldr	r3, [pc, #172]	; (8008f40 <tcp_fasttmr+0xbc>)
 8008e94:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8008e96:	4b2b      	ldr	r3, [pc, #172]	; (8008f44 <tcp_fasttmr+0xc0>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008e9c:	e048      	b.n	8008f30 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	7f9a      	ldrb	r2, [r3, #30]
 8008ea2:	4b27      	ldr	r3, [pc, #156]	; (8008f40 <tcp_fasttmr+0xbc>)
 8008ea4:	781b      	ldrb	r3, [r3, #0]
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	d03f      	beq.n	8008f2a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8008eaa:	4b25      	ldr	r3, [pc, #148]	; (8008f40 <tcp_fasttmr+0xbc>)
 8008eac:	781a      	ldrb	r2, [r3, #0]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	8b5b      	ldrh	r3, [r3, #26]
 8008eb6:	f003 0301 	and.w	r3, r3, #1
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d010      	beq.n	8008ee0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	8b5b      	ldrh	r3, [r3, #26]
 8008ec2:	f043 0302 	orr.w	r3, r3, #2
 8008ec6:	b29a      	uxth	r2, r3
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f003 facf 	bl	800c470 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	8b5b      	ldrh	r3, [r3, #26]
 8008ed6:	f023 0303 	bic.w	r3, r3, #3
 8008eda:	b29a      	uxth	r2, r3
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	8b5b      	ldrh	r3, [r3, #26]
 8008ee4:	f003 0308 	and.w	r3, r3, #8
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d009      	beq.n	8008f00 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	8b5b      	ldrh	r3, [r3, #26]
 8008ef0:	f023 0308 	bic.w	r3, r3, #8
 8008ef4:	b29a      	uxth	r2, r3
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f7ff fa78 	bl	80083f0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	68db      	ldr	r3, [r3, #12]
 8008f04:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d00a      	beq.n	8008f24 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8008f0e:	4b0e      	ldr	r3, [pc, #56]	; (8008f48 <tcp_fasttmr+0xc4>)
 8008f10:	2200      	movs	r2, #0
 8008f12:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 f819 	bl	8008f4c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8008f1a:	4b0b      	ldr	r3, [pc, #44]	; (8008f48 <tcp_fasttmr+0xc4>)
 8008f1c:	781b      	ldrb	r3, [r3, #0]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d000      	beq.n	8008f24 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8008f22:	e7b8      	b.n	8008e96 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	607b      	str	r3, [r7, #4]
 8008f28:	e002      	b.n	8008f30 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	68db      	ldr	r3, [r3, #12]
 8008f2e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d1b3      	bne.n	8008e9e <tcp_fasttmr+0x1a>
    }
  }
}
 8008f36:	bf00      	nop
 8008f38:	bf00      	nop
 8008f3a:	3708      	adds	r7, #8
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}
 8008f40:	200088ba 	.word	0x200088ba
 8008f44:	200088b0 	.word	0x200088b0
 8008f48:	200088b8 	.word	0x200088b8

08008f4c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8008f4c:	b590      	push	{r4, r7, lr}
 8008f4e:	b085      	sub	sp, #20
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d109      	bne.n	8008f6e <tcp_process_refused_data+0x22>
 8008f5a:	4b37      	ldr	r3, [pc, #220]	; (8009038 <tcp_process_refused_data+0xec>)
 8008f5c:	f240 6209 	movw	r2, #1545	; 0x609
 8008f60:	4936      	ldr	r1, [pc, #216]	; (800903c <tcp_process_refused_data+0xf0>)
 8008f62:	4837      	ldr	r0, [pc, #220]	; (8009040 <tcp_process_refused_data+0xf4>)
 8008f64:	f007 fc56 	bl	8010814 <iprintf>
 8008f68:	f06f 030f 	mvn.w	r3, #15
 8008f6c:	e060      	b.n	8009030 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f72:	7b5b      	ldrb	r3, [r3, #13]
 8008f74:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f7a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d00b      	beq.n	8008fa4 <tcp_process_refused_data+0x58>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6918      	ldr	r0, [r3, #16]
 8008f96:	2300      	movs	r3, #0
 8008f98:	68ba      	ldr	r2, [r7, #8]
 8008f9a:	6879      	ldr	r1, [r7, #4]
 8008f9c:	47a0      	blx	r4
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	73fb      	strb	r3, [r7, #15]
 8008fa2:	e007      	b.n	8008fb4 <tcp_process_refused_data+0x68>
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	68ba      	ldr	r2, [r7, #8]
 8008fa8:	6879      	ldr	r1, [r7, #4]
 8008faa:	2000      	movs	r0, #0
 8008fac:	f000 f8a4 	bl	80090f8 <tcp_recv_null>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8008fb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d12a      	bne.n	8009012 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8008fbc:	7bbb      	ldrb	r3, [r7, #14]
 8008fbe:	f003 0320 	and.w	r3, r3, #32
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d033      	beq.n	800902e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fca:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008fce:	d005      	beq.n	8008fdc <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fd4:	3301      	adds	r3, #1
 8008fd6:	b29a      	uxth	r2, r3
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d00b      	beq.n	8008ffe <tcp_process_refused_data+0xb2>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6918      	ldr	r0, [r3, #16]
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	6879      	ldr	r1, [r7, #4]
 8008ff6:	47a0      	blx	r4
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	73fb      	strb	r3, [r7, #15]
 8008ffc:	e001      	b.n	8009002 <tcp_process_refused_data+0xb6>
 8008ffe:	2300      	movs	r3, #0
 8009000:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8009002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009006:	f113 0f0d 	cmn.w	r3, #13
 800900a:	d110      	bne.n	800902e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800900c:	f06f 030c 	mvn.w	r3, #12
 8009010:	e00e      	b.n	8009030 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8009012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009016:	f113 0f0d 	cmn.w	r3, #13
 800901a:	d102      	bne.n	8009022 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800901c:	f06f 030c 	mvn.w	r3, #12
 8009020:	e006      	b.n	8009030 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	68ba      	ldr	r2, [r7, #8]
 8009026:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8009028:	f06f 0304 	mvn.w	r3, #4
 800902c:	e000      	b.n	8009030 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800902e:	2300      	movs	r3, #0
}
 8009030:	4618      	mov	r0, r3
 8009032:	3714      	adds	r7, #20
 8009034:	46bd      	mov	sp, r7
 8009036:	bd90      	pop	{r4, r7, pc}
 8009038:	08012148 	.word	0x08012148
 800903c:	08012658 	.word	0x08012658
 8009040:	0801218c 	.word	0x0801218c

08009044 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b084      	sub	sp, #16
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800904c:	e007      	b.n	800905e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 f80a 	bl	800906e <tcp_seg_free>
    seg = next;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d1f4      	bne.n	800904e <tcp_segs_free+0xa>
  }
}
 8009064:	bf00      	nop
 8009066:	bf00      	nop
 8009068:	3710      	adds	r7, #16
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}

0800906e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800906e:	b580      	push	{r7, lr}
 8009070:	b082      	sub	sp, #8
 8009072:	af00      	add	r7, sp, #0
 8009074:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d00c      	beq.n	8009096 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d004      	beq.n	800908e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	685b      	ldr	r3, [r3, #4]
 8009088:	4618      	mov	r0, r3
 800908a:	f7fe fcdb 	bl	8007a44 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800908e:	6879      	ldr	r1, [r7, #4]
 8009090:	2003      	movs	r0, #3
 8009092:	f7fd fe61 	bl	8006d58 <memp_free>
  }
}
 8009096:	bf00      	nop
 8009098:	3708      	adds	r7, #8
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}
	...

080090a0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d106      	bne.n	80090bc <tcp_seg_copy+0x1c>
 80090ae:	4b0f      	ldr	r3, [pc, #60]	; (80090ec <tcp_seg_copy+0x4c>)
 80090b0:	f240 6282 	movw	r2, #1666	; 0x682
 80090b4:	490e      	ldr	r1, [pc, #56]	; (80090f0 <tcp_seg_copy+0x50>)
 80090b6:	480f      	ldr	r0, [pc, #60]	; (80090f4 <tcp_seg_copy+0x54>)
 80090b8:	f007 fbac 	bl	8010814 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80090bc:	2003      	movs	r0, #3
 80090be:	f7fd fddb 	bl	8006c78 <memp_malloc>
 80090c2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d101      	bne.n	80090ce <tcp_seg_copy+0x2e>
    return NULL;
 80090ca:	2300      	movs	r3, #0
 80090cc:	e00a      	b.n	80090e4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80090ce:	2210      	movs	r2, #16
 80090d0:	6879      	ldr	r1, [r7, #4]
 80090d2:	68f8      	ldr	r0, [r7, #12]
 80090d4:	f007 fc8b 	bl	80109ee <memcpy>
  pbuf_ref(cseg->p);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	4618      	mov	r0, r3
 80090de:	f7fe fd51 	bl	8007b84 <pbuf_ref>
  return cseg;
 80090e2:	68fb      	ldr	r3, [r7, #12]
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3710      	adds	r7, #16
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}
 80090ec:	08012148 	.word	0x08012148
 80090f0:	0801269c 	.word	0x0801269c
 80090f4:	0801218c 	.word	0x0801218c

080090f8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b084      	sub	sp, #16
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	60f8      	str	r0, [r7, #12]
 8009100:	60b9      	str	r1, [r7, #8]
 8009102:	607a      	str	r2, [r7, #4]
 8009104:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d109      	bne.n	8009120 <tcp_recv_null+0x28>
 800910c:	4b12      	ldr	r3, [pc, #72]	; (8009158 <tcp_recv_null+0x60>)
 800910e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8009112:	4912      	ldr	r1, [pc, #72]	; (800915c <tcp_recv_null+0x64>)
 8009114:	4812      	ldr	r0, [pc, #72]	; (8009160 <tcp_recv_null+0x68>)
 8009116:	f007 fb7d 	bl	8010814 <iprintf>
 800911a:	f06f 030f 	mvn.w	r3, #15
 800911e:	e016      	b.n	800914e <tcp_recv_null+0x56>

  if (p != NULL) {
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d009      	beq.n	800913a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	891b      	ldrh	r3, [r3, #8]
 800912a:	4619      	mov	r1, r3
 800912c:	68b8      	ldr	r0, [r7, #8]
 800912e:	f7ff fb19 	bl	8008764 <tcp_recved>
    pbuf_free(p);
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f7fe fc86 	bl	8007a44 <pbuf_free>
 8009138:	e008      	b.n	800914c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800913a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d104      	bne.n	800914c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8009142:	68b8      	ldr	r0, [r7, #8]
 8009144:	f7ff f9be 	bl	80084c4 <tcp_close>
 8009148:	4603      	mov	r3, r0
 800914a:	e000      	b.n	800914e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800914c:	2300      	movs	r3, #0
}
 800914e:	4618      	mov	r0, r3
 8009150:	3710      	adds	r7, #16
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}
 8009156:	bf00      	nop
 8009158:	08012148 	.word	0x08012148
 800915c:	080126b8 	.word	0x080126b8
 8009160:	0801218c 	.word	0x0801218c

08009164 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b086      	sub	sp, #24
 8009168:	af00      	add	r7, sp, #0
 800916a:	4603      	mov	r3, r0
 800916c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800916e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009172:	2b00      	cmp	r3, #0
 8009174:	db01      	blt.n	800917a <tcp_kill_prio+0x16>
 8009176:	79fb      	ldrb	r3, [r7, #7]
 8009178:	e000      	b.n	800917c <tcp_kill_prio+0x18>
 800917a:	237f      	movs	r3, #127	; 0x7f
 800917c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800917e:	7afb      	ldrb	r3, [r7, #11]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d034      	beq.n	80091ee <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8009184:	7afb      	ldrb	r3, [r7, #11]
 8009186:	3b01      	subs	r3, #1
 8009188:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800918a:	2300      	movs	r3, #0
 800918c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800918e:	2300      	movs	r3, #0
 8009190:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009192:	4b19      	ldr	r3, [pc, #100]	; (80091f8 <tcp_kill_prio+0x94>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	617b      	str	r3, [r7, #20]
 8009198:	e01f      	b.n	80091da <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	7d5b      	ldrb	r3, [r3, #21]
 800919e:	7afa      	ldrb	r2, [r7, #11]
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d80c      	bhi.n	80091be <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80091a8:	7afa      	ldrb	r2, [r7, #11]
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d112      	bne.n	80091d4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80091ae:	4b13      	ldr	r3, [pc, #76]	; (80091fc <tcp_kill_prio+0x98>)
 80091b0:	681a      	ldr	r2, [r3, #0]
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	6a1b      	ldr	r3, [r3, #32]
 80091b6:	1ad3      	subs	r3, r2, r3
 80091b8:	68fa      	ldr	r2, [r7, #12]
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d80a      	bhi.n	80091d4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80091be:	4b0f      	ldr	r3, [pc, #60]	; (80091fc <tcp_kill_prio+0x98>)
 80091c0:	681a      	ldr	r2, [r3, #0]
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	6a1b      	ldr	r3, [r3, #32]
 80091c6:	1ad3      	subs	r3, r2, r3
 80091c8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	7d5b      	ldrb	r3, [r3, #21]
 80091d2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	68db      	ldr	r3, [r3, #12]
 80091d8:	617b      	str	r3, [r7, #20]
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d1dc      	bne.n	800919a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d004      	beq.n	80091f0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80091e6:	6938      	ldr	r0, [r7, #16]
 80091e8:	f7ff fa56 	bl	8008698 <tcp_abort>
 80091ec:	e000      	b.n	80091f0 <tcp_kill_prio+0x8c>
    return;
 80091ee:	bf00      	nop
  }
}
 80091f0:	3718      	adds	r7, #24
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
 80091f6:	bf00      	nop
 80091f8:	200088b0 	.word	0x200088b0
 80091fc:	200088a4 	.word	0x200088a4

08009200 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b086      	sub	sp, #24
 8009204:	af00      	add	r7, sp, #0
 8009206:	4603      	mov	r3, r0
 8009208:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800920a:	79fb      	ldrb	r3, [r7, #7]
 800920c:	2b08      	cmp	r3, #8
 800920e:	d009      	beq.n	8009224 <tcp_kill_state+0x24>
 8009210:	79fb      	ldrb	r3, [r7, #7]
 8009212:	2b09      	cmp	r3, #9
 8009214:	d006      	beq.n	8009224 <tcp_kill_state+0x24>
 8009216:	4b1a      	ldr	r3, [pc, #104]	; (8009280 <tcp_kill_state+0x80>)
 8009218:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800921c:	4919      	ldr	r1, [pc, #100]	; (8009284 <tcp_kill_state+0x84>)
 800921e:	481a      	ldr	r0, [pc, #104]	; (8009288 <tcp_kill_state+0x88>)
 8009220:	f007 faf8 	bl	8010814 <iprintf>

  inactivity = 0;
 8009224:	2300      	movs	r3, #0
 8009226:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009228:	2300      	movs	r3, #0
 800922a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800922c:	4b17      	ldr	r3, [pc, #92]	; (800928c <tcp_kill_state+0x8c>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	617b      	str	r3, [r7, #20]
 8009232:	e017      	b.n	8009264 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	7d1b      	ldrb	r3, [r3, #20]
 8009238:	79fa      	ldrb	r2, [r7, #7]
 800923a:	429a      	cmp	r2, r3
 800923c:	d10f      	bne.n	800925e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800923e:	4b14      	ldr	r3, [pc, #80]	; (8009290 <tcp_kill_state+0x90>)
 8009240:	681a      	ldr	r2, [r3, #0]
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	6a1b      	ldr	r3, [r3, #32]
 8009246:	1ad3      	subs	r3, r2, r3
 8009248:	68fa      	ldr	r2, [r7, #12]
 800924a:	429a      	cmp	r2, r3
 800924c:	d807      	bhi.n	800925e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800924e:	4b10      	ldr	r3, [pc, #64]	; (8009290 <tcp_kill_state+0x90>)
 8009250:	681a      	ldr	r2, [r3, #0]
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	6a1b      	ldr	r3, [r3, #32]
 8009256:	1ad3      	subs	r3, r2, r3
 8009258:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	68db      	ldr	r3, [r3, #12]
 8009262:	617b      	str	r3, [r7, #20]
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d1e4      	bne.n	8009234 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d003      	beq.n	8009278 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8009270:	2100      	movs	r1, #0
 8009272:	6938      	ldr	r0, [r7, #16]
 8009274:	f7ff f952 	bl	800851c <tcp_abandon>
  }
}
 8009278:	bf00      	nop
 800927a:	3718      	adds	r7, #24
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}
 8009280:	08012148 	.word	0x08012148
 8009284:	080126d4 	.word	0x080126d4
 8009288:	0801218c 	.word	0x0801218c
 800928c:	200088b0 	.word	0x200088b0
 8009290:	200088a4 	.word	0x200088a4

08009294 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b084      	sub	sp, #16
 8009298:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800929a:	2300      	movs	r3, #0
 800929c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800929e:	2300      	movs	r3, #0
 80092a0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80092a2:	4b12      	ldr	r3, [pc, #72]	; (80092ec <tcp_kill_timewait+0x58>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	60fb      	str	r3, [r7, #12]
 80092a8:	e012      	b.n	80092d0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80092aa:	4b11      	ldr	r3, [pc, #68]	; (80092f0 <tcp_kill_timewait+0x5c>)
 80092ac:	681a      	ldr	r2, [r3, #0]
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	6a1b      	ldr	r3, [r3, #32]
 80092b2:	1ad3      	subs	r3, r2, r3
 80092b4:	687a      	ldr	r2, [r7, #4]
 80092b6:	429a      	cmp	r2, r3
 80092b8:	d807      	bhi.n	80092ca <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80092ba:	4b0d      	ldr	r3, [pc, #52]	; (80092f0 <tcp_kill_timewait+0x5c>)
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	6a1b      	ldr	r3, [r3, #32]
 80092c2:	1ad3      	subs	r3, r2, r3
 80092c4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	68db      	ldr	r3, [r3, #12]
 80092ce:	60fb      	str	r3, [r7, #12]
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d1e9      	bne.n	80092aa <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d002      	beq.n	80092e2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80092dc:	68b8      	ldr	r0, [r7, #8]
 80092de:	f7ff f9db 	bl	8008698 <tcp_abort>
  }
}
 80092e2:	bf00      	nop
 80092e4:	3710      	adds	r7, #16
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}
 80092ea:	bf00      	nop
 80092ec:	200088b4 	.word	0x200088b4
 80092f0:	200088a4 	.word	0x200088a4

080092f4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b082      	sub	sp, #8
 80092f8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80092fa:	4b10      	ldr	r3, [pc, #64]	; (800933c <tcp_handle_closepend+0x48>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009300:	e014      	b.n	800932c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	68db      	ldr	r3, [r3, #12]
 8009306:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	8b5b      	ldrh	r3, [r3, #26]
 800930c:	f003 0308 	and.w	r3, r3, #8
 8009310:	2b00      	cmp	r3, #0
 8009312:	d009      	beq.n	8009328 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	8b5b      	ldrh	r3, [r3, #26]
 8009318:	f023 0308 	bic.w	r3, r3, #8
 800931c:	b29a      	uxth	r2, r3
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f7ff f864 	bl	80083f0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d1e7      	bne.n	8009302 <tcp_handle_closepend+0xe>
  }
}
 8009332:	bf00      	nop
 8009334:	bf00      	nop
 8009336:	3708      	adds	r7, #8
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}
 800933c:	200088b0 	.word	0x200088b0

08009340 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b084      	sub	sp, #16
 8009344:	af00      	add	r7, sp, #0
 8009346:	4603      	mov	r3, r0
 8009348:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800934a:	2001      	movs	r0, #1
 800934c:	f7fd fc94 	bl	8006c78 <memp_malloc>
 8009350:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d126      	bne.n	80093a6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8009358:	f7ff ffcc 	bl	80092f4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800935c:	f7ff ff9a 	bl	8009294 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009360:	2001      	movs	r0, #1
 8009362:	f7fd fc89 	bl	8006c78 <memp_malloc>
 8009366:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d11b      	bne.n	80093a6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800936e:	2009      	movs	r0, #9
 8009370:	f7ff ff46 	bl	8009200 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009374:	2001      	movs	r0, #1
 8009376:	f7fd fc7f 	bl	8006c78 <memp_malloc>
 800937a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d111      	bne.n	80093a6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8009382:	2008      	movs	r0, #8
 8009384:	f7ff ff3c 	bl	8009200 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009388:	2001      	movs	r0, #1
 800938a:	f7fd fc75 	bl	8006c78 <memp_malloc>
 800938e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d107      	bne.n	80093a6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8009396:	79fb      	ldrb	r3, [r7, #7]
 8009398:	4618      	mov	r0, r3
 800939a:	f7ff fee3 	bl	8009164 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800939e:	2001      	movs	r0, #1
 80093a0:	f7fd fc6a 	bl	8006c78 <memp_malloc>
 80093a4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d03f      	beq.n	800942c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80093ac:	229c      	movs	r2, #156	; 0x9c
 80093ae:	2100      	movs	r1, #0
 80093b0:	68f8      	ldr	r0, [r7, #12]
 80093b2:	f007 fa94 	bl	80108de <memset>
    pcb->prio = prio;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	79fa      	ldrb	r2, [r7, #7]
 80093ba:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80093c2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80093cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	22ff      	movs	r2, #255	; 0xff
 80093da:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	f44f 7206 	mov.w	r2, #536	; 0x218
 80093e2:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	2206      	movs	r2, #6
 80093e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	2206      	movs	r2, #6
 80093f0:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80093f8:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	2201      	movs	r2, #1
 80093fe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8009402:	4b0d      	ldr	r3, [pc, #52]	; (8009438 <tcp_alloc+0xf8>)
 8009404:	681a      	ldr	r2, [r3, #0]
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800940a:	4b0c      	ldr	r3, [pc, #48]	; (800943c <tcp_alloc+0xfc>)
 800940c:	781a      	ldrb	r2, [r3, #0]
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8009418:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	4a08      	ldr	r2, [pc, #32]	; (8009440 <tcp_alloc+0x100>)
 8009420:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	4a07      	ldr	r2, [pc, #28]	; (8009444 <tcp_alloc+0x104>)
 8009428:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800942c:	68fb      	ldr	r3, [r7, #12]
}
 800942e:	4618      	mov	r0, r3
 8009430:	3710      	adds	r7, #16
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}
 8009436:	bf00      	nop
 8009438:	200088a4 	.word	0x200088a4
 800943c:	200088ba 	.word	0x200088ba
 8009440:	080090f9 	.word	0x080090f9
 8009444:	006ddd00 	.word	0x006ddd00

08009448 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b082      	sub	sp, #8
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d107      	bne.n	8009466 <tcp_pcb_purge+0x1e>
 8009456:	4b21      	ldr	r3, [pc, #132]	; (80094dc <tcp_pcb_purge+0x94>)
 8009458:	f640 0251 	movw	r2, #2129	; 0x851
 800945c:	4920      	ldr	r1, [pc, #128]	; (80094e0 <tcp_pcb_purge+0x98>)
 800945e:	4821      	ldr	r0, [pc, #132]	; (80094e4 <tcp_pcb_purge+0x9c>)
 8009460:	f007 f9d8 	bl	8010814 <iprintf>
 8009464:	e037      	b.n	80094d6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	7d1b      	ldrb	r3, [r3, #20]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d033      	beq.n	80094d6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8009472:	2b0a      	cmp	r3, #10
 8009474:	d02f      	beq.n	80094d6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800947a:	2b01      	cmp	r3, #1
 800947c:	d02b      	beq.n	80094d6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009482:	2b00      	cmp	r3, #0
 8009484:	d007      	beq.n	8009496 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800948a:	4618      	mov	r0, r3
 800948c:	f7fe fada 	bl	8007a44 <pbuf_free>
      pcb->refused_data = NULL;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2200      	movs	r2, #0
 8009494:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800949a:	2b00      	cmp	r3, #0
 800949c:	d002      	beq.n	80094a4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f000 f986 	bl	80097b0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80094aa:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094b0:	4618      	mov	r0, r3
 80094b2:	f7ff fdc7 	bl	8009044 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094ba:	4618      	mov	r0, r3
 80094bc:	f7ff fdc2 	bl	8009044 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2200      	movs	r2, #0
 80094c4:	66da      	str	r2, [r3, #108]	; 0x6c
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2200      	movs	r2, #0
 80094d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80094d6:	3708      	adds	r7, #8
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}
 80094dc:	08012148 	.word	0x08012148
 80094e0:	08012794 	.word	0x08012794
 80094e4:	0801218c 	.word	0x0801218c

080094e8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b084      	sub	sp, #16
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
 80094f0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d106      	bne.n	8009506 <tcp_pcb_remove+0x1e>
 80094f8:	4b3e      	ldr	r3, [pc, #248]	; (80095f4 <tcp_pcb_remove+0x10c>)
 80094fa:	f640 0283 	movw	r2, #2179	; 0x883
 80094fe:	493e      	ldr	r1, [pc, #248]	; (80095f8 <tcp_pcb_remove+0x110>)
 8009500:	483e      	ldr	r0, [pc, #248]	; (80095fc <tcp_pcb_remove+0x114>)
 8009502:	f007 f987 	bl	8010814 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d106      	bne.n	800951a <tcp_pcb_remove+0x32>
 800950c:	4b39      	ldr	r3, [pc, #228]	; (80095f4 <tcp_pcb_remove+0x10c>)
 800950e:	f640 0284 	movw	r2, #2180	; 0x884
 8009512:	493b      	ldr	r1, [pc, #236]	; (8009600 <tcp_pcb_remove+0x118>)
 8009514:	4839      	ldr	r0, [pc, #228]	; (80095fc <tcp_pcb_remove+0x114>)
 8009516:	f007 f97d 	bl	8010814 <iprintf>

  TCP_RMV(pcblist, pcb);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	683a      	ldr	r2, [r7, #0]
 8009520:	429a      	cmp	r2, r3
 8009522:	d105      	bne.n	8009530 <tcp_pcb_remove+0x48>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	68da      	ldr	r2, [r3, #12]
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	601a      	str	r2, [r3, #0]
 800952e:	e013      	b.n	8009558 <tcp_pcb_remove+0x70>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	60fb      	str	r3, [r7, #12]
 8009536:	e00c      	b.n	8009552 <tcp_pcb_remove+0x6a>
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	68db      	ldr	r3, [r3, #12]
 800953c:	683a      	ldr	r2, [r7, #0]
 800953e:	429a      	cmp	r2, r3
 8009540:	d104      	bne.n	800954c <tcp_pcb_remove+0x64>
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	68da      	ldr	r2, [r3, #12]
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	60da      	str	r2, [r3, #12]
 800954a:	e005      	b.n	8009558 <tcp_pcb_remove+0x70>
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	68db      	ldr	r3, [r3, #12]
 8009550:	60fb      	str	r3, [r7, #12]
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d1ef      	bne.n	8009538 <tcp_pcb_remove+0x50>
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	2200      	movs	r2, #0
 800955c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800955e:	6838      	ldr	r0, [r7, #0]
 8009560:	f7ff ff72 	bl	8009448 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	7d1b      	ldrb	r3, [r3, #20]
 8009568:	2b0a      	cmp	r3, #10
 800956a:	d013      	beq.n	8009594 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8009570:	2b01      	cmp	r3, #1
 8009572:	d00f      	beq.n	8009594 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	8b5b      	ldrh	r3, [r3, #26]
 8009578:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800957c:	2b00      	cmp	r3, #0
 800957e:	d009      	beq.n	8009594 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	8b5b      	ldrh	r3, [r3, #26]
 8009584:	f043 0302 	orr.w	r3, r3, #2
 8009588:	b29a      	uxth	r2, r3
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800958e:	6838      	ldr	r0, [r7, #0]
 8009590:	f002 ff6e 	bl	800c470 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	7d1b      	ldrb	r3, [r3, #20]
 8009598:	2b01      	cmp	r3, #1
 800959a:	d020      	beq.n	80095de <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d006      	beq.n	80095b2 <tcp_pcb_remove+0xca>
 80095a4:	4b13      	ldr	r3, [pc, #76]	; (80095f4 <tcp_pcb_remove+0x10c>)
 80095a6:	f640 0293 	movw	r2, #2195	; 0x893
 80095aa:	4916      	ldr	r1, [pc, #88]	; (8009604 <tcp_pcb_remove+0x11c>)
 80095ac:	4813      	ldr	r0, [pc, #76]	; (80095fc <tcp_pcb_remove+0x114>)
 80095ae:	f007 f931 	bl	8010814 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d006      	beq.n	80095c8 <tcp_pcb_remove+0xe0>
 80095ba:	4b0e      	ldr	r3, [pc, #56]	; (80095f4 <tcp_pcb_remove+0x10c>)
 80095bc:	f640 0294 	movw	r2, #2196	; 0x894
 80095c0:	4911      	ldr	r1, [pc, #68]	; (8009608 <tcp_pcb_remove+0x120>)
 80095c2:	480e      	ldr	r0, [pc, #56]	; (80095fc <tcp_pcb_remove+0x114>)
 80095c4:	f007 f926 	bl	8010814 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d006      	beq.n	80095de <tcp_pcb_remove+0xf6>
 80095d0:	4b08      	ldr	r3, [pc, #32]	; (80095f4 <tcp_pcb_remove+0x10c>)
 80095d2:	f640 0296 	movw	r2, #2198	; 0x896
 80095d6:	490d      	ldr	r1, [pc, #52]	; (800960c <tcp_pcb_remove+0x124>)
 80095d8:	4808      	ldr	r0, [pc, #32]	; (80095fc <tcp_pcb_remove+0x114>)
 80095da:	f007 f91b 	bl	8010814 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	2200      	movs	r2, #0
 80095e2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	2200      	movs	r2, #0
 80095e8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80095ea:	bf00      	nop
 80095ec:	3710      	adds	r7, #16
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}
 80095f2:	bf00      	nop
 80095f4:	08012148 	.word	0x08012148
 80095f8:	080127b0 	.word	0x080127b0
 80095fc:	0801218c 	.word	0x0801218c
 8009600:	080127cc 	.word	0x080127cc
 8009604:	080127ec 	.word	0x080127ec
 8009608:	08012804 	.word	0x08012804
 800960c:	08012820 	.word	0x08012820

08009610 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b082      	sub	sp, #8
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d106      	bne.n	800962c <tcp_next_iss+0x1c>
 800961e:	4b0a      	ldr	r3, [pc, #40]	; (8009648 <tcp_next_iss+0x38>)
 8009620:	f640 02af 	movw	r2, #2223	; 0x8af
 8009624:	4909      	ldr	r1, [pc, #36]	; (800964c <tcp_next_iss+0x3c>)
 8009626:	480a      	ldr	r0, [pc, #40]	; (8009650 <tcp_next_iss+0x40>)
 8009628:	f007 f8f4 	bl	8010814 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800962c:	4b09      	ldr	r3, [pc, #36]	; (8009654 <tcp_next_iss+0x44>)
 800962e:	681a      	ldr	r2, [r3, #0]
 8009630:	4b09      	ldr	r3, [pc, #36]	; (8009658 <tcp_next_iss+0x48>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4413      	add	r3, r2
 8009636:	4a07      	ldr	r2, [pc, #28]	; (8009654 <tcp_next_iss+0x44>)
 8009638:	6013      	str	r3, [r2, #0]
  return iss;
 800963a:	4b06      	ldr	r3, [pc, #24]	; (8009654 <tcp_next_iss+0x44>)
 800963c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800963e:	4618      	mov	r0, r3
 8009640:	3708      	adds	r7, #8
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}
 8009646:	bf00      	nop
 8009648:	08012148 	.word	0x08012148
 800964c:	08012838 	.word	0x08012838
 8009650:	0801218c 	.word	0x0801218c
 8009654:	20000024 	.word	0x20000024
 8009658:	200088a4 	.word	0x200088a4

0800965c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b086      	sub	sp, #24
 8009660:	af00      	add	r7, sp, #0
 8009662:	4603      	mov	r3, r0
 8009664:	60b9      	str	r1, [r7, #8]
 8009666:	607a      	str	r2, [r7, #4]
 8009668:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d106      	bne.n	800967e <tcp_eff_send_mss_netif+0x22>
 8009670:	4b14      	ldr	r3, [pc, #80]	; (80096c4 <tcp_eff_send_mss_netif+0x68>)
 8009672:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8009676:	4914      	ldr	r1, [pc, #80]	; (80096c8 <tcp_eff_send_mss_netif+0x6c>)
 8009678:	4814      	ldr	r0, [pc, #80]	; (80096cc <tcp_eff_send_mss_netif+0x70>)
 800967a:	f007 f8cb 	bl	8010814 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d101      	bne.n	8009688 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8009684:	89fb      	ldrh	r3, [r7, #14]
 8009686:	e019      	b.n	80096bc <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800968c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800968e:	8afb      	ldrh	r3, [r7, #22]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d012      	beq.n	80096ba <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8009694:	2328      	movs	r3, #40	; 0x28
 8009696:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8009698:	8afa      	ldrh	r2, [r7, #22]
 800969a:	8abb      	ldrh	r3, [r7, #20]
 800969c:	429a      	cmp	r2, r3
 800969e:	d904      	bls.n	80096aa <tcp_eff_send_mss_netif+0x4e>
 80096a0:	8afa      	ldrh	r2, [r7, #22]
 80096a2:	8abb      	ldrh	r3, [r7, #20]
 80096a4:	1ad3      	subs	r3, r2, r3
 80096a6:	b29b      	uxth	r3, r3
 80096a8:	e000      	b.n	80096ac <tcp_eff_send_mss_netif+0x50>
 80096aa:	2300      	movs	r3, #0
 80096ac:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80096ae:	8a7a      	ldrh	r2, [r7, #18]
 80096b0:	89fb      	ldrh	r3, [r7, #14]
 80096b2:	4293      	cmp	r3, r2
 80096b4:	bf28      	it	cs
 80096b6:	4613      	movcs	r3, r2
 80096b8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80096ba:	89fb      	ldrh	r3, [r7, #14]
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3718      	adds	r7, #24
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}
 80096c4:	08012148 	.word	0x08012148
 80096c8:	08012854 	.word	0x08012854
 80096cc:	0801218c 	.word	0x0801218c

080096d0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b084      	sub	sp, #16
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d119      	bne.n	8009718 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80096e4:	4b10      	ldr	r3, [pc, #64]	; (8009728 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80096e6:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80096ea:	4910      	ldr	r1, [pc, #64]	; (800972c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80096ec:	4810      	ldr	r0, [pc, #64]	; (8009730 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80096ee:	f007 f891 	bl	8010814 <iprintf>

  while (pcb != NULL) {
 80096f2:	e011      	b.n	8009718 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681a      	ldr	r2, [r3, #0]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d108      	bne.n	8009712 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	68db      	ldr	r3, [r3, #12]
 8009704:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8009706:	68f8      	ldr	r0, [r7, #12]
 8009708:	f7fe ffc6 	bl	8008698 <tcp_abort>
      pcb = next;
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	60fb      	str	r3, [r7, #12]
 8009710:	e002      	b.n	8009718 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	68db      	ldr	r3, [r3, #12]
 8009716:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d1ea      	bne.n	80096f4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800971e:	bf00      	nop
 8009720:	bf00      	nop
 8009722:	3710      	adds	r7, #16
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}
 8009728:	08012148 	.word	0x08012148
 800972c:	0801287c 	.word	0x0801287c
 8009730:	0801218c 	.word	0x0801218c

08009734 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b084      	sub	sp, #16
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
 800973c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d02a      	beq.n	800979a <tcp_netif_ip_addr_changed+0x66>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d026      	beq.n	800979a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800974c:	4b15      	ldr	r3, [pc, #84]	; (80097a4 <tcp_netif_ip_addr_changed+0x70>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4619      	mov	r1, r3
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f7ff ffbc 	bl	80096d0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8009758:	4b13      	ldr	r3, [pc, #76]	; (80097a8 <tcp_netif_ip_addr_changed+0x74>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4619      	mov	r1, r3
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f7ff ffb6 	bl	80096d0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d017      	beq.n	800979a <tcp_netif_ip_addr_changed+0x66>
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d013      	beq.n	800979a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009772:	4b0e      	ldr	r3, [pc, #56]	; (80097ac <tcp_netif_ip_addr_changed+0x78>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	60fb      	str	r3, [r7, #12]
 8009778:	e00c      	b.n	8009794 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681a      	ldr	r2, [r3, #0]
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	429a      	cmp	r2, r3
 8009784:	d103      	bne.n	800978e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	681a      	ldr	r2, [r3, #0]
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	68db      	ldr	r3, [r3, #12]
 8009792:	60fb      	str	r3, [r7, #12]
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d1ef      	bne.n	800977a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800979a:	bf00      	nop
 800979c:	3710      	adds	r7, #16
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}
 80097a2:	bf00      	nop
 80097a4:	200088b0 	.word	0x200088b0
 80097a8:	200088a8 	.word	0x200088a8
 80097ac:	200088ac 	.word	0x200088ac

080097b0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b082      	sub	sp, #8
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d007      	beq.n	80097d0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097c4:	4618      	mov	r0, r3
 80097c6:	f7ff fc3d 	bl	8009044 <tcp_segs_free>
    pcb->ooseq = NULL;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2200      	movs	r2, #0
 80097ce:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80097d0:	bf00      	nop
 80097d2:	3708      	adds	r7, #8
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}

080097d8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80097d8:	b590      	push	{r4, r7, lr}
 80097da:	b08d      	sub	sp, #52	; 0x34
 80097dc:	af04      	add	r7, sp, #16
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d105      	bne.n	80097f4 <tcp_input+0x1c>
 80097e8:	4b9b      	ldr	r3, [pc, #620]	; (8009a58 <tcp_input+0x280>)
 80097ea:	2283      	movs	r2, #131	; 0x83
 80097ec:	499b      	ldr	r1, [pc, #620]	; (8009a5c <tcp_input+0x284>)
 80097ee:	489c      	ldr	r0, [pc, #624]	; (8009a60 <tcp_input+0x288>)
 80097f0:	f007 f810 	bl	8010814 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	4a9a      	ldr	r2, [pc, #616]	; (8009a64 <tcp_input+0x28c>)
 80097fa:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	895b      	ldrh	r3, [r3, #10]
 8009800:	2b13      	cmp	r3, #19
 8009802:	f240 83d1 	bls.w	8009fa8 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009806:	4b98      	ldr	r3, [pc, #608]	; (8009a68 <tcp_input+0x290>)
 8009808:	695b      	ldr	r3, [r3, #20]
 800980a:	4a97      	ldr	r2, [pc, #604]	; (8009a68 <tcp_input+0x290>)
 800980c:	6812      	ldr	r2, [r2, #0]
 800980e:	4611      	mov	r1, r2
 8009810:	4618      	mov	r0, r3
 8009812:	f005 ffa9 	bl	800f768 <ip4_addr_isbroadcast_u32>
 8009816:	4603      	mov	r3, r0
 8009818:	2b00      	cmp	r3, #0
 800981a:	f040 83c7 	bne.w	8009fac <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800981e:	4b92      	ldr	r3, [pc, #584]	; (8009a68 <tcp_input+0x290>)
 8009820:	695b      	ldr	r3, [r3, #20]
 8009822:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009826:	2be0      	cmp	r3, #224	; 0xe0
 8009828:	f000 83c0 	beq.w	8009fac <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800982c:	4b8d      	ldr	r3, [pc, #564]	; (8009a64 <tcp_input+0x28c>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	899b      	ldrh	r3, [r3, #12]
 8009832:	b29b      	uxth	r3, r3
 8009834:	4618      	mov	r0, r3
 8009836:	f7fc fda7 	bl	8006388 <lwip_htons>
 800983a:	4603      	mov	r3, r0
 800983c:	0b1b      	lsrs	r3, r3, #12
 800983e:	b29b      	uxth	r3, r3
 8009840:	b2db      	uxtb	r3, r3
 8009842:	009b      	lsls	r3, r3, #2
 8009844:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8009846:	7cbb      	ldrb	r3, [r7, #18]
 8009848:	2b13      	cmp	r3, #19
 800984a:	f240 83b1 	bls.w	8009fb0 <tcp_input+0x7d8>
 800984e:	7cbb      	ldrb	r3, [r7, #18]
 8009850:	b29a      	uxth	r2, r3
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	891b      	ldrh	r3, [r3, #8]
 8009856:	429a      	cmp	r2, r3
 8009858:	f200 83aa 	bhi.w	8009fb0 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800985c:	7cbb      	ldrb	r3, [r7, #18]
 800985e:	b29b      	uxth	r3, r3
 8009860:	3b14      	subs	r3, #20
 8009862:	b29a      	uxth	r2, r3
 8009864:	4b81      	ldr	r3, [pc, #516]	; (8009a6c <tcp_input+0x294>)
 8009866:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8009868:	4b81      	ldr	r3, [pc, #516]	; (8009a70 <tcp_input+0x298>)
 800986a:	2200      	movs	r2, #0
 800986c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	895a      	ldrh	r2, [r3, #10]
 8009872:	7cbb      	ldrb	r3, [r7, #18]
 8009874:	b29b      	uxth	r3, r3
 8009876:	429a      	cmp	r2, r3
 8009878:	d309      	bcc.n	800988e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800987a:	4b7c      	ldr	r3, [pc, #496]	; (8009a6c <tcp_input+0x294>)
 800987c:	881a      	ldrh	r2, [r3, #0]
 800987e:	4b7d      	ldr	r3, [pc, #500]	; (8009a74 <tcp_input+0x29c>)
 8009880:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8009882:	7cbb      	ldrb	r3, [r7, #18]
 8009884:	4619      	mov	r1, r3
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f7fe f856 	bl	8007938 <pbuf_remove_header>
 800988c:	e04e      	b.n	800992c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d105      	bne.n	80098a2 <tcp_input+0xca>
 8009896:	4b70      	ldr	r3, [pc, #448]	; (8009a58 <tcp_input+0x280>)
 8009898:	22c2      	movs	r2, #194	; 0xc2
 800989a:	4977      	ldr	r1, [pc, #476]	; (8009a78 <tcp_input+0x2a0>)
 800989c:	4870      	ldr	r0, [pc, #448]	; (8009a60 <tcp_input+0x288>)
 800989e:	f006 ffb9 	bl	8010814 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80098a2:	2114      	movs	r1, #20
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f7fe f847 	bl	8007938 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	895a      	ldrh	r2, [r3, #10]
 80098ae:	4b71      	ldr	r3, [pc, #452]	; (8009a74 <tcp_input+0x29c>)
 80098b0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80098b2:	4b6e      	ldr	r3, [pc, #440]	; (8009a6c <tcp_input+0x294>)
 80098b4:	881a      	ldrh	r2, [r3, #0]
 80098b6:	4b6f      	ldr	r3, [pc, #444]	; (8009a74 <tcp_input+0x29c>)
 80098b8:	881b      	ldrh	r3, [r3, #0]
 80098ba:	1ad3      	subs	r3, r2, r3
 80098bc:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80098be:	4b6d      	ldr	r3, [pc, #436]	; (8009a74 <tcp_input+0x29c>)
 80098c0:	881b      	ldrh	r3, [r3, #0]
 80098c2:	4619      	mov	r1, r3
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f7fe f837 	bl	8007938 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	895b      	ldrh	r3, [r3, #10]
 80098d0:	8a3a      	ldrh	r2, [r7, #16]
 80098d2:	429a      	cmp	r2, r3
 80098d4:	f200 836e 	bhi.w	8009fb4 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	4a64      	ldr	r2, [pc, #400]	; (8009a70 <tcp_input+0x298>)
 80098e0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	8a3a      	ldrh	r2, [r7, #16]
 80098e8:	4611      	mov	r1, r2
 80098ea:	4618      	mov	r0, r3
 80098ec:	f7fe f824 	bl	8007938 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	891a      	ldrh	r2, [r3, #8]
 80098f4:	8a3b      	ldrh	r3, [r7, #16]
 80098f6:	1ad3      	subs	r3, r2, r3
 80098f8:	b29a      	uxth	r2, r3
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	895b      	ldrh	r3, [r3, #10]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d005      	beq.n	8009912 <tcp_input+0x13a>
 8009906:	4b54      	ldr	r3, [pc, #336]	; (8009a58 <tcp_input+0x280>)
 8009908:	22df      	movs	r2, #223	; 0xdf
 800990a:	495c      	ldr	r1, [pc, #368]	; (8009a7c <tcp_input+0x2a4>)
 800990c:	4854      	ldr	r0, [pc, #336]	; (8009a60 <tcp_input+0x288>)
 800990e:	f006 ff81 	bl	8010814 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	891a      	ldrh	r2, [r3, #8]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	891b      	ldrh	r3, [r3, #8]
 800991c:	429a      	cmp	r2, r3
 800991e:	d005      	beq.n	800992c <tcp_input+0x154>
 8009920:	4b4d      	ldr	r3, [pc, #308]	; (8009a58 <tcp_input+0x280>)
 8009922:	22e0      	movs	r2, #224	; 0xe0
 8009924:	4956      	ldr	r1, [pc, #344]	; (8009a80 <tcp_input+0x2a8>)
 8009926:	484e      	ldr	r0, [pc, #312]	; (8009a60 <tcp_input+0x288>)
 8009928:	f006 ff74 	bl	8010814 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800992c:	4b4d      	ldr	r3, [pc, #308]	; (8009a64 <tcp_input+0x28c>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	881b      	ldrh	r3, [r3, #0]
 8009932:	b29b      	uxth	r3, r3
 8009934:	4a4b      	ldr	r2, [pc, #300]	; (8009a64 <tcp_input+0x28c>)
 8009936:	6814      	ldr	r4, [r2, #0]
 8009938:	4618      	mov	r0, r3
 800993a:	f7fc fd25 	bl	8006388 <lwip_htons>
 800993e:	4603      	mov	r3, r0
 8009940:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8009942:	4b48      	ldr	r3, [pc, #288]	; (8009a64 <tcp_input+0x28c>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	885b      	ldrh	r3, [r3, #2]
 8009948:	b29b      	uxth	r3, r3
 800994a:	4a46      	ldr	r2, [pc, #280]	; (8009a64 <tcp_input+0x28c>)
 800994c:	6814      	ldr	r4, [r2, #0]
 800994e:	4618      	mov	r0, r3
 8009950:	f7fc fd1a 	bl	8006388 <lwip_htons>
 8009954:	4603      	mov	r3, r0
 8009956:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8009958:	4b42      	ldr	r3, [pc, #264]	; (8009a64 <tcp_input+0x28c>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	685b      	ldr	r3, [r3, #4]
 800995e:	4a41      	ldr	r2, [pc, #260]	; (8009a64 <tcp_input+0x28c>)
 8009960:	6814      	ldr	r4, [r2, #0]
 8009962:	4618      	mov	r0, r3
 8009964:	f7fc fd25 	bl	80063b2 <lwip_htonl>
 8009968:	4603      	mov	r3, r0
 800996a:	6063      	str	r3, [r4, #4]
 800996c:	6863      	ldr	r3, [r4, #4]
 800996e:	4a45      	ldr	r2, [pc, #276]	; (8009a84 <tcp_input+0x2ac>)
 8009970:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8009972:	4b3c      	ldr	r3, [pc, #240]	; (8009a64 <tcp_input+0x28c>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	689b      	ldr	r3, [r3, #8]
 8009978:	4a3a      	ldr	r2, [pc, #232]	; (8009a64 <tcp_input+0x28c>)
 800997a:	6814      	ldr	r4, [r2, #0]
 800997c:	4618      	mov	r0, r3
 800997e:	f7fc fd18 	bl	80063b2 <lwip_htonl>
 8009982:	4603      	mov	r3, r0
 8009984:	60a3      	str	r3, [r4, #8]
 8009986:	68a3      	ldr	r3, [r4, #8]
 8009988:	4a3f      	ldr	r2, [pc, #252]	; (8009a88 <tcp_input+0x2b0>)
 800998a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800998c:	4b35      	ldr	r3, [pc, #212]	; (8009a64 <tcp_input+0x28c>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	89db      	ldrh	r3, [r3, #14]
 8009992:	b29b      	uxth	r3, r3
 8009994:	4a33      	ldr	r2, [pc, #204]	; (8009a64 <tcp_input+0x28c>)
 8009996:	6814      	ldr	r4, [r2, #0]
 8009998:	4618      	mov	r0, r3
 800999a:	f7fc fcf5 	bl	8006388 <lwip_htons>
 800999e:	4603      	mov	r3, r0
 80099a0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80099a2:	4b30      	ldr	r3, [pc, #192]	; (8009a64 <tcp_input+0x28c>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	899b      	ldrh	r3, [r3, #12]
 80099a8:	b29b      	uxth	r3, r3
 80099aa:	4618      	mov	r0, r3
 80099ac:	f7fc fcec 	bl	8006388 <lwip_htons>
 80099b0:	4603      	mov	r3, r0
 80099b2:	b2db      	uxtb	r3, r3
 80099b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80099b8:	b2da      	uxtb	r2, r3
 80099ba:	4b34      	ldr	r3, [pc, #208]	; (8009a8c <tcp_input+0x2b4>)
 80099bc:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	891a      	ldrh	r2, [r3, #8]
 80099c2:	4b33      	ldr	r3, [pc, #204]	; (8009a90 <tcp_input+0x2b8>)
 80099c4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80099c6:	4b31      	ldr	r3, [pc, #196]	; (8009a8c <tcp_input+0x2b4>)
 80099c8:	781b      	ldrb	r3, [r3, #0]
 80099ca:	f003 0303 	and.w	r3, r3, #3
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d00c      	beq.n	80099ec <tcp_input+0x214>
    tcplen++;
 80099d2:	4b2f      	ldr	r3, [pc, #188]	; (8009a90 <tcp_input+0x2b8>)
 80099d4:	881b      	ldrh	r3, [r3, #0]
 80099d6:	3301      	adds	r3, #1
 80099d8:	b29a      	uxth	r2, r3
 80099da:	4b2d      	ldr	r3, [pc, #180]	; (8009a90 <tcp_input+0x2b8>)
 80099dc:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	891a      	ldrh	r2, [r3, #8]
 80099e2:	4b2b      	ldr	r3, [pc, #172]	; (8009a90 <tcp_input+0x2b8>)
 80099e4:	881b      	ldrh	r3, [r3, #0]
 80099e6:	429a      	cmp	r2, r3
 80099e8:	f200 82e6 	bhi.w	8009fb8 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80099ec:	2300      	movs	r3, #0
 80099ee:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80099f0:	4b28      	ldr	r3, [pc, #160]	; (8009a94 <tcp_input+0x2bc>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	61fb      	str	r3, [r7, #28]
 80099f6:	e09d      	b.n	8009b34 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80099f8:	69fb      	ldr	r3, [r7, #28]
 80099fa:	7d1b      	ldrb	r3, [r3, #20]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d105      	bne.n	8009a0c <tcp_input+0x234>
 8009a00:	4b15      	ldr	r3, [pc, #84]	; (8009a58 <tcp_input+0x280>)
 8009a02:	22fb      	movs	r2, #251	; 0xfb
 8009a04:	4924      	ldr	r1, [pc, #144]	; (8009a98 <tcp_input+0x2c0>)
 8009a06:	4816      	ldr	r0, [pc, #88]	; (8009a60 <tcp_input+0x288>)
 8009a08:	f006 ff04 	bl	8010814 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8009a0c:	69fb      	ldr	r3, [r7, #28]
 8009a0e:	7d1b      	ldrb	r3, [r3, #20]
 8009a10:	2b0a      	cmp	r3, #10
 8009a12:	d105      	bne.n	8009a20 <tcp_input+0x248>
 8009a14:	4b10      	ldr	r3, [pc, #64]	; (8009a58 <tcp_input+0x280>)
 8009a16:	22fc      	movs	r2, #252	; 0xfc
 8009a18:	4920      	ldr	r1, [pc, #128]	; (8009a9c <tcp_input+0x2c4>)
 8009a1a:	4811      	ldr	r0, [pc, #68]	; (8009a60 <tcp_input+0x288>)
 8009a1c:	f006 fefa 	bl	8010814 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8009a20:	69fb      	ldr	r3, [r7, #28]
 8009a22:	7d1b      	ldrb	r3, [r3, #20]
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	d105      	bne.n	8009a34 <tcp_input+0x25c>
 8009a28:	4b0b      	ldr	r3, [pc, #44]	; (8009a58 <tcp_input+0x280>)
 8009a2a:	22fd      	movs	r2, #253	; 0xfd
 8009a2c:	491c      	ldr	r1, [pc, #112]	; (8009aa0 <tcp_input+0x2c8>)
 8009a2e:	480c      	ldr	r0, [pc, #48]	; (8009a60 <tcp_input+0x288>)
 8009a30:	f006 fef0 	bl	8010814 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009a34:	69fb      	ldr	r3, [r7, #28]
 8009a36:	7a1b      	ldrb	r3, [r3, #8]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d033      	beq.n	8009aa4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009a3c:	69fb      	ldr	r3, [r7, #28]
 8009a3e:	7a1a      	ldrb	r2, [r3, #8]
 8009a40:	4b09      	ldr	r3, [pc, #36]	; (8009a68 <tcp_input+0x290>)
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009a48:	3301      	adds	r3, #1
 8009a4a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009a4c:	429a      	cmp	r2, r3
 8009a4e:	d029      	beq.n	8009aa4 <tcp_input+0x2cc>
      prev = pcb;
 8009a50:	69fb      	ldr	r3, [r7, #28]
 8009a52:	61bb      	str	r3, [r7, #24]
      continue;
 8009a54:	e06b      	b.n	8009b2e <tcp_input+0x356>
 8009a56:	bf00      	nop
 8009a58:	080128b0 	.word	0x080128b0
 8009a5c:	080128e4 	.word	0x080128e4
 8009a60:	080128fc 	.word	0x080128fc
 8009a64:	200088cc 	.word	0x200088cc
 8009a68:	20005334 	.word	0x20005334
 8009a6c:	200088d0 	.word	0x200088d0
 8009a70:	200088d4 	.word	0x200088d4
 8009a74:	200088d2 	.word	0x200088d2
 8009a78:	08012924 	.word	0x08012924
 8009a7c:	08012934 	.word	0x08012934
 8009a80:	08012940 	.word	0x08012940
 8009a84:	200088dc 	.word	0x200088dc
 8009a88:	200088e0 	.word	0x200088e0
 8009a8c:	200088e8 	.word	0x200088e8
 8009a90:	200088e6 	.word	0x200088e6
 8009a94:	200088b0 	.word	0x200088b0
 8009a98:	08012960 	.word	0x08012960
 8009a9c:	08012988 	.word	0x08012988
 8009aa0:	080129b4 	.word	0x080129b4
    }

    if (pcb->remote_port == tcphdr->src &&
 8009aa4:	69fb      	ldr	r3, [r7, #28]
 8009aa6:	8b1a      	ldrh	r2, [r3, #24]
 8009aa8:	4b72      	ldr	r3, [pc, #456]	; (8009c74 <tcp_input+0x49c>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	881b      	ldrh	r3, [r3, #0]
 8009aae:	b29b      	uxth	r3, r3
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d13a      	bne.n	8009b2a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8009ab4:	69fb      	ldr	r3, [r7, #28]
 8009ab6:	8ada      	ldrh	r2, [r3, #22]
 8009ab8:	4b6e      	ldr	r3, [pc, #440]	; (8009c74 <tcp_input+0x49c>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	885b      	ldrh	r3, [r3, #2]
 8009abe:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8009ac0:	429a      	cmp	r2, r3
 8009ac2:	d132      	bne.n	8009b2a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009ac4:	69fb      	ldr	r3, [r7, #28]
 8009ac6:	685a      	ldr	r2, [r3, #4]
 8009ac8:	4b6b      	ldr	r3, [pc, #428]	; (8009c78 <tcp_input+0x4a0>)
 8009aca:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d12c      	bne.n	8009b2a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009ad0:	69fb      	ldr	r3, [r7, #28]
 8009ad2:	681a      	ldr	r2, [r3, #0]
 8009ad4:	4b68      	ldr	r3, [pc, #416]	; (8009c78 <tcp_input+0x4a0>)
 8009ad6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	d126      	bne.n	8009b2a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8009adc:	69fb      	ldr	r3, [r7, #28]
 8009ade:	68db      	ldr	r3, [r3, #12]
 8009ae0:	69fa      	ldr	r2, [r7, #28]
 8009ae2:	429a      	cmp	r2, r3
 8009ae4:	d106      	bne.n	8009af4 <tcp_input+0x31c>
 8009ae6:	4b65      	ldr	r3, [pc, #404]	; (8009c7c <tcp_input+0x4a4>)
 8009ae8:	f240 120d 	movw	r2, #269	; 0x10d
 8009aec:	4964      	ldr	r1, [pc, #400]	; (8009c80 <tcp_input+0x4a8>)
 8009aee:	4865      	ldr	r0, [pc, #404]	; (8009c84 <tcp_input+0x4ac>)
 8009af0:	f006 fe90 	bl	8010814 <iprintf>
      if (prev != NULL) {
 8009af4:	69bb      	ldr	r3, [r7, #24]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d00a      	beq.n	8009b10 <tcp_input+0x338>
        prev->next = pcb->next;
 8009afa:	69fb      	ldr	r3, [r7, #28]
 8009afc:	68da      	ldr	r2, [r3, #12]
 8009afe:	69bb      	ldr	r3, [r7, #24]
 8009b00:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8009b02:	4b61      	ldr	r3, [pc, #388]	; (8009c88 <tcp_input+0x4b0>)
 8009b04:	681a      	ldr	r2, [r3, #0]
 8009b06:	69fb      	ldr	r3, [r7, #28]
 8009b08:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8009b0a:	4a5f      	ldr	r2, [pc, #380]	; (8009c88 <tcp_input+0x4b0>)
 8009b0c:	69fb      	ldr	r3, [r7, #28]
 8009b0e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8009b10:	69fb      	ldr	r3, [r7, #28]
 8009b12:	68db      	ldr	r3, [r3, #12]
 8009b14:	69fa      	ldr	r2, [r7, #28]
 8009b16:	429a      	cmp	r2, r3
 8009b18:	d111      	bne.n	8009b3e <tcp_input+0x366>
 8009b1a:	4b58      	ldr	r3, [pc, #352]	; (8009c7c <tcp_input+0x4a4>)
 8009b1c:	f240 1215 	movw	r2, #277	; 0x115
 8009b20:	495a      	ldr	r1, [pc, #360]	; (8009c8c <tcp_input+0x4b4>)
 8009b22:	4858      	ldr	r0, [pc, #352]	; (8009c84 <tcp_input+0x4ac>)
 8009b24:	f006 fe76 	bl	8010814 <iprintf>
      break;
 8009b28:	e009      	b.n	8009b3e <tcp_input+0x366>
    }
    prev = pcb;
 8009b2a:	69fb      	ldr	r3, [r7, #28]
 8009b2c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009b2e:	69fb      	ldr	r3, [r7, #28]
 8009b30:	68db      	ldr	r3, [r3, #12]
 8009b32:	61fb      	str	r3, [r7, #28]
 8009b34:	69fb      	ldr	r3, [r7, #28]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	f47f af5e 	bne.w	80099f8 <tcp_input+0x220>
 8009b3c:	e000      	b.n	8009b40 <tcp_input+0x368>
      break;
 8009b3e:	bf00      	nop
  }

  if (pcb == NULL) {
 8009b40:	69fb      	ldr	r3, [r7, #28]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	f040 80aa 	bne.w	8009c9c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009b48:	4b51      	ldr	r3, [pc, #324]	; (8009c90 <tcp_input+0x4b8>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	61fb      	str	r3, [r7, #28]
 8009b4e:	e03f      	b.n	8009bd0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009b50:	69fb      	ldr	r3, [r7, #28]
 8009b52:	7d1b      	ldrb	r3, [r3, #20]
 8009b54:	2b0a      	cmp	r3, #10
 8009b56:	d006      	beq.n	8009b66 <tcp_input+0x38e>
 8009b58:	4b48      	ldr	r3, [pc, #288]	; (8009c7c <tcp_input+0x4a4>)
 8009b5a:	f240 121f 	movw	r2, #287	; 0x11f
 8009b5e:	494d      	ldr	r1, [pc, #308]	; (8009c94 <tcp_input+0x4bc>)
 8009b60:	4848      	ldr	r0, [pc, #288]	; (8009c84 <tcp_input+0x4ac>)
 8009b62:	f006 fe57 	bl	8010814 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009b66:	69fb      	ldr	r3, [r7, #28]
 8009b68:	7a1b      	ldrb	r3, [r3, #8]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d009      	beq.n	8009b82 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009b6e:	69fb      	ldr	r3, [r7, #28]
 8009b70:	7a1a      	ldrb	r2, [r3, #8]
 8009b72:	4b41      	ldr	r3, [pc, #260]	; (8009c78 <tcp_input+0x4a0>)
 8009b74:	685b      	ldr	r3, [r3, #4]
 8009b76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009b7a:	3301      	adds	r3, #1
 8009b7c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	d122      	bne.n	8009bc8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8009b82:	69fb      	ldr	r3, [r7, #28]
 8009b84:	8b1a      	ldrh	r2, [r3, #24]
 8009b86:	4b3b      	ldr	r3, [pc, #236]	; (8009c74 <tcp_input+0x49c>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	881b      	ldrh	r3, [r3, #0]
 8009b8c:	b29b      	uxth	r3, r3
 8009b8e:	429a      	cmp	r2, r3
 8009b90:	d11b      	bne.n	8009bca <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8009b92:	69fb      	ldr	r3, [r7, #28]
 8009b94:	8ada      	ldrh	r2, [r3, #22]
 8009b96:	4b37      	ldr	r3, [pc, #220]	; (8009c74 <tcp_input+0x49c>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	885b      	ldrh	r3, [r3, #2]
 8009b9c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d113      	bne.n	8009bca <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009ba2:	69fb      	ldr	r3, [r7, #28]
 8009ba4:	685a      	ldr	r2, [r3, #4]
 8009ba6:	4b34      	ldr	r3, [pc, #208]	; (8009c78 <tcp_input+0x4a0>)
 8009ba8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8009baa:	429a      	cmp	r2, r3
 8009bac:	d10d      	bne.n	8009bca <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009bae:	69fb      	ldr	r3, [r7, #28]
 8009bb0:	681a      	ldr	r2, [r3, #0]
 8009bb2:	4b31      	ldr	r3, [pc, #196]	; (8009c78 <tcp_input+0x4a0>)
 8009bb4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009bb6:	429a      	cmp	r2, r3
 8009bb8:	d107      	bne.n	8009bca <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8009bba:	69f8      	ldr	r0, [r7, #28]
 8009bbc:	f000 fb56 	bl	800a26c <tcp_timewait_input>
        }
        pbuf_free(p);
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f7fd ff3f 	bl	8007a44 <pbuf_free>
        return;
 8009bc6:	e1fd      	b.n	8009fc4 <tcp_input+0x7ec>
        continue;
 8009bc8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009bca:	69fb      	ldr	r3, [r7, #28]
 8009bcc:	68db      	ldr	r3, [r3, #12]
 8009bce:	61fb      	str	r3, [r7, #28]
 8009bd0:	69fb      	ldr	r3, [r7, #28]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d1bc      	bne.n	8009b50 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009bda:	4b2f      	ldr	r3, [pc, #188]	; (8009c98 <tcp_input+0x4c0>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	617b      	str	r3, [r7, #20]
 8009be0:	e02a      	b.n	8009c38 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	7a1b      	ldrb	r3, [r3, #8]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d00c      	beq.n	8009c04 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	7a1a      	ldrb	r2, [r3, #8]
 8009bee:	4b22      	ldr	r3, [pc, #136]	; (8009c78 <tcp_input+0x4a0>)
 8009bf0:	685b      	ldr	r3, [r3, #4]
 8009bf2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009bf6:	3301      	adds	r3, #1
 8009bf8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8009bfa:	429a      	cmp	r2, r3
 8009bfc:	d002      	beq.n	8009c04 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	61bb      	str	r3, [r7, #24]
        continue;
 8009c02:	e016      	b.n	8009c32 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8009c04:	697b      	ldr	r3, [r7, #20]
 8009c06:	8ada      	ldrh	r2, [r3, #22]
 8009c08:	4b1a      	ldr	r3, [pc, #104]	; (8009c74 <tcp_input+0x49c>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	885b      	ldrh	r3, [r3, #2]
 8009c0e:	b29b      	uxth	r3, r3
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d10c      	bne.n	8009c2e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8009c14:	697b      	ldr	r3, [r7, #20]
 8009c16:	681a      	ldr	r2, [r3, #0]
 8009c18:	4b17      	ldr	r3, [pc, #92]	; (8009c78 <tcp_input+0x4a0>)
 8009c1a:	695b      	ldr	r3, [r3, #20]
 8009c1c:	429a      	cmp	r2, r3
 8009c1e:	d00f      	beq.n	8009c40 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d00d      	beq.n	8009c42 <tcp_input+0x46a>
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d009      	beq.n	8009c42 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	68db      	ldr	r3, [r3, #12]
 8009c36:	617b      	str	r3, [r7, #20]
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d1d1      	bne.n	8009be2 <tcp_input+0x40a>
 8009c3e:	e000      	b.n	8009c42 <tcp_input+0x46a>
            break;
 8009c40:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d029      	beq.n	8009c9c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8009c48:	69bb      	ldr	r3, [r7, #24]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d00a      	beq.n	8009c64 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	68da      	ldr	r2, [r3, #12]
 8009c52:	69bb      	ldr	r3, [r7, #24]
 8009c54:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8009c56:	4b10      	ldr	r3, [pc, #64]	; (8009c98 <tcp_input+0x4c0>)
 8009c58:	681a      	ldr	r2, [r3, #0]
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8009c5e:	4a0e      	ldr	r2, [pc, #56]	; (8009c98 <tcp_input+0x4c0>)
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8009c64:	6978      	ldr	r0, [r7, #20]
 8009c66:	f000 fa03 	bl	800a070 <tcp_listen_input>
      }
      pbuf_free(p);
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f7fd feea 	bl	8007a44 <pbuf_free>
      return;
 8009c70:	e1a8      	b.n	8009fc4 <tcp_input+0x7ec>
 8009c72:	bf00      	nop
 8009c74:	200088cc 	.word	0x200088cc
 8009c78:	20005334 	.word	0x20005334
 8009c7c:	080128b0 	.word	0x080128b0
 8009c80:	080129dc 	.word	0x080129dc
 8009c84:	080128fc 	.word	0x080128fc
 8009c88:	200088b0 	.word	0x200088b0
 8009c8c:	08012a08 	.word	0x08012a08
 8009c90:	200088b4 	.word	0x200088b4
 8009c94:	08012a34 	.word	0x08012a34
 8009c98:	200088ac 	.word	0x200088ac
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8009c9c:	69fb      	ldr	r3, [r7, #28]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	f000 8158 	beq.w	8009f54 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8009ca4:	4b95      	ldr	r3, [pc, #596]	; (8009efc <tcp_input+0x724>)
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	891a      	ldrh	r2, [r3, #8]
 8009cae:	4b93      	ldr	r3, [pc, #588]	; (8009efc <tcp_input+0x724>)
 8009cb0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8009cb2:	4a92      	ldr	r2, [pc, #584]	; (8009efc <tcp_input+0x724>)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8009cb8:	4b91      	ldr	r3, [pc, #580]	; (8009f00 <tcp_input+0x728>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4a8f      	ldr	r2, [pc, #572]	; (8009efc <tcp_input+0x724>)
 8009cbe:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8009cc0:	4b90      	ldr	r3, [pc, #576]	; (8009f04 <tcp_input+0x72c>)
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8009cc6:	4b90      	ldr	r3, [pc, #576]	; (8009f08 <tcp_input+0x730>)
 8009cc8:	2200      	movs	r2, #0
 8009cca:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8009ccc:	4b8f      	ldr	r3, [pc, #572]	; (8009f0c <tcp_input+0x734>)
 8009cce:	2200      	movs	r2, #0
 8009cd0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8009cd2:	4b8f      	ldr	r3, [pc, #572]	; (8009f10 <tcp_input+0x738>)
 8009cd4:	781b      	ldrb	r3, [r3, #0]
 8009cd6:	f003 0308 	and.w	r3, r3, #8
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d006      	beq.n	8009cec <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	7b5b      	ldrb	r3, [r3, #13]
 8009ce2:	f043 0301 	orr.w	r3, r3, #1
 8009ce6:	b2da      	uxtb	r2, r3
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8009cec:	69fb      	ldr	r3, [r7, #28]
 8009cee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d017      	beq.n	8009d24 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009cf4:	69f8      	ldr	r0, [r7, #28]
 8009cf6:	f7ff f929 	bl	8008f4c <tcp_process_refused_data>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	f113 0f0d 	cmn.w	r3, #13
 8009d00:	d007      	beq.n	8009d12 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009d02:	69fb      	ldr	r3, [r7, #28]
 8009d04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d00c      	beq.n	8009d24 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009d0a:	4b82      	ldr	r3, [pc, #520]	; (8009f14 <tcp_input+0x73c>)
 8009d0c:	881b      	ldrh	r3, [r3, #0]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d008      	beq.n	8009d24 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8009d12:	69fb      	ldr	r3, [r7, #28]
 8009d14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	f040 80e3 	bne.w	8009ee2 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8009d1c:	69f8      	ldr	r0, [r7, #28]
 8009d1e:	f003 f9ad 	bl	800d07c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8009d22:	e0de      	b.n	8009ee2 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8009d24:	4a7c      	ldr	r2, [pc, #496]	; (8009f18 <tcp_input+0x740>)
 8009d26:	69fb      	ldr	r3, [r7, #28]
 8009d28:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8009d2a:	69f8      	ldr	r0, [r7, #28]
 8009d2c:	f000 fb18 	bl	800a360 <tcp_process>
 8009d30:	4603      	mov	r3, r0
 8009d32:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8009d34:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009d38:	f113 0f0d 	cmn.w	r3, #13
 8009d3c:	f000 80d3 	beq.w	8009ee6 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8009d40:	4b71      	ldr	r3, [pc, #452]	; (8009f08 <tcp_input+0x730>)
 8009d42:	781b      	ldrb	r3, [r3, #0]
 8009d44:	f003 0308 	and.w	r3, r3, #8
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d015      	beq.n	8009d78 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8009d4c:	69fb      	ldr	r3, [r7, #28]
 8009d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d008      	beq.n	8009d68 <tcp_input+0x590>
 8009d56:	69fb      	ldr	r3, [r7, #28]
 8009d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d5c:	69fa      	ldr	r2, [r7, #28]
 8009d5e:	6912      	ldr	r2, [r2, #16]
 8009d60:	f06f 010d 	mvn.w	r1, #13
 8009d64:	4610      	mov	r0, r2
 8009d66:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009d68:	69f9      	ldr	r1, [r7, #28]
 8009d6a:	486c      	ldr	r0, [pc, #432]	; (8009f1c <tcp_input+0x744>)
 8009d6c:	f7ff fbbc 	bl	80094e8 <tcp_pcb_remove>
        tcp_free(pcb);
 8009d70:	69f8      	ldr	r0, [r7, #28]
 8009d72:	f7fe f9a9 	bl	80080c8 <tcp_free>
 8009d76:	e0da      	b.n	8009f2e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8009d7c:	4b63      	ldr	r3, [pc, #396]	; (8009f0c <tcp_input+0x734>)
 8009d7e:	881b      	ldrh	r3, [r3, #0]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d01d      	beq.n	8009dc0 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8009d84:	4b61      	ldr	r3, [pc, #388]	; (8009f0c <tcp_input+0x734>)
 8009d86:	881b      	ldrh	r3, [r3, #0]
 8009d88:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8009d8a:	69fb      	ldr	r3, [r7, #28]
 8009d8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d00a      	beq.n	8009daa <tcp_input+0x5d2>
 8009d94:	69fb      	ldr	r3, [r7, #28]
 8009d96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d9a:	69fa      	ldr	r2, [r7, #28]
 8009d9c:	6910      	ldr	r0, [r2, #16]
 8009d9e:	89fa      	ldrh	r2, [r7, #14]
 8009da0:	69f9      	ldr	r1, [r7, #28]
 8009da2:	4798      	blx	r3
 8009da4:	4603      	mov	r3, r0
 8009da6:	74fb      	strb	r3, [r7, #19]
 8009da8:	e001      	b.n	8009dae <tcp_input+0x5d6>
 8009daa:	2300      	movs	r3, #0
 8009dac:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009dae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009db2:	f113 0f0d 	cmn.w	r3, #13
 8009db6:	f000 8098 	beq.w	8009eea <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8009dba:	4b54      	ldr	r3, [pc, #336]	; (8009f0c <tcp_input+0x734>)
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8009dc0:	69f8      	ldr	r0, [r7, #28]
 8009dc2:	f000 f915 	bl	8009ff0 <tcp_input_delayed_close>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	f040 8090 	bne.w	8009eee <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8009dce:	4b4d      	ldr	r3, [pc, #308]	; (8009f04 <tcp_input+0x72c>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d041      	beq.n	8009e5a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8009dd6:	69fb      	ldr	r3, [r7, #28]
 8009dd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d006      	beq.n	8009dec <tcp_input+0x614>
 8009dde:	4b50      	ldr	r3, [pc, #320]	; (8009f20 <tcp_input+0x748>)
 8009de0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8009de4:	494f      	ldr	r1, [pc, #316]	; (8009f24 <tcp_input+0x74c>)
 8009de6:	4850      	ldr	r0, [pc, #320]	; (8009f28 <tcp_input+0x750>)
 8009de8:	f006 fd14 	bl	8010814 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8009dec:	69fb      	ldr	r3, [r7, #28]
 8009dee:	8b5b      	ldrh	r3, [r3, #26]
 8009df0:	f003 0310 	and.w	r3, r3, #16
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d008      	beq.n	8009e0a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8009df8:	4b42      	ldr	r3, [pc, #264]	; (8009f04 <tcp_input+0x72c>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f7fd fe21 	bl	8007a44 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8009e02:	69f8      	ldr	r0, [r7, #28]
 8009e04:	f7fe fc48 	bl	8008698 <tcp_abort>
            goto aborted;
 8009e08:	e091      	b.n	8009f2e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8009e0a:	69fb      	ldr	r3, [r7, #28]
 8009e0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d00c      	beq.n	8009e2e <tcp_input+0x656>
 8009e14:	69fb      	ldr	r3, [r7, #28]
 8009e16:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009e1a:	69fb      	ldr	r3, [r7, #28]
 8009e1c:	6918      	ldr	r0, [r3, #16]
 8009e1e:	4b39      	ldr	r3, [pc, #228]	; (8009f04 <tcp_input+0x72c>)
 8009e20:	681a      	ldr	r2, [r3, #0]
 8009e22:	2300      	movs	r3, #0
 8009e24:	69f9      	ldr	r1, [r7, #28]
 8009e26:	47a0      	blx	r4
 8009e28:	4603      	mov	r3, r0
 8009e2a:	74fb      	strb	r3, [r7, #19]
 8009e2c:	e008      	b.n	8009e40 <tcp_input+0x668>
 8009e2e:	4b35      	ldr	r3, [pc, #212]	; (8009f04 <tcp_input+0x72c>)
 8009e30:	681a      	ldr	r2, [r3, #0]
 8009e32:	2300      	movs	r3, #0
 8009e34:	69f9      	ldr	r1, [r7, #28]
 8009e36:	2000      	movs	r0, #0
 8009e38:	f7ff f95e 	bl	80090f8 <tcp_recv_null>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8009e40:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009e44:	f113 0f0d 	cmn.w	r3, #13
 8009e48:	d053      	beq.n	8009ef2 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8009e4a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d003      	beq.n	8009e5a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8009e52:	4b2c      	ldr	r3, [pc, #176]	; (8009f04 <tcp_input+0x72c>)
 8009e54:	681a      	ldr	r2, [r3, #0]
 8009e56:	69fb      	ldr	r3, [r7, #28]
 8009e58:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8009e5a:	4b2b      	ldr	r3, [pc, #172]	; (8009f08 <tcp_input+0x730>)
 8009e5c:	781b      	ldrb	r3, [r3, #0]
 8009e5e:	f003 0320 	and.w	r3, r3, #32
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d030      	beq.n	8009ec8 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8009e66:	69fb      	ldr	r3, [r7, #28]
 8009e68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d009      	beq.n	8009e82 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8009e6e:	69fb      	ldr	r3, [r7, #28]
 8009e70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e72:	7b5a      	ldrb	r2, [r3, #13]
 8009e74:	69fb      	ldr	r3, [r7, #28]
 8009e76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e78:	f042 0220 	orr.w	r2, r2, #32
 8009e7c:	b2d2      	uxtb	r2, r2
 8009e7e:	735a      	strb	r2, [r3, #13]
 8009e80:	e022      	b.n	8009ec8 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009e82:	69fb      	ldr	r3, [r7, #28]
 8009e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e86:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009e8a:	d005      	beq.n	8009e98 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8009e8c:	69fb      	ldr	r3, [r7, #28]
 8009e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e90:	3301      	adds	r3, #1
 8009e92:	b29a      	uxth	r2, r3
 8009e94:	69fb      	ldr	r3, [r7, #28]
 8009e96:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8009e98:	69fb      	ldr	r3, [r7, #28]
 8009e9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d00b      	beq.n	8009eba <tcp_input+0x6e2>
 8009ea2:	69fb      	ldr	r3, [r7, #28]
 8009ea4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009ea8:	69fb      	ldr	r3, [r7, #28]
 8009eaa:	6918      	ldr	r0, [r3, #16]
 8009eac:	2300      	movs	r3, #0
 8009eae:	2200      	movs	r2, #0
 8009eb0:	69f9      	ldr	r1, [r7, #28]
 8009eb2:	47a0      	blx	r4
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	74fb      	strb	r3, [r7, #19]
 8009eb8:	e001      	b.n	8009ebe <tcp_input+0x6e6>
 8009eba:	2300      	movs	r3, #0
 8009ebc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009ebe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009ec2:	f113 0f0d 	cmn.w	r3, #13
 8009ec6:	d016      	beq.n	8009ef6 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8009ec8:	4b13      	ldr	r3, [pc, #76]	; (8009f18 <tcp_input+0x740>)
 8009eca:	2200      	movs	r2, #0
 8009ecc:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8009ece:	69f8      	ldr	r0, [r7, #28]
 8009ed0:	f000 f88e 	bl	8009ff0 <tcp_input_delayed_close>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d128      	bne.n	8009f2c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8009eda:	69f8      	ldr	r0, [r7, #28]
 8009edc:	f002 fac8 	bl	800c470 <tcp_output>
 8009ee0:	e025      	b.n	8009f2e <tcp_input+0x756>
        goto aborted;
 8009ee2:	bf00      	nop
 8009ee4:	e023      	b.n	8009f2e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8009ee6:	bf00      	nop
 8009ee8:	e021      	b.n	8009f2e <tcp_input+0x756>
              goto aborted;
 8009eea:	bf00      	nop
 8009eec:	e01f      	b.n	8009f2e <tcp_input+0x756>
          goto aborted;
 8009eee:	bf00      	nop
 8009ef0:	e01d      	b.n	8009f2e <tcp_input+0x756>
            goto aborted;
 8009ef2:	bf00      	nop
 8009ef4:	e01b      	b.n	8009f2e <tcp_input+0x756>
              goto aborted;
 8009ef6:	bf00      	nop
 8009ef8:	e019      	b.n	8009f2e <tcp_input+0x756>
 8009efa:	bf00      	nop
 8009efc:	200088bc 	.word	0x200088bc
 8009f00:	200088cc 	.word	0x200088cc
 8009f04:	200088ec 	.word	0x200088ec
 8009f08:	200088e9 	.word	0x200088e9
 8009f0c:	200088e4 	.word	0x200088e4
 8009f10:	200088e8 	.word	0x200088e8
 8009f14:	200088e6 	.word	0x200088e6
 8009f18:	200088f0 	.word	0x200088f0
 8009f1c:	200088b0 	.word	0x200088b0
 8009f20:	080128b0 	.word	0x080128b0
 8009f24:	08012a64 	.word	0x08012a64
 8009f28:	080128fc 	.word	0x080128fc
          goto aborted;
 8009f2c:	bf00      	nop
    tcp_input_pcb = NULL;
 8009f2e:	4b27      	ldr	r3, [pc, #156]	; (8009fcc <tcp_input+0x7f4>)
 8009f30:	2200      	movs	r2, #0
 8009f32:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8009f34:	4b26      	ldr	r3, [pc, #152]	; (8009fd0 <tcp_input+0x7f8>)
 8009f36:	2200      	movs	r2, #0
 8009f38:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8009f3a:	4b26      	ldr	r3, [pc, #152]	; (8009fd4 <tcp_input+0x7fc>)
 8009f3c:	685b      	ldr	r3, [r3, #4]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d03f      	beq.n	8009fc2 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8009f42:	4b24      	ldr	r3, [pc, #144]	; (8009fd4 <tcp_input+0x7fc>)
 8009f44:	685b      	ldr	r3, [r3, #4]
 8009f46:	4618      	mov	r0, r3
 8009f48:	f7fd fd7c 	bl	8007a44 <pbuf_free>
      inseg.p = NULL;
 8009f4c:	4b21      	ldr	r3, [pc, #132]	; (8009fd4 <tcp_input+0x7fc>)
 8009f4e:	2200      	movs	r2, #0
 8009f50:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8009f52:	e036      	b.n	8009fc2 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8009f54:	4b20      	ldr	r3, [pc, #128]	; (8009fd8 <tcp_input+0x800>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	899b      	ldrh	r3, [r3, #12]
 8009f5a:	b29b      	uxth	r3, r3
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f7fc fa13 	bl	8006388 <lwip_htons>
 8009f62:	4603      	mov	r3, r0
 8009f64:	b2db      	uxtb	r3, r3
 8009f66:	f003 0304 	and.w	r3, r3, #4
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d118      	bne.n	8009fa0 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009f6e:	4b1b      	ldr	r3, [pc, #108]	; (8009fdc <tcp_input+0x804>)
 8009f70:	6819      	ldr	r1, [r3, #0]
 8009f72:	4b1b      	ldr	r3, [pc, #108]	; (8009fe0 <tcp_input+0x808>)
 8009f74:	881b      	ldrh	r3, [r3, #0]
 8009f76:	461a      	mov	r2, r3
 8009f78:	4b1a      	ldr	r3, [pc, #104]	; (8009fe4 <tcp_input+0x80c>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009f7e:	4b16      	ldr	r3, [pc, #88]	; (8009fd8 <tcp_input+0x800>)
 8009f80:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009f82:	885b      	ldrh	r3, [r3, #2]
 8009f84:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009f86:	4a14      	ldr	r2, [pc, #80]	; (8009fd8 <tcp_input+0x800>)
 8009f88:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009f8a:	8812      	ldrh	r2, [r2, #0]
 8009f8c:	b292      	uxth	r2, r2
 8009f8e:	9202      	str	r2, [sp, #8]
 8009f90:	9301      	str	r3, [sp, #4]
 8009f92:	4b15      	ldr	r3, [pc, #84]	; (8009fe8 <tcp_input+0x810>)
 8009f94:	9300      	str	r3, [sp, #0]
 8009f96:	4b15      	ldr	r3, [pc, #84]	; (8009fec <tcp_input+0x814>)
 8009f98:	4602      	mov	r2, r0
 8009f9a:	2000      	movs	r0, #0
 8009f9c:	f003 f81c 	bl	800cfd8 <tcp_rst>
    pbuf_free(p);
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f7fd fd4f 	bl	8007a44 <pbuf_free>
  return;
 8009fa6:	e00c      	b.n	8009fc2 <tcp_input+0x7ea>
    goto dropped;
 8009fa8:	bf00      	nop
 8009faa:	e006      	b.n	8009fba <tcp_input+0x7e2>
    goto dropped;
 8009fac:	bf00      	nop
 8009fae:	e004      	b.n	8009fba <tcp_input+0x7e2>
    goto dropped;
 8009fb0:	bf00      	nop
 8009fb2:	e002      	b.n	8009fba <tcp_input+0x7e2>
      goto dropped;
 8009fb4:	bf00      	nop
 8009fb6:	e000      	b.n	8009fba <tcp_input+0x7e2>
      goto dropped;
 8009fb8:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f7fd fd42 	bl	8007a44 <pbuf_free>
 8009fc0:	e000      	b.n	8009fc4 <tcp_input+0x7ec>
  return;
 8009fc2:	bf00      	nop
}
 8009fc4:	3724      	adds	r7, #36	; 0x24
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd90      	pop	{r4, r7, pc}
 8009fca:	bf00      	nop
 8009fcc:	200088f0 	.word	0x200088f0
 8009fd0:	200088ec 	.word	0x200088ec
 8009fd4:	200088bc 	.word	0x200088bc
 8009fd8:	200088cc 	.word	0x200088cc
 8009fdc:	200088e0 	.word	0x200088e0
 8009fe0:	200088e6 	.word	0x200088e6
 8009fe4:	200088dc 	.word	0x200088dc
 8009fe8:	20005344 	.word	0x20005344
 8009fec:	20005348 	.word	0x20005348

08009ff0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b082      	sub	sp, #8
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d106      	bne.n	800a00c <tcp_input_delayed_close+0x1c>
 8009ffe:	4b17      	ldr	r3, [pc, #92]	; (800a05c <tcp_input_delayed_close+0x6c>)
 800a000:	f240 225a 	movw	r2, #602	; 0x25a
 800a004:	4916      	ldr	r1, [pc, #88]	; (800a060 <tcp_input_delayed_close+0x70>)
 800a006:	4817      	ldr	r0, [pc, #92]	; (800a064 <tcp_input_delayed_close+0x74>)
 800a008:	f006 fc04 	bl	8010814 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800a00c:	4b16      	ldr	r3, [pc, #88]	; (800a068 <tcp_input_delayed_close+0x78>)
 800a00e:	781b      	ldrb	r3, [r3, #0]
 800a010:	f003 0310 	and.w	r3, r3, #16
 800a014:	2b00      	cmp	r3, #0
 800a016:	d01c      	beq.n	800a052 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	8b5b      	ldrh	r3, [r3, #26]
 800a01c:	f003 0310 	and.w	r3, r3, #16
 800a020:	2b00      	cmp	r3, #0
 800a022:	d10d      	bne.n	800a040 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d008      	beq.n	800a040 <tcp_input_delayed_close+0x50>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a034:	687a      	ldr	r2, [r7, #4]
 800a036:	6912      	ldr	r2, [r2, #16]
 800a038:	f06f 010e 	mvn.w	r1, #14
 800a03c:	4610      	mov	r0, r2
 800a03e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a040:	6879      	ldr	r1, [r7, #4]
 800a042:	480a      	ldr	r0, [pc, #40]	; (800a06c <tcp_input_delayed_close+0x7c>)
 800a044:	f7ff fa50 	bl	80094e8 <tcp_pcb_remove>
    tcp_free(pcb);
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f7fe f83d 	bl	80080c8 <tcp_free>
    return 1;
 800a04e:	2301      	movs	r3, #1
 800a050:	e000      	b.n	800a054 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800a052:	2300      	movs	r3, #0
}
 800a054:	4618      	mov	r0, r3
 800a056:	3708      	adds	r7, #8
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}
 800a05c:	080128b0 	.word	0x080128b0
 800a060:	08012a80 	.word	0x08012a80
 800a064:	080128fc 	.word	0x080128fc
 800a068:	200088e9 	.word	0x200088e9
 800a06c:	200088b0 	.word	0x200088b0

0800a070 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800a070:	b590      	push	{r4, r7, lr}
 800a072:	b08b      	sub	sp, #44	; 0x2c
 800a074:	af04      	add	r7, sp, #16
 800a076:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800a078:	4b6f      	ldr	r3, [pc, #444]	; (800a238 <tcp_listen_input+0x1c8>)
 800a07a:	781b      	ldrb	r3, [r3, #0]
 800a07c:	f003 0304 	and.w	r3, r3, #4
 800a080:	2b00      	cmp	r3, #0
 800a082:	f040 80d2 	bne.w	800a22a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d106      	bne.n	800a09a <tcp_listen_input+0x2a>
 800a08c:	4b6b      	ldr	r3, [pc, #428]	; (800a23c <tcp_listen_input+0x1cc>)
 800a08e:	f240 2281 	movw	r2, #641	; 0x281
 800a092:	496b      	ldr	r1, [pc, #428]	; (800a240 <tcp_listen_input+0x1d0>)
 800a094:	486b      	ldr	r0, [pc, #428]	; (800a244 <tcp_listen_input+0x1d4>)
 800a096:	f006 fbbd 	bl	8010814 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800a09a:	4b67      	ldr	r3, [pc, #412]	; (800a238 <tcp_listen_input+0x1c8>)
 800a09c:	781b      	ldrb	r3, [r3, #0]
 800a09e:	f003 0310 	and.w	r3, r3, #16
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d019      	beq.n	800a0da <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a0a6:	4b68      	ldr	r3, [pc, #416]	; (800a248 <tcp_listen_input+0x1d8>)
 800a0a8:	6819      	ldr	r1, [r3, #0]
 800a0aa:	4b68      	ldr	r3, [pc, #416]	; (800a24c <tcp_listen_input+0x1dc>)
 800a0ac:	881b      	ldrh	r3, [r3, #0]
 800a0ae:	461a      	mov	r2, r3
 800a0b0:	4b67      	ldr	r3, [pc, #412]	; (800a250 <tcp_listen_input+0x1e0>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a0b6:	4b67      	ldr	r3, [pc, #412]	; (800a254 <tcp_listen_input+0x1e4>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a0ba:	885b      	ldrh	r3, [r3, #2]
 800a0bc:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a0be:	4a65      	ldr	r2, [pc, #404]	; (800a254 <tcp_listen_input+0x1e4>)
 800a0c0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a0c2:	8812      	ldrh	r2, [r2, #0]
 800a0c4:	b292      	uxth	r2, r2
 800a0c6:	9202      	str	r2, [sp, #8]
 800a0c8:	9301      	str	r3, [sp, #4]
 800a0ca:	4b63      	ldr	r3, [pc, #396]	; (800a258 <tcp_listen_input+0x1e8>)
 800a0cc:	9300      	str	r3, [sp, #0]
 800a0ce:	4b63      	ldr	r3, [pc, #396]	; (800a25c <tcp_listen_input+0x1ec>)
 800a0d0:	4602      	mov	r2, r0
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f002 ff80 	bl	800cfd8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800a0d8:	e0a9      	b.n	800a22e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800a0da:	4b57      	ldr	r3, [pc, #348]	; (800a238 <tcp_listen_input+0x1c8>)
 800a0dc:	781b      	ldrb	r3, [r3, #0]
 800a0de:	f003 0302 	and.w	r3, r3, #2
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	f000 80a3 	beq.w	800a22e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	7d5b      	ldrb	r3, [r3, #21]
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f7ff f927 	bl	8009340 <tcp_alloc>
 800a0f2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d111      	bne.n	800a11e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	699b      	ldr	r3, [r3, #24]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d00a      	beq.n	800a118 <tcp_listen_input+0xa8>
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	699b      	ldr	r3, [r3, #24]
 800a106:	687a      	ldr	r2, [r7, #4]
 800a108:	6910      	ldr	r0, [r2, #16]
 800a10a:	f04f 32ff 	mov.w	r2, #4294967295
 800a10e:	2100      	movs	r1, #0
 800a110:	4798      	blx	r3
 800a112:	4603      	mov	r3, r0
 800a114:	73bb      	strb	r3, [r7, #14]
      return;
 800a116:	e08b      	b.n	800a230 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a118:	23f0      	movs	r3, #240	; 0xf0
 800a11a:	73bb      	strb	r3, [r7, #14]
      return;
 800a11c:	e088      	b.n	800a230 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800a11e:	4b50      	ldr	r3, [pc, #320]	; (800a260 <tcp_listen_input+0x1f0>)
 800a120:	695a      	ldr	r2, [r3, #20]
 800a122:	697b      	ldr	r3, [r7, #20]
 800a124:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800a126:	4b4e      	ldr	r3, [pc, #312]	; (800a260 <tcp_listen_input+0x1f0>)
 800a128:	691a      	ldr	r2, [r3, #16]
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	8ada      	ldrh	r2, [r3, #22]
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800a136:	4b47      	ldr	r3, [pc, #284]	; (800a254 <tcp_listen_input+0x1e4>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	881b      	ldrh	r3, [r3, #0]
 800a13c:	b29a      	uxth	r2, r3
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	2203      	movs	r2, #3
 800a146:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800a148:	4b41      	ldr	r3, [pc, #260]	; (800a250 <tcp_listen_input+0x1e0>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	1c5a      	adds	r2, r3, #1
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a156:	697b      	ldr	r3, [r7, #20]
 800a158:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800a15a:	6978      	ldr	r0, [r7, #20]
 800a15c:	f7ff fa58 	bl	8009610 <tcp_next_iss>
 800a160:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	693a      	ldr	r2, [r7, #16]
 800a166:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800a168:	697b      	ldr	r3, [r7, #20]
 800a16a:	693a      	ldr	r2, [r7, #16]
 800a16c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	693a      	ldr	r2, [r7, #16]
 800a172:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800a174:	697b      	ldr	r3, [r7, #20]
 800a176:	693a      	ldr	r2, [r7, #16]
 800a178:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800a17a:	4b35      	ldr	r3, [pc, #212]	; (800a250 <tcp_listen_input+0x1e0>)
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	1e5a      	subs	r2, r3, #1
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	691a      	ldr	r2, [r3, #16]
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800a18c:	697b      	ldr	r3, [r7, #20]
 800a18e:	687a      	ldr	r2, [r7, #4]
 800a190:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	7a5b      	ldrb	r3, [r3, #9]
 800a196:	f003 030c 	and.w	r3, r3, #12
 800a19a:	b2da      	uxtb	r2, r3
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	7a1a      	ldrb	r2, [r3, #8]
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800a1a8:	4b2e      	ldr	r3, [pc, #184]	; (800a264 <tcp_listen_input+0x1f4>)
 800a1aa:	681a      	ldr	r2, [r3, #0]
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	60da      	str	r2, [r3, #12]
 800a1b0:	4a2c      	ldr	r2, [pc, #176]	; (800a264 <tcp_listen_input+0x1f4>)
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	6013      	str	r3, [r2, #0]
 800a1b6:	f003 f8d1 	bl	800d35c <tcp_timer_needed>
 800a1ba:	4b2b      	ldr	r3, [pc, #172]	; (800a268 <tcp_listen_input+0x1f8>)
 800a1bc:	2201      	movs	r2, #1
 800a1be:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800a1c0:	6978      	ldr	r0, [r7, #20]
 800a1c2:	f001 fd8f 	bl	800bce4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800a1c6:	4b23      	ldr	r3, [pc, #140]	; (800a254 <tcp_listen_input+0x1e4>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	89db      	ldrh	r3, [r3, #14]
 800a1cc:	b29a      	uxth	r2, r3
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	3304      	adds	r3, #4
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f005 f827 	bl	800f23c <ip4_route>
 800a1ee:	4601      	mov	r1, r0
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	3304      	adds	r3, #4
 800a1f4:	461a      	mov	r2, r3
 800a1f6:	4620      	mov	r0, r4
 800a1f8:	f7ff fa30 	bl	800965c <tcp_eff_send_mss_netif>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	461a      	mov	r2, r3
 800a200:	697b      	ldr	r3, [r7, #20]
 800a202:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800a204:	2112      	movs	r1, #18
 800a206:	6978      	ldr	r0, [r7, #20]
 800a208:	f002 f844 	bl	800c294 <tcp_enqueue_flags>
 800a20c:	4603      	mov	r3, r0
 800a20e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800a210:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d004      	beq.n	800a222 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800a218:	2100      	movs	r1, #0
 800a21a:	6978      	ldr	r0, [r7, #20]
 800a21c:	f7fe f97e 	bl	800851c <tcp_abandon>
      return;
 800a220:	e006      	b.n	800a230 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800a222:	6978      	ldr	r0, [r7, #20]
 800a224:	f002 f924 	bl	800c470 <tcp_output>
  return;
 800a228:	e001      	b.n	800a22e <tcp_listen_input+0x1be>
    return;
 800a22a:	bf00      	nop
 800a22c:	e000      	b.n	800a230 <tcp_listen_input+0x1c0>
  return;
 800a22e:	bf00      	nop
}
 800a230:	371c      	adds	r7, #28
 800a232:	46bd      	mov	sp, r7
 800a234:	bd90      	pop	{r4, r7, pc}
 800a236:	bf00      	nop
 800a238:	200088e8 	.word	0x200088e8
 800a23c:	080128b0 	.word	0x080128b0
 800a240:	08012aa8 	.word	0x08012aa8
 800a244:	080128fc 	.word	0x080128fc
 800a248:	200088e0 	.word	0x200088e0
 800a24c:	200088e6 	.word	0x200088e6
 800a250:	200088dc 	.word	0x200088dc
 800a254:	200088cc 	.word	0x200088cc
 800a258:	20005344 	.word	0x20005344
 800a25c:	20005348 	.word	0x20005348
 800a260:	20005334 	.word	0x20005334
 800a264:	200088b0 	.word	0x200088b0
 800a268:	200088b8 	.word	0x200088b8

0800a26c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b086      	sub	sp, #24
 800a270:	af04      	add	r7, sp, #16
 800a272:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800a274:	4b2f      	ldr	r3, [pc, #188]	; (800a334 <tcp_timewait_input+0xc8>)
 800a276:	781b      	ldrb	r3, [r3, #0]
 800a278:	f003 0304 	and.w	r3, r3, #4
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d153      	bne.n	800a328 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d106      	bne.n	800a294 <tcp_timewait_input+0x28>
 800a286:	4b2c      	ldr	r3, [pc, #176]	; (800a338 <tcp_timewait_input+0xcc>)
 800a288:	f240 22ee 	movw	r2, #750	; 0x2ee
 800a28c:	492b      	ldr	r1, [pc, #172]	; (800a33c <tcp_timewait_input+0xd0>)
 800a28e:	482c      	ldr	r0, [pc, #176]	; (800a340 <tcp_timewait_input+0xd4>)
 800a290:	f006 fac0 	bl	8010814 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800a294:	4b27      	ldr	r3, [pc, #156]	; (800a334 <tcp_timewait_input+0xc8>)
 800a296:	781b      	ldrb	r3, [r3, #0]
 800a298:	f003 0302 	and.w	r3, r3, #2
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d02a      	beq.n	800a2f6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800a2a0:	4b28      	ldr	r3, [pc, #160]	; (800a344 <tcp_timewait_input+0xd8>)
 800a2a2:	681a      	ldr	r2, [r3, #0]
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a8:	1ad3      	subs	r3, r2, r3
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	db2d      	blt.n	800a30a <tcp_timewait_input+0x9e>
 800a2ae:	4b25      	ldr	r3, [pc, #148]	; (800a344 <tcp_timewait_input+0xd8>)
 800a2b0:	681a      	ldr	r2, [r3, #0]
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2b6:	6879      	ldr	r1, [r7, #4]
 800a2b8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a2ba:	440b      	add	r3, r1
 800a2bc:	1ad3      	subs	r3, r2, r3
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	dc23      	bgt.n	800a30a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a2c2:	4b21      	ldr	r3, [pc, #132]	; (800a348 <tcp_timewait_input+0xdc>)
 800a2c4:	6819      	ldr	r1, [r3, #0]
 800a2c6:	4b21      	ldr	r3, [pc, #132]	; (800a34c <tcp_timewait_input+0xe0>)
 800a2c8:	881b      	ldrh	r3, [r3, #0]
 800a2ca:	461a      	mov	r2, r3
 800a2cc:	4b1d      	ldr	r3, [pc, #116]	; (800a344 <tcp_timewait_input+0xd8>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a2d2:	4b1f      	ldr	r3, [pc, #124]	; (800a350 <tcp_timewait_input+0xe4>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a2d6:	885b      	ldrh	r3, [r3, #2]
 800a2d8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a2da:	4a1d      	ldr	r2, [pc, #116]	; (800a350 <tcp_timewait_input+0xe4>)
 800a2dc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a2de:	8812      	ldrh	r2, [r2, #0]
 800a2e0:	b292      	uxth	r2, r2
 800a2e2:	9202      	str	r2, [sp, #8]
 800a2e4:	9301      	str	r3, [sp, #4]
 800a2e6:	4b1b      	ldr	r3, [pc, #108]	; (800a354 <tcp_timewait_input+0xe8>)
 800a2e8:	9300      	str	r3, [sp, #0]
 800a2ea:	4b1b      	ldr	r3, [pc, #108]	; (800a358 <tcp_timewait_input+0xec>)
 800a2ec:	4602      	mov	r2, r0
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f002 fe72 	bl	800cfd8 <tcp_rst>
      return;
 800a2f4:	e01b      	b.n	800a32e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800a2f6:	4b0f      	ldr	r3, [pc, #60]	; (800a334 <tcp_timewait_input+0xc8>)
 800a2f8:	781b      	ldrb	r3, [r3, #0]
 800a2fa:	f003 0301 	and.w	r3, r3, #1
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d003      	beq.n	800a30a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800a302:	4b16      	ldr	r3, [pc, #88]	; (800a35c <tcp_timewait_input+0xf0>)
 800a304:	681a      	ldr	r2, [r3, #0]
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800a30a:	4b10      	ldr	r3, [pc, #64]	; (800a34c <tcp_timewait_input+0xe0>)
 800a30c:	881b      	ldrh	r3, [r3, #0]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d00c      	beq.n	800a32c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	8b5b      	ldrh	r3, [r3, #26]
 800a316:	f043 0302 	orr.w	r3, r3, #2
 800a31a:	b29a      	uxth	r2, r3
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f002 f8a5 	bl	800c470 <tcp_output>
  }
  return;
 800a326:	e001      	b.n	800a32c <tcp_timewait_input+0xc0>
    return;
 800a328:	bf00      	nop
 800a32a:	e000      	b.n	800a32e <tcp_timewait_input+0xc2>
  return;
 800a32c:	bf00      	nop
}
 800a32e:	3708      	adds	r7, #8
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}
 800a334:	200088e8 	.word	0x200088e8
 800a338:	080128b0 	.word	0x080128b0
 800a33c:	08012ac8 	.word	0x08012ac8
 800a340:	080128fc 	.word	0x080128fc
 800a344:	200088dc 	.word	0x200088dc
 800a348:	200088e0 	.word	0x200088e0
 800a34c:	200088e6 	.word	0x200088e6
 800a350:	200088cc 	.word	0x200088cc
 800a354:	20005344 	.word	0x20005344
 800a358:	20005348 	.word	0x20005348
 800a35c:	200088a4 	.word	0x200088a4

0800a360 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800a360:	b590      	push	{r4, r7, lr}
 800a362:	b08d      	sub	sp, #52	; 0x34
 800a364:	af04      	add	r7, sp, #16
 800a366:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800a368:	2300      	movs	r3, #0
 800a36a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800a36c:	2300      	movs	r3, #0
 800a36e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d106      	bne.n	800a384 <tcp_process+0x24>
 800a376:	4b9d      	ldr	r3, [pc, #628]	; (800a5ec <tcp_process+0x28c>)
 800a378:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800a37c:	499c      	ldr	r1, [pc, #624]	; (800a5f0 <tcp_process+0x290>)
 800a37e:	489d      	ldr	r0, [pc, #628]	; (800a5f4 <tcp_process+0x294>)
 800a380:	f006 fa48 	bl	8010814 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800a384:	4b9c      	ldr	r3, [pc, #624]	; (800a5f8 <tcp_process+0x298>)
 800a386:	781b      	ldrb	r3, [r3, #0]
 800a388:	f003 0304 	and.w	r3, r3, #4
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d04e      	beq.n	800a42e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	7d1b      	ldrb	r3, [r3, #20]
 800a394:	2b02      	cmp	r3, #2
 800a396:	d108      	bne.n	800a3aa <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a39c:	4b97      	ldr	r3, [pc, #604]	; (800a5fc <tcp_process+0x29c>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	429a      	cmp	r2, r3
 800a3a2:	d123      	bne.n	800a3ec <tcp_process+0x8c>
        acceptable = 1;
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	76fb      	strb	r3, [r7, #27]
 800a3a8:	e020      	b.n	800a3ec <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a3ae:	4b94      	ldr	r3, [pc, #592]	; (800a600 <tcp_process+0x2a0>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	429a      	cmp	r2, r3
 800a3b4:	d102      	bne.n	800a3bc <tcp_process+0x5c>
        acceptable = 1;
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	76fb      	strb	r3, [r7, #27]
 800a3ba:	e017      	b.n	800a3ec <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a3bc:	4b90      	ldr	r3, [pc, #576]	; (800a600 <tcp_process+0x2a0>)
 800a3be:	681a      	ldr	r2, [r3, #0]
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c4:	1ad3      	subs	r3, r2, r3
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	db10      	blt.n	800a3ec <tcp_process+0x8c>
 800a3ca:	4b8d      	ldr	r3, [pc, #564]	; (800a600 <tcp_process+0x2a0>)
 800a3cc:	681a      	ldr	r2, [r3, #0]
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d2:	6879      	ldr	r1, [r7, #4]
 800a3d4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a3d6:	440b      	add	r3, r1
 800a3d8:	1ad3      	subs	r3, r2, r3
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	dc06      	bgt.n	800a3ec <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	8b5b      	ldrh	r3, [r3, #26]
 800a3e2:	f043 0302 	orr.w	r3, r3, #2
 800a3e6:	b29a      	uxth	r2, r3
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800a3ec:	7efb      	ldrb	r3, [r7, #27]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d01b      	beq.n	800a42a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	7d1b      	ldrb	r3, [r3, #20]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d106      	bne.n	800a408 <tcp_process+0xa8>
 800a3fa:	4b7c      	ldr	r3, [pc, #496]	; (800a5ec <tcp_process+0x28c>)
 800a3fc:	f44f 724e 	mov.w	r2, #824	; 0x338
 800a400:	4980      	ldr	r1, [pc, #512]	; (800a604 <tcp_process+0x2a4>)
 800a402:	487c      	ldr	r0, [pc, #496]	; (800a5f4 <tcp_process+0x294>)
 800a404:	f006 fa06 	bl	8010814 <iprintf>
      recv_flags |= TF_RESET;
 800a408:	4b7f      	ldr	r3, [pc, #508]	; (800a608 <tcp_process+0x2a8>)
 800a40a:	781b      	ldrb	r3, [r3, #0]
 800a40c:	f043 0308 	orr.w	r3, r3, #8
 800a410:	b2da      	uxtb	r2, r3
 800a412:	4b7d      	ldr	r3, [pc, #500]	; (800a608 <tcp_process+0x2a8>)
 800a414:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	8b5b      	ldrh	r3, [r3, #26]
 800a41a:	f023 0301 	bic.w	r3, r3, #1
 800a41e:	b29a      	uxth	r2, r3
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800a424:	f06f 030d 	mvn.w	r3, #13
 800a428:	e37a      	b.n	800ab20 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800a42a:	2300      	movs	r3, #0
 800a42c:	e378      	b.n	800ab20 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800a42e:	4b72      	ldr	r3, [pc, #456]	; (800a5f8 <tcp_process+0x298>)
 800a430:	781b      	ldrb	r3, [r3, #0]
 800a432:	f003 0302 	and.w	r3, r3, #2
 800a436:	2b00      	cmp	r3, #0
 800a438:	d010      	beq.n	800a45c <tcp_process+0xfc>
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	7d1b      	ldrb	r3, [r3, #20]
 800a43e:	2b02      	cmp	r3, #2
 800a440:	d00c      	beq.n	800a45c <tcp_process+0xfc>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	7d1b      	ldrb	r3, [r3, #20]
 800a446:	2b03      	cmp	r3, #3
 800a448:	d008      	beq.n	800a45c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	8b5b      	ldrh	r3, [r3, #26]
 800a44e:	f043 0302 	orr.w	r3, r3, #2
 800a452:	b29a      	uxth	r2, r3
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800a458:	2300      	movs	r3, #0
 800a45a:	e361      	b.n	800ab20 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	8b5b      	ldrh	r3, [r3, #26]
 800a460:	f003 0310 	and.w	r3, r3, #16
 800a464:	2b00      	cmp	r3, #0
 800a466:	d103      	bne.n	800a470 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800a468:	4b68      	ldr	r3, [pc, #416]	; (800a60c <tcp_process+0x2ac>)
 800a46a:	681a      	ldr	r2, [r3, #0]
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2200      	movs	r2, #0
 800a474:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2200      	movs	r2, #0
 800a47c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f001 fc2f 	bl	800bce4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	7d1b      	ldrb	r3, [r3, #20]
 800a48a:	3b02      	subs	r3, #2
 800a48c:	2b07      	cmp	r3, #7
 800a48e:	f200 8337 	bhi.w	800ab00 <tcp_process+0x7a0>
 800a492:	a201      	add	r2, pc, #4	; (adr r2, 800a498 <tcp_process+0x138>)
 800a494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a498:	0800a4b9 	.word	0x0800a4b9
 800a49c:	0800a6e9 	.word	0x0800a6e9
 800a4a0:	0800a861 	.word	0x0800a861
 800a4a4:	0800a88b 	.word	0x0800a88b
 800a4a8:	0800a9af 	.word	0x0800a9af
 800a4ac:	0800a861 	.word	0x0800a861
 800a4b0:	0800aa3b 	.word	0x0800aa3b
 800a4b4:	0800aacb 	.word	0x0800aacb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800a4b8:	4b4f      	ldr	r3, [pc, #316]	; (800a5f8 <tcp_process+0x298>)
 800a4ba:	781b      	ldrb	r3, [r3, #0]
 800a4bc:	f003 0310 	and.w	r3, r3, #16
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	f000 80e4 	beq.w	800a68e <tcp_process+0x32e>
 800a4c6:	4b4c      	ldr	r3, [pc, #304]	; (800a5f8 <tcp_process+0x298>)
 800a4c8:	781b      	ldrb	r3, [r3, #0]
 800a4ca:	f003 0302 	and.w	r3, r3, #2
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	f000 80dd 	beq.w	800a68e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4d8:	1c5a      	adds	r2, r3, #1
 800a4da:	4b48      	ldr	r3, [pc, #288]	; (800a5fc <tcp_process+0x29c>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	429a      	cmp	r2, r3
 800a4e0:	f040 80d5 	bne.w	800a68e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800a4e4:	4b46      	ldr	r3, [pc, #280]	; (800a600 <tcp_process+0x2a0>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	1c5a      	adds	r2, r3, #1
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800a4f6:	4b41      	ldr	r3, [pc, #260]	; (800a5fc <tcp_process+0x29c>)
 800a4f8:	681a      	ldr	r2, [r3, #0]
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800a4fe:	4b44      	ldr	r3, [pc, #272]	; (800a610 <tcp_process+0x2b0>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	89db      	ldrh	r3, [r3, #14]
 800a504:	b29a      	uxth	r2, r3
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800a518:	4b39      	ldr	r3, [pc, #228]	; (800a600 <tcp_process+0x2a0>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	1e5a      	subs	r2, r3, #1
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2204      	movs	r2, #4
 800a526:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	3304      	adds	r3, #4
 800a530:	4618      	mov	r0, r3
 800a532:	f004 fe83 	bl	800f23c <ip4_route>
 800a536:	4601      	mov	r1, r0
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	3304      	adds	r3, #4
 800a53c:	461a      	mov	r2, r3
 800a53e:	4620      	mov	r0, r4
 800a540:	f7ff f88c 	bl	800965c <tcp_eff_send_mss_netif>
 800a544:	4603      	mov	r3, r0
 800a546:	461a      	mov	r2, r3
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a550:	009a      	lsls	r2, r3, #2
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a556:	005b      	lsls	r3, r3, #1
 800a558:	f241 111c 	movw	r1, #4380	; 0x111c
 800a55c:	428b      	cmp	r3, r1
 800a55e:	bf38      	it	cc
 800a560:	460b      	movcc	r3, r1
 800a562:	429a      	cmp	r2, r3
 800a564:	d204      	bcs.n	800a570 <tcp_process+0x210>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a56a:	009b      	lsls	r3, r3, #2
 800a56c:	b29b      	uxth	r3, r3
 800a56e:	e00d      	b.n	800a58c <tcp_process+0x22c>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a574:	005b      	lsls	r3, r3, #1
 800a576:	f241 121c 	movw	r2, #4380	; 0x111c
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d904      	bls.n	800a588 <tcp_process+0x228>
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a582:	005b      	lsls	r3, r3, #1
 800a584:	b29b      	uxth	r3, r3
 800a586:	e001      	b.n	800a58c <tcp_process+0x22c>
 800a588:	f241 131c 	movw	r3, #4380	; 0x111c
 800a58c:	687a      	ldr	r2, [r7, #4]
 800a58e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d106      	bne.n	800a5aa <tcp_process+0x24a>
 800a59c:	4b13      	ldr	r3, [pc, #76]	; (800a5ec <tcp_process+0x28c>)
 800a59e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800a5a2:	491c      	ldr	r1, [pc, #112]	; (800a614 <tcp_process+0x2b4>)
 800a5a4:	4813      	ldr	r0, [pc, #76]	; (800a5f4 <tcp_process+0x294>)
 800a5a6:	f006 f935 	bl	8010814 <iprintf>
        --pcb->snd_queuelen;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a5b0:	3b01      	subs	r3, #1
 800a5b2:	b29a      	uxth	r2, r3
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5be:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800a5c0:	69fb      	ldr	r3, [r7, #28]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d12a      	bne.n	800a61c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5ca:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800a5cc:	69fb      	ldr	r3, [r7, #28]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d106      	bne.n	800a5e0 <tcp_process+0x280>
 800a5d2:	4b06      	ldr	r3, [pc, #24]	; (800a5ec <tcp_process+0x28c>)
 800a5d4:	f44f 725d 	mov.w	r2, #884	; 0x374
 800a5d8:	490f      	ldr	r1, [pc, #60]	; (800a618 <tcp_process+0x2b8>)
 800a5da:	4806      	ldr	r0, [pc, #24]	; (800a5f4 <tcp_process+0x294>)
 800a5dc:	f006 f91a 	bl	8010814 <iprintf>
          pcb->unsent = rseg->next;
 800a5e0:	69fb      	ldr	r3, [r7, #28]
 800a5e2:	681a      	ldr	r2, [r3, #0]
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	66da      	str	r2, [r3, #108]	; 0x6c
 800a5e8:	e01c      	b.n	800a624 <tcp_process+0x2c4>
 800a5ea:	bf00      	nop
 800a5ec:	080128b0 	.word	0x080128b0
 800a5f0:	08012ae8 	.word	0x08012ae8
 800a5f4:	080128fc 	.word	0x080128fc
 800a5f8:	200088e8 	.word	0x200088e8
 800a5fc:	200088e0 	.word	0x200088e0
 800a600:	200088dc 	.word	0x200088dc
 800a604:	08012b04 	.word	0x08012b04
 800a608:	200088e9 	.word	0x200088e9
 800a60c:	200088a4 	.word	0x200088a4
 800a610:	200088cc 	.word	0x200088cc
 800a614:	08012b24 	.word	0x08012b24
 800a618:	08012b3c 	.word	0x08012b3c
        } else {
          pcb->unacked = rseg->next;
 800a61c:	69fb      	ldr	r3, [r7, #28]
 800a61e:	681a      	ldr	r2, [r3, #0]
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800a624:	69f8      	ldr	r0, [r7, #28]
 800a626:	f7fe fd22 	bl	800906e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d104      	bne.n	800a63c <tcp_process+0x2dc>
          pcb->rtime = -1;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a638:	861a      	strh	r2, [r3, #48]	; 0x30
 800a63a:	e006      	b.n	800a64a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2200      	movs	r2, #0
 800a640:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2200      	movs	r2, #0
 800a646:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a650:	2b00      	cmp	r3, #0
 800a652:	d00a      	beq.n	800a66a <tcp_process+0x30a>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a65a:	687a      	ldr	r2, [r7, #4]
 800a65c:	6910      	ldr	r0, [r2, #16]
 800a65e:	2200      	movs	r2, #0
 800a660:	6879      	ldr	r1, [r7, #4]
 800a662:	4798      	blx	r3
 800a664:	4603      	mov	r3, r0
 800a666:	76bb      	strb	r3, [r7, #26]
 800a668:	e001      	b.n	800a66e <tcp_process+0x30e>
 800a66a:	2300      	movs	r3, #0
 800a66c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800a66e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a672:	f113 0f0d 	cmn.w	r3, #13
 800a676:	d102      	bne.n	800a67e <tcp_process+0x31e>
          return ERR_ABRT;
 800a678:	f06f 030c 	mvn.w	r3, #12
 800a67c:	e250      	b.n	800ab20 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	8b5b      	ldrh	r3, [r3, #26]
 800a682:	f043 0302 	orr.w	r3, r3, #2
 800a686:	b29a      	uxth	r2, r3
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800a68c:	e23a      	b.n	800ab04 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800a68e:	4b98      	ldr	r3, [pc, #608]	; (800a8f0 <tcp_process+0x590>)
 800a690:	781b      	ldrb	r3, [r3, #0]
 800a692:	f003 0310 	and.w	r3, r3, #16
 800a696:	2b00      	cmp	r3, #0
 800a698:	f000 8234 	beq.w	800ab04 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a69c:	4b95      	ldr	r3, [pc, #596]	; (800a8f4 <tcp_process+0x594>)
 800a69e:	6819      	ldr	r1, [r3, #0]
 800a6a0:	4b95      	ldr	r3, [pc, #596]	; (800a8f8 <tcp_process+0x598>)
 800a6a2:	881b      	ldrh	r3, [r3, #0]
 800a6a4:	461a      	mov	r2, r3
 800a6a6:	4b95      	ldr	r3, [pc, #596]	; (800a8fc <tcp_process+0x59c>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a6ac:	4b94      	ldr	r3, [pc, #592]	; (800a900 <tcp_process+0x5a0>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a6b0:	885b      	ldrh	r3, [r3, #2]
 800a6b2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a6b4:	4a92      	ldr	r2, [pc, #584]	; (800a900 <tcp_process+0x5a0>)
 800a6b6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a6b8:	8812      	ldrh	r2, [r2, #0]
 800a6ba:	b292      	uxth	r2, r2
 800a6bc:	9202      	str	r2, [sp, #8]
 800a6be:	9301      	str	r3, [sp, #4]
 800a6c0:	4b90      	ldr	r3, [pc, #576]	; (800a904 <tcp_process+0x5a4>)
 800a6c2:	9300      	str	r3, [sp, #0]
 800a6c4:	4b90      	ldr	r3, [pc, #576]	; (800a908 <tcp_process+0x5a8>)
 800a6c6:	4602      	mov	r2, r0
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	f002 fc85 	bl	800cfd8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a6d4:	2b05      	cmp	r3, #5
 800a6d6:	f200 8215 	bhi.w	800ab04 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2200      	movs	r2, #0
 800a6de:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f002 fa51 	bl	800cb88 <tcp_rexmit_rto>
      break;
 800a6e6:	e20d      	b.n	800ab04 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800a6e8:	4b81      	ldr	r3, [pc, #516]	; (800a8f0 <tcp_process+0x590>)
 800a6ea:	781b      	ldrb	r3, [r3, #0]
 800a6ec:	f003 0310 	and.w	r3, r3, #16
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	f000 80a1 	beq.w	800a838 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a6f6:	4b7f      	ldr	r3, [pc, #508]	; (800a8f4 <tcp_process+0x594>)
 800a6f8:	681a      	ldr	r2, [r3, #0]
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6fe:	1ad3      	subs	r3, r2, r3
 800a700:	3b01      	subs	r3, #1
 800a702:	2b00      	cmp	r3, #0
 800a704:	db7e      	blt.n	800a804 <tcp_process+0x4a4>
 800a706:	4b7b      	ldr	r3, [pc, #492]	; (800a8f4 <tcp_process+0x594>)
 800a708:	681a      	ldr	r2, [r3, #0]
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a70e:	1ad3      	subs	r3, r2, r3
 800a710:	2b00      	cmp	r3, #0
 800a712:	dc77      	bgt.n	800a804 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2204      	movs	r2, #4
 800a718:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d102      	bne.n	800a728 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800a722:	23fa      	movs	r3, #250	; 0xfa
 800a724:	76bb      	strb	r3, [r7, #26]
 800a726:	e01d      	b.n	800a764 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a72c:	699b      	ldr	r3, [r3, #24]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d106      	bne.n	800a740 <tcp_process+0x3e0>
 800a732:	4b76      	ldr	r3, [pc, #472]	; (800a90c <tcp_process+0x5ac>)
 800a734:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800a738:	4975      	ldr	r1, [pc, #468]	; (800a910 <tcp_process+0x5b0>)
 800a73a:	4876      	ldr	r0, [pc, #472]	; (800a914 <tcp_process+0x5b4>)
 800a73c:	f006 f86a 	bl	8010814 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a744:	699b      	ldr	r3, [r3, #24]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d00a      	beq.n	800a760 <tcp_process+0x400>
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a74e:	699b      	ldr	r3, [r3, #24]
 800a750:	687a      	ldr	r2, [r7, #4]
 800a752:	6910      	ldr	r0, [r2, #16]
 800a754:	2200      	movs	r2, #0
 800a756:	6879      	ldr	r1, [r7, #4]
 800a758:	4798      	blx	r3
 800a75a:	4603      	mov	r3, r0
 800a75c:	76bb      	strb	r3, [r7, #26]
 800a75e:	e001      	b.n	800a764 <tcp_process+0x404>
 800a760:	23f0      	movs	r3, #240	; 0xf0
 800a762:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800a764:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d00a      	beq.n	800a782 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800a76c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a770:	f113 0f0d 	cmn.w	r3, #13
 800a774:	d002      	beq.n	800a77c <tcp_process+0x41c>
              tcp_abort(pcb);
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f7fd ff8e 	bl	8008698 <tcp_abort>
            }
            return ERR_ABRT;
 800a77c:	f06f 030c 	mvn.w	r3, #12
 800a780:	e1ce      	b.n	800ab20 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f000 fae0 	bl	800ad48 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800a788:	4b63      	ldr	r3, [pc, #396]	; (800a918 <tcp_process+0x5b8>)
 800a78a:	881b      	ldrh	r3, [r3, #0]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d005      	beq.n	800a79c <tcp_process+0x43c>
            recv_acked--;
 800a790:	4b61      	ldr	r3, [pc, #388]	; (800a918 <tcp_process+0x5b8>)
 800a792:	881b      	ldrh	r3, [r3, #0]
 800a794:	3b01      	subs	r3, #1
 800a796:	b29a      	uxth	r2, r3
 800a798:	4b5f      	ldr	r3, [pc, #380]	; (800a918 <tcp_process+0x5b8>)
 800a79a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a7a0:	009a      	lsls	r2, r3, #2
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a7a6:	005b      	lsls	r3, r3, #1
 800a7a8:	f241 111c 	movw	r1, #4380	; 0x111c
 800a7ac:	428b      	cmp	r3, r1
 800a7ae:	bf38      	it	cc
 800a7b0:	460b      	movcc	r3, r1
 800a7b2:	429a      	cmp	r2, r3
 800a7b4:	d204      	bcs.n	800a7c0 <tcp_process+0x460>
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a7ba:	009b      	lsls	r3, r3, #2
 800a7bc:	b29b      	uxth	r3, r3
 800a7be:	e00d      	b.n	800a7dc <tcp_process+0x47c>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a7c4:	005b      	lsls	r3, r3, #1
 800a7c6:	f241 121c 	movw	r2, #4380	; 0x111c
 800a7ca:	4293      	cmp	r3, r2
 800a7cc:	d904      	bls.n	800a7d8 <tcp_process+0x478>
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a7d2:	005b      	lsls	r3, r3, #1
 800a7d4:	b29b      	uxth	r3, r3
 800a7d6:	e001      	b.n	800a7dc <tcp_process+0x47c>
 800a7d8:	f241 131c 	movw	r3, #4380	; 0x111c
 800a7dc:	687a      	ldr	r2, [r7, #4]
 800a7de:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800a7e2:	4b4e      	ldr	r3, [pc, #312]	; (800a91c <tcp_process+0x5bc>)
 800a7e4:	781b      	ldrb	r3, [r3, #0]
 800a7e6:	f003 0320 	and.w	r3, r3, #32
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d037      	beq.n	800a85e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	8b5b      	ldrh	r3, [r3, #26]
 800a7f2:	f043 0302 	orr.w	r3, r3, #2
 800a7f6:	b29a      	uxth	r2, r3
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2207      	movs	r2, #7
 800a800:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800a802:	e02c      	b.n	800a85e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a804:	4b3b      	ldr	r3, [pc, #236]	; (800a8f4 <tcp_process+0x594>)
 800a806:	6819      	ldr	r1, [r3, #0]
 800a808:	4b3b      	ldr	r3, [pc, #236]	; (800a8f8 <tcp_process+0x598>)
 800a80a:	881b      	ldrh	r3, [r3, #0]
 800a80c:	461a      	mov	r2, r3
 800a80e:	4b3b      	ldr	r3, [pc, #236]	; (800a8fc <tcp_process+0x59c>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a814:	4b3a      	ldr	r3, [pc, #232]	; (800a900 <tcp_process+0x5a0>)
 800a816:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a818:	885b      	ldrh	r3, [r3, #2]
 800a81a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a81c:	4a38      	ldr	r2, [pc, #224]	; (800a900 <tcp_process+0x5a0>)
 800a81e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a820:	8812      	ldrh	r2, [r2, #0]
 800a822:	b292      	uxth	r2, r2
 800a824:	9202      	str	r2, [sp, #8]
 800a826:	9301      	str	r3, [sp, #4]
 800a828:	4b36      	ldr	r3, [pc, #216]	; (800a904 <tcp_process+0x5a4>)
 800a82a:	9300      	str	r3, [sp, #0]
 800a82c:	4b36      	ldr	r3, [pc, #216]	; (800a908 <tcp_process+0x5a8>)
 800a82e:	4602      	mov	r2, r0
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f002 fbd1 	bl	800cfd8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800a836:	e167      	b.n	800ab08 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800a838:	4b2d      	ldr	r3, [pc, #180]	; (800a8f0 <tcp_process+0x590>)
 800a83a:	781b      	ldrb	r3, [r3, #0]
 800a83c:	f003 0302 	and.w	r3, r3, #2
 800a840:	2b00      	cmp	r3, #0
 800a842:	f000 8161 	beq.w	800ab08 <tcp_process+0x7a8>
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a84a:	1e5a      	subs	r2, r3, #1
 800a84c:	4b2b      	ldr	r3, [pc, #172]	; (800a8fc <tcp_process+0x59c>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	429a      	cmp	r2, r3
 800a852:	f040 8159 	bne.w	800ab08 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f002 f9b8 	bl	800cbcc <tcp_rexmit>
      break;
 800a85c:	e154      	b.n	800ab08 <tcp_process+0x7a8>
 800a85e:	e153      	b.n	800ab08 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f000 fa71 	bl	800ad48 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800a866:	4b2d      	ldr	r3, [pc, #180]	; (800a91c <tcp_process+0x5bc>)
 800a868:	781b      	ldrb	r3, [r3, #0]
 800a86a:	f003 0320 	and.w	r3, r3, #32
 800a86e:	2b00      	cmp	r3, #0
 800a870:	f000 814c 	beq.w	800ab0c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	8b5b      	ldrh	r3, [r3, #26]
 800a878:	f043 0302 	orr.w	r3, r3, #2
 800a87c:	b29a      	uxth	r2, r3
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2207      	movs	r2, #7
 800a886:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a888:	e140      	b.n	800ab0c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f000 fa5c 	bl	800ad48 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a890:	4b22      	ldr	r3, [pc, #136]	; (800a91c <tcp_process+0x5bc>)
 800a892:	781b      	ldrb	r3, [r3, #0]
 800a894:	f003 0320 	and.w	r3, r3, #32
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d071      	beq.n	800a980 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a89c:	4b14      	ldr	r3, [pc, #80]	; (800a8f0 <tcp_process+0x590>)
 800a89e:	781b      	ldrb	r3, [r3, #0]
 800a8a0:	f003 0310 	and.w	r3, r3, #16
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d060      	beq.n	800a96a <tcp_process+0x60a>
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a8ac:	4b11      	ldr	r3, [pc, #68]	; (800a8f4 <tcp_process+0x594>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	429a      	cmp	r2, r3
 800a8b2:	d15a      	bne.n	800a96a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d156      	bne.n	800a96a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	8b5b      	ldrh	r3, [r3, #26]
 800a8c0:	f043 0302 	orr.w	r3, r3, #2
 800a8c4:	b29a      	uxth	r2, r3
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f7fe fdbc 	bl	8009448 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800a8d0:	4b13      	ldr	r3, [pc, #76]	; (800a920 <tcp_process+0x5c0>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	687a      	ldr	r2, [r7, #4]
 800a8d6:	429a      	cmp	r2, r3
 800a8d8:	d105      	bne.n	800a8e6 <tcp_process+0x586>
 800a8da:	4b11      	ldr	r3, [pc, #68]	; (800a920 <tcp_process+0x5c0>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	68db      	ldr	r3, [r3, #12]
 800a8e0:	4a0f      	ldr	r2, [pc, #60]	; (800a920 <tcp_process+0x5c0>)
 800a8e2:	6013      	str	r3, [r2, #0]
 800a8e4:	e02e      	b.n	800a944 <tcp_process+0x5e4>
 800a8e6:	4b0e      	ldr	r3, [pc, #56]	; (800a920 <tcp_process+0x5c0>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	617b      	str	r3, [r7, #20]
 800a8ec:	e027      	b.n	800a93e <tcp_process+0x5de>
 800a8ee:	bf00      	nop
 800a8f0:	200088e8 	.word	0x200088e8
 800a8f4:	200088e0 	.word	0x200088e0
 800a8f8:	200088e6 	.word	0x200088e6
 800a8fc:	200088dc 	.word	0x200088dc
 800a900:	200088cc 	.word	0x200088cc
 800a904:	20005344 	.word	0x20005344
 800a908:	20005348 	.word	0x20005348
 800a90c:	080128b0 	.word	0x080128b0
 800a910:	08012b50 	.word	0x08012b50
 800a914:	080128fc 	.word	0x080128fc
 800a918:	200088e4 	.word	0x200088e4
 800a91c:	200088e9 	.word	0x200088e9
 800a920:	200088b0 	.word	0x200088b0
 800a924:	697b      	ldr	r3, [r7, #20]
 800a926:	68db      	ldr	r3, [r3, #12]
 800a928:	687a      	ldr	r2, [r7, #4]
 800a92a:	429a      	cmp	r2, r3
 800a92c:	d104      	bne.n	800a938 <tcp_process+0x5d8>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	68da      	ldr	r2, [r3, #12]
 800a932:	697b      	ldr	r3, [r7, #20]
 800a934:	60da      	str	r2, [r3, #12]
 800a936:	e005      	b.n	800a944 <tcp_process+0x5e4>
 800a938:	697b      	ldr	r3, [r7, #20]
 800a93a:	68db      	ldr	r3, [r3, #12]
 800a93c:	617b      	str	r3, [r7, #20]
 800a93e:	697b      	ldr	r3, [r7, #20]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d1ef      	bne.n	800a924 <tcp_process+0x5c4>
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2200      	movs	r2, #0
 800a948:	60da      	str	r2, [r3, #12]
 800a94a:	4b77      	ldr	r3, [pc, #476]	; (800ab28 <tcp_process+0x7c8>)
 800a94c:	2201      	movs	r2, #1
 800a94e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	220a      	movs	r2, #10
 800a954:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800a956:	4b75      	ldr	r3, [pc, #468]	; (800ab2c <tcp_process+0x7cc>)
 800a958:	681a      	ldr	r2, [r3, #0]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	60da      	str	r2, [r3, #12]
 800a95e:	4a73      	ldr	r2, [pc, #460]	; (800ab2c <tcp_process+0x7cc>)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6013      	str	r3, [r2, #0]
 800a964:	f002 fcfa 	bl	800d35c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800a968:	e0d2      	b.n	800ab10 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	8b5b      	ldrh	r3, [r3, #26]
 800a96e:	f043 0302 	orr.w	r3, r3, #2
 800a972:	b29a      	uxth	r2, r3
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2208      	movs	r2, #8
 800a97c:	751a      	strb	r2, [r3, #20]
      break;
 800a97e:	e0c7      	b.n	800ab10 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a980:	4b6b      	ldr	r3, [pc, #428]	; (800ab30 <tcp_process+0x7d0>)
 800a982:	781b      	ldrb	r3, [r3, #0]
 800a984:	f003 0310 	and.w	r3, r3, #16
 800a988:	2b00      	cmp	r3, #0
 800a98a:	f000 80c1 	beq.w	800ab10 <tcp_process+0x7b0>
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a992:	4b68      	ldr	r3, [pc, #416]	; (800ab34 <tcp_process+0x7d4>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	429a      	cmp	r2, r3
 800a998:	f040 80ba 	bne.w	800ab10 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	f040 80b5 	bne.w	800ab10 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2206      	movs	r2, #6
 800a9aa:	751a      	strb	r2, [r3, #20]
      break;
 800a9ac:	e0b0      	b.n	800ab10 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f000 f9ca 	bl	800ad48 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a9b4:	4b60      	ldr	r3, [pc, #384]	; (800ab38 <tcp_process+0x7d8>)
 800a9b6:	781b      	ldrb	r3, [r3, #0]
 800a9b8:	f003 0320 	and.w	r3, r3, #32
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	f000 80a9 	beq.w	800ab14 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	8b5b      	ldrh	r3, [r3, #26]
 800a9c6:	f043 0302 	orr.w	r3, r3, #2
 800a9ca:	b29a      	uxth	r2, r3
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f7fe fd39 	bl	8009448 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a9d6:	4b59      	ldr	r3, [pc, #356]	; (800ab3c <tcp_process+0x7dc>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	687a      	ldr	r2, [r7, #4]
 800a9dc:	429a      	cmp	r2, r3
 800a9de:	d105      	bne.n	800a9ec <tcp_process+0x68c>
 800a9e0:	4b56      	ldr	r3, [pc, #344]	; (800ab3c <tcp_process+0x7dc>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	68db      	ldr	r3, [r3, #12]
 800a9e6:	4a55      	ldr	r2, [pc, #340]	; (800ab3c <tcp_process+0x7dc>)
 800a9e8:	6013      	str	r3, [r2, #0]
 800a9ea:	e013      	b.n	800aa14 <tcp_process+0x6b4>
 800a9ec:	4b53      	ldr	r3, [pc, #332]	; (800ab3c <tcp_process+0x7dc>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	613b      	str	r3, [r7, #16]
 800a9f2:	e00c      	b.n	800aa0e <tcp_process+0x6ae>
 800a9f4:	693b      	ldr	r3, [r7, #16]
 800a9f6:	68db      	ldr	r3, [r3, #12]
 800a9f8:	687a      	ldr	r2, [r7, #4]
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	d104      	bne.n	800aa08 <tcp_process+0x6a8>
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	68da      	ldr	r2, [r3, #12]
 800aa02:	693b      	ldr	r3, [r7, #16]
 800aa04:	60da      	str	r2, [r3, #12]
 800aa06:	e005      	b.n	800aa14 <tcp_process+0x6b4>
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	68db      	ldr	r3, [r3, #12]
 800aa0c:	613b      	str	r3, [r7, #16]
 800aa0e:	693b      	ldr	r3, [r7, #16]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d1ef      	bne.n	800a9f4 <tcp_process+0x694>
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2200      	movs	r2, #0
 800aa18:	60da      	str	r2, [r3, #12]
 800aa1a:	4b43      	ldr	r3, [pc, #268]	; (800ab28 <tcp_process+0x7c8>)
 800aa1c:	2201      	movs	r2, #1
 800aa1e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	220a      	movs	r2, #10
 800aa24:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800aa26:	4b41      	ldr	r3, [pc, #260]	; (800ab2c <tcp_process+0x7cc>)
 800aa28:	681a      	ldr	r2, [r3, #0]
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	60da      	str	r2, [r3, #12]
 800aa2e:	4a3f      	ldr	r2, [pc, #252]	; (800ab2c <tcp_process+0x7cc>)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6013      	str	r3, [r2, #0]
 800aa34:	f002 fc92 	bl	800d35c <tcp_timer_needed>
      }
      break;
 800aa38:	e06c      	b.n	800ab14 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	f000 f984 	bl	800ad48 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800aa40:	4b3b      	ldr	r3, [pc, #236]	; (800ab30 <tcp_process+0x7d0>)
 800aa42:	781b      	ldrb	r3, [r3, #0]
 800aa44:	f003 0310 	and.w	r3, r3, #16
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d065      	beq.n	800ab18 <tcp_process+0x7b8>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aa50:	4b38      	ldr	r3, [pc, #224]	; (800ab34 <tcp_process+0x7d4>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	429a      	cmp	r2, r3
 800aa56:	d15f      	bne.n	800ab18 <tcp_process+0x7b8>
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d15b      	bne.n	800ab18 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f7fe fcf1 	bl	8009448 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800aa66:	4b35      	ldr	r3, [pc, #212]	; (800ab3c <tcp_process+0x7dc>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	687a      	ldr	r2, [r7, #4]
 800aa6c:	429a      	cmp	r2, r3
 800aa6e:	d105      	bne.n	800aa7c <tcp_process+0x71c>
 800aa70:	4b32      	ldr	r3, [pc, #200]	; (800ab3c <tcp_process+0x7dc>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	68db      	ldr	r3, [r3, #12]
 800aa76:	4a31      	ldr	r2, [pc, #196]	; (800ab3c <tcp_process+0x7dc>)
 800aa78:	6013      	str	r3, [r2, #0]
 800aa7a:	e013      	b.n	800aaa4 <tcp_process+0x744>
 800aa7c:	4b2f      	ldr	r3, [pc, #188]	; (800ab3c <tcp_process+0x7dc>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	60fb      	str	r3, [r7, #12]
 800aa82:	e00c      	b.n	800aa9e <tcp_process+0x73e>
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	68db      	ldr	r3, [r3, #12]
 800aa88:	687a      	ldr	r2, [r7, #4]
 800aa8a:	429a      	cmp	r2, r3
 800aa8c:	d104      	bne.n	800aa98 <tcp_process+0x738>
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	68da      	ldr	r2, [r3, #12]
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	60da      	str	r2, [r3, #12]
 800aa96:	e005      	b.n	800aaa4 <tcp_process+0x744>
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	68db      	ldr	r3, [r3, #12]
 800aa9c:	60fb      	str	r3, [r7, #12]
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d1ef      	bne.n	800aa84 <tcp_process+0x724>
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	60da      	str	r2, [r3, #12]
 800aaaa:	4b1f      	ldr	r3, [pc, #124]	; (800ab28 <tcp_process+0x7c8>)
 800aaac:	2201      	movs	r2, #1
 800aaae:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	220a      	movs	r2, #10
 800aab4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800aab6:	4b1d      	ldr	r3, [pc, #116]	; (800ab2c <tcp_process+0x7cc>)
 800aab8:	681a      	ldr	r2, [r3, #0]
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	60da      	str	r2, [r3, #12]
 800aabe:	4a1b      	ldr	r2, [pc, #108]	; (800ab2c <tcp_process+0x7cc>)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6013      	str	r3, [r2, #0]
 800aac4:	f002 fc4a 	bl	800d35c <tcp_timer_needed>
      }
      break;
 800aac8:	e026      	b.n	800ab18 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	f000 f93c 	bl	800ad48 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800aad0:	4b17      	ldr	r3, [pc, #92]	; (800ab30 <tcp_process+0x7d0>)
 800aad2:	781b      	ldrb	r3, [r3, #0]
 800aad4:	f003 0310 	and.w	r3, r3, #16
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d01f      	beq.n	800ab1c <tcp_process+0x7bc>
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aae0:	4b14      	ldr	r3, [pc, #80]	; (800ab34 <tcp_process+0x7d4>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	429a      	cmp	r2, r3
 800aae6:	d119      	bne.n	800ab1c <tcp_process+0x7bc>
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d115      	bne.n	800ab1c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800aaf0:	4b11      	ldr	r3, [pc, #68]	; (800ab38 <tcp_process+0x7d8>)
 800aaf2:	781b      	ldrb	r3, [r3, #0]
 800aaf4:	f043 0310 	orr.w	r3, r3, #16
 800aaf8:	b2da      	uxtb	r2, r3
 800aafa:	4b0f      	ldr	r3, [pc, #60]	; (800ab38 <tcp_process+0x7d8>)
 800aafc:	701a      	strb	r2, [r3, #0]
      }
      break;
 800aafe:	e00d      	b.n	800ab1c <tcp_process+0x7bc>
    default:
      break;
 800ab00:	bf00      	nop
 800ab02:	e00c      	b.n	800ab1e <tcp_process+0x7be>
      break;
 800ab04:	bf00      	nop
 800ab06:	e00a      	b.n	800ab1e <tcp_process+0x7be>
      break;
 800ab08:	bf00      	nop
 800ab0a:	e008      	b.n	800ab1e <tcp_process+0x7be>
      break;
 800ab0c:	bf00      	nop
 800ab0e:	e006      	b.n	800ab1e <tcp_process+0x7be>
      break;
 800ab10:	bf00      	nop
 800ab12:	e004      	b.n	800ab1e <tcp_process+0x7be>
      break;
 800ab14:	bf00      	nop
 800ab16:	e002      	b.n	800ab1e <tcp_process+0x7be>
      break;
 800ab18:	bf00      	nop
 800ab1a:	e000      	b.n	800ab1e <tcp_process+0x7be>
      break;
 800ab1c:	bf00      	nop
  }
  return ERR_OK;
 800ab1e:	2300      	movs	r3, #0
}
 800ab20:	4618      	mov	r0, r3
 800ab22:	3724      	adds	r7, #36	; 0x24
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd90      	pop	{r4, r7, pc}
 800ab28:	200088b8 	.word	0x200088b8
 800ab2c:	200088b4 	.word	0x200088b4
 800ab30:	200088e8 	.word	0x200088e8
 800ab34:	200088e0 	.word	0x200088e0
 800ab38:	200088e9 	.word	0x200088e9
 800ab3c:	200088b0 	.word	0x200088b0

0800ab40 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800ab40:	b590      	push	{r4, r7, lr}
 800ab42:	b085      	sub	sp, #20
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
 800ab48:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d106      	bne.n	800ab5e <tcp_oos_insert_segment+0x1e>
 800ab50:	4b3b      	ldr	r3, [pc, #236]	; (800ac40 <tcp_oos_insert_segment+0x100>)
 800ab52:	f240 421f 	movw	r2, #1055	; 0x41f
 800ab56:	493b      	ldr	r1, [pc, #236]	; (800ac44 <tcp_oos_insert_segment+0x104>)
 800ab58:	483b      	ldr	r0, [pc, #236]	; (800ac48 <tcp_oos_insert_segment+0x108>)
 800ab5a:	f005 fe5b 	bl	8010814 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	68db      	ldr	r3, [r3, #12]
 800ab62:	899b      	ldrh	r3, [r3, #12]
 800ab64:	b29b      	uxth	r3, r3
 800ab66:	4618      	mov	r0, r3
 800ab68:	f7fb fc0e 	bl	8006388 <lwip_htons>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	b2db      	uxtb	r3, r3
 800ab70:	f003 0301 	and.w	r3, r3, #1
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d028      	beq.n	800abca <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800ab78:	6838      	ldr	r0, [r7, #0]
 800ab7a:	f7fe fa63 	bl	8009044 <tcp_segs_free>
    next = NULL;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	603b      	str	r3, [r7, #0]
 800ab82:	e056      	b.n	800ac32 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	68db      	ldr	r3, [r3, #12]
 800ab88:	899b      	ldrh	r3, [r3, #12]
 800ab8a:	b29b      	uxth	r3, r3
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f7fb fbfb 	bl	8006388 <lwip_htons>
 800ab92:	4603      	mov	r3, r0
 800ab94:	b2db      	uxtb	r3, r3
 800ab96:	f003 0301 	and.w	r3, r3, #1
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d00d      	beq.n	800abba <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	68db      	ldr	r3, [r3, #12]
 800aba2:	899b      	ldrh	r3, [r3, #12]
 800aba4:	b29c      	uxth	r4, r3
 800aba6:	2001      	movs	r0, #1
 800aba8:	f7fb fbee 	bl	8006388 <lwip_htons>
 800abac:	4603      	mov	r3, r0
 800abae:	461a      	mov	r2, r3
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	68db      	ldr	r3, [r3, #12]
 800abb4:	4322      	orrs	r2, r4
 800abb6:	b292      	uxth	r2, r2
 800abb8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800abc4:	68f8      	ldr	r0, [r7, #12]
 800abc6:	f7fe fa52 	bl	800906e <tcp_seg_free>
    while (next &&
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d00e      	beq.n	800abee <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	891b      	ldrh	r3, [r3, #8]
 800abd4:	461a      	mov	r2, r3
 800abd6:	4b1d      	ldr	r3, [pc, #116]	; (800ac4c <tcp_oos_insert_segment+0x10c>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	441a      	add	r2, r3
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	68db      	ldr	r3, [r3, #12]
 800abe0:	685b      	ldr	r3, [r3, #4]
 800abe2:	6839      	ldr	r1, [r7, #0]
 800abe4:	8909      	ldrh	r1, [r1, #8]
 800abe6:	440b      	add	r3, r1
 800abe8:	1ad3      	subs	r3, r2, r3
    while (next &&
 800abea:	2b00      	cmp	r3, #0
 800abec:	daca      	bge.n	800ab84 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d01e      	beq.n	800ac32 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	891b      	ldrh	r3, [r3, #8]
 800abf8:	461a      	mov	r2, r3
 800abfa:	4b14      	ldr	r3, [pc, #80]	; (800ac4c <tcp_oos_insert_segment+0x10c>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	441a      	add	r2, r3
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	68db      	ldr	r3, [r3, #12]
 800ac04:	685b      	ldr	r3, [r3, #4]
 800ac06:	1ad3      	subs	r3, r2, r3
    if (next &&
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	dd12      	ble.n	800ac32 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	68db      	ldr	r3, [r3, #12]
 800ac10:	685b      	ldr	r3, [r3, #4]
 800ac12:	b29a      	uxth	r2, r3
 800ac14:	4b0d      	ldr	r3, [pc, #52]	; (800ac4c <tcp_oos_insert_segment+0x10c>)
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	b29b      	uxth	r3, r3
 800ac1a:	1ad3      	subs	r3, r2, r3
 800ac1c:	b29a      	uxth	r2, r3
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	685a      	ldr	r2, [r3, #4]
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	891b      	ldrh	r3, [r3, #8]
 800ac2a:	4619      	mov	r1, r3
 800ac2c:	4610      	mov	r0, r2
 800ac2e:	f7fc fd83 	bl	8007738 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	683a      	ldr	r2, [r7, #0]
 800ac36:	601a      	str	r2, [r3, #0]
}
 800ac38:	bf00      	nop
 800ac3a:	3714      	adds	r7, #20
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd90      	pop	{r4, r7, pc}
 800ac40:	080128b0 	.word	0x080128b0
 800ac44:	08012b70 	.word	0x08012b70
 800ac48:	080128fc 	.word	0x080128fc
 800ac4c:	200088dc 	.word	0x200088dc

0800ac50 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800ac50:	b5b0      	push	{r4, r5, r7, lr}
 800ac52:	b086      	sub	sp, #24
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	60f8      	str	r0, [r7, #12]
 800ac58:	60b9      	str	r1, [r7, #8]
 800ac5a:	607a      	str	r2, [r7, #4]
 800ac5c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800ac5e:	e03e      	b.n	800acde <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800ac6a:	697b      	ldr	r3, [r7, #20]
 800ac6c:	685b      	ldr	r3, [r3, #4]
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f7fc ff70 	bl	8007b54 <pbuf_clen>
 800ac74:	4603      	mov	r3, r0
 800ac76:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ac7e:	8a7a      	ldrh	r2, [r7, #18]
 800ac80:	429a      	cmp	r2, r3
 800ac82:	d906      	bls.n	800ac92 <tcp_free_acked_segments+0x42>
 800ac84:	4b2a      	ldr	r3, [pc, #168]	; (800ad30 <tcp_free_acked_segments+0xe0>)
 800ac86:	f240 4257 	movw	r2, #1111	; 0x457
 800ac8a:	492a      	ldr	r1, [pc, #168]	; (800ad34 <tcp_free_acked_segments+0xe4>)
 800ac8c:	482a      	ldr	r0, [pc, #168]	; (800ad38 <tcp_free_acked_segments+0xe8>)
 800ac8e:	f005 fdc1 	bl	8010814 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800ac98:	8a7b      	ldrh	r3, [r7, #18]
 800ac9a:	1ad3      	subs	r3, r2, r3
 800ac9c:	b29a      	uxth	r2, r3
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800aca4:	697b      	ldr	r3, [r7, #20]
 800aca6:	891a      	ldrh	r2, [r3, #8]
 800aca8:	4b24      	ldr	r3, [pc, #144]	; (800ad3c <tcp_free_acked_segments+0xec>)
 800acaa:	881b      	ldrh	r3, [r3, #0]
 800acac:	4413      	add	r3, r2
 800acae:	b29a      	uxth	r2, r3
 800acb0:	4b22      	ldr	r3, [pc, #136]	; (800ad3c <tcp_free_acked_segments+0xec>)
 800acb2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800acb4:	6978      	ldr	r0, [r7, #20]
 800acb6:	f7fe f9da 	bl	800906e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d00c      	beq.n	800acde <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d109      	bne.n	800acde <tcp_free_acked_segments+0x8e>
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d106      	bne.n	800acde <tcp_free_acked_segments+0x8e>
 800acd0:	4b17      	ldr	r3, [pc, #92]	; (800ad30 <tcp_free_acked_segments+0xe0>)
 800acd2:	f240 4261 	movw	r2, #1121	; 0x461
 800acd6:	491a      	ldr	r1, [pc, #104]	; (800ad40 <tcp_free_acked_segments+0xf0>)
 800acd8:	4817      	ldr	r0, [pc, #92]	; (800ad38 <tcp_free_acked_segments+0xe8>)
 800acda:	f005 fd9b 	bl	8010814 <iprintf>
  while (seg_list != NULL &&
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d020      	beq.n	800ad26 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	68db      	ldr	r3, [r3, #12]
 800ace8:	685b      	ldr	r3, [r3, #4]
 800acea:	4618      	mov	r0, r3
 800acec:	f7fb fb61 	bl	80063b2 <lwip_htonl>
 800acf0:	4604      	mov	r4, r0
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	891b      	ldrh	r3, [r3, #8]
 800acf6:	461d      	mov	r5, r3
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	68db      	ldr	r3, [r3, #12]
 800acfc:	899b      	ldrh	r3, [r3, #12]
 800acfe:	b29b      	uxth	r3, r3
 800ad00:	4618      	mov	r0, r3
 800ad02:	f7fb fb41 	bl	8006388 <lwip_htons>
 800ad06:	4603      	mov	r3, r0
 800ad08:	b2db      	uxtb	r3, r3
 800ad0a:	f003 0303 	and.w	r3, r3, #3
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d001      	beq.n	800ad16 <tcp_free_acked_segments+0xc6>
 800ad12:	2301      	movs	r3, #1
 800ad14:	e000      	b.n	800ad18 <tcp_free_acked_segments+0xc8>
 800ad16:	2300      	movs	r3, #0
 800ad18:	442b      	add	r3, r5
 800ad1a:	18e2      	adds	r2, r4, r3
 800ad1c:	4b09      	ldr	r3, [pc, #36]	; (800ad44 <tcp_free_acked_segments+0xf4>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	dd9c      	ble.n	800ac60 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800ad26:	68bb      	ldr	r3, [r7, #8]
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3718      	adds	r7, #24
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bdb0      	pop	{r4, r5, r7, pc}
 800ad30:	080128b0 	.word	0x080128b0
 800ad34:	08012b98 	.word	0x08012b98
 800ad38:	080128fc 	.word	0x080128fc
 800ad3c:	200088e4 	.word	0x200088e4
 800ad40:	08012bc0 	.word	0x08012bc0
 800ad44:	200088e0 	.word	0x200088e0

0800ad48 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800ad48:	b5b0      	push	{r4, r5, r7, lr}
 800ad4a:	b094      	sub	sp, #80	; 0x50
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800ad50:	2300      	movs	r3, #0
 800ad52:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d106      	bne.n	800ad68 <tcp_receive+0x20>
 800ad5a:	4b91      	ldr	r3, [pc, #580]	; (800afa0 <tcp_receive+0x258>)
 800ad5c:	f240 427b 	movw	r2, #1147	; 0x47b
 800ad60:	4990      	ldr	r1, [pc, #576]	; (800afa4 <tcp_receive+0x25c>)
 800ad62:	4891      	ldr	r0, [pc, #580]	; (800afa8 <tcp_receive+0x260>)
 800ad64:	f005 fd56 	bl	8010814 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	7d1b      	ldrb	r3, [r3, #20]
 800ad6c:	2b03      	cmp	r3, #3
 800ad6e:	d806      	bhi.n	800ad7e <tcp_receive+0x36>
 800ad70:	4b8b      	ldr	r3, [pc, #556]	; (800afa0 <tcp_receive+0x258>)
 800ad72:	f240 427c 	movw	r2, #1148	; 0x47c
 800ad76:	498d      	ldr	r1, [pc, #564]	; (800afac <tcp_receive+0x264>)
 800ad78:	488b      	ldr	r0, [pc, #556]	; (800afa8 <tcp_receive+0x260>)
 800ad7a:	f005 fd4b 	bl	8010814 <iprintf>

  if (flags & TCP_ACK) {
 800ad7e:	4b8c      	ldr	r3, [pc, #560]	; (800afb0 <tcp_receive+0x268>)
 800ad80:	781b      	ldrb	r3, [r3, #0]
 800ad82:	f003 0310 	and.w	r3, r3, #16
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	f000 8264 	beq.w	800b254 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ad92:	461a      	mov	r2, r3
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad98:	4413      	add	r3, r2
 800ad9a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ada0:	4b84      	ldr	r3, [pc, #528]	; (800afb4 <tcp_receive+0x26c>)
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	1ad3      	subs	r3, r2, r3
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	db1b      	blt.n	800ade2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800adae:	4b81      	ldr	r3, [pc, #516]	; (800afb4 <tcp_receive+0x26c>)
 800adb0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800adb2:	429a      	cmp	r2, r3
 800adb4:	d106      	bne.n	800adc4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800adba:	4b7f      	ldr	r3, [pc, #508]	; (800afb8 <tcp_receive+0x270>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	1ad3      	subs	r3, r2, r3
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	db0e      	blt.n	800ade2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800adc8:	4b7b      	ldr	r3, [pc, #492]	; (800afb8 <tcp_receive+0x270>)
 800adca:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800adcc:	429a      	cmp	r2, r3
 800adce:	d125      	bne.n	800ae1c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800add0:	4b7a      	ldr	r3, [pc, #488]	; (800afbc <tcp_receive+0x274>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	89db      	ldrh	r3, [r3, #14]
 800add6:	b29a      	uxth	r2, r3
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800adde:	429a      	cmp	r2, r3
 800ade0:	d91c      	bls.n	800ae1c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800ade2:	4b76      	ldr	r3, [pc, #472]	; (800afbc <tcp_receive+0x274>)
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	89db      	ldrh	r3, [r3, #14]
 800ade8:	b29a      	uxth	r2, r3
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800adfc:	429a      	cmp	r2, r3
 800adfe:	d205      	bcs.n	800ae0c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800ae0c:	4b69      	ldr	r3, [pc, #420]	; (800afb4 <tcp_receive+0x26c>)
 800ae0e:	681a      	ldr	r2, [r3, #0]
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800ae14:	4b68      	ldr	r3, [pc, #416]	; (800afb8 <tcp_receive+0x270>)
 800ae16:	681a      	ldr	r2, [r3, #0]
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800ae1c:	4b66      	ldr	r3, [pc, #408]	; (800afb8 <tcp_receive+0x270>)
 800ae1e:	681a      	ldr	r2, [r3, #0]
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae24:	1ad3      	subs	r3, r2, r3
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	dc58      	bgt.n	800aedc <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800ae2a:	4b65      	ldr	r3, [pc, #404]	; (800afc0 <tcp_receive+0x278>)
 800ae2c:	881b      	ldrh	r3, [r3, #0]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d14b      	bne.n	800aeca <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae36:	687a      	ldr	r2, [r7, #4]
 800ae38:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800ae3c:	4413      	add	r3, r2
 800ae3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae40:	429a      	cmp	r2, r3
 800ae42:	d142      	bne.n	800aeca <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	db3d      	blt.n	800aeca <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ae52:	4b59      	ldr	r3, [pc, #356]	; (800afb8 <tcp_receive+0x270>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	429a      	cmp	r2, r3
 800ae58:	d137      	bne.n	800aeca <tcp_receive+0x182>
              found_dupack = 1;
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ae64:	2bff      	cmp	r3, #255	; 0xff
 800ae66:	d007      	beq.n	800ae78 <tcp_receive+0x130>
                ++pcb->dupacks;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ae6e:	3301      	adds	r3, #1
 800ae70:	b2da      	uxtb	r2, r3
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ae7e:	2b03      	cmp	r3, #3
 800ae80:	d91b      	bls.n	800aeba <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ae8c:	4413      	add	r3, r2
 800ae8e:	b29a      	uxth	r2, r3
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ae96:	429a      	cmp	r2, r3
 800ae98:	d30a      	bcc.n	800aeb0 <tcp_receive+0x168>
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aea4:	4413      	add	r3, r2
 800aea6:	b29a      	uxth	r2, r3
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800aeae:	e004      	b.n	800aeba <tcp_receive+0x172>
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aeb6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800aec0:	2b02      	cmp	r3, #2
 800aec2:	d902      	bls.n	800aeca <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f001 feed 	bl	800cca4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800aeca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aecc:	2b00      	cmp	r3, #0
 800aece:	f040 8161 	bne.w	800b194 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2200      	movs	r2, #0
 800aed6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aeda:	e15b      	b.n	800b194 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800aedc:	4b36      	ldr	r3, [pc, #216]	; (800afb8 <tcp_receive+0x270>)
 800aede:	681a      	ldr	r2, [r3, #0]
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aee4:	1ad3      	subs	r3, r2, r3
 800aee6:	3b01      	subs	r3, #1
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	f2c0 814e 	blt.w	800b18a <tcp_receive+0x442>
 800aeee:	4b32      	ldr	r3, [pc, #200]	; (800afb8 <tcp_receive+0x270>)
 800aef0:	681a      	ldr	r2, [r3, #0]
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aef6:	1ad3      	subs	r3, r2, r3
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	f300 8146 	bgt.w	800b18a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	8b5b      	ldrh	r3, [r3, #26]
 800af02:	f003 0304 	and.w	r3, r3, #4
 800af06:	2b00      	cmp	r3, #0
 800af08:	d010      	beq.n	800af2c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	8b5b      	ldrh	r3, [r3, #26]
 800af0e:	f023 0304 	bic.w	r3, r3, #4
 800af12:	b29a      	uxth	r2, r3
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2200      	movs	r2, #0
 800af28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2200      	movs	r2, #0
 800af30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800af3a:	10db      	asrs	r3, r3, #3
 800af3c:	b21b      	sxth	r3, r3
 800af3e:	b29a      	uxth	r2, r3
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800af46:	b29b      	uxth	r3, r3
 800af48:	4413      	add	r3, r2
 800af4a:	b29b      	uxth	r3, r3
 800af4c:	b21a      	sxth	r2, r3
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800af54:	4b18      	ldr	r3, [pc, #96]	; (800afb8 <tcp_receive+0x270>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	b29a      	uxth	r2, r3
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af5e:	b29b      	uxth	r3, r3
 800af60:	1ad3      	subs	r3, r2, r3
 800af62:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2200      	movs	r2, #0
 800af68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800af6c:	4b12      	ldr	r3, [pc, #72]	; (800afb8 <tcp_receive+0x270>)
 800af6e:	681a      	ldr	r2, [r3, #0]
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	7d1b      	ldrb	r3, [r3, #20]
 800af78:	2b03      	cmp	r3, #3
 800af7a:	f240 8097 	bls.w	800b0ac <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800af8a:	429a      	cmp	r2, r3
 800af8c:	d245      	bcs.n	800b01a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	8b5b      	ldrh	r3, [r3, #26]
 800af92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800af96:	2b00      	cmp	r3, #0
 800af98:	d014      	beq.n	800afc4 <tcp_receive+0x27c>
 800af9a:	2301      	movs	r3, #1
 800af9c:	e013      	b.n	800afc6 <tcp_receive+0x27e>
 800af9e:	bf00      	nop
 800afa0:	080128b0 	.word	0x080128b0
 800afa4:	08012be0 	.word	0x08012be0
 800afa8:	080128fc 	.word	0x080128fc
 800afac:	08012bfc 	.word	0x08012bfc
 800afb0:	200088e8 	.word	0x200088e8
 800afb4:	200088dc 	.word	0x200088dc
 800afb8:	200088e0 	.word	0x200088e0
 800afbc:	200088cc 	.word	0x200088cc
 800afc0:	200088e6 	.word	0x200088e6
 800afc4:	2302      	movs	r3, #2
 800afc6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800afca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800afce:	b29a      	uxth	r2, r3
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800afd4:	fb12 f303 	smulbb	r3, r2, r3
 800afd8:	b29b      	uxth	r3, r3
 800afda:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800afdc:	4293      	cmp	r3, r2
 800afde:	bf28      	it	cs
 800afe0:	4613      	movcs	r3, r2
 800afe2:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800afea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800afec:	4413      	add	r3, r2
 800afee:	b29a      	uxth	r2, r3
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800aff6:	429a      	cmp	r2, r3
 800aff8:	d309      	bcc.n	800b00e <tcp_receive+0x2c6>
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b000:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b002:	4413      	add	r3, r2
 800b004:	b29a      	uxth	r2, r3
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b00c:	e04e      	b.n	800b0ac <tcp_receive+0x364>
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b014:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b018:	e048      	b.n	800b0ac <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b020:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b022:	4413      	add	r3, r2
 800b024:	b29a      	uxth	r2, r3
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b02c:	429a      	cmp	r2, r3
 800b02e:	d309      	bcc.n	800b044 <tcp_receive+0x2fc>
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b036:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b038:	4413      	add	r3, r2
 800b03a:	b29a      	uxth	r2, r3
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b042:	e004      	b.n	800b04e <tcp_receive+0x306>
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b04a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b05a:	429a      	cmp	r2, r3
 800b05c:	d326      	bcc.n	800b0ac <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b06a:	1ad3      	subs	r3, r2, r3
 800b06c:	b29a      	uxth	r2, r3
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b07e:	4413      	add	r3, r2
 800b080:	b29a      	uxth	r2, r3
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b088:	429a      	cmp	r2, r3
 800b08a:	d30a      	bcc.n	800b0a2 <tcp_receive+0x35a>
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b096:	4413      	add	r3, r2
 800b098:	b29a      	uxth	r2, r3
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b0a0:	e004      	b.n	800b0ac <tcp_receive+0x364>
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b0a8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0b4:	4a98      	ldr	r2, [pc, #608]	; (800b318 <tcp_receive+0x5d0>)
 800b0b6:	6878      	ldr	r0, [r7, #4]
 800b0b8:	f7ff fdca 	bl	800ac50 <tcp_free_acked_segments>
 800b0bc:	4602      	mov	r2, r0
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0ca:	4a94      	ldr	r2, [pc, #592]	; (800b31c <tcp_receive+0x5d4>)
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f7ff fdbf 	bl	800ac50 <tcp_free_acked_segments>
 800b0d2:	4602      	mov	r2, r0
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d104      	bne.n	800b0ea <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b0e6:	861a      	strh	r2, [r3, #48]	; 0x30
 800b0e8:	e002      	b.n	800b0f0 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d103      	bne.n	800b106 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2200      	movs	r2, #0
 800b102:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800b10c:	4b84      	ldr	r3, [pc, #528]	; (800b320 <tcp_receive+0x5d8>)
 800b10e:	881b      	ldrh	r3, [r3, #0]
 800b110:	4413      	add	r3, r2
 800b112:	b29a      	uxth	r2, r3
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	8b5b      	ldrh	r3, [r3, #26]
 800b11e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b122:	2b00      	cmp	r3, #0
 800b124:	d035      	beq.n	800b192 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d118      	bne.n	800b160 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b132:	2b00      	cmp	r3, #0
 800b134:	d00c      	beq.n	800b150 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b13e:	68db      	ldr	r3, [r3, #12]
 800b140:	685b      	ldr	r3, [r3, #4]
 800b142:	4618      	mov	r0, r3
 800b144:	f7fb f935 	bl	80063b2 <lwip_htonl>
 800b148:	4603      	mov	r3, r0
 800b14a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	dc20      	bgt.n	800b192 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	8b5b      	ldrh	r3, [r3, #26]
 800b154:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b158:	b29a      	uxth	r2, r3
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b15e:	e018      	b.n	800b192 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b168:	68db      	ldr	r3, [r3, #12]
 800b16a:	685b      	ldr	r3, [r3, #4]
 800b16c:	4618      	mov	r0, r3
 800b16e:	f7fb f920 	bl	80063b2 <lwip_htonl>
 800b172:	4603      	mov	r3, r0
 800b174:	1ae3      	subs	r3, r4, r3
 800b176:	2b00      	cmp	r3, #0
 800b178:	dc0b      	bgt.n	800b192 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	8b5b      	ldrh	r3, [r3, #26]
 800b17e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b182:	b29a      	uxth	r2, r3
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b188:	e003      	b.n	800b192 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f001 ff76 	bl	800d07c <tcp_send_empty_ack>
 800b190:	e000      	b.n	800b194 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b192:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d05b      	beq.n	800b254 <tcp_receive+0x50c>
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b1a0:	4b60      	ldr	r3, [pc, #384]	; (800b324 <tcp_receive+0x5dc>)
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	1ad3      	subs	r3, r2, r3
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	da54      	bge.n	800b254 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800b1aa:	4b5f      	ldr	r3, [pc, #380]	; (800b328 <tcp_receive+0x5e0>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	b29a      	uxth	r2, r3
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1b4:	b29b      	uxth	r3, r3
 800b1b6:	1ad3      	subs	r3, r2, r3
 800b1b8:	b29b      	uxth	r3, r3
 800b1ba:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800b1be:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b1c8:	10db      	asrs	r3, r3, #3
 800b1ca:	b21b      	sxth	r3, r3
 800b1cc:	b29b      	uxth	r3, r3
 800b1ce:	1ad3      	subs	r3, r2, r3
 800b1d0:	b29b      	uxth	r3, r3
 800b1d2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b1dc:	b29a      	uxth	r2, r3
 800b1de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b1e2:	4413      	add	r3, r2
 800b1e4:	b29b      	uxth	r3, r3
 800b1e6:	b21a      	sxth	r2, r3
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800b1ec:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	da05      	bge.n	800b200 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800b1f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b1f8:	425b      	negs	r3, r3
 800b1fa:	b29b      	uxth	r3, r3
 800b1fc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800b200:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b20a:	109b      	asrs	r3, r3, #2
 800b20c:	b21b      	sxth	r3, r3
 800b20e:	b29b      	uxth	r3, r3
 800b210:	1ad3      	subs	r3, r2, r3
 800b212:	b29b      	uxth	r3, r3
 800b214:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b21e:	b29a      	uxth	r2, r3
 800b220:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b224:	4413      	add	r3, r2
 800b226:	b29b      	uxth	r3, r3
 800b228:	b21a      	sxth	r2, r3
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b234:	10db      	asrs	r3, r3, #3
 800b236:	b21b      	sxth	r3, r3
 800b238:	b29a      	uxth	r2, r3
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b240:	b29b      	uxth	r3, r3
 800b242:	4413      	add	r3, r2
 800b244:	b29b      	uxth	r3, r3
 800b246:	b21a      	sxth	r2, r3
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2200      	movs	r2, #0
 800b252:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800b254:	4b35      	ldr	r3, [pc, #212]	; (800b32c <tcp_receive+0x5e4>)
 800b256:	881b      	ldrh	r3, [r3, #0]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	f000 84e2 	beq.w	800bc22 <tcp_receive+0xeda>
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	7d1b      	ldrb	r3, [r3, #20]
 800b262:	2b06      	cmp	r3, #6
 800b264:	f200 84dd 	bhi.w	800bc22 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b26c:	4b30      	ldr	r3, [pc, #192]	; (800b330 <tcp_receive+0x5e8>)
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	1ad3      	subs	r3, r2, r3
 800b272:	3b01      	subs	r3, #1
 800b274:	2b00      	cmp	r3, #0
 800b276:	f2c0 808f 	blt.w	800b398 <tcp_receive+0x650>
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b27e:	4b2b      	ldr	r3, [pc, #172]	; (800b32c <tcp_receive+0x5e4>)
 800b280:	881b      	ldrh	r3, [r3, #0]
 800b282:	4619      	mov	r1, r3
 800b284:	4b2a      	ldr	r3, [pc, #168]	; (800b330 <tcp_receive+0x5e8>)
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	440b      	add	r3, r1
 800b28a:	1ad3      	subs	r3, r2, r3
 800b28c:	3301      	adds	r3, #1
 800b28e:	2b00      	cmp	r3, #0
 800b290:	f300 8082 	bgt.w	800b398 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800b294:	4b27      	ldr	r3, [pc, #156]	; (800b334 <tcp_receive+0x5ec>)
 800b296:	685b      	ldr	r3, [r3, #4]
 800b298:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b29e:	4b24      	ldr	r3, [pc, #144]	; (800b330 <tcp_receive+0x5e8>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	1ad3      	subs	r3, r2, r3
 800b2a4:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800b2a6:	4b23      	ldr	r3, [pc, #140]	; (800b334 <tcp_receive+0x5ec>)
 800b2a8:	685b      	ldr	r3, [r3, #4]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d106      	bne.n	800b2bc <tcp_receive+0x574>
 800b2ae:	4b22      	ldr	r3, [pc, #136]	; (800b338 <tcp_receive+0x5f0>)
 800b2b0:	f240 5294 	movw	r2, #1428	; 0x594
 800b2b4:	4921      	ldr	r1, [pc, #132]	; (800b33c <tcp_receive+0x5f4>)
 800b2b6:	4822      	ldr	r0, [pc, #136]	; (800b340 <tcp_receive+0x5f8>)
 800b2b8:	f005 faac 	bl	8010814 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800b2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2be:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b2c2:	4293      	cmp	r3, r2
 800b2c4:	d906      	bls.n	800b2d4 <tcp_receive+0x58c>
 800b2c6:	4b1c      	ldr	r3, [pc, #112]	; (800b338 <tcp_receive+0x5f0>)
 800b2c8:	f240 5295 	movw	r2, #1429	; 0x595
 800b2cc:	491d      	ldr	r1, [pc, #116]	; (800b344 <tcp_receive+0x5fc>)
 800b2ce:	481c      	ldr	r0, [pc, #112]	; (800b340 <tcp_receive+0x5f8>)
 800b2d0:	f005 faa0 	bl	8010814 <iprintf>
      off = (u16_t)off32;
 800b2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2d6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800b2da:	4b16      	ldr	r3, [pc, #88]	; (800b334 <tcp_receive+0x5ec>)
 800b2dc:	685b      	ldr	r3, [r3, #4]
 800b2de:	891b      	ldrh	r3, [r3, #8]
 800b2e0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b2e4:	429a      	cmp	r2, r3
 800b2e6:	d906      	bls.n	800b2f6 <tcp_receive+0x5ae>
 800b2e8:	4b13      	ldr	r3, [pc, #76]	; (800b338 <tcp_receive+0x5f0>)
 800b2ea:	f240 5297 	movw	r2, #1431	; 0x597
 800b2ee:	4916      	ldr	r1, [pc, #88]	; (800b348 <tcp_receive+0x600>)
 800b2f0:	4813      	ldr	r0, [pc, #76]	; (800b340 <tcp_receive+0x5f8>)
 800b2f2:	f005 fa8f 	bl	8010814 <iprintf>
      inseg.len -= off;
 800b2f6:	4b0f      	ldr	r3, [pc, #60]	; (800b334 <tcp_receive+0x5ec>)
 800b2f8:	891a      	ldrh	r2, [r3, #8]
 800b2fa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b2fe:	1ad3      	subs	r3, r2, r3
 800b300:	b29a      	uxth	r2, r3
 800b302:	4b0c      	ldr	r3, [pc, #48]	; (800b334 <tcp_receive+0x5ec>)
 800b304:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800b306:	4b0b      	ldr	r3, [pc, #44]	; (800b334 <tcp_receive+0x5ec>)
 800b308:	685b      	ldr	r3, [r3, #4]
 800b30a:	891a      	ldrh	r2, [r3, #8]
 800b30c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b310:	1ad3      	subs	r3, r2, r3
 800b312:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800b314:	e02a      	b.n	800b36c <tcp_receive+0x624>
 800b316:	bf00      	nop
 800b318:	08012c18 	.word	0x08012c18
 800b31c:	08012c20 	.word	0x08012c20
 800b320:	200088e4 	.word	0x200088e4
 800b324:	200088e0 	.word	0x200088e0
 800b328:	200088a4 	.word	0x200088a4
 800b32c:	200088e6 	.word	0x200088e6
 800b330:	200088dc 	.word	0x200088dc
 800b334:	200088bc 	.word	0x200088bc
 800b338:	080128b0 	.word	0x080128b0
 800b33c:	08012c28 	.word	0x08012c28
 800b340:	080128fc 	.word	0x080128fc
 800b344:	08012c38 	.word	0x08012c38
 800b348:	08012c48 	.word	0x08012c48
        off -= p->len;
 800b34c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b34e:	895b      	ldrh	r3, [r3, #10]
 800b350:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b354:	1ad3      	subs	r3, r2, r3
 800b356:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800b35a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b35c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b35e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800b360:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b362:	2200      	movs	r2, #0
 800b364:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800b366:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800b36c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b36e:	895b      	ldrh	r3, [r3, #10]
 800b370:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b374:	429a      	cmp	r2, r3
 800b376:	d8e9      	bhi.n	800b34c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800b378:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b37c:	4619      	mov	r1, r3
 800b37e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b380:	f7fc fada 	bl	8007938 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b388:	4a91      	ldr	r2, [pc, #580]	; (800b5d0 <tcp_receive+0x888>)
 800b38a:	6013      	str	r3, [r2, #0]
 800b38c:	4b91      	ldr	r3, [pc, #580]	; (800b5d4 <tcp_receive+0x88c>)
 800b38e:	68db      	ldr	r3, [r3, #12]
 800b390:	4a8f      	ldr	r2, [pc, #572]	; (800b5d0 <tcp_receive+0x888>)
 800b392:	6812      	ldr	r2, [r2, #0]
 800b394:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b396:	e00d      	b.n	800b3b4 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800b398:	4b8d      	ldr	r3, [pc, #564]	; (800b5d0 <tcp_receive+0x888>)
 800b39a:	681a      	ldr	r2, [r3, #0]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3a0:	1ad3      	subs	r3, r2, r3
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	da06      	bge.n	800b3b4 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	8b5b      	ldrh	r3, [r3, #26]
 800b3aa:	f043 0302 	orr.w	r3, r3, #2
 800b3ae:	b29a      	uxth	r2, r3
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b3b4:	4b86      	ldr	r3, [pc, #536]	; (800b5d0 <tcp_receive+0x888>)
 800b3b6:	681a      	ldr	r2, [r3, #0]
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3bc:	1ad3      	subs	r3, r2, r3
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	f2c0 842a 	blt.w	800bc18 <tcp_receive+0xed0>
 800b3c4:	4b82      	ldr	r3, [pc, #520]	; (800b5d0 <tcp_receive+0x888>)
 800b3c6:	681a      	ldr	r2, [r3, #0]
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3cc:	6879      	ldr	r1, [r7, #4]
 800b3ce:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b3d0:	440b      	add	r3, r1
 800b3d2:	1ad3      	subs	r3, r2, r3
 800b3d4:	3301      	adds	r3, #1
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	f300 841e 	bgt.w	800bc18 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b3e0:	4b7b      	ldr	r3, [pc, #492]	; (800b5d0 <tcp_receive+0x888>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	429a      	cmp	r2, r3
 800b3e6:	f040 829a 	bne.w	800b91e <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800b3ea:	4b7a      	ldr	r3, [pc, #488]	; (800b5d4 <tcp_receive+0x88c>)
 800b3ec:	891c      	ldrh	r4, [r3, #8]
 800b3ee:	4b79      	ldr	r3, [pc, #484]	; (800b5d4 <tcp_receive+0x88c>)
 800b3f0:	68db      	ldr	r3, [r3, #12]
 800b3f2:	899b      	ldrh	r3, [r3, #12]
 800b3f4:	b29b      	uxth	r3, r3
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f7fa ffc6 	bl	8006388 <lwip_htons>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	b2db      	uxtb	r3, r3
 800b400:	f003 0303 	and.w	r3, r3, #3
 800b404:	2b00      	cmp	r3, #0
 800b406:	d001      	beq.n	800b40c <tcp_receive+0x6c4>
 800b408:	2301      	movs	r3, #1
 800b40a:	e000      	b.n	800b40e <tcp_receive+0x6c6>
 800b40c:	2300      	movs	r3, #0
 800b40e:	4423      	add	r3, r4
 800b410:	b29a      	uxth	r2, r3
 800b412:	4b71      	ldr	r3, [pc, #452]	; (800b5d8 <tcp_receive+0x890>)
 800b414:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b41a:	4b6f      	ldr	r3, [pc, #444]	; (800b5d8 <tcp_receive+0x890>)
 800b41c:	881b      	ldrh	r3, [r3, #0]
 800b41e:	429a      	cmp	r2, r3
 800b420:	d275      	bcs.n	800b50e <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b422:	4b6c      	ldr	r3, [pc, #432]	; (800b5d4 <tcp_receive+0x88c>)
 800b424:	68db      	ldr	r3, [r3, #12]
 800b426:	899b      	ldrh	r3, [r3, #12]
 800b428:	b29b      	uxth	r3, r3
 800b42a:	4618      	mov	r0, r3
 800b42c:	f7fa ffac 	bl	8006388 <lwip_htons>
 800b430:	4603      	mov	r3, r0
 800b432:	b2db      	uxtb	r3, r3
 800b434:	f003 0301 	and.w	r3, r3, #1
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d01f      	beq.n	800b47c <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800b43c:	4b65      	ldr	r3, [pc, #404]	; (800b5d4 <tcp_receive+0x88c>)
 800b43e:	68db      	ldr	r3, [r3, #12]
 800b440:	899b      	ldrh	r3, [r3, #12]
 800b442:	b29b      	uxth	r3, r3
 800b444:	b21b      	sxth	r3, r3
 800b446:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b44a:	b21c      	sxth	r4, r3
 800b44c:	4b61      	ldr	r3, [pc, #388]	; (800b5d4 <tcp_receive+0x88c>)
 800b44e:	68db      	ldr	r3, [r3, #12]
 800b450:	899b      	ldrh	r3, [r3, #12]
 800b452:	b29b      	uxth	r3, r3
 800b454:	4618      	mov	r0, r3
 800b456:	f7fa ff97 	bl	8006388 <lwip_htons>
 800b45a:	4603      	mov	r3, r0
 800b45c:	b2db      	uxtb	r3, r3
 800b45e:	b29b      	uxth	r3, r3
 800b460:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800b464:	b29b      	uxth	r3, r3
 800b466:	4618      	mov	r0, r3
 800b468:	f7fa ff8e 	bl	8006388 <lwip_htons>
 800b46c:	4603      	mov	r3, r0
 800b46e:	b21b      	sxth	r3, r3
 800b470:	4323      	orrs	r3, r4
 800b472:	b21a      	sxth	r2, r3
 800b474:	4b57      	ldr	r3, [pc, #348]	; (800b5d4 <tcp_receive+0x88c>)
 800b476:	68db      	ldr	r3, [r3, #12]
 800b478:	b292      	uxth	r2, r2
 800b47a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b480:	4b54      	ldr	r3, [pc, #336]	; (800b5d4 <tcp_receive+0x88c>)
 800b482:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b484:	4b53      	ldr	r3, [pc, #332]	; (800b5d4 <tcp_receive+0x88c>)
 800b486:	68db      	ldr	r3, [r3, #12]
 800b488:	899b      	ldrh	r3, [r3, #12]
 800b48a:	b29b      	uxth	r3, r3
 800b48c:	4618      	mov	r0, r3
 800b48e:	f7fa ff7b 	bl	8006388 <lwip_htons>
 800b492:	4603      	mov	r3, r0
 800b494:	b2db      	uxtb	r3, r3
 800b496:	f003 0302 	and.w	r3, r3, #2
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d005      	beq.n	800b4aa <tcp_receive+0x762>
            inseg.len -= 1;
 800b49e:	4b4d      	ldr	r3, [pc, #308]	; (800b5d4 <tcp_receive+0x88c>)
 800b4a0:	891b      	ldrh	r3, [r3, #8]
 800b4a2:	3b01      	subs	r3, #1
 800b4a4:	b29a      	uxth	r2, r3
 800b4a6:	4b4b      	ldr	r3, [pc, #300]	; (800b5d4 <tcp_receive+0x88c>)
 800b4a8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800b4aa:	4b4a      	ldr	r3, [pc, #296]	; (800b5d4 <tcp_receive+0x88c>)
 800b4ac:	685b      	ldr	r3, [r3, #4]
 800b4ae:	4a49      	ldr	r2, [pc, #292]	; (800b5d4 <tcp_receive+0x88c>)
 800b4b0:	8912      	ldrh	r2, [r2, #8]
 800b4b2:	4611      	mov	r1, r2
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	f7fc f93f 	bl	8007738 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800b4ba:	4b46      	ldr	r3, [pc, #280]	; (800b5d4 <tcp_receive+0x88c>)
 800b4bc:	891c      	ldrh	r4, [r3, #8]
 800b4be:	4b45      	ldr	r3, [pc, #276]	; (800b5d4 <tcp_receive+0x88c>)
 800b4c0:	68db      	ldr	r3, [r3, #12]
 800b4c2:	899b      	ldrh	r3, [r3, #12]
 800b4c4:	b29b      	uxth	r3, r3
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	f7fa ff5e 	bl	8006388 <lwip_htons>
 800b4cc:	4603      	mov	r3, r0
 800b4ce:	b2db      	uxtb	r3, r3
 800b4d0:	f003 0303 	and.w	r3, r3, #3
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d001      	beq.n	800b4dc <tcp_receive+0x794>
 800b4d8:	2301      	movs	r3, #1
 800b4da:	e000      	b.n	800b4de <tcp_receive+0x796>
 800b4dc:	2300      	movs	r3, #0
 800b4de:	4423      	add	r3, r4
 800b4e0:	b29a      	uxth	r2, r3
 800b4e2:	4b3d      	ldr	r3, [pc, #244]	; (800b5d8 <tcp_receive+0x890>)
 800b4e4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b4e6:	4b3c      	ldr	r3, [pc, #240]	; (800b5d8 <tcp_receive+0x890>)
 800b4e8:	881b      	ldrh	r3, [r3, #0]
 800b4ea:	461a      	mov	r2, r3
 800b4ec:	4b38      	ldr	r3, [pc, #224]	; (800b5d0 <tcp_receive+0x888>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	441a      	add	r2, r3
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4f6:	6879      	ldr	r1, [r7, #4]
 800b4f8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b4fa:	440b      	add	r3, r1
 800b4fc:	429a      	cmp	r2, r3
 800b4fe:	d006      	beq.n	800b50e <tcp_receive+0x7c6>
 800b500:	4b36      	ldr	r3, [pc, #216]	; (800b5dc <tcp_receive+0x894>)
 800b502:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800b506:	4936      	ldr	r1, [pc, #216]	; (800b5e0 <tcp_receive+0x898>)
 800b508:	4836      	ldr	r0, [pc, #216]	; (800b5e4 <tcp_receive+0x89c>)
 800b50a:	f005 f983 	bl	8010814 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b512:	2b00      	cmp	r3, #0
 800b514:	f000 80e7 	beq.w	800b6e6 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b518:	4b2e      	ldr	r3, [pc, #184]	; (800b5d4 <tcp_receive+0x88c>)
 800b51a:	68db      	ldr	r3, [r3, #12]
 800b51c:	899b      	ldrh	r3, [r3, #12]
 800b51e:	b29b      	uxth	r3, r3
 800b520:	4618      	mov	r0, r3
 800b522:	f7fa ff31 	bl	8006388 <lwip_htons>
 800b526:	4603      	mov	r3, r0
 800b528:	b2db      	uxtb	r3, r3
 800b52a:	f003 0301 	and.w	r3, r3, #1
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d010      	beq.n	800b554 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800b532:	e00a      	b.n	800b54a <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b538:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b53e:	681a      	ldr	r2, [r3, #0]
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800b544:	68f8      	ldr	r0, [r7, #12]
 800b546:	f7fd fd92 	bl	800906e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d1f0      	bne.n	800b534 <tcp_receive+0x7ec>
 800b552:	e0c8      	b.n	800b6e6 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b558:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800b55a:	e052      	b.n	800b602 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b55c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b55e:	68db      	ldr	r3, [r3, #12]
 800b560:	899b      	ldrh	r3, [r3, #12]
 800b562:	b29b      	uxth	r3, r3
 800b564:	4618      	mov	r0, r3
 800b566:	f7fa ff0f 	bl	8006388 <lwip_htons>
 800b56a:	4603      	mov	r3, r0
 800b56c:	b2db      	uxtb	r3, r3
 800b56e:	f003 0301 	and.w	r3, r3, #1
 800b572:	2b00      	cmp	r3, #0
 800b574:	d03d      	beq.n	800b5f2 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800b576:	4b17      	ldr	r3, [pc, #92]	; (800b5d4 <tcp_receive+0x88c>)
 800b578:	68db      	ldr	r3, [r3, #12]
 800b57a:	899b      	ldrh	r3, [r3, #12]
 800b57c:	b29b      	uxth	r3, r3
 800b57e:	4618      	mov	r0, r3
 800b580:	f7fa ff02 	bl	8006388 <lwip_htons>
 800b584:	4603      	mov	r3, r0
 800b586:	b2db      	uxtb	r3, r3
 800b588:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d130      	bne.n	800b5f2 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800b590:	4b10      	ldr	r3, [pc, #64]	; (800b5d4 <tcp_receive+0x88c>)
 800b592:	68db      	ldr	r3, [r3, #12]
 800b594:	899b      	ldrh	r3, [r3, #12]
 800b596:	b29c      	uxth	r4, r3
 800b598:	2001      	movs	r0, #1
 800b59a:	f7fa fef5 	bl	8006388 <lwip_htons>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	461a      	mov	r2, r3
 800b5a2:	4b0c      	ldr	r3, [pc, #48]	; (800b5d4 <tcp_receive+0x88c>)
 800b5a4:	68db      	ldr	r3, [r3, #12]
 800b5a6:	4322      	orrs	r2, r4
 800b5a8:	b292      	uxth	r2, r2
 800b5aa:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800b5ac:	4b09      	ldr	r3, [pc, #36]	; (800b5d4 <tcp_receive+0x88c>)
 800b5ae:	891c      	ldrh	r4, [r3, #8]
 800b5b0:	4b08      	ldr	r3, [pc, #32]	; (800b5d4 <tcp_receive+0x88c>)
 800b5b2:	68db      	ldr	r3, [r3, #12]
 800b5b4:	899b      	ldrh	r3, [r3, #12]
 800b5b6:	b29b      	uxth	r3, r3
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f7fa fee5 	bl	8006388 <lwip_htons>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	b2db      	uxtb	r3, r3
 800b5c2:	f003 0303 	and.w	r3, r3, #3
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d00e      	beq.n	800b5e8 <tcp_receive+0x8a0>
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	e00d      	b.n	800b5ea <tcp_receive+0x8a2>
 800b5ce:	bf00      	nop
 800b5d0:	200088dc 	.word	0x200088dc
 800b5d4:	200088bc 	.word	0x200088bc
 800b5d8:	200088e6 	.word	0x200088e6
 800b5dc:	080128b0 	.word	0x080128b0
 800b5e0:	08012c58 	.word	0x08012c58
 800b5e4:	080128fc 	.word	0x080128fc
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	4423      	add	r3, r4
 800b5ec:	b29a      	uxth	r2, r3
 800b5ee:	4b98      	ldr	r3, [pc, #608]	; (800b850 <tcp_receive+0xb08>)
 800b5f0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800b5f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5f4:	613b      	str	r3, [r7, #16]
              next = next->next;
 800b5f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800b5fc:	6938      	ldr	r0, [r7, #16]
 800b5fe:	f7fd fd36 	bl	800906e <tcp_seg_free>
            while (next &&
 800b602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b604:	2b00      	cmp	r3, #0
 800b606:	d00e      	beq.n	800b626 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800b608:	4b91      	ldr	r3, [pc, #580]	; (800b850 <tcp_receive+0xb08>)
 800b60a:	881b      	ldrh	r3, [r3, #0]
 800b60c:	461a      	mov	r2, r3
 800b60e:	4b91      	ldr	r3, [pc, #580]	; (800b854 <tcp_receive+0xb0c>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	441a      	add	r2, r3
 800b614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b616:	68db      	ldr	r3, [r3, #12]
 800b618:	685b      	ldr	r3, [r3, #4]
 800b61a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b61c:	8909      	ldrh	r1, [r1, #8]
 800b61e:	440b      	add	r3, r1
 800b620:	1ad3      	subs	r3, r2, r3
            while (next &&
 800b622:	2b00      	cmp	r3, #0
 800b624:	da9a      	bge.n	800b55c <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800b626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d059      	beq.n	800b6e0 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800b62c:	4b88      	ldr	r3, [pc, #544]	; (800b850 <tcp_receive+0xb08>)
 800b62e:	881b      	ldrh	r3, [r3, #0]
 800b630:	461a      	mov	r2, r3
 800b632:	4b88      	ldr	r3, [pc, #544]	; (800b854 <tcp_receive+0xb0c>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	441a      	add	r2, r3
 800b638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b63a:	68db      	ldr	r3, [r3, #12]
 800b63c:	685b      	ldr	r3, [r3, #4]
 800b63e:	1ad3      	subs	r3, r2, r3
            if (next &&
 800b640:	2b00      	cmp	r3, #0
 800b642:	dd4d      	ble.n	800b6e0 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800b644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b646:	68db      	ldr	r3, [r3, #12]
 800b648:	685b      	ldr	r3, [r3, #4]
 800b64a:	b29a      	uxth	r2, r3
 800b64c:	4b81      	ldr	r3, [pc, #516]	; (800b854 <tcp_receive+0xb0c>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	b29b      	uxth	r3, r3
 800b652:	1ad3      	subs	r3, r2, r3
 800b654:	b29a      	uxth	r2, r3
 800b656:	4b80      	ldr	r3, [pc, #512]	; (800b858 <tcp_receive+0xb10>)
 800b658:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b65a:	4b7f      	ldr	r3, [pc, #508]	; (800b858 <tcp_receive+0xb10>)
 800b65c:	68db      	ldr	r3, [r3, #12]
 800b65e:	899b      	ldrh	r3, [r3, #12]
 800b660:	b29b      	uxth	r3, r3
 800b662:	4618      	mov	r0, r3
 800b664:	f7fa fe90 	bl	8006388 <lwip_htons>
 800b668:	4603      	mov	r3, r0
 800b66a:	b2db      	uxtb	r3, r3
 800b66c:	f003 0302 	and.w	r3, r3, #2
 800b670:	2b00      	cmp	r3, #0
 800b672:	d005      	beq.n	800b680 <tcp_receive+0x938>
                inseg.len -= 1;
 800b674:	4b78      	ldr	r3, [pc, #480]	; (800b858 <tcp_receive+0xb10>)
 800b676:	891b      	ldrh	r3, [r3, #8]
 800b678:	3b01      	subs	r3, #1
 800b67a:	b29a      	uxth	r2, r3
 800b67c:	4b76      	ldr	r3, [pc, #472]	; (800b858 <tcp_receive+0xb10>)
 800b67e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800b680:	4b75      	ldr	r3, [pc, #468]	; (800b858 <tcp_receive+0xb10>)
 800b682:	685b      	ldr	r3, [r3, #4]
 800b684:	4a74      	ldr	r2, [pc, #464]	; (800b858 <tcp_receive+0xb10>)
 800b686:	8912      	ldrh	r2, [r2, #8]
 800b688:	4611      	mov	r1, r2
 800b68a:	4618      	mov	r0, r3
 800b68c:	f7fc f854 	bl	8007738 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800b690:	4b71      	ldr	r3, [pc, #452]	; (800b858 <tcp_receive+0xb10>)
 800b692:	891c      	ldrh	r4, [r3, #8]
 800b694:	4b70      	ldr	r3, [pc, #448]	; (800b858 <tcp_receive+0xb10>)
 800b696:	68db      	ldr	r3, [r3, #12]
 800b698:	899b      	ldrh	r3, [r3, #12]
 800b69a:	b29b      	uxth	r3, r3
 800b69c:	4618      	mov	r0, r3
 800b69e:	f7fa fe73 	bl	8006388 <lwip_htons>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	b2db      	uxtb	r3, r3
 800b6a6:	f003 0303 	and.w	r3, r3, #3
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d001      	beq.n	800b6b2 <tcp_receive+0x96a>
 800b6ae:	2301      	movs	r3, #1
 800b6b0:	e000      	b.n	800b6b4 <tcp_receive+0x96c>
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	4423      	add	r3, r4
 800b6b6:	b29a      	uxth	r2, r3
 800b6b8:	4b65      	ldr	r3, [pc, #404]	; (800b850 <tcp_receive+0xb08>)
 800b6ba:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800b6bc:	4b64      	ldr	r3, [pc, #400]	; (800b850 <tcp_receive+0xb08>)
 800b6be:	881b      	ldrh	r3, [r3, #0]
 800b6c0:	461a      	mov	r2, r3
 800b6c2:	4b64      	ldr	r3, [pc, #400]	; (800b854 <tcp_receive+0xb0c>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	441a      	add	r2, r3
 800b6c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6ca:	68db      	ldr	r3, [r3, #12]
 800b6cc:	685b      	ldr	r3, [r3, #4]
 800b6ce:	429a      	cmp	r2, r3
 800b6d0:	d006      	beq.n	800b6e0 <tcp_receive+0x998>
 800b6d2:	4b62      	ldr	r3, [pc, #392]	; (800b85c <tcp_receive+0xb14>)
 800b6d4:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800b6d8:	4961      	ldr	r1, [pc, #388]	; (800b860 <tcp_receive+0xb18>)
 800b6da:	4862      	ldr	r0, [pc, #392]	; (800b864 <tcp_receive+0xb1c>)
 800b6dc:	f005 f89a 	bl	8010814 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b6e4:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800b6e6:	4b5a      	ldr	r3, [pc, #360]	; (800b850 <tcp_receive+0xb08>)
 800b6e8:	881b      	ldrh	r3, [r3, #0]
 800b6ea:	461a      	mov	r2, r3
 800b6ec:	4b59      	ldr	r3, [pc, #356]	; (800b854 <tcp_receive+0xb0c>)
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	441a      	add	r2, r3
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b6fa:	4b55      	ldr	r3, [pc, #340]	; (800b850 <tcp_receive+0xb08>)
 800b6fc:	881b      	ldrh	r3, [r3, #0]
 800b6fe:	429a      	cmp	r2, r3
 800b700:	d206      	bcs.n	800b710 <tcp_receive+0x9c8>
 800b702:	4b56      	ldr	r3, [pc, #344]	; (800b85c <tcp_receive+0xb14>)
 800b704:	f240 6207 	movw	r2, #1543	; 0x607
 800b708:	4957      	ldr	r1, [pc, #348]	; (800b868 <tcp_receive+0xb20>)
 800b70a:	4856      	ldr	r0, [pc, #344]	; (800b864 <tcp_receive+0xb1c>)
 800b70c:	f005 f882 	bl	8010814 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b714:	4b4e      	ldr	r3, [pc, #312]	; (800b850 <tcp_receive+0xb08>)
 800b716:	881b      	ldrh	r3, [r3, #0]
 800b718:	1ad3      	subs	r3, r2, r3
 800b71a:	b29a      	uxth	r2, r3
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800b720:	6878      	ldr	r0, [r7, #4]
 800b722:	f7fc ffc5 	bl	80086b0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800b726:	4b4c      	ldr	r3, [pc, #304]	; (800b858 <tcp_receive+0xb10>)
 800b728:	685b      	ldr	r3, [r3, #4]
 800b72a:	891b      	ldrh	r3, [r3, #8]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d006      	beq.n	800b73e <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800b730:	4b49      	ldr	r3, [pc, #292]	; (800b858 <tcp_receive+0xb10>)
 800b732:	685b      	ldr	r3, [r3, #4]
 800b734:	4a4d      	ldr	r2, [pc, #308]	; (800b86c <tcp_receive+0xb24>)
 800b736:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800b738:	4b47      	ldr	r3, [pc, #284]	; (800b858 <tcp_receive+0xb10>)
 800b73a:	2200      	movs	r2, #0
 800b73c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b73e:	4b46      	ldr	r3, [pc, #280]	; (800b858 <tcp_receive+0xb10>)
 800b740:	68db      	ldr	r3, [r3, #12]
 800b742:	899b      	ldrh	r3, [r3, #12]
 800b744:	b29b      	uxth	r3, r3
 800b746:	4618      	mov	r0, r3
 800b748:	f7fa fe1e 	bl	8006388 <lwip_htons>
 800b74c:	4603      	mov	r3, r0
 800b74e:	b2db      	uxtb	r3, r3
 800b750:	f003 0301 	and.w	r3, r3, #1
 800b754:	2b00      	cmp	r3, #0
 800b756:	f000 80b8 	beq.w	800b8ca <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800b75a:	4b45      	ldr	r3, [pc, #276]	; (800b870 <tcp_receive+0xb28>)
 800b75c:	781b      	ldrb	r3, [r3, #0]
 800b75e:	f043 0320 	orr.w	r3, r3, #32
 800b762:	b2da      	uxtb	r2, r3
 800b764:	4b42      	ldr	r3, [pc, #264]	; (800b870 <tcp_receive+0xb28>)
 800b766:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800b768:	e0af      	b.n	800b8ca <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b76e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b774:	68db      	ldr	r3, [r3, #12]
 800b776:	685b      	ldr	r3, [r3, #4]
 800b778:	4a36      	ldr	r2, [pc, #216]	; (800b854 <tcp_receive+0xb0c>)
 800b77a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	891b      	ldrh	r3, [r3, #8]
 800b780:	461c      	mov	r4, r3
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	68db      	ldr	r3, [r3, #12]
 800b786:	899b      	ldrh	r3, [r3, #12]
 800b788:	b29b      	uxth	r3, r3
 800b78a:	4618      	mov	r0, r3
 800b78c:	f7fa fdfc 	bl	8006388 <lwip_htons>
 800b790:	4603      	mov	r3, r0
 800b792:	b2db      	uxtb	r3, r3
 800b794:	f003 0303 	and.w	r3, r3, #3
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d001      	beq.n	800b7a0 <tcp_receive+0xa58>
 800b79c:	2301      	movs	r3, #1
 800b79e:	e000      	b.n	800b7a2 <tcp_receive+0xa5a>
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	191a      	adds	r2, r3, r4
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7a8:	441a      	add	r2, r3
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7b2:	461c      	mov	r4, r3
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	891b      	ldrh	r3, [r3, #8]
 800b7b8:	461d      	mov	r5, r3
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	68db      	ldr	r3, [r3, #12]
 800b7be:	899b      	ldrh	r3, [r3, #12]
 800b7c0:	b29b      	uxth	r3, r3
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	f7fa fde0 	bl	8006388 <lwip_htons>
 800b7c8:	4603      	mov	r3, r0
 800b7ca:	b2db      	uxtb	r3, r3
 800b7cc:	f003 0303 	and.w	r3, r3, #3
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d001      	beq.n	800b7d8 <tcp_receive+0xa90>
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	e000      	b.n	800b7da <tcp_receive+0xa92>
 800b7d8:	2300      	movs	r3, #0
 800b7da:	442b      	add	r3, r5
 800b7dc:	429c      	cmp	r4, r3
 800b7de:	d206      	bcs.n	800b7ee <tcp_receive+0xaa6>
 800b7e0:	4b1e      	ldr	r3, [pc, #120]	; (800b85c <tcp_receive+0xb14>)
 800b7e2:	f240 622b 	movw	r2, #1579	; 0x62b
 800b7e6:	4923      	ldr	r1, [pc, #140]	; (800b874 <tcp_receive+0xb2c>)
 800b7e8:	481e      	ldr	r0, [pc, #120]	; (800b864 <tcp_receive+0xb1c>)
 800b7ea:	f005 f813 	bl	8010814 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	891b      	ldrh	r3, [r3, #8]
 800b7f2:	461c      	mov	r4, r3
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	68db      	ldr	r3, [r3, #12]
 800b7f8:	899b      	ldrh	r3, [r3, #12]
 800b7fa:	b29b      	uxth	r3, r3
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	f7fa fdc3 	bl	8006388 <lwip_htons>
 800b802:	4603      	mov	r3, r0
 800b804:	b2db      	uxtb	r3, r3
 800b806:	f003 0303 	and.w	r3, r3, #3
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d001      	beq.n	800b812 <tcp_receive+0xaca>
 800b80e:	2301      	movs	r3, #1
 800b810:	e000      	b.n	800b814 <tcp_receive+0xacc>
 800b812:	2300      	movs	r3, #0
 800b814:	1919      	adds	r1, r3, r4
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b81a:	b28b      	uxth	r3, r1
 800b81c:	1ad3      	subs	r3, r2, r3
 800b81e:	b29a      	uxth	r2, r3
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	f7fc ff43 	bl	80086b0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800b82a:	68bb      	ldr	r3, [r7, #8]
 800b82c:	685b      	ldr	r3, [r3, #4]
 800b82e:	891b      	ldrh	r3, [r3, #8]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d028      	beq.n	800b886 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800b834:	4b0d      	ldr	r3, [pc, #52]	; (800b86c <tcp_receive+0xb24>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d01d      	beq.n	800b878 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800b83c:	4b0b      	ldr	r3, [pc, #44]	; (800b86c <tcp_receive+0xb24>)
 800b83e:	681a      	ldr	r2, [r3, #0]
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	685b      	ldr	r3, [r3, #4]
 800b844:	4619      	mov	r1, r3
 800b846:	4610      	mov	r0, r2
 800b848:	f7fc f9be 	bl	8007bc8 <pbuf_cat>
 800b84c:	e018      	b.n	800b880 <tcp_receive+0xb38>
 800b84e:	bf00      	nop
 800b850:	200088e6 	.word	0x200088e6
 800b854:	200088dc 	.word	0x200088dc
 800b858:	200088bc 	.word	0x200088bc
 800b85c:	080128b0 	.word	0x080128b0
 800b860:	08012c90 	.word	0x08012c90
 800b864:	080128fc 	.word	0x080128fc
 800b868:	08012ccc 	.word	0x08012ccc
 800b86c:	200088ec 	.word	0x200088ec
 800b870:	200088e9 	.word	0x200088e9
 800b874:	08012cec 	.word	0x08012cec
            } else {
              recv_data = cseg->p;
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	685b      	ldr	r3, [r3, #4]
 800b87c:	4a70      	ldr	r2, [pc, #448]	; (800ba40 <tcp_receive+0xcf8>)
 800b87e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	2200      	movs	r2, #0
 800b884:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	68db      	ldr	r3, [r3, #12]
 800b88a:	899b      	ldrh	r3, [r3, #12]
 800b88c:	b29b      	uxth	r3, r3
 800b88e:	4618      	mov	r0, r3
 800b890:	f7fa fd7a 	bl	8006388 <lwip_htons>
 800b894:	4603      	mov	r3, r0
 800b896:	b2db      	uxtb	r3, r3
 800b898:	f003 0301 	and.w	r3, r3, #1
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d00d      	beq.n	800b8bc <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800b8a0:	4b68      	ldr	r3, [pc, #416]	; (800ba44 <tcp_receive+0xcfc>)
 800b8a2:	781b      	ldrb	r3, [r3, #0]
 800b8a4:	f043 0320 	orr.w	r3, r3, #32
 800b8a8:	b2da      	uxtb	r2, r3
 800b8aa:	4b66      	ldr	r3, [pc, #408]	; (800ba44 <tcp_receive+0xcfc>)
 800b8ac:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	7d1b      	ldrb	r3, [r3, #20]
 800b8b2:	2b04      	cmp	r3, #4
 800b8b4:	d102      	bne.n	800b8bc <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2207      	movs	r2, #7
 800b8ba:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800b8bc:	68bb      	ldr	r3, [r7, #8]
 800b8be:	681a      	ldr	r2, [r3, #0]
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800b8c4:	68b8      	ldr	r0, [r7, #8]
 800b8c6:	f7fd fbd2 	bl	800906e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d008      	beq.n	800b8e4 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8d6:	68db      	ldr	r3, [r3, #12]
 800b8d8:	685a      	ldr	r2, [r3, #4]
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800b8de:	429a      	cmp	r2, r3
 800b8e0:	f43f af43 	beq.w	800b76a <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	8b5b      	ldrh	r3, [r3, #26]
 800b8e8:	f003 0301 	and.w	r3, r3, #1
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d00e      	beq.n	800b90e <tcp_receive+0xbc6>
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	8b5b      	ldrh	r3, [r3, #26]
 800b8f4:	f023 0301 	bic.w	r3, r3, #1
 800b8f8:	b29a      	uxth	r2, r3
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	835a      	strh	r2, [r3, #26]
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	8b5b      	ldrh	r3, [r3, #26]
 800b902:	f043 0302 	orr.w	r3, r3, #2
 800b906:	b29a      	uxth	r2, r3
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800b90c:	e188      	b.n	800bc20 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	8b5b      	ldrh	r3, [r3, #26]
 800b912:	f043 0301 	orr.w	r3, r3, #1
 800b916:	b29a      	uxth	r2, r3
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800b91c:	e180      	b.n	800bc20 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b922:	2b00      	cmp	r3, #0
 800b924:	d106      	bne.n	800b934 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800b926:	4848      	ldr	r0, [pc, #288]	; (800ba48 <tcp_receive+0xd00>)
 800b928:	f7fd fbba 	bl	80090a0 <tcp_seg_copy>
 800b92c:	4602      	mov	r2, r0
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	675a      	str	r2, [r3, #116]	; 0x74
 800b932:	e16d      	b.n	800bc10 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800b934:	2300      	movs	r3, #0
 800b936:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b93c:	63bb      	str	r3, [r7, #56]	; 0x38
 800b93e:	e157      	b.n	800bbf0 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800b940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b942:	68db      	ldr	r3, [r3, #12]
 800b944:	685a      	ldr	r2, [r3, #4]
 800b946:	4b41      	ldr	r3, [pc, #260]	; (800ba4c <tcp_receive+0xd04>)
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	429a      	cmp	r2, r3
 800b94c:	d11d      	bne.n	800b98a <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800b94e:	4b3e      	ldr	r3, [pc, #248]	; (800ba48 <tcp_receive+0xd00>)
 800b950:	891a      	ldrh	r2, [r3, #8]
 800b952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b954:	891b      	ldrh	r3, [r3, #8]
 800b956:	429a      	cmp	r2, r3
 800b958:	f240 814f 	bls.w	800bbfa <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b95c:	483a      	ldr	r0, [pc, #232]	; (800ba48 <tcp_receive+0xd00>)
 800b95e:	f7fd fb9f 	bl	80090a0 <tcp_seg_copy>
 800b962:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800b964:	697b      	ldr	r3, [r7, #20]
 800b966:	2b00      	cmp	r3, #0
 800b968:	f000 8149 	beq.w	800bbfe <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800b96c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d003      	beq.n	800b97a <tcp_receive+0xc32>
                    prev->next = cseg;
 800b972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b974:	697a      	ldr	r2, [r7, #20]
 800b976:	601a      	str	r2, [r3, #0]
 800b978:	e002      	b.n	800b980 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	697a      	ldr	r2, [r7, #20]
 800b97e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800b980:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b982:	6978      	ldr	r0, [r7, #20]
 800b984:	f7ff f8dc 	bl	800ab40 <tcp_oos_insert_segment>
                }
                break;
 800b988:	e139      	b.n	800bbfe <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800b98a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d117      	bne.n	800b9c0 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800b990:	4b2e      	ldr	r3, [pc, #184]	; (800ba4c <tcp_receive+0xd04>)
 800b992:	681a      	ldr	r2, [r3, #0]
 800b994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b996:	68db      	ldr	r3, [r3, #12]
 800b998:	685b      	ldr	r3, [r3, #4]
 800b99a:	1ad3      	subs	r3, r2, r3
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	da57      	bge.n	800ba50 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b9a0:	4829      	ldr	r0, [pc, #164]	; (800ba48 <tcp_receive+0xd00>)
 800b9a2:	f7fd fb7d 	bl	80090a0 <tcp_seg_copy>
 800b9a6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800b9a8:	69bb      	ldr	r3, [r7, #24]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	f000 8129 	beq.w	800bc02 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	69ba      	ldr	r2, [r7, #24]
 800b9b4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800b9b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b9b8:	69b8      	ldr	r0, [r7, #24]
 800b9ba:	f7ff f8c1 	bl	800ab40 <tcp_oos_insert_segment>
                  }
                  break;
 800b9be:	e120      	b.n	800bc02 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800b9c0:	4b22      	ldr	r3, [pc, #136]	; (800ba4c <tcp_receive+0xd04>)
 800b9c2:	681a      	ldr	r2, [r3, #0]
 800b9c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9c6:	68db      	ldr	r3, [r3, #12]
 800b9c8:	685b      	ldr	r3, [r3, #4]
 800b9ca:	1ad3      	subs	r3, r2, r3
 800b9cc:	3b01      	subs	r3, #1
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	db3e      	blt.n	800ba50 <tcp_receive+0xd08>
 800b9d2:	4b1e      	ldr	r3, [pc, #120]	; (800ba4c <tcp_receive+0xd04>)
 800b9d4:	681a      	ldr	r2, [r3, #0]
 800b9d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9d8:	68db      	ldr	r3, [r3, #12]
 800b9da:	685b      	ldr	r3, [r3, #4]
 800b9dc:	1ad3      	subs	r3, r2, r3
 800b9de:	3301      	adds	r3, #1
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	dc35      	bgt.n	800ba50 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b9e4:	4818      	ldr	r0, [pc, #96]	; (800ba48 <tcp_receive+0xd00>)
 800b9e6:	f7fd fb5b 	bl	80090a0 <tcp_seg_copy>
 800b9ea:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800b9ec:	69fb      	ldr	r3, [r7, #28]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	f000 8109 	beq.w	800bc06 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800b9f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9f6:	68db      	ldr	r3, [r3, #12]
 800b9f8:	685b      	ldr	r3, [r3, #4]
 800b9fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b9fc:	8912      	ldrh	r2, [r2, #8]
 800b9fe:	441a      	add	r2, r3
 800ba00:	4b12      	ldr	r3, [pc, #72]	; (800ba4c <tcp_receive+0xd04>)
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	1ad3      	subs	r3, r2, r3
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	dd12      	ble.n	800ba30 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800ba0a:	4b10      	ldr	r3, [pc, #64]	; (800ba4c <tcp_receive+0xd04>)
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	b29a      	uxth	r2, r3
 800ba10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba12:	68db      	ldr	r3, [r3, #12]
 800ba14:	685b      	ldr	r3, [r3, #4]
 800ba16:	b29b      	uxth	r3, r3
 800ba18:	1ad3      	subs	r3, r2, r3
 800ba1a:	b29a      	uxth	r2, r3
 800ba1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba1e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800ba20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba22:	685a      	ldr	r2, [r3, #4]
 800ba24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba26:	891b      	ldrh	r3, [r3, #8]
 800ba28:	4619      	mov	r1, r3
 800ba2a:	4610      	mov	r0, r2
 800ba2c:	f7fb fe84 	bl	8007738 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800ba30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba32:	69fa      	ldr	r2, [r7, #28]
 800ba34:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800ba36:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ba38:	69f8      	ldr	r0, [r7, #28]
 800ba3a:	f7ff f881 	bl	800ab40 <tcp_oos_insert_segment>
                  }
                  break;
 800ba3e:	e0e2      	b.n	800bc06 <tcp_receive+0xebe>
 800ba40:	200088ec 	.word	0x200088ec
 800ba44:	200088e9 	.word	0x200088e9
 800ba48:	200088bc 	.word	0x200088bc
 800ba4c:	200088dc 	.word	0x200088dc
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800ba50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba52:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800ba54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	f040 80c6 	bne.w	800bbea <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800ba5e:	4b80      	ldr	r3, [pc, #512]	; (800bc60 <tcp_receive+0xf18>)
 800ba60:	681a      	ldr	r2, [r3, #0]
 800ba62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba64:	68db      	ldr	r3, [r3, #12]
 800ba66:	685b      	ldr	r3, [r3, #4]
 800ba68:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	f340 80bd 	ble.w	800bbea <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ba70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba72:	68db      	ldr	r3, [r3, #12]
 800ba74:	899b      	ldrh	r3, [r3, #12]
 800ba76:	b29b      	uxth	r3, r3
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f7fa fc85 	bl	8006388 <lwip_htons>
 800ba7e:	4603      	mov	r3, r0
 800ba80:	b2db      	uxtb	r3, r3
 800ba82:	f003 0301 	and.w	r3, r3, #1
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	f040 80bf 	bne.w	800bc0a <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800ba8c:	4875      	ldr	r0, [pc, #468]	; (800bc64 <tcp_receive+0xf1c>)
 800ba8e:	f7fd fb07 	bl	80090a0 <tcp_seg_copy>
 800ba92:	4602      	mov	r2, r0
 800ba94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba96:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800ba98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	f000 80b6 	beq.w	800bc0e <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800baa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baa4:	68db      	ldr	r3, [r3, #12]
 800baa6:	685b      	ldr	r3, [r3, #4]
 800baa8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800baaa:	8912      	ldrh	r2, [r2, #8]
 800baac:	441a      	add	r2, r3
 800baae:	4b6c      	ldr	r3, [pc, #432]	; (800bc60 <tcp_receive+0xf18>)
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	1ad3      	subs	r3, r2, r3
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	dd12      	ble.n	800bade <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800bab8:	4b69      	ldr	r3, [pc, #420]	; (800bc60 <tcp_receive+0xf18>)
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	b29a      	uxth	r2, r3
 800babe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bac0:	68db      	ldr	r3, [r3, #12]
 800bac2:	685b      	ldr	r3, [r3, #4]
 800bac4:	b29b      	uxth	r3, r3
 800bac6:	1ad3      	subs	r3, r2, r3
 800bac8:	b29a      	uxth	r2, r3
 800baca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bacc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800bace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bad0:	685a      	ldr	r2, [r3, #4]
 800bad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bad4:	891b      	ldrh	r3, [r3, #8]
 800bad6:	4619      	mov	r1, r3
 800bad8:	4610      	mov	r0, r2
 800bada:	f7fb fe2d 	bl	8007738 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800bade:	4b62      	ldr	r3, [pc, #392]	; (800bc68 <tcp_receive+0xf20>)
 800bae0:	881b      	ldrh	r3, [r3, #0]
 800bae2:	461a      	mov	r2, r3
 800bae4:	4b5e      	ldr	r3, [pc, #376]	; (800bc60 <tcp_receive+0xf18>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	441a      	add	r2, r3
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baee:	6879      	ldr	r1, [r7, #4]
 800baf0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800baf2:	440b      	add	r3, r1
 800baf4:	1ad3      	subs	r3, r2, r3
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	f340 8089 	ble.w	800bc0e <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800bafc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	68db      	ldr	r3, [r3, #12]
 800bb02:	899b      	ldrh	r3, [r3, #12]
 800bb04:	b29b      	uxth	r3, r3
 800bb06:	4618      	mov	r0, r3
 800bb08:	f7fa fc3e 	bl	8006388 <lwip_htons>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	b2db      	uxtb	r3, r3
 800bb10:	f003 0301 	and.w	r3, r3, #1
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d022      	beq.n	800bb5e <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800bb18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	68db      	ldr	r3, [r3, #12]
 800bb1e:	899b      	ldrh	r3, [r3, #12]
 800bb20:	b29b      	uxth	r3, r3
 800bb22:	b21b      	sxth	r3, r3
 800bb24:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bb28:	b21c      	sxth	r4, r3
 800bb2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	68db      	ldr	r3, [r3, #12]
 800bb30:	899b      	ldrh	r3, [r3, #12]
 800bb32:	b29b      	uxth	r3, r3
 800bb34:	4618      	mov	r0, r3
 800bb36:	f7fa fc27 	bl	8006388 <lwip_htons>
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	b2db      	uxtb	r3, r3
 800bb3e:	b29b      	uxth	r3, r3
 800bb40:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800bb44:	b29b      	uxth	r3, r3
 800bb46:	4618      	mov	r0, r3
 800bb48:	f7fa fc1e 	bl	8006388 <lwip_htons>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	b21b      	sxth	r3, r3
 800bb50:	4323      	orrs	r3, r4
 800bb52:	b21a      	sxth	r2, r3
 800bb54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	68db      	ldr	r3, [r3, #12]
 800bb5a:	b292      	uxth	r2, r2
 800bb5c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb62:	b29a      	uxth	r2, r3
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb68:	4413      	add	r3, r2
 800bb6a:	b299      	uxth	r1, r3
 800bb6c:	4b3c      	ldr	r3, [pc, #240]	; (800bc60 <tcp_receive+0xf18>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	b29a      	uxth	r2, r3
 800bb72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	1a8a      	subs	r2, r1, r2
 800bb78:	b292      	uxth	r2, r2
 800bb7a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800bb7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	685a      	ldr	r2, [r3, #4]
 800bb82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	891b      	ldrh	r3, [r3, #8]
 800bb88:	4619      	mov	r1, r3
 800bb8a:	4610      	mov	r0, r2
 800bb8c:	f7fb fdd4 	bl	8007738 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800bb90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	891c      	ldrh	r4, [r3, #8]
 800bb96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	68db      	ldr	r3, [r3, #12]
 800bb9c:	899b      	ldrh	r3, [r3, #12]
 800bb9e:	b29b      	uxth	r3, r3
 800bba0:	4618      	mov	r0, r3
 800bba2:	f7fa fbf1 	bl	8006388 <lwip_htons>
 800bba6:	4603      	mov	r3, r0
 800bba8:	b2db      	uxtb	r3, r3
 800bbaa:	f003 0303 	and.w	r3, r3, #3
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d001      	beq.n	800bbb6 <tcp_receive+0xe6e>
 800bbb2:	2301      	movs	r3, #1
 800bbb4:	e000      	b.n	800bbb8 <tcp_receive+0xe70>
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	4423      	add	r3, r4
 800bbba:	b29a      	uxth	r2, r3
 800bbbc:	4b2a      	ldr	r3, [pc, #168]	; (800bc68 <tcp_receive+0xf20>)
 800bbbe:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800bbc0:	4b29      	ldr	r3, [pc, #164]	; (800bc68 <tcp_receive+0xf20>)
 800bbc2:	881b      	ldrh	r3, [r3, #0]
 800bbc4:	461a      	mov	r2, r3
 800bbc6:	4b26      	ldr	r3, [pc, #152]	; (800bc60 <tcp_receive+0xf18>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	441a      	add	r2, r3
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbd0:	6879      	ldr	r1, [r7, #4]
 800bbd2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bbd4:	440b      	add	r3, r1
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	d019      	beq.n	800bc0e <tcp_receive+0xec6>
 800bbda:	4b24      	ldr	r3, [pc, #144]	; (800bc6c <tcp_receive+0xf24>)
 800bbdc:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800bbe0:	4923      	ldr	r1, [pc, #140]	; (800bc70 <tcp_receive+0xf28>)
 800bbe2:	4824      	ldr	r0, [pc, #144]	; (800bc74 <tcp_receive+0xf2c>)
 800bbe4:	f004 fe16 	bl	8010814 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800bbe8:	e011      	b.n	800bc0e <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800bbea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	63bb      	str	r3, [r7, #56]	; 0x38
 800bbf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	f47f aea4 	bne.w	800b940 <tcp_receive+0xbf8>
 800bbf8:	e00a      	b.n	800bc10 <tcp_receive+0xec8>
                break;
 800bbfa:	bf00      	nop
 800bbfc:	e008      	b.n	800bc10 <tcp_receive+0xec8>
                break;
 800bbfe:	bf00      	nop
 800bc00:	e006      	b.n	800bc10 <tcp_receive+0xec8>
                  break;
 800bc02:	bf00      	nop
 800bc04:	e004      	b.n	800bc10 <tcp_receive+0xec8>
                  break;
 800bc06:	bf00      	nop
 800bc08:	e002      	b.n	800bc10 <tcp_receive+0xec8>
                  break;
 800bc0a:	bf00      	nop
 800bc0c:	e000      	b.n	800bc10 <tcp_receive+0xec8>
                break;
 800bc0e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800bc10:	6878      	ldr	r0, [r7, #4]
 800bc12:	f001 fa33 	bl	800d07c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800bc16:	e003      	b.n	800bc20 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800bc18:	6878      	ldr	r0, [r7, #4]
 800bc1a:	f001 fa2f 	bl	800d07c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800bc1e:	e01a      	b.n	800bc56 <tcp_receive+0xf0e>
 800bc20:	e019      	b.n	800bc56 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800bc22:	4b0f      	ldr	r3, [pc, #60]	; (800bc60 <tcp_receive+0xf18>)
 800bc24:	681a      	ldr	r2, [r3, #0]
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc2a:	1ad3      	subs	r3, r2, r3
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	db0a      	blt.n	800bc46 <tcp_receive+0xefe>
 800bc30:	4b0b      	ldr	r3, [pc, #44]	; (800bc60 <tcp_receive+0xf18>)
 800bc32:	681a      	ldr	r2, [r3, #0]
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc38:	6879      	ldr	r1, [r7, #4]
 800bc3a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bc3c:	440b      	add	r3, r1
 800bc3e:	1ad3      	subs	r3, r2, r3
 800bc40:	3301      	adds	r3, #1
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	dd07      	ble.n	800bc56 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	8b5b      	ldrh	r3, [r3, #26]
 800bc4a:	f043 0302 	orr.w	r3, r3, #2
 800bc4e:	b29a      	uxth	r2, r3
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800bc54:	e7ff      	b.n	800bc56 <tcp_receive+0xf0e>
 800bc56:	bf00      	nop
 800bc58:	3750      	adds	r7, #80	; 0x50
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bdb0      	pop	{r4, r5, r7, pc}
 800bc5e:	bf00      	nop
 800bc60:	200088dc 	.word	0x200088dc
 800bc64:	200088bc 	.word	0x200088bc
 800bc68:	200088e6 	.word	0x200088e6
 800bc6c:	080128b0 	.word	0x080128b0
 800bc70:	08012c58 	.word	0x08012c58
 800bc74:	080128fc 	.word	0x080128fc

0800bc78 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800bc78:	b480      	push	{r7}
 800bc7a:	b083      	sub	sp, #12
 800bc7c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800bc7e:	4b15      	ldr	r3, [pc, #84]	; (800bcd4 <tcp_get_next_optbyte+0x5c>)
 800bc80:	881b      	ldrh	r3, [r3, #0]
 800bc82:	1c5a      	adds	r2, r3, #1
 800bc84:	b291      	uxth	r1, r2
 800bc86:	4a13      	ldr	r2, [pc, #76]	; (800bcd4 <tcp_get_next_optbyte+0x5c>)
 800bc88:	8011      	strh	r1, [r2, #0]
 800bc8a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800bc8c:	4b12      	ldr	r3, [pc, #72]	; (800bcd8 <tcp_get_next_optbyte+0x60>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d004      	beq.n	800bc9e <tcp_get_next_optbyte+0x26>
 800bc94:	4b11      	ldr	r3, [pc, #68]	; (800bcdc <tcp_get_next_optbyte+0x64>)
 800bc96:	881b      	ldrh	r3, [r3, #0]
 800bc98:	88fa      	ldrh	r2, [r7, #6]
 800bc9a:	429a      	cmp	r2, r3
 800bc9c:	d208      	bcs.n	800bcb0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800bc9e:	4b10      	ldr	r3, [pc, #64]	; (800bce0 <tcp_get_next_optbyte+0x68>)
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	3314      	adds	r3, #20
 800bca4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800bca6:	88fb      	ldrh	r3, [r7, #6]
 800bca8:	683a      	ldr	r2, [r7, #0]
 800bcaa:	4413      	add	r3, r2
 800bcac:	781b      	ldrb	r3, [r3, #0]
 800bcae:	e00b      	b.n	800bcc8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800bcb0:	88fb      	ldrh	r3, [r7, #6]
 800bcb2:	b2da      	uxtb	r2, r3
 800bcb4:	4b09      	ldr	r3, [pc, #36]	; (800bcdc <tcp_get_next_optbyte+0x64>)
 800bcb6:	881b      	ldrh	r3, [r3, #0]
 800bcb8:	b2db      	uxtb	r3, r3
 800bcba:	1ad3      	subs	r3, r2, r3
 800bcbc:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800bcbe:	4b06      	ldr	r3, [pc, #24]	; (800bcd8 <tcp_get_next_optbyte+0x60>)
 800bcc0:	681a      	ldr	r2, [r3, #0]
 800bcc2:	797b      	ldrb	r3, [r7, #5]
 800bcc4:	4413      	add	r3, r2
 800bcc6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bcc8:	4618      	mov	r0, r3
 800bcca:	370c      	adds	r7, #12
 800bccc:	46bd      	mov	sp, r7
 800bcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd2:	4770      	bx	lr
 800bcd4:	200088d8 	.word	0x200088d8
 800bcd8:	200088d4 	.word	0x200088d4
 800bcdc:	200088d2 	.word	0x200088d2
 800bce0:	200088cc 	.word	0x200088cc

0800bce4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b084      	sub	sp, #16
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d106      	bne.n	800bd00 <tcp_parseopt+0x1c>
 800bcf2:	4b32      	ldr	r3, [pc, #200]	; (800bdbc <tcp_parseopt+0xd8>)
 800bcf4:	f240 727d 	movw	r2, #1917	; 0x77d
 800bcf8:	4931      	ldr	r1, [pc, #196]	; (800bdc0 <tcp_parseopt+0xdc>)
 800bcfa:	4832      	ldr	r0, [pc, #200]	; (800bdc4 <tcp_parseopt+0xe0>)
 800bcfc:	f004 fd8a 	bl	8010814 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800bd00:	4b31      	ldr	r3, [pc, #196]	; (800bdc8 <tcp_parseopt+0xe4>)
 800bd02:	881b      	ldrh	r3, [r3, #0]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d055      	beq.n	800bdb4 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800bd08:	4b30      	ldr	r3, [pc, #192]	; (800bdcc <tcp_parseopt+0xe8>)
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	801a      	strh	r2, [r3, #0]
 800bd0e:	e045      	b.n	800bd9c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800bd10:	f7ff ffb2 	bl	800bc78 <tcp_get_next_optbyte>
 800bd14:	4603      	mov	r3, r0
 800bd16:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800bd18:	7bfb      	ldrb	r3, [r7, #15]
 800bd1a:	2b02      	cmp	r3, #2
 800bd1c:	d006      	beq.n	800bd2c <tcp_parseopt+0x48>
 800bd1e:	2b02      	cmp	r3, #2
 800bd20:	dc2b      	bgt.n	800bd7a <tcp_parseopt+0x96>
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d041      	beq.n	800bdaa <tcp_parseopt+0xc6>
 800bd26:	2b01      	cmp	r3, #1
 800bd28:	d127      	bne.n	800bd7a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800bd2a:	e037      	b.n	800bd9c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800bd2c:	f7ff ffa4 	bl	800bc78 <tcp_get_next_optbyte>
 800bd30:	4603      	mov	r3, r0
 800bd32:	2b04      	cmp	r3, #4
 800bd34:	d13b      	bne.n	800bdae <tcp_parseopt+0xca>
 800bd36:	4b25      	ldr	r3, [pc, #148]	; (800bdcc <tcp_parseopt+0xe8>)
 800bd38:	881b      	ldrh	r3, [r3, #0]
 800bd3a:	3301      	adds	r3, #1
 800bd3c:	4a22      	ldr	r2, [pc, #136]	; (800bdc8 <tcp_parseopt+0xe4>)
 800bd3e:	8812      	ldrh	r2, [r2, #0]
 800bd40:	4293      	cmp	r3, r2
 800bd42:	da34      	bge.n	800bdae <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800bd44:	f7ff ff98 	bl	800bc78 <tcp_get_next_optbyte>
 800bd48:	4603      	mov	r3, r0
 800bd4a:	b29b      	uxth	r3, r3
 800bd4c:	021b      	lsls	r3, r3, #8
 800bd4e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800bd50:	f7ff ff92 	bl	800bc78 <tcp_get_next_optbyte>
 800bd54:	4603      	mov	r3, r0
 800bd56:	b29a      	uxth	r2, r3
 800bd58:	89bb      	ldrh	r3, [r7, #12]
 800bd5a:	4313      	orrs	r3, r2
 800bd5c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800bd5e:	89bb      	ldrh	r3, [r7, #12]
 800bd60:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800bd64:	d804      	bhi.n	800bd70 <tcp_parseopt+0x8c>
 800bd66:	89bb      	ldrh	r3, [r7, #12]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d001      	beq.n	800bd70 <tcp_parseopt+0x8c>
 800bd6c:	89ba      	ldrh	r2, [r7, #12]
 800bd6e:	e001      	b.n	800bd74 <tcp_parseopt+0x90>
 800bd70:	f44f 7206 	mov.w	r2, #536	; 0x218
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800bd78:	e010      	b.n	800bd9c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800bd7a:	f7ff ff7d 	bl	800bc78 <tcp_get_next_optbyte>
 800bd7e:	4603      	mov	r3, r0
 800bd80:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800bd82:	7afb      	ldrb	r3, [r7, #11]
 800bd84:	2b01      	cmp	r3, #1
 800bd86:	d914      	bls.n	800bdb2 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800bd88:	7afb      	ldrb	r3, [r7, #11]
 800bd8a:	b29a      	uxth	r2, r3
 800bd8c:	4b0f      	ldr	r3, [pc, #60]	; (800bdcc <tcp_parseopt+0xe8>)
 800bd8e:	881b      	ldrh	r3, [r3, #0]
 800bd90:	4413      	add	r3, r2
 800bd92:	b29b      	uxth	r3, r3
 800bd94:	3b02      	subs	r3, #2
 800bd96:	b29a      	uxth	r2, r3
 800bd98:	4b0c      	ldr	r3, [pc, #48]	; (800bdcc <tcp_parseopt+0xe8>)
 800bd9a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800bd9c:	4b0b      	ldr	r3, [pc, #44]	; (800bdcc <tcp_parseopt+0xe8>)
 800bd9e:	881a      	ldrh	r2, [r3, #0]
 800bda0:	4b09      	ldr	r3, [pc, #36]	; (800bdc8 <tcp_parseopt+0xe4>)
 800bda2:	881b      	ldrh	r3, [r3, #0]
 800bda4:	429a      	cmp	r2, r3
 800bda6:	d3b3      	bcc.n	800bd10 <tcp_parseopt+0x2c>
 800bda8:	e004      	b.n	800bdb4 <tcp_parseopt+0xd0>
          return;
 800bdaa:	bf00      	nop
 800bdac:	e002      	b.n	800bdb4 <tcp_parseopt+0xd0>
            return;
 800bdae:	bf00      	nop
 800bdb0:	e000      	b.n	800bdb4 <tcp_parseopt+0xd0>
            return;
 800bdb2:	bf00      	nop
      }
    }
  }
}
 800bdb4:	3710      	adds	r7, #16
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd80      	pop	{r7, pc}
 800bdba:	bf00      	nop
 800bdbc:	080128b0 	.word	0x080128b0
 800bdc0:	08012d14 	.word	0x08012d14
 800bdc4:	080128fc 	.word	0x080128fc
 800bdc8:	200088d0 	.word	0x200088d0
 800bdcc:	200088d8 	.word	0x200088d8

0800bdd0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800bdd0:	b480      	push	{r7}
 800bdd2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800bdd4:	4b05      	ldr	r3, [pc, #20]	; (800bdec <tcp_trigger_input_pcb_close+0x1c>)
 800bdd6:	781b      	ldrb	r3, [r3, #0]
 800bdd8:	f043 0310 	orr.w	r3, r3, #16
 800bddc:	b2da      	uxtb	r2, r3
 800bdde:	4b03      	ldr	r3, [pc, #12]	; (800bdec <tcp_trigger_input_pcb_close+0x1c>)
 800bde0:	701a      	strb	r2, [r3, #0]
}
 800bde2:	bf00      	nop
 800bde4:	46bd      	mov	sp, r7
 800bde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdea:	4770      	bx	lr
 800bdec:	200088e9 	.word	0x200088e9

0800bdf0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b084      	sub	sp, #16
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	60f8      	str	r0, [r7, #12]
 800bdf8:	60b9      	str	r1, [r7, #8]
 800bdfa:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d00a      	beq.n	800be18 <tcp_route+0x28>
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	7a1b      	ldrb	r3, [r3, #8]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d006      	beq.n	800be18 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	7a1b      	ldrb	r3, [r3, #8]
 800be0e:	4618      	mov	r0, r3
 800be10:	f7fb fab8 	bl	8007384 <netif_get_by_index>
 800be14:	4603      	mov	r3, r0
 800be16:	e003      	b.n	800be20 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800be18:	6878      	ldr	r0, [r7, #4]
 800be1a:	f003 fa0f 	bl	800f23c <ip4_route>
 800be1e:	4603      	mov	r3, r0
  }
}
 800be20:	4618      	mov	r0, r3
 800be22:	3710      	adds	r7, #16
 800be24:	46bd      	mov	sp, r7
 800be26:	bd80      	pop	{r7, pc}

0800be28 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800be28:	b590      	push	{r4, r7, lr}
 800be2a:	b087      	sub	sp, #28
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	60f8      	str	r0, [r7, #12]
 800be30:	60b9      	str	r1, [r7, #8]
 800be32:	603b      	str	r3, [r7, #0]
 800be34:	4613      	mov	r3, r2
 800be36:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d105      	bne.n	800be4a <tcp_create_segment+0x22>
 800be3e:	4b44      	ldr	r3, [pc, #272]	; (800bf50 <tcp_create_segment+0x128>)
 800be40:	22a3      	movs	r2, #163	; 0xa3
 800be42:	4944      	ldr	r1, [pc, #272]	; (800bf54 <tcp_create_segment+0x12c>)
 800be44:	4844      	ldr	r0, [pc, #272]	; (800bf58 <tcp_create_segment+0x130>)
 800be46:	f004 fce5 	bl	8010814 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d105      	bne.n	800be5c <tcp_create_segment+0x34>
 800be50:	4b3f      	ldr	r3, [pc, #252]	; (800bf50 <tcp_create_segment+0x128>)
 800be52:	22a4      	movs	r2, #164	; 0xa4
 800be54:	4941      	ldr	r1, [pc, #260]	; (800bf5c <tcp_create_segment+0x134>)
 800be56:	4840      	ldr	r0, [pc, #256]	; (800bf58 <tcp_create_segment+0x130>)
 800be58:	f004 fcdc 	bl	8010814 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800be5c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800be60:	009b      	lsls	r3, r3, #2
 800be62:	b2db      	uxtb	r3, r3
 800be64:	f003 0304 	and.w	r3, r3, #4
 800be68:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800be6a:	2003      	movs	r0, #3
 800be6c:	f7fa ff04 	bl	8006c78 <memp_malloc>
 800be70:	6138      	str	r0, [r7, #16]
 800be72:	693b      	ldr	r3, [r7, #16]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d104      	bne.n	800be82 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800be78:	68b8      	ldr	r0, [r7, #8]
 800be7a:	f7fb fde3 	bl	8007a44 <pbuf_free>
    return NULL;
 800be7e:	2300      	movs	r3, #0
 800be80:	e061      	b.n	800bf46 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800be82:	693b      	ldr	r3, [r7, #16]
 800be84:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800be88:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800be8a:	693b      	ldr	r3, [r7, #16]
 800be8c:	2200      	movs	r2, #0
 800be8e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800be90:	693b      	ldr	r3, [r7, #16]
 800be92:	68ba      	ldr	r2, [r7, #8]
 800be94:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	891a      	ldrh	r2, [r3, #8]
 800be9a:	7dfb      	ldrb	r3, [r7, #23]
 800be9c:	b29b      	uxth	r3, r3
 800be9e:	429a      	cmp	r2, r3
 800bea0:	d205      	bcs.n	800beae <tcp_create_segment+0x86>
 800bea2:	4b2b      	ldr	r3, [pc, #172]	; (800bf50 <tcp_create_segment+0x128>)
 800bea4:	22b0      	movs	r2, #176	; 0xb0
 800bea6:	492e      	ldr	r1, [pc, #184]	; (800bf60 <tcp_create_segment+0x138>)
 800bea8:	482b      	ldr	r0, [pc, #172]	; (800bf58 <tcp_create_segment+0x130>)
 800beaa:	f004 fcb3 	bl	8010814 <iprintf>
  seg->len = p->tot_len - optlen;
 800beae:	68bb      	ldr	r3, [r7, #8]
 800beb0:	891a      	ldrh	r2, [r3, #8]
 800beb2:	7dfb      	ldrb	r3, [r7, #23]
 800beb4:	b29b      	uxth	r3, r3
 800beb6:	1ad3      	subs	r3, r2, r3
 800beb8:	b29a      	uxth	r2, r3
 800beba:	693b      	ldr	r3, [r7, #16]
 800bebc:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800bebe:	2114      	movs	r1, #20
 800bec0:	68b8      	ldr	r0, [r7, #8]
 800bec2:	f7fb fd29 	bl	8007918 <pbuf_add_header>
 800bec6:	4603      	mov	r3, r0
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d004      	beq.n	800bed6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800becc:	6938      	ldr	r0, [r7, #16]
 800bece:	f7fd f8ce 	bl	800906e <tcp_seg_free>
    return NULL;
 800bed2:	2300      	movs	r3, #0
 800bed4:	e037      	b.n	800bf46 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800bed6:	693b      	ldr	r3, [r7, #16]
 800bed8:	685b      	ldr	r3, [r3, #4]
 800beda:	685a      	ldr	r2, [r3, #4]
 800bedc:	693b      	ldr	r3, [r7, #16]
 800bede:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	8ada      	ldrh	r2, [r3, #22]
 800bee4:	693b      	ldr	r3, [r7, #16]
 800bee6:	68dc      	ldr	r4, [r3, #12]
 800bee8:	4610      	mov	r0, r2
 800beea:	f7fa fa4d 	bl	8006388 <lwip_htons>
 800beee:	4603      	mov	r3, r0
 800bef0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	8b1a      	ldrh	r2, [r3, #24]
 800bef6:	693b      	ldr	r3, [r7, #16]
 800bef8:	68dc      	ldr	r4, [r3, #12]
 800befa:	4610      	mov	r0, r2
 800befc:	f7fa fa44 	bl	8006388 <lwip_htons>
 800bf00:	4603      	mov	r3, r0
 800bf02:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800bf04:	693b      	ldr	r3, [r7, #16]
 800bf06:	68dc      	ldr	r4, [r3, #12]
 800bf08:	6838      	ldr	r0, [r7, #0]
 800bf0a:	f7fa fa52 	bl	80063b2 <lwip_htonl>
 800bf0e:	4603      	mov	r3, r0
 800bf10:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800bf12:	7dfb      	ldrb	r3, [r7, #23]
 800bf14:	089b      	lsrs	r3, r3, #2
 800bf16:	b2db      	uxtb	r3, r3
 800bf18:	b29b      	uxth	r3, r3
 800bf1a:	3305      	adds	r3, #5
 800bf1c:	b29b      	uxth	r3, r3
 800bf1e:	031b      	lsls	r3, r3, #12
 800bf20:	b29a      	uxth	r2, r3
 800bf22:	79fb      	ldrb	r3, [r7, #7]
 800bf24:	b29b      	uxth	r3, r3
 800bf26:	4313      	orrs	r3, r2
 800bf28:	b29a      	uxth	r2, r3
 800bf2a:	693b      	ldr	r3, [r7, #16]
 800bf2c:	68dc      	ldr	r4, [r3, #12]
 800bf2e:	4610      	mov	r0, r2
 800bf30:	f7fa fa2a 	bl	8006388 <lwip_htons>
 800bf34:	4603      	mov	r3, r0
 800bf36:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800bf38:	693b      	ldr	r3, [r7, #16]
 800bf3a:	68db      	ldr	r3, [r3, #12]
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	749a      	strb	r2, [r3, #18]
 800bf40:	2200      	movs	r2, #0
 800bf42:	74da      	strb	r2, [r3, #19]
  return seg;
 800bf44:	693b      	ldr	r3, [r7, #16]
}
 800bf46:	4618      	mov	r0, r3
 800bf48:	371c      	adds	r7, #28
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd90      	pop	{r4, r7, pc}
 800bf4e:	bf00      	nop
 800bf50:	08012d30 	.word	0x08012d30
 800bf54:	08012d64 	.word	0x08012d64
 800bf58:	08012d84 	.word	0x08012d84
 800bf5c:	08012dac 	.word	0x08012dac
 800bf60:	08012dd0 	.word	0x08012dd0

0800bf64 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800bf64:	b590      	push	{r4, r7, lr}
 800bf66:	b08b      	sub	sp, #44	; 0x2c
 800bf68:	af02      	add	r7, sp, #8
 800bf6a:	6078      	str	r0, [r7, #4]
 800bf6c:	460b      	mov	r3, r1
 800bf6e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800bf70:	2300      	movs	r3, #0
 800bf72:	61fb      	str	r3, [r7, #28]
 800bf74:	2300      	movs	r3, #0
 800bf76:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800bf78:	2300      	movs	r3, #0
 800bf7a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d106      	bne.n	800bf90 <tcp_split_unsent_seg+0x2c>
 800bf82:	4b95      	ldr	r3, [pc, #596]	; (800c1d8 <tcp_split_unsent_seg+0x274>)
 800bf84:	f240 324b 	movw	r2, #843	; 0x34b
 800bf88:	4994      	ldr	r1, [pc, #592]	; (800c1dc <tcp_split_unsent_seg+0x278>)
 800bf8a:	4895      	ldr	r0, [pc, #596]	; (800c1e0 <tcp_split_unsent_seg+0x27c>)
 800bf8c:	f004 fc42 	bl	8010814 <iprintf>

  useg = pcb->unsent;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf94:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800bf96:	697b      	ldr	r3, [r7, #20]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d102      	bne.n	800bfa2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800bf9c:	f04f 33ff 	mov.w	r3, #4294967295
 800bfa0:	e116      	b.n	800c1d0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800bfa2:	887b      	ldrh	r3, [r7, #2]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d109      	bne.n	800bfbc <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800bfa8:	4b8b      	ldr	r3, [pc, #556]	; (800c1d8 <tcp_split_unsent_seg+0x274>)
 800bfaa:	f240 3253 	movw	r2, #851	; 0x353
 800bfae:	498d      	ldr	r1, [pc, #564]	; (800c1e4 <tcp_split_unsent_seg+0x280>)
 800bfb0:	488b      	ldr	r0, [pc, #556]	; (800c1e0 <tcp_split_unsent_seg+0x27c>)
 800bfb2:	f004 fc2f 	bl	8010814 <iprintf>
    return ERR_VAL;
 800bfb6:	f06f 0305 	mvn.w	r3, #5
 800bfba:	e109      	b.n	800c1d0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800bfbc:	697b      	ldr	r3, [r7, #20]
 800bfbe:	891b      	ldrh	r3, [r3, #8]
 800bfc0:	887a      	ldrh	r2, [r7, #2]
 800bfc2:	429a      	cmp	r2, r3
 800bfc4:	d301      	bcc.n	800bfca <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	e102      	b.n	800c1d0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bfce:	887a      	ldrh	r2, [r7, #2]
 800bfd0:	429a      	cmp	r2, r3
 800bfd2:	d906      	bls.n	800bfe2 <tcp_split_unsent_seg+0x7e>
 800bfd4:	4b80      	ldr	r3, [pc, #512]	; (800c1d8 <tcp_split_unsent_seg+0x274>)
 800bfd6:	f240 325b 	movw	r2, #859	; 0x35b
 800bfda:	4983      	ldr	r1, [pc, #524]	; (800c1e8 <tcp_split_unsent_seg+0x284>)
 800bfdc:	4880      	ldr	r0, [pc, #512]	; (800c1e0 <tcp_split_unsent_seg+0x27c>)
 800bfde:	f004 fc19 	bl	8010814 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800bfe2:	697b      	ldr	r3, [r7, #20]
 800bfe4:	891b      	ldrh	r3, [r3, #8]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d106      	bne.n	800bff8 <tcp_split_unsent_seg+0x94>
 800bfea:	4b7b      	ldr	r3, [pc, #492]	; (800c1d8 <tcp_split_unsent_seg+0x274>)
 800bfec:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800bff0:	497e      	ldr	r1, [pc, #504]	; (800c1ec <tcp_split_unsent_seg+0x288>)
 800bff2:	487b      	ldr	r0, [pc, #492]	; (800c1e0 <tcp_split_unsent_seg+0x27c>)
 800bff4:	f004 fc0e 	bl	8010814 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800bff8:	697b      	ldr	r3, [r7, #20]
 800bffa:	7a9b      	ldrb	r3, [r3, #10]
 800bffc:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800bffe:	7bfb      	ldrb	r3, [r7, #15]
 800c000:	009b      	lsls	r3, r3, #2
 800c002:	b2db      	uxtb	r3, r3
 800c004:	f003 0304 	and.w	r3, r3, #4
 800c008:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800c00a:	697b      	ldr	r3, [r7, #20]
 800c00c:	891a      	ldrh	r2, [r3, #8]
 800c00e:	887b      	ldrh	r3, [r7, #2]
 800c010:	1ad3      	subs	r3, r2, r3
 800c012:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800c014:	7bbb      	ldrb	r3, [r7, #14]
 800c016:	b29a      	uxth	r2, r3
 800c018:	89bb      	ldrh	r3, [r7, #12]
 800c01a:	4413      	add	r3, r2
 800c01c:	b29b      	uxth	r3, r3
 800c01e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c022:	4619      	mov	r1, r3
 800c024:	2036      	movs	r0, #54	; 0x36
 800c026:	f7fb fa29 	bl	800747c <pbuf_alloc>
 800c02a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c02c:	693b      	ldr	r3, [r7, #16]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	f000 80b7 	beq.w	800c1a2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800c034:	697b      	ldr	r3, [r7, #20]
 800c036:	685b      	ldr	r3, [r3, #4]
 800c038:	891a      	ldrh	r2, [r3, #8]
 800c03a:	697b      	ldr	r3, [r7, #20]
 800c03c:	891b      	ldrh	r3, [r3, #8]
 800c03e:	1ad3      	subs	r3, r2, r3
 800c040:	b29a      	uxth	r2, r3
 800c042:	887b      	ldrh	r3, [r7, #2]
 800c044:	4413      	add	r3, r2
 800c046:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800c048:	697b      	ldr	r3, [r7, #20]
 800c04a:	6858      	ldr	r0, [r3, #4]
 800c04c:	693b      	ldr	r3, [r7, #16]
 800c04e:	685a      	ldr	r2, [r3, #4]
 800c050:	7bbb      	ldrb	r3, [r7, #14]
 800c052:	18d1      	adds	r1, r2, r3
 800c054:	897b      	ldrh	r3, [r7, #10]
 800c056:	89ba      	ldrh	r2, [r7, #12]
 800c058:	f7fb feee 	bl	8007e38 <pbuf_copy_partial>
 800c05c:	4603      	mov	r3, r0
 800c05e:	461a      	mov	r2, r3
 800c060:	89bb      	ldrh	r3, [r7, #12]
 800c062:	4293      	cmp	r3, r2
 800c064:	f040 809f 	bne.w	800c1a6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800c068:	697b      	ldr	r3, [r7, #20]
 800c06a:	68db      	ldr	r3, [r3, #12]
 800c06c:	899b      	ldrh	r3, [r3, #12]
 800c06e:	b29b      	uxth	r3, r3
 800c070:	4618      	mov	r0, r3
 800c072:	f7fa f989 	bl	8006388 <lwip_htons>
 800c076:	4603      	mov	r3, r0
 800c078:	b2db      	uxtb	r3, r3
 800c07a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c07e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800c080:	2300      	movs	r3, #0
 800c082:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800c084:	7efb      	ldrb	r3, [r7, #27]
 800c086:	f003 0308 	and.w	r3, r3, #8
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d007      	beq.n	800c09e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800c08e:	7efb      	ldrb	r3, [r7, #27]
 800c090:	f023 0308 	bic.w	r3, r3, #8
 800c094:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800c096:	7ebb      	ldrb	r3, [r7, #26]
 800c098:	f043 0308 	orr.w	r3, r3, #8
 800c09c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800c09e:	7efb      	ldrb	r3, [r7, #27]
 800c0a0:	f003 0301 	and.w	r3, r3, #1
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d007      	beq.n	800c0b8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800c0a8:	7efb      	ldrb	r3, [r7, #27]
 800c0aa:	f023 0301 	bic.w	r3, r3, #1
 800c0ae:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800c0b0:	7ebb      	ldrb	r3, [r7, #26]
 800c0b2:	f043 0301 	orr.w	r3, r3, #1
 800c0b6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800c0b8:	697b      	ldr	r3, [r7, #20]
 800c0ba:	68db      	ldr	r3, [r3, #12]
 800c0bc:	685b      	ldr	r3, [r3, #4]
 800c0be:	4618      	mov	r0, r3
 800c0c0:	f7fa f977 	bl	80063b2 <lwip_htonl>
 800c0c4:	4602      	mov	r2, r0
 800c0c6:	887b      	ldrh	r3, [r7, #2]
 800c0c8:	18d1      	adds	r1, r2, r3
 800c0ca:	7eba      	ldrb	r2, [r7, #26]
 800c0cc:	7bfb      	ldrb	r3, [r7, #15]
 800c0ce:	9300      	str	r3, [sp, #0]
 800c0d0:	460b      	mov	r3, r1
 800c0d2:	6939      	ldr	r1, [r7, #16]
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	f7ff fea7 	bl	800be28 <tcp_create_segment>
 800c0da:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800c0dc:	69fb      	ldr	r3, [r7, #28]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d063      	beq.n	800c1aa <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800c0e2:	697b      	ldr	r3, [r7, #20]
 800c0e4:	685b      	ldr	r3, [r3, #4]
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f7fb fd34 	bl	8007b54 <pbuf_clen>
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	461a      	mov	r2, r3
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c0f6:	1a9b      	subs	r3, r3, r2
 800c0f8:	b29a      	uxth	r2, r3
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800c100:	697b      	ldr	r3, [r7, #20]
 800c102:	6858      	ldr	r0, [r3, #4]
 800c104:	697b      	ldr	r3, [r7, #20]
 800c106:	685b      	ldr	r3, [r3, #4]
 800c108:	891a      	ldrh	r2, [r3, #8]
 800c10a:	89bb      	ldrh	r3, [r7, #12]
 800c10c:	1ad3      	subs	r3, r2, r3
 800c10e:	b29b      	uxth	r3, r3
 800c110:	4619      	mov	r1, r3
 800c112:	f7fb fb11 	bl	8007738 <pbuf_realloc>
  useg->len -= remainder;
 800c116:	697b      	ldr	r3, [r7, #20]
 800c118:	891a      	ldrh	r2, [r3, #8]
 800c11a:	89bb      	ldrh	r3, [r7, #12]
 800c11c:	1ad3      	subs	r3, r2, r3
 800c11e:	b29a      	uxth	r2, r3
 800c120:	697b      	ldr	r3, [r7, #20]
 800c122:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800c124:	697b      	ldr	r3, [r7, #20]
 800c126:	68db      	ldr	r3, [r3, #12]
 800c128:	899b      	ldrh	r3, [r3, #12]
 800c12a:	b29c      	uxth	r4, r3
 800c12c:	7efb      	ldrb	r3, [r7, #27]
 800c12e:	b29b      	uxth	r3, r3
 800c130:	4618      	mov	r0, r3
 800c132:	f7fa f929 	bl	8006388 <lwip_htons>
 800c136:	4603      	mov	r3, r0
 800c138:	461a      	mov	r2, r3
 800c13a:	697b      	ldr	r3, [r7, #20]
 800c13c:	68db      	ldr	r3, [r3, #12]
 800c13e:	4322      	orrs	r2, r4
 800c140:	b292      	uxth	r2, r2
 800c142:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800c144:	697b      	ldr	r3, [r7, #20]
 800c146:	685b      	ldr	r3, [r3, #4]
 800c148:	4618      	mov	r0, r3
 800c14a:	f7fb fd03 	bl	8007b54 <pbuf_clen>
 800c14e:	4603      	mov	r3, r0
 800c150:	461a      	mov	r2, r3
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c158:	4413      	add	r3, r2
 800c15a:	b29a      	uxth	r2, r3
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c162:	69fb      	ldr	r3, [r7, #28]
 800c164:	685b      	ldr	r3, [r3, #4]
 800c166:	4618      	mov	r0, r3
 800c168:	f7fb fcf4 	bl	8007b54 <pbuf_clen>
 800c16c:	4603      	mov	r3, r0
 800c16e:	461a      	mov	r2, r3
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c176:	4413      	add	r3, r2
 800c178:	b29a      	uxth	r2, r3
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800c180:	697b      	ldr	r3, [r7, #20]
 800c182:	681a      	ldr	r2, [r3, #0]
 800c184:	69fb      	ldr	r3, [r7, #28]
 800c186:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800c188:	697b      	ldr	r3, [r7, #20]
 800c18a:	69fa      	ldr	r2, [r7, #28]
 800c18c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800c18e:	69fb      	ldr	r3, [r7, #28]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d103      	bne.n	800c19e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2200      	movs	r2, #0
 800c19a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800c19e:	2300      	movs	r3, #0
 800c1a0:	e016      	b.n	800c1d0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800c1a2:	bf00      	nop
 800c1a4:	e002      	b.n	800c1ac <tcp_split_unsent_seg+0x248>
    goto memerr;
 800c1a6:	bf00      	nop
 800c1a8:	e000      	b.n	800c1ac <tcp_split_unsent_seg+0x248>
    goto memerr;
 800c1aa:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800c1ac:	69fb      	ldr	r3, [r7, #28]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d006      	beq.n	800c1c0 <tcp_split_unsent_seg+0x25c>
 800c1b2:	4b09      	ldr	r3, [pc, #36]	; (800c1d8 <tcp_split_unsent_seg+0x274>)
 800c1b4:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800c1b8:	490d      	ldr	r1, [pc, #52]	; (800c1f0 <tcp_split_unsent_seg+0x28c>)
 800c1ba:	4809      	ldr	r0, [pc, #36]	; (800c1e0 <tcp_split_unsent_seg+0x27c>)
 800c1bc:	f004 fb2a 	bl	8010814 <iprintf>
  if (p != NULL) {
 800c1c0:	693b      	ldr	r3, [r7, #16]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d002      	beq.n	800c1cc <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800c1c6:	6938      	ldr	r0, [r7, #16]
 800c1c8:	f7fb fc3c 	bl	8007a44 <pbuf_free>
  }

  return ERR_MEM;
 800c1cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	3724      	adds	r7, #36	; 0x24
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bd90      	pop	{r4, r7, pc}
 800c1d8:	08012d30 	.word	0x08012d30
 800c1dc:	080130c4 	.word	0x080130c4
 800c1e0:	08012d84 	.word	0x08012d84
 800c1e4:	080130e8 	.word	0x080130e8
 800c1e8:	0801310c 	.word	0x0801310c
 800c1ec:	0801311c 	.word	0x0801311c
 800c1f0:	0801312c 	.word	0x0801312c

0800c1f4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800c1f4:	b590      	push	{r4, r7, lr}
 800c1f6:	b085      	sub	sp, #20
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d106      	bne.n	800c210 <tcp_send_fin+0x1c>
 800c202:	4b21      	ldr	r3, [pc, #132]	; (800c288 <tcp_send_fin+0x94>)
 800c204:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800c208:	4920      	ldr	r1, [pc, #128]	; (800c28c <tcp_send_fin+0x98>)
 800c20a:	4821      	ldr	r0, [pc, #132]	; (800c290 <tcp_send_fin+0x9c>)
 800c20c:	f004 fb02 	bl	8010814 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c214:	2b00      	cmp	r3, #0
 800c216:	d02e      	beq.n	800c276 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c21c:	60fb      	str	r3, [r7, #12]
 800c21e:	e002      	b.n	800c226 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d1f8      	bne.n	800c220 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	68db      	ldr	r3, [r3, #12]
 800c232:	899b      	ldrh	r3, [r3, #12]
 800c234:	b29b      	uxth	r3, r3
 800c236:	4618      	mov	r0, r3
 800c238:	f7fa f8a6 	bl	8006388 <lwip_htons>
 800c23c:	4603      	mov	r3, r0
 800c23e:	b2db      	uxtb	r3, r3
 800c240:	f003 0307 	and.w	r3, r3, #7
 800c244:	2b00      	cmp	r3, #0
 800c246:	d116      	bne.n	800c276 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	68db      	ldr	r3, [r3, #12]
 800c24c:	899b      	ldrh	r3, [r3, #12]
 800c24e:	b29c      	uxth	r4, r3
 800c250:	2001      	movs	r0, #1
 800c252:	f7fa f899 	bl	8006388 <lwip_htons>
 800c256:	4603      	mov	r3, r0
 800c258:	461a      	mov	r2, r3
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	68db      	ldr	r3, [r3, #12]
 800c25e:	4322      	orrs	r2, r4
 800c260:	b292      	uxth	r2, r2
 800c262:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	8b5b      	ldrh	r3, [r3, #26]
 800c268:	f043 0320 	orr.w	r3, r3, #32
 800c26c:	b29a      	uxth	r2, r3
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800c272:	2300      	movs	r3, #0
 800c274:	e004      	b.n	800c280 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800c276:	2101      	movs	r1, #1
 800c278:	6878      	ldr	r0, [r7, #4]
 800c27a:	f000 f80b 	bl	800c294 <tcp_enqueue_flags>
 800c27e:	4603      	mov	r3, r0
}
 800c280:	4618      	mov	r0, r3
 800c282:	3714      	adds	r7, #20
 800c284:	46bd      	mov	sp, r7
 800c286:	bd90      	pop	{r4, r7, pc}
 800c288:	08012d30 	.word	0x08012d30
 800c28c:	08013138 	.word	0x08013138
 800c290:	08012d84 	.word	0x08012d84

0800c294 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b08a      	sub	sp, #40	; 0x28
 800c298:	af02      	add	r7, sp, #8
 800c29a:	6078      	str	r0, [r7, #4]
 800c29c:	460b      	mov	r3, r1
 800c29e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800c2a8:	78fb      	ldrb	r3, [r7, #3]
 800c2aa:	f003 0303 	and.w	r3, r3, #3
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d106      	bne.n	800c2c0 <tcp_enqueue_flags+0x2c>
 800c2b2:	4b67      	ldr	r3, [pc, #412]	; (800c450 <tcp_enqueue_flags+0x1bc>)
 800c2b4:	f240 4211 	movw	r2, #1041	; 0x411
 800c2b8:	4966      	ldr	r1, [pc, #408]	; (800c454 <tcp_enqueue_flags+0x1c0>)
 800c2ba:	4867      	ldr	r0, [pc, #412]	; (800c458 <tcp_enqueue_flags+0x1c4>)
 800c2bc:	f004 faaa 	bl	8010814 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d106      	bne.n	800c2d4 <tcp_enqueue_flags+0x40>
 800c2c6:	4b62      	ldr	r3, [pc, #392]	; (800c450 <tcp_enqueue_flags+0x1bc>)
 800c2c8:	f240 4213 	movw	r2, #1043	; 0x413
 800c2cc:	4963      	ldr	r1, [pc, #396]	; (800c45c <tcp_enqueue_flags+0x1c8>)
 800c2ce:	4862      	ldr	r0, [pc, #392]	; (800c458 <tcp_enqueue_flags+0x1c4>)
 800c2d0:	f004 faa0 	bl	8010814 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800c2d4:	78fb      	ldrb	r3, [r7, #3]
 800c2d6:	f003 0302 	and.w	r3, r3, #2
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d001      	beq.n	800c2e2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800c2de:	2301      	movs	r3, #1
 800c2e0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c2e2:	7ffb      	ldrb	r3, [r7, #31]
 800c2e4:	009b      	lsls	r3, r3, #2
 800c2e6:	b2db      	uxtb	r3, r3
 800c2e8:	f003 0304 	and.w	r3, r3, #4
 800c2ec:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c2ee:	7dfb      	ldrb	r3, [r7, #23]
 800c2f0:	b29b      	uxth	r3, r3
 800c2f2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c2f6:	4619      	mov	r1, r3
 800c2f8:	2036      	movs	r0, #54	; 0x36
 800c2fa:	f7fb f8bf 	bl	800747c <pbuf_alloc>
 800c2fe:	6138      	str	r0, [r7, #16]
 800c300:	693b      	ldr	r3, [r7, #16]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d109      	bne.n	800c31a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	8b5b      	ldrh	r3, [r3, #26]
 800c30a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c30e:	b29a      	uxth	r2, r3
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800c314:	f04f 33ff 	mov.w	r3, #4294967295
 800c318:	e095      	b.n	800c446 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800c31a:	693b      	ldr	r3, [r7, #16]
 800c31c:	895a      	ldrh	r2, [r3, #10]
 800c31e:	7dfb      	ldrb	r3, [r7, #23]
 800c320:	b29b      	uxth	r3, r3
 800c322:	429a      	cmp	r2, r3
 800c324:	d206      	bcs.n	800c334 <tcp_enqueue_flags+0xa0>
 800c326:	4b4a      	ldr	r3, [pc, #296]	; (800c450 <tcp_enqueue_flags+0x1bc>)
 800c328:	f240 4239 	movw	r2, #1081	; 0x439
 800c32c:	494c      	ldr	r1, [pc, #304]	; (800c460 <tcp_enqueue_flags+0x1cc>)
 800c32e:	484a      	ldr	r0, [pc, #296]	; (800c458 <tcp_enqueue_flags+0x1c4>)
 800c330:	f004 fa70 	bl	8010814 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800c338:	78fa      	ldrb	r2, [r7, #3]
 800c33a:	7ffb      	ldrb	r3, [r7, #31]
 800c33c:	9300      	str	r3, [sp, #0]
 800c33e:	460b      	mov	r3, r1
 800c340:	6939      	ldr	r1, [r7, #16]
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f7ff fd70 	bl	800be28 <tcp_create_segment>
 800c348:	60f8      	str	r0, [r7, #12]
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d109      	bne.n	800c364 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	8b5b      	ldrh	r3, [r3, #26]
 800c354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c358:	b29a      	uxth	r2, r3
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800c35e:	f04f 33ff 	mov.w	r3, #4294967295
 800c362:	e070      	b.n	800c446 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	68db      	ldr	r3, [r3, #12]
 800c368:	f003 0303 	and.w	r3, r3, #3
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d006      	beq.n	800c37e <tcp_enqueue_flags+0xea>
 800c370:	4b37      	ldr	r3, [pc, #220]	; (800c450 <tcp_enqueue_flags+0x1bc>)
 800c372:	f240 4242 	movw	r2, #1090	; 0x442
 800c376:	493b      	ldr	r1, [pc, #236]	; (800c464 <tcp_enqueue_flags+0x1d0>)
 800c378:	4837      	ldr	r0, [pc, #220]	; (800c458 <tcp_enqueue_flags+0x1c4>)
 800c37a:	f004 fa4b 	bl	8010814 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	891b      	ldrh	r3, [r3, #8]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d006      	beq.n	800c394 <tcp_enqueue_flags+0x100>
 800c386:	4b32      	ldr	r3, [pc, #200]	; (800c450 <tcp_enqueue_flags+0x1bc>)
 800c388:	f240 4243 	movw	r2, #1091	; 0x443
 800c38c:	4936      	ldr	r1, [pc, #216]	; (800c468 <tcp_enqueue_flags+0x1d4>)
 800c38e:	4832      	ldr	r0, [pc, #200]	; (800c458 <tcp_enqueue_flags+0x1c4>)
 800c390:	f004 fa40 	bl	8010814 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d103      	bne.n	800c3a4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	68fa      	ldr	r2, [r7, #12]
 800c3a0:	66da      	str	r2, [r3, #108]	; 0x6c
 800c3a2:	e00d      	b.n	800c3c0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3a8:	61bb      	str	r3, [r7, #24]
 800c3aa:	e002      	b.n	800c3b2 <tcp_enqueue_flags+0x11e>
 800c3ac:	69bb      	ldr	r3, [r7, #24]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	61bb      	str	r3, [r7, #24]
 800c3b2:	69bb      	ldr	r3, [r7, #24]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d1f8      	bne.n	800c3ac <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800c3ba:	69bb      	ldr	r3, [r7, #24]
 800c3bc:	68fa      	ldr	r2, [r7, #12]
 800c3be:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800c3c8:	78fb      	ldrb	r3, [r7, #3]
 800c3ca:	f003 0302 	and.w	r3, r3, #2
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d104      	bne.n	800c3dc <tcp_enqueue_flags+0x148>
 800c3d2:	78fb      	ldrb	r3, [r7, #3]
 800c3d4:	f003 0301 	and.w	r3, r3, #1
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d004      	beq.n	800c3e6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c3e0:	1c5a      	adds	r2, r3, #1
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800c3e6:	78fb      	ldrb	r3, [r7, #3]
 800c3e8:	f003 0301 	and.w	r3, r3, #1
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d006      	beq.n	800c3fe <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	8b5b      	ldrh	r3, [r3, #26]
 800c3f4:	f043 0320 	orr.w	r3, r3, #32
 800c3f8:	b29a      	uxth	r2, r3
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	685b      	ldr	r3, [r3, #4]
 800c402:	4618      	mov	r0, r3
 800c404:	f7fb fba6 	bl	8007b54 <pbuf_clen>
 800c408:	4603      	mov	r3, r0
 800c40a:	461a      	mov	r2, r3
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c412:	4413      	add	r3, r2
 800c414:	b29a      	uxth	r2, r3
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c422:	2b00      	cmp	r3, #0
 800c424:	d00e      	beq.n	800c444 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d10a      	bne.n	800c444 <tcp_enqueue_flags+0x1b0>
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c432:	2b00      	cmp	r3, #0
 800c434:	d106      	bne.n	800c444 <tcp_enqueue_flags+0x1b0>
 800c436:	4b06      	ldr	r3, [pc, #24]	; (800c450 <tcp_enqueue_flags+0x1bc>)
 800c438:	f240 4265 	movw	r2, #1125	; 0x465
 800c43c:	490b      	ldr	r1, [pc, #44]	; (800c46c <tcp_enqueue_flags+0x1d8>)
 800c43e:	4806      	ldr	r0, [pc, #24]	; (800c458 <tcp_enqueue_flags+0x1c4>)
 800c440:	f004 f9e8 	bl	8010814 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800c444:	2300      	movs	r3, #0
}
 800c446:	4618      	mov	r0, r3
 800c448:	3720      	adds	r7, #32
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bd80      	pop	{r7, pc}
 800c44e:	bf00      	nop
 800c450:	08012d30 	.word	0x08012d30
 800c454:	08013154 	.word	0x08013154
 800c458:	08012d84 	.word	0x08012d84
 800c45c:	080131ac 	.word	0x080131ac
 800c460:	080131cc 	.word	0x080131cc
 800c464:	08013208 	.word	0x08013208
 800c468:	08013220 	.word	0x08013220
 800c46c:	0801324c 	.word	0x0801324c

0800c470 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800c470:	b5b0      	push	{r4, r5, r7, lr}
 800c472:	b08a      	sub	sp, #40	; 0x28
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d106      	bne.n	800c48c <tcp_output+0x1c>
 800c47e:	4b8a      	ldr	r3, [pc, #552]	; (800c6a8 <tcp_output+0x238>)
 800c480:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800c484:	4989      	ldr	r1, [pc, #548]	; (800c6ac <tcp_output+0x23c>)
 800c486:	488a      	ldr	r0, [pc, #552]	; (800c6b0 <tcp_output+0x240>)
 800c488:	f004 f9c4 	bl	8010814 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	7d1b      	ldrb	r3, [r3, #20]
 800c490:	2b01      	cmp	r3, #1
 800c492:	d106      	bne.n	800c4a2 <tcp_output+0x32>
 800c494:	4b84      	ldr	r3, [pc, #528]	; (800c6a8 <tcp_output+0x238>)
 800c496:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800c49a:	4986      	ldr	r1, [pc, #536]	; (800c6b4 <tcp_output+0x244>)
 800c49c:	4884      	ldr	r0, [pc, #528]	; (800c6b0 <tcp_output+0x240>)
 800c49e:	f004 f9b9 	bl	8010814 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800c4a2:	4b85      	ldr	r3, [pc, #532]	; (800c6b8 <tcp_output+0x248>)
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	687a      	ldr	r2, [r7, #4]
 800c4a8:	429a      	cmp	r2, r3
 800c4aa:	d101      	bne.n	800c4b0 <tcp_output+0x40>
    return ERR_OK;
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	e1ce      	b.n	800c84e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c4bc:	4293      	cmp	r3, r2
 800c4be:	bf28      	it	cs
 800c4c0:	4613      	movcs	r3, r2
 800c4c2:	b29b      	uxth	r3, r3
 800c4c4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4ca:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800c4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d10b      	bne.n	800c4ea <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	8b5b      	ldrh	r3, [r3, #26]
 800c4d6:	f003 0302 	and.w	r3, r3, #2
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	f000 81aa 	beq.w	800c834 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800c4e0:	6878      	ldr	r0, [r7, #4]
 800c4e2:	f000 fdcb 	bl	800d07c <tcp_send_empty_ack>
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	e1b1      	b.n	800c84e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800c4ea:	6879      	ldr	r1, [r7, #4]
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	3304      	adds	r3, #4
 800c4f0:	461a      	mov	r2, r3
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f7ff fc7c 	bl	800bdf0 <tcp_route>
 800c4f8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800c4fa:	697b      	ldr	r3, [r7, #20]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d102      	bne.n	800c506 <tcp_output+0x96>
    return ERR_RTE;
 800c500:	f06f 0303 	mvn.w	r3, #3
 800c504:	e1a3      	b.n	800c84e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d003      	beq.n	800c514 <tcp_output+0xa4>
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d111      	bne.n	800c538 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800c514:	697b      	ldr	r3, [r7, #20]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d002      	beq.n	800c520 <tcp_output+0xb0>
 800c51a:	697b      	ldr	r3, [r7, #20]
 800c51c:	3304      	adds	r3, #4
 800c51e:	e000      	b.n	800c522 <tcp_output+0xb2>
 800c520:	2300      	movs	r3, #0
 800c522:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800c524:	693b      	ldr	r3, [r7, #16]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d102      	bne.n	800c530 <tcp_output+0xc0>
      return ERR_RTE;
 800c52a:	f06f 0303 	mvn.w	r3, #3
 800c52e:	e18e      	b.n	800c84e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800c530:	693b      	ldr	r3, [r7, #16]
 800c532:	681a      	ldr	r2, [r3, #0]
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800c538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c53a:	68db      	ldr	r3, [r3, #12]
 800c53c:	685b      	ldr	r3, [r3, #4]
 800c53e:	4618      	mov	r0, r3
 800c540:	f7f9 ff37 	bl	80063b2 <lwip_htonl>
 800c544:	4602      	mov	r2, r0
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c54a:	1ad3      	subs	r3, r2, r3
 800c54c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c54e:	8912      	ldrh	r2, [r2, #8]
 800c550:	4413      	add	r3, r2
 800c552:	69ba      	ldr	r2, [r7, #24]
 800c554:	429a      	cmp	r2, r3
 800c556:	d227      	bcs.n	800c5a8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c55e:	461a      	mov	r2, r3
 800c560:	69bb      	ldr	r3, [r7, #24]
 800c562:	4293      	cmp	r3, r2
 800c564:	d114      	bne.n	800c590 <tcp_output+0x120>
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d110      	bne.n	800c590 <tcp_output+0x120>
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c574:	2b00      	cmp	r3, #0
 800c576:	d10b      	bne.n	800c590 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2200      	movs	r2, #0
 800c57c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2201      	movs	r2, #1
 800c584:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2200      	movs	r2, #0
 800c58c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	8b5b      	ldrh	r3, [r3, #26]
 800c594:	f003 0302 	and.w	r3, r3, #2
 800c598:	2b00      	cmp	r3, #0
 800c59a:	f000 814d 	beq.w	800c838 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800c59e:	6878      	ldr	r0, [r7, #4]
 800c5a0:	f000 fd6c 	bl	800d07c <tcp_send_empty_ack>
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	e152      	b.n	800c84e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5b4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800c5b6:	6a3b      	ldr	r3, [r7, #32]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	f000 811c 	beq.w	800c7f6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800c5be:	e002      	b.n	800c5c6 <tcp_output+0x156>
 800c5c0:	6a3b      	ldr	r3, [r7, #32]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	623b      	str	r3, [r7, #32]
 800c5c6:	6a3b      	ldr	r3, [r7, #32]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d1f8      	bne.n	800c5c0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800c5ce:	e112      	b.n	800c7f6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800c5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5d2:	68db      	ldr	r3, [r3, #12]
 800c5d4:	899b      	ldrh	r3, [r3, #12]
 800c5d6:	b29b      	uxth	r3, r3
 800c5d8:	4618      	mov	r0, r3
 800c5da:	f7f9 fed5 	bl	8006388 <lwip_htons>
 800c5de:	4603      	mov	r3, r0
 800c5e0:	b2db      	uxtb	r3, r3
 800c5e2:	f003 0304 	and.w	r3, r3, #4
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d006      	beq.n	800c5f8 <tcp_output+0x188>
 800c5ea:	4b2f      	ldr	r3, [pc, #188]	; (800c6a8 <tcp_output+0x238>)
 800c5ec:	f240 5236 	movw	r2, #1334	; 0x536
 800c5f0:	4932      	ldr	r1, [pc, #200]	; (800c6bc <tcp_output+0x24c>)
 800c5f2:	482f      	ldr	r0, [pc, #188]	; (800c6b0 <tcp_output+0x240>)
 800c5f4:	f004 f90e 	bl	8010814 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d01f      	beq.n	800c640 <tcp_output+0x1d0>
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	8b5b      	ldrh	r3, [r3, #26]
 800c604:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d119      	bne.n	800c640 <tcp_output+0x1d0>
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c610:	2b00      	cmp	r3, #0
 800c612:	d00b      	beq.n	800c62c <tcp_output+0x1bc>
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d110      	bne.n	800c640 <tcp_output+0x1d0>
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c622:	891a      	ldrh	r2, [r3, #8]
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c628:	429a      	cmp	r2, r3
 800c62a:	d209      	bcs.n	800c640 <tcp_output+0x1d0>
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c632:	2b00      	cmp	r3, #0
 800c634:	d004      	beq.n	800c640 <tcp_output+0x1d0>
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c63c:	2b08      	cmp	r3, #8
 800c63e:	d901      	bls.n	800c644 <tcp_output+0x1d4>
 800c640:	2301      	movs	r3, #1
 800c642:	e000      	b.n	800c646 <tcp_output+0x1d6>
 800c644:	2300      	movs	r3, #0
 800c646:	2b00      	cmp	r3, #0
 800c648:	d106      	bne.n	800c658 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	8b5b      	ldrh	r3, [r3, #26]
 800c64e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c652:	2b00      	cmp	r3, #0
 800c654:	f000 80e4 	beq.w	800c820 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	7d1b      	ldrb	r3, [r3, #20]
 800c65c:	2b02      	cmp	r3, #2
 800c65e:	d00d      	beq.n	800c67c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800c660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c662:	68db      	ldr	r3, [r3, #12]
 800c664:	899b      	ldrh	r3, [r3, #12]
 800c666:	b29c      	uxth	r4, r3
 800c668:	2010      	movs	r0, #16
 800c66a:	f7f9 fe8d 	bl	8006388 <lwip_htons>
 800c66e:	4603      	mov	r3, r0
 800c670:	461a      	mov	r2, r3
 800c672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c674:	68db      	ldr	r3, [r3, #12]
 800c676:	4322      	orrs	r2, r4
 800c678:	b292      	uxth	r2, r2
 800c67a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800c67c:	697a      	ldr	r2, [r7, #20]
 800c67e:	6879      	ldr	r1, [r7, #4]
 800c680:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c682:	f000 f909 	bl	800c898 <tcp_output_segment>
 800c686:	4603      	mov	r3, r0
 800c688:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800c68a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d016      	beq.n	800c6c0 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	8b5b      	ldrh	r3, [r3, #26]
 800c696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c69a:	b29a      	uxth	r2, r3
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	835a      	strh	r2, [r3, #26]
      return err;
 800c6a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c6a4:	e0d3      	b.n	800c84e <tcp_output+0x3de>
 800c6a6:	bf00      	nop
 800c6a8:	08012d30 	.word	0x08012d30
 800c6ac:	08013274 	.word	0x08013274
 800c6b0:	08012d84 	.word	0x08012d84
 800c6b4:	0801328c 	.word	0x0801328c
 800c6b8:	200088f0 	.word	0x200088f0
 800c6bc:	080132b4 	.word	0x080132b4
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800c6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6c2:	681a      	ldr	r2, [r3, #0]
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	7d1b      	ldrb	r3, [r3, #20]
 800c6cc:	2b02      	cmp	r3, #2
 800c6ce:	d006      	beq.n	800c6de <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	8b5b      	ldrh	r3, [r3, #26]
 800c6d4:	f023 0303 	bic.w	r3, r3, #3
 800c6d8:	b29a      	uxth	r2, r3
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6e0:	68db      	ldr	r3, [r3, #12]
 800c6e2:	685b      	ldr	r3, [r3, #4]
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	f7f9 fe64 	bl	80063b2 <lwip_htonl>
 800c6ea:	4604      	mov	r4, r0
 800c6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ee:	891b      	ldrh	r3, [r3, #8]
 800c6f0:	461d      	mov	r5, r3
 800c6f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6f4:	68db      	ldr	r3, [r3, #12]
 800c6f6:	899b      	ldrh	r3, [r3, #12]
 800c6f8:	b29b      	uxth	r3, r3
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	f7f9 fe44 	bl	8006388 <lwip_htons>
 800c700:	4603      	mov	r3, r0
 800c702:	b2db      	uxtb	r3, r3
 800c704:	f003 0303 	and.w	r3, r3, #3
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d001      	beq.n	800c710 <tcp_output+0x2a0>
 800c70c:	2301      	movs	r3, #1
 800c70e:	e000      	b.n	800c712 <tcp_output+0x2a2>
 800c710:	2300      	movs	r3, #0
 800c712:	442b      	add	r3, r5
 800c714:	4423      	add	r3, r4
 800c716:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c71c:	68bb      	ldr	r3, [r7, #8]
 800c71e:	1ad3      	subs	r3, r2, r3
 800c720:	2b00      	cmp	r3, #0
 800c722:	da02      	bge.n	800c72a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	68ba      	ldr	r2, [r7, #8]
 800c728:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800c72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c72c:	891b      	ldrh	r3, [r3, #8]
 800c72e:	461c      	mov	r4, r3
 800c730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c732:	68db      	ldr	r3, [r3, #12]
 800c734:	899b      	ldrh	r3, [r3, #12]
 800c736:	b29b      	uxth	r3, r3
 800c738:	4618      	mov	r0, r3
 800c73a:	f7f9 fe25 	bl	8006388 <lwip_htons>
 800c73e:	4603      	mov	r3, r0
 800c740:	b2db      	uxtb	r3, r3
 800c742:	f003 0303 	and.w	r3, r3, #3
 800c746:	2b00      	cmp	r3, #0
 800c748:	d001      	beq.n	800c74e <tcp_output+0x2de>
 800c74a:	2301      	movs	r3, #1
 800c74c:	e000      	b.n	800c750 <tcp_output+0x2e0>
 800c74e:	2300      	movs	r3, #0
 800c750:	4423      	add	r3, r4
 800c752:	2b00      	cmp	r3, #0
 800c754:	d049      	beq.n	800c7ea <tcp_output+0x37a>
      seg->next = NULL;
 800c756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c758:	2200      	movs	r2, #0
 800c75a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c760:	2b00      	cmp	r3, #0
 800c762:	d105      	bne.n	800c770 <tcp_output+0x300>
        pcb->unacked = seg;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c768:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800c76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c76c:	623b      	str	r3, [r7, #32]
 800c76e:	e03f      	b.n	800c7f0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800c770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c772:	68db      	ldr	r3, [r3, #12]
 800c774:	685b      	ldr	r3, [r3, #4]
 800c776:	4618      	mov	r0, r3
 800c778:	f7f9 fe1b 	bl	80063b2 <lwip_htonl>
 800c77c:	4604      	mov	r4, r0
 800c77e:	6a3b      	ldr	r3, [r7, #32]
 800c780:	68db      	ldr	r3, [r3, #12]
 800c782:	685b      	ldr	r3, [r3, #4]
 800c784:	4618      	mov	r0, r3
 800c786:	f7f9 fe14 	bl	80063b2 <lwip_htonl>
 800c78a:	4603      	mov	r3, r0
 800c78c:	1ae3      	subs	r3, r4, r3
 800c78e:	2b00      	cmp	r3, #0
 800c790:	da24      	bge.n	800c7dc <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	3370      	adds	r3, #112	; 0x70
 800c796:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c798:	e002      	b.n	800c7a0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800c79a:	69fb      	ldr	r3, [r7, #28]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c7a0:	69fb      	ldr	r3, [r7, #28]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d011      	beq.n	800c7cc <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c7a8:	69fb      	ldr	r3, [r7, #28]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	68db      	ldr	r3, [r3, #12]
 800c7ae:	685b      	ldr	r3, [r3, #4]
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	f7f9 fdfe 	bl	80063b2 <lwip_htonl>
 800c7b6:	4604      	mov	r4, r0
 800c7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ba:	68db      	ldr	r3, [r3, #12]
 800c7bc:	685b      	ldr	r3, [r3, #4]
 800c7be:	4618      	mov	r0, r3
 800c7c0:	f7f9 fdf7 	bl	80063b2 <lwip_htonl>
 800c7c4:	4603      	mov	r3, r0
 800c7c6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	dbe6      	blt.n	800c79a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800c7cc:	69fb      	ldr	r3, [r7, #28]
 800c7ce:	681a      	ldr	r2, [r3, #0]
 800c7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7d2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800c7d4:	69fb      	ldr	r3, [r7, #28]
 800c7d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7d8:	601a      	str	r2, [r3, #0]
 800c7da:	e009      	b.n	800c7f0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800c7dc:	6a3b      	ldr	r3, [r7, #32]
 800c7de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7e0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800c7e2:	6a3b      	ldr	r3, [r7, #32]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	623b      	str	r3, [r7, #32]
 800c7e8:	e002      	b.n	800c7f0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800c7ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c7ec:	f7fc fc3f 	bl	800906e <tcp_seg_free>
    }
    seg = pcb->unsent;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7f4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800c7f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d012      	beq.n	800c822 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800c7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7fe:	68db      	ldr	r3, [r3, #12]
 800c800:	685b      	ldr	r3, [r3, #4]
 800c802:	4618      	mov	r0, r3
 800c804:	f7f9 fdd5 	bl	80063b2 <lwip_htonl>
 800c808:	4602      	mov	r2, r0
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c80e:	1ad3      	subs	r3, r2, r3
 800c810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c812:	8912      	ldrh	r2, [r2, #8]
 800c814:	4413      	add	r3, r2
  while (seg != NULL &&
 800c816:	69ba      	ldr	r2, [r7, #24]
 800c818:	429a      	cmp	r2, r3
 800c81a:	f4bf aed9 	bcs.w	800c5d0 <tcp_output+0x160>
 800c81e:	e000      	b.n	800c822 <tcp_output+0x3b2>
      break;
 800c820:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c826:	2b00      	cmp	r3, #0
 800c828:	d108      	bne.n	800c83c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	2200      	movs	r2, #0
 800c82e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800c832:	e004      	b.n	800c83e <tcp_output+0x3ce>
    goto output_done;
 800c834:	bf00      	nop
 800c836:	e002      	b.n	800c83e <tcp_output+0x3ce>
    goto output_done;
 800c838:	bf00      	nop
 800c83a:	e000      	b.n	800c83e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800c83c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	8b5b      	ldrh	r3, [r3, #26]
 800c842:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c846:	b29a      	uxth	r2, r3
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800c84c:	2300      	movs	r3, #0
}
 800c84e:	4618      	mov	r0, r3
 800c850:	3728      	adds	r7, #40	; 0x28
 800c852:	46bd      	mov	sp, r7
 800c854:	bdb0      	pop	{r4, r5, r7, pc}
 800c856:	bf00      	nop

0800c858 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b082      	sub	sp, #8
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d106      	bne.n	800c874 <tcp_output_segment_busy+0x1c>
 800c866:	4b09      	ldr	r3, [pc, #36]	; (800c88c <tcp_output_segment_busy+0x34>)
 800c868:	f240 529a 	movw	r2, #1434	; 0x59a
 800c86c:	4908      	ldr	r1, [pc, #32]	; (800c890 <tcp_output_segment_busy+0x38>)
 800c86e:	4809      	ldr	r0, [pc, #36]	; (800c894 <tcp_output_segment_busy+0x3c>)
 800c870:	f003 ffd0 	bl	8010814 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	685b      	ldr	r3, [r3, #4]
 800c878:	7b9b      	ldrb	r3, [r3, #14]
 800c87a:	2b01      	cmp	r3, #1
 800c87c:	d001      	beq.n	800c882 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800c87e:	2301      	movs	r3, #1
 800c880:	e000      	b.n	800c884 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800c882:	2300      	movs	r3, #0
}
 800c884:	4618      	mov	r0, r3
 800c886:	3708      	adds	r7, #8
 800c888:	46bd      	mov	sp, r7
 800c88a:	bd80      	pop	{r7, pc}
 800c88c:	08012d30 	.word	0x08012d30
 800c890:	080132cc 	.word	0x080132cc
 800c894:	08012d84 	.word	0x08012d84

0800c898 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800c898:	b5b0      	push	{r4, r5, r7, lr}
 800c89a:	b08c      	sub	sp, #48	; 0x30
 800c89c:	af04      	add	r7, sp, #16
 800c89e:	60f8      	str	r0, [r7, #12]
 800c8a0:	60b9      	str	r1, [r7, #8]
 800c8a2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d106      	bne.n	800c8b8 <tcp_output_segment+0x20>
 800c8aa:	4b64      	ldr	r3, [pc, #400]	; (800ca3c <tcp_output_segment+0x1a4>)
 800c8ac:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800c8b0:	4963      	ldr	r1, [pc, #396]	; (800ca40 <tcp_output_segment+0x1a8>)
 800c8b2:	4864      	ldr	r0, [pc, #400]	; (800ca44 <tcp_output_segment+0x1ac>)
 800c8b4:	f003 ffae 	bl	8010814 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800c8b8:	68bb      	ldr	r3, [r7, #8]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d106      	bne.n	800c8cc <tcp_output_segment+0x34>
 800c8be:	4b5f      	ldr	r3, [pc, #380]	; (800ca3c <tcp_output_segment+0x1a4>)
 800c8c0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800c8c4:	4960      	ldr	r1, [pc, #384]	; (800ca48 <tcp_output_segment+0x1b0>)
 800c8c6:	485f      	ldr	r0, [pc, #380]	; (800ca44 <tcp_output_segment+0x1ac>)
 800c8c8:	f003 ffa4 	bl	8010814 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d106      	bne.n	800c8e0 <tcp_output_segment+0x48>
 800c8d2:	4b5a      	ldr	r3, [pc, #360]	; (800ca3c <tcp_output_segment+0x1a4>)
 800c8d4:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800c8d8:	495c      	ldr	r1, [pc, #368]	; (800ca4c <tcp_output_segment+0x1b4>)
 800c8da:	485a      	ldr	r0, [pc, #360]	; (800ca44 <tcp_output_segment+0x1ac>)
 800c8dc:	f003 ff9a 	bl	8010814 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800c8e0:	68f8      	ldr	r0, [r7, #12]
 800c8e2:	f7ff ffb9 	bl	800c858 <tcp_output_segment_busy>
 800c8e6:	4603      	mov	r3, r0
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d001      	beq.n	800c8f0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	e0a1      	b.n	800ca34 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800c8f0:	68bb      	ldr	r3, [r7, #8]
 800c8f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	68dc      	ldr	r4, [r3, #12]
 800c8f8:	4610      	mov	r0, r2
 800c8fa:	f7f9 fd5a 	bl	80063b2 <lwip_htonl>
 800c8fe:	4603      	mov	r3, r0
 800c900:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800c902:	68bb      	ldr	r3, [r7, #8]
 800c904:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	68dc      	ldr	r4, [r3, #12]
 800c90a:	4610      	mov	r0, r2
 800c90c:	f7f9 fd3c 	bl	8006388 <lwip_htons>
 800c910:	4603      	mov	r3, r0
 800c912:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c914:	68bb      	ldr	r3, [r7, #8]
 800c916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c918:	68ba      	ldr	r2, [r7, #8]
 800c91a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800c91c:	441a      	add	r2, r3
 800c91e:	68bb      	ldr	r3, [r7, #8]
 800c920:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	68db      	ldr	r3, [r3, #12]
 800c926:	3314      	adds	r3, #20
 800c928:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	7a9b      	ldrb	r3, [r3, #10]
 800c92e:	f003 0301 	and.w	r3, r3, #1
 800c932:	2b00      	cmp	r3, #0
 800c934:	d015      	beq.n	800c962 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800c936:	68bb      	ldr	r3, [r7, #8]
 800c938:	3304      	adds	r3, #4
 800c93a:	461a      	mov	r2, r3
 800c93c:	6879      	ldr	r1, [r7, #4]
 800c93e:	f44f 7006 	mov.w	r0, #536	; 0x218
 800c942:	f7fc fe8b 	bl	800965c <tcp_eff_send_mss_netif>
 800c946:	4603      	mov	r3, r0
 800c948:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800c94a:	8b7b      	ldrh	r3, [r7, #26]
 800c94c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800c950:	4618      	mov	r0, r3
 800c952:	f7f9 fd2e 	bl	80063b2 <lwip_htonl>
 800c956:	4602      	mov	r2, r0
 800c958:	69fb      	ldr	r3, [r7, #28]
 800c95a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800c95c:	69fb      	ldr	r3, [r7, #28]
 800c95e:	3304      	adds	r3, #4
 800c960:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800c962:	68bb      	ldr	r3, [r7, #8]
 800c964:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c968:	2b00      	cmp	r3, #0
 800c96a:	da02      	bge.n	800c972 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800c96c:	68bb      	ldr	r3, [r7, #8]
 800c96e:	2200      	movs	r2, #0
 800c970:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800c972:	68bb      	ldr	r3, [r7, #8]
 800c974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c976:	2b00      	cmp	r3, #0
 800c978:	d10c      	bne.n	800c994 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800c97a:	4b35      	ldr	r3, [pc, #212]	; (800ca50 <tcp_output_segment+0x1b8>)
 800c97c:	681a      	ldr	r2, [r3, #0]
 800c97e:	68bb      	ldr	r3, [r7, #8]
 800c980:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	68db      	ldr	r3, [r3, #12]
 800c986:	685b      	ldr	r3, [r3, #4]
 800c988:	4618      	mov	r0, r3
 800c98a:	f7f9 fd12 	bl	80063b2 <lwip_htonl>
 800c98e:	4602      	mov	r2, r0
 800c990:	68bb      	ldr	r3, [r7, #8]
 800c992:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	68da      	ldr	r2, [r3, #12]
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	685b      	ldr	r3, [r3, #4]
 800c99c:	685b      	ldr	r3, [r3, #4]
 800c99e:	1ad3      	subs	r3, r2, r3
 800c9a0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	685b      	ldr	r3, [r3, #4]
 800c9a6:	8959      	ldrh	r1, [r3, #10]
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	685b      	ldr	r3, [r3, #4]
 800c9ac:	8b3a      	ldrh	r2, [r7, #24]
 800c9ae:	1a8a      	subs	r2, r1, r2
 800c9b0:	b292      	uxth	r2, r2
 800c9b2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	685b      	ldr	r3, [r3, #4]
 800c9b8:	8919      	ldrh	r1, [r3, #8]
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	685b      	ldr	r3, [r3, #4]
 800c9be:	8b3a      	ldrh	r2, [r7, #24]
 800c9c0:	1a8a      	subs	r2, r1, r2
 800c9c2:	b292      	uxth	r2, r2
 800c9c4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	685b      	ldr	r3, [r3, #4]
 800c9ca:	68fa      	ldr	r2, [r7, #12]
 800c9cc:	68d2      	ldr	r2, [r2, #12]
 800c9ce:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	68db      	ldr	r3, [r3, #12]
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	741a      	strb	r2, [r3, #16]
 800c9d8:	2200      	movs	r2, #0
 800c9da:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	68da      	ldr	r2, [r3, #12]
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	7a9b      	ldrb	r3, [r3, #10]
 800c9e4:	f003 0301 	and.w	r3, r3, #1
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d001      	beq.n	800c9f0 <tcp_output_segment+0x158>
 800c9ec:	2318      	movs	r3, #24
 800c9ee:	e000      	b.n	800c9f2 <tcp_output_segment+0x15a>
 800c9f0:	2314      	movs	r3, #20
 800c9f2:	4413      	add	r3, r2
 800c9f4:	69fa      	ldr	r2, [r7, #28]
 800c9f6:	429a      	cmp	r2, r3
 800c9f8:	d006      	beq.n	800ca08 <tcp_output_segment+0x170>
 800c9fa:	4b10      	ldr	r3, [pc, #64]	; (800ca3c <tcp_output_segment+0x1a4>)
 800c9fc:	f240 621c 	movw	r2, #1564	; 0x61c
 800ca00:	4914      	ldr	r1, [pc, #80]	; (800ca54 <tcp_output_segment+0x1bc>)
 800ca02:	4810      	ldr	r0, [pc, #64]	; (800ca44 <tcp_output_segment+0x1ac>)
 800ca04:	f003 ff06 	bl	8010814 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	6858      	ldr	r0, [r3, #4]
 800ca0c:	68b9      	ldr	r1, [r7, #8]
 800ca0e:	68bb      	ldr	r3, [r7, #8]
 800ca10:	1d1c      	adds	r4, r3, #4
 800ca12:	68bb      	ldr	r3, [r7, #8]
 800ca14:	7add      	ldrb	r5, [r3, #11]
 800ca16:	68bb      	ldr	r3, [r7, #8]
 800ca18:	7a9b      	ldrb	r3, [r3, #10]
 800ca1a:	687a      	ldr	r2, [r7, #4]
 800ca1c:	9202      	str	r2, [sp, #8]
 800ca1e:	2206      	movs	r2, #6
 800ca20:	9201      	str	r2, [sp, #4]
 800ca22:	9300      	str	r3, [sp, #0]
 800ca24:	462b      	mov	r3, r5
 800ca26:	4622      	mov	r2, r4
 800ca28:	f002 fdc6 	bl	800f5b8 <ip4_output_if>
 800ca2c:	4603      	mov	r3, r0
 800ca2e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800ca30:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ca34:	4618      	mov	r0, r3
 800ca36:	3720      	adds	r7, #32
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	bdb0      	pop	{r4, r5, r7, pc}
 800ca3c:	08012d30 	.word	0x08012d30
 800ca40:	080132f4 	.word	0x080132f4
 800ca44:	08012d84 	.word	0x08012d84
 800ca48:	08013314 	.word	0x08013314
 800ca4c:	08013334 	.word	0x08013334
 800ca50:	200088a4 	.word	0x200088a4
 800ca54:	08013358 	.word	0x08013358

0800ca58 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800ca58:	b5b0      	push	{r4, r5, r7, lr}
 800ca5a:	b084      	sub	sp, #16
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d106      	bne.n	800ca74 <tcp_rexmit_rto_prepare+0x1c>
 800ca66:	4b31      	ldr	r3, [pc, #196]	; (800cb2c <tcp_rexmit_rto_prepare+0xd4>)
 800ca68:	f240 6263 	movw	r2, #1635	; 0x663
 800ca6c:	4930      	ldr	r1, [pc, #192]	; (800cb30 <tcp_rexmit_rto_prepare+0xd8>)
 800ca6e:	4831      	ldr	r0, [pc, #196]	; (800cb34 <tcp_rexmit_rto_prepare+0xdc>)
 800ca70:	f003 fed0 	bl	8010814 <iprintf>

  if (pcb->unacked == NULL) {
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d102      	bne.n	800ca82 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800ca7c:	f06f 0305 	mvn.w	r3, #5
 800ca80:	e050      	b.n	800cb24 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca86:	60fb      	str	r3, [r7, #12]
 800ca88:	e00b      	b.n	800caa2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800ca8a:	68f8      	ldr	r0, [r7, #12]
 800ca8c:	f7ff fee4 	bl	800c858 <tcp_output_segment_busy>
 800ca90:	4603      	mov	r3, r0
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d002      	beq.n	800ca9c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800ca96:	f06f 0305 	mvn.w	r3, #5
 800ca9a:	e043      	b.n	800cb24 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	60fb      	str	r3, [r7, #12]
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d1ef      	bne.n	800ca8a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800caaa:	68f8      	ldr	r0, [r7, #12]
 800caac:	f7ff fed4 	bl	800c858 <tcp_output_segment_busy>
 800cab0:	4603      	mov	r3, r0
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d002      	beq.n	800cabc <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800cab6:	f06f 0305 	mvn.w	r3, #5
 800caba:	e033      	b.n	800cb24 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	2200      	movs	r2, #0
 800cad0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	8b5b      	ldrh	r3, [r3, #26]
 800cad6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800cada:	b29a      	uxth	r2, r3
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	68db      	ldr	r3, [r3, #12]
 800cae4:	685b      	ldr	r3, [r3, #4]
 800cae6:	4618      	mov	r0, r3
 800cae8:	f7f9 fc63 	bl	80063b2 <lwip_htonl>
 800caec:	4604      	mov	r4, r0
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	891b      	ldrh	r3, [r3, #8]
 800caf2:	461d      	mov	r5, r3
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	68db      	ldr	r3, [r3, #12]
 800caf8:	899b      	ldrh	r3, [r3, #12]
 800cafa:	b29b      	uxth	r3, r3
 800cafc:	4618      	mov	r0, r3
 800cafe:	f7f9 fc43 	bl	8006388 <lwip_htons>
 800cb02:	4603      	mov	r3, r0
 800cb04:	b2db      	uxtb	r3, r3
 800cb06:	f003 0303 	and.w	r3, r3, #3
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d001      	beq.n	800cb12 <tcp_rexmit_rto_prepare+0xba>
 800cb0e:	2301      	movs	r3, #1
 800cb10:	e000      	b.n	800cb14 <tcp_rexmit_rto_prepare+0xbc>
 800cb12:	2300      	movs	r3, #0
 800cb14:	442b      	add	r3, r5
 800cb16:	18e2      	adds	r2, r4, r3
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	2200      	movs	r2, #0
 800cb20:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800cb22:	2300      	movs	r3, #0
}
 800cb24:	4618      	mov	r0, r3
 800cb26:	3710      	adds	r7, #16
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	bdb0      	pop	{r4, r5, r7, pc}
 800cb2c:	08012d30 	.word	0x08012d30
 800cb30:	0801336c 	.word	0x0801336c
 800cb34:	08012d84 	.word	0x08012d84

0800cb38 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b082      	sub	sp, #8
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d106      	bne.n	800cb54 <tcp_rexmit_rto_commit+0x1c>
 800cb46:	4b0d      	ldr	r3, [pc, #52]	; (800cb7c <tcp_rexmit_rto_commit+0x44>)
 800cb48:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800cb4c:	490c      	ldr	r1, [pc, #48]	; (800cb80 <tcp_rexmit_rto_commit+0x48>)
 800cb4e:	480d      	ldr	r0, [pc, #52]	; (800cb84 <tcp_rexmit_rto_commit+0x4c>)
 800cb50:	f003 fe60 	bl	8010814 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cb5a:	2bff      	cmp	r3, #255	; 0xff
 800cb5c:	d007      	beq.n	800cb6e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cb64:	3301      	adds	r3, #1
 800cb66:	b2da      	uxtb	r2, r3
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800cb6e:	6878      	ldr	r0, [r7, #4]
 800cb70:	f7ff fc7e 	bl	800c470 <tcp_output>
}
 800cb74:	bf00      	nop
 800cb76:	3708      	adds	r7, #8
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	bd80      	pop	{r7, pc}
 800cb7c:	08012d30 	.word	0x08012d30
 800cb80:	08013390 	.word	0x08013390
 800cb84:	08012d84 	.word	0x08012d84

0800cb88 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b082      	sub	sp, #8
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d106      	bne.n	800cba4 <tcp_rexmit_rto+0x1c>
 800cb96:	4b0a      	ldr	r3, [pc, #40]	; (800cbc0 <tcp_rexmit_rto+0x38>)
 800cb98:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800cb9c:	4909      	ldr	r1, [pc, #36]	; (800cbc4 <tcp_rexmit_rto+0x3c>)
 800cb9e:	480a      	ldr	r0, [pc, #40]	; (800cbc8 <tcp_rexmit_rto+0x40>)
 800cba0:	f003 fe38 	bl	8010814 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800cba4:	6878      	ldr	r0, [r7, #4]
 800cba6:	f7ff ff57 	bl	800ca58 <tcp_rexmit_rto_prepare>
 800cbaa:	4603      	mov	r3, r0
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d102      	bne.n	800cbb6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800cbb0:	6878      	ldr	r0, [r7, #4]
 800cbb2:	f7ff ffc1 	bl	800cb38 <tcp_rexmit_rto_commit>
  }
}
 800cbb6:	bf00      	nop
 800cbb8:	3708      	adds	r7, #8
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	bd80      	pop	{r7, pc}
 800cbbe:	bf00      	nop
 800cbc0:	08012d30 	.word	0x08012d30
 800cbc4:	080133b4 	.word	0x080133b4
 800cbc8:	08012d84 	.word	0x08012d84

0800cbcc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800cbcc:	b590      	push	{r4, r7, lr}
 800cbce:	b085      	sub	sp, #20
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d106      	bne.n	800cbe8 <tcp_rexmit+0x1c>
 800cbda:	4b2f      	ldr	r3, [pc, #188]	; (800cc98 <tcp_rexmit+0xcc>)
 800cbdc:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800cbe0:	492e      	ldr	r1, [pc, #184]	; (800cc9c <tcp_rexmit+0xd0>)
 800cbe2:	482f      	ldr	r0, [pc, #188]	; (800cca0 <tcp_rexmit+0xd4>)
 800cbe4:	f003 fe16 	bl	8010814 <iprintf>

  if (pcb->unacked == NULL) {
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d102      	bne.n	800cbf6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800cbf0:	f06f 0305 	mvn.w	r3, #5
 800cbf4:	e04c      	b.n	800cc90 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbfa:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800cbfc:	68b8      	ldr	r0, [r7, #8]
 800cbfe:	f7ff fe2b 	bl	800c858 <tcp_output_segment_busy>
 800cc02:	4603      	mov	r3, r0
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d002      	beq.n	800cc0e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800cc08:	f06f 0305 	mvn.w	r3, #5
 800cc0c:	e040      	b.n	800cc90 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800cc0e:	68bb      	ldr	r3, [r7, #8]
 800cc10:	681a      	ldr	r2, [r3, #0]
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	336c      	adds	r3, #108	; 0x6c
 800cc1a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800cc1c:	e002      	b.n	800cc24 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d011      	beq.n	800cc50 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	68db      	ldr	r3, [r3, #12]
 800cc32:	685b      	ldr	r3, [r3, #4]
 800cc34:	4618      	mov	r0, r3
 800cc36:	f7f9 fbbc 	bl	80063b2 <lwip_htonl>
 800cc3a:	4604      	mov	r4, r0
 800cc3c:	68bb      	ldr	r3, [r7, #8]
 800cc3e:	68db      	ldr	r3, [r3, #12]
 800cc40:	685b      	ldr	r3, [r3, #4]
 800cc42:	4618      	mov	r0, r3
 800cc44:	f7f9 fbb5 	bl	80063b2 <lwip_htonl>
 800cc48:	4603      	mov	r3, r0
 800cc4a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	dbe6      	blt.n	800cc1e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	681a      	ldr	r2, [r3, #0]
 800cc54:	68bb      	ldr	r3, [r7, #8]
 800cc56:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	68ba      	ldr	r2, [r7, #8]
 800cc5c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800cc5e:	68bb      	ldr	r3, [r7, #8]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d103      	bne.n	800cc6e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	2200      	movs	r2, #0
 800cc6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cc74:	2bff      	cmp	r3, #255	; 0xff
 800cc76:	d007      	beq.n	800cc88 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cc7e:	3301      	adds	r3, #1
 800cc80:	b2da      	uxtb	r2, r3
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800cc8e:	2300      	movs	r3, #0
}
 800cc90:	4618      	mov	r0, r3
 800cc92:	3714      	adds	r7, #20
 800cc94:	46bd      	mov	sp, r7
 800cc96:	bd90      	pop	{r4, r7, pc}
 800cc98:	08012d30 	.word	0x08012d30
 800cc9c:	080133d0 	.word	0x080133d0
 800cca0:	08012d84 	.word	0x08012d84

0800cca4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b082      	sub	sp, #8
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d106      	bne.n	800ccc0 <tcp_rexmit_fast+0x1c>
 800ccb2:	4b2a      	ldr	r3, [pc, #168]	; (800cd5c <tcp_rexmit_fast+0xb8>)
 800ccb4:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800ccb8:	4929      	ldr	r1, [pc, #164]	; (800cd60 <tcp_rexmit_fast+0xbc>)
 800ccba:	482a      	ldr	r0, [pc, #168]	; (800cd64 <tcp_rexmit_fast+0xc0>)
 800ccbc:	f003 fdaa 	bl	8010814 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d045      	beq.n	800cd54 <tcp_rexmit_fast+0xb0>
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	8b5b      	ldrh	r3, [r3, #26]
 800cccc:	f003 0304 	and.w	r3, r3, #4
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d13f      	bne.n	800cd54 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800ccd4:	6878      	ldr	r0, [r7, #4]
 800ccd6:	f7ff ff79 	bl	800cbcc <tcp_rexmit>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d139      	bne.n	800cd54 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ccec:	4293      	cmp	r3, r2
 800ccee:	bf28      	it	cs
 800ccf0:	4613      	movcs	r3, r2
 800ccf2:	b29b      	uxth	r3, r3
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	da00      	bge.n	800ccfa <tcp_rexmit_fast+0x56>
 800ccf8:	3301      	adds	r3, #1
 800ccfa:	105b      	asrs	r3, r3, #1
 800ccfc:	b29a      	uxth	r2, r3
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800cd0a:	461a      	mov	r2, r3
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cd10:	005b      	lsls	r3, r3, #1
 800cd12:	429a      	cmp	r2, r3
 800cd14:	d206      	bcs.n	800cd24 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cd1a:	005b      	lsls	r3, r3, #1
 800cd1c:	b29a      	uxth	r2, r3
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cd2e:	4619      	mov	r1, r3
 800cd30:	0049      	lsls	r1, r1, #1
 800cd32:	440b      	add	r3, r1
 800cd34:	b29b      	uxth	r3, r3
 800cd36:	4413      	add	r3, r2
 800cd38:	b29a      	uxth	r2, r3
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	8b5b      	ldrh	r3, [r3, #26]
 800cd44:	f043 0304 	orr.w	r3, r3, #4
 800cd48:	b29a      	uxth	r2, r3
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	2200      	movs	r2, #0
 800cd52:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800cd54:	bf00      	nop
 800cd56:	3708      	adds	r7, #8
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	bd80      	pop	{r7, pc}
 800cd5c:	08012d30 	.word	0x08012d30
 800cd60:	080133e8 	.word	0x080133e8
 800cd64:	08012d84 	.word	0x08012d84

0800cd68 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b086      	sub	sp, #24
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	60f8      	str	r0, [r7, #12]
 800cd70:	607b      	str	r3, [r7, #4]
 800cd72:	460b      	mov	r3, r1
 800cd74:	817b      	strh	r3, [r7, #10]
 800cd76:	4613      	mov	r3, r2
 800cd78:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800cd7a:	897a      	ldrh	r2, [r7, #10]
 800cd7c:	893b      	ldrh	r3, [r7, #8]
 800cd7e:	4413      	add	r3, r2
 800cd80:	b29b      	uxth	r3, r3
 800cd82:	3314      	adds	r3, #20
 800cd84:	b29b      	uxth	r3, r3
 800cd86:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cd8a:	4619      	mov	r1, r3
 800cd8c:	2022      	movs	r0, #34	; 0x22
 800cd8e:	f7fa fb75 	bl	800747c <pbuf_alloc>
 800cd92:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800cd94:	697b      	ldr	r3, [r7, #20]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d04d      	beq.n	800ce36 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800cd9a:	897b      	ldrh	r3, [r7, #10]
 800cd9c:	3313      	adds	r3, #19
 800cd9e:	697a      	ldr	r2, [r7, #20]
 800cda0:	8952      	ldrh	r2, [r2, #10]
 800cda2:	4293      	cmp	r3, r2
 800cda4:	db06      	blt.n	800cdb4 <tcp_output_alloc_header_common+0x4c>
 800cda6:	4b26      	ldr	r3, [pc, #152]	; (800ce40 <tcp_output_alloc_header_common+0xd8>)
 800cda8:	f240 7223 	movw	r2, #1827	; 0x723
 800cdac:	4925      	ldr	r1, [pc, #148]	; (800ce44 <tcp_output_alloc_header_common+0xdc>)
 800cdae:	4826      	ldr	r0, [pc, #152]	; (800ce48 <tcp_output_alloc_header_common+0xe0>)
 800cdb0:	f003 fd30 	bl	8010814 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800cdb4:	697b      	ldr	r3, [r7, #20]
 800cdb6:	685b      	ldr	r3, [r3, #4]
 800cdb8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800cdba:	8c3b      	ldrh	r3, [r7, #32]
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	f7f9 fae3 	bl	8006388 <lwip_htons>
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	461a      	mov	r2, r3
 800cdc6:	693b      	ldr	r3, [r7, #16]
 800cdc8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800cdca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cdcc:	4618      	mov	r0, r3
 800cdce:	f7f9 fadb 	bl	8006388 <lwip_htons>
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	461a      	mov	r2, r3
 800cdd6:	693b      	ldr	r3, [r7, #16]
 800cdd8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800cdda:	693b      	ldr	r3, [r7, #16]
 800cddc:	687a      	ldr	r2, [r7, #4]
 800cdde:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800cde0:	68f8      	ldr	r0, [r7, #12]
 800cde2:	f7f9 fae6 	bl	80063b2 <lwip_htonl>
 800cde6:	4602      	mov	r2, r0
 800cde8:	693b      	ldr	r3, [r7, #16]
 800cdea:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800cdec:	897b      	ldrh	r3, [r7, #10]
 800cdee:	089b      	lsrs	r3, r3, #2
 800cdf0:	b29b      	uxth	r3, r3
 800cdf2:	3305      	adds	r3, #5
 800cdf4:	b29b      	uxth	r3, r3
 800cdf6:	031b      	lsls	r3, r3, #12
 800cdf8:	b29a      	uxth	r2, r3
 800cdfa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cdfe:	b29b      	uxth	r3, r3
 800ce00:	4313      	orrs	r3, r2
 800ce02:	b29b      	uxth	r3, r3
 800ce04:	4618      	mov	r0, r3
 800ce06:	f7f9 fabf 	bl	8006388 <lwip_htons>
 800ce0a:	4603      	mov	r3, r0
 800ce0c:	461a      	mov	r2, r3
 800ce0e:	693b      	ldr	r3, [r7, #16]
 800ce10:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800ce12:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ce14:	4618      	mov	r0, r3
 800ce16:	f7f9 fab7 	bl	8006388 <lwip_htons>
 800ce1a:	4603      	mov	r3, r0
 800ce1c:	461a      	mov	r2, r3
 800ce1e:	693b      	ldr	r3, [r7, #16]
 800ce20:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800ce22:	693b      	ldr	r3, [r7, #16]
 800ce24:	2200      	movs	r2, #0
 800ce26:	741a      	strb	r2, [r3, #16]
 800ce28:	2200      	movs	r2, #0
 800ce2a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800ce2c:	693b      	ldr	r3, [r7, #16]
 800ce2e:	2200      	movs	r2, #0
 800ce30:	749a      	strb	r2, [r3, #18]
 800ce32:	2200      	movs	r2, #0
 800ce34:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800ce36:	697b      	ldr	r3, [r7, #20]
}
 800ce38:	4618      	mov	r0, r3
 800ce3a:	3718      	adds	r7, #24
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	bd80      	pop	{r7, pc}
 800ce40:	08012d30 	.word	0x08012d30
 800ce44:	08013408 	.word	0x08013408
 800ce48:	08012d84 	.word	0x08012d84

0800ce4c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800ce4c:	b5b0      	push	{r4, r5, r7, lr}
 800ce4e:	b08a      	sub	sp, #40	; 0x28
 800ce50:	af04      	add	r7, sp, #16
 800ce52:	60f8      	str	r0, [r7, #12]
 800ce54:	607b      	str	r3, [r7, #4]
 800ce56:	460b      	mov	r3, r1
 800ce58:	817b      	strh	r3, [r7, #10]
 800ce5a:	4613      	mov	r3, r2
 800ce5c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d106      	bne.n	800ce72 <tcp_output_alloc_header+0x26>
 800ce64:	4b15      	ldr	r3, [pc, #84]	; (800cebc <tcp_output_alloc_header+0x70>)
 800ce66:	f240 7242 	movw	r2, #1858	; 0x742
 800ce6a:	4915      	ldr	r1, [pc, #84]	; (800cec0 <tcp_output_alloc_header+0x74>)
 800ce6c:	4815      	ldr	r0, [pc, #84]	; (800cec4 <tcp_output_alloc_header+0x78>)
 800ce6e:	f003 fcd1 	bl	8010814 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	8adb      	ldrh	r3, [r3, #22]
 800ce7a:	68fa      	ldr	r2, [r7, #12]
 800ce7c:	8b12      	ldrh	r2, [r2, #24]
 800ce7e:	68f9      	ldr	r1, [r7, #12]
 800ce80:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800ce82:	893d      	ldrh	r5, [r7, #8]
 800ce84:	897c      	ldrh	r4, [r7, #10]
 800ce86:	9103      	str	r1, [sp, #12]
 800ce88:	2110      	movs	r1, #16
 800ce8a:	9102      	str	r1, [sp, #8]
 800ce8c:	9201      	str	r2, [sp, #4]
 800ce8e:	9300      	str	r3, [sp, #0]
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	462a      	mov	r2, r5
 800ce94:	4621      	mov	r1, r4
 800ce96:	f7ff ff67 	bl	800cd68 <tcp_output_alloc_header_common>
 800ce9a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800ce9c:	697b      	ldr	r3, [r7, #20]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d006      	beq.n	800ceb0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cea6:	68fa      	ldr	r2, [r7, #12]
 800cea8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800ceaa:	441a      	add	r2, r3
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800ceb0:	697b      	ldr	r3, [r7, #20]
}
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	3718      	adds	r7, #24
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	bdb0      	pop	{r4, r5, r7, pc}
 800ceba:	bf00      	nop
 800cebc:	08012d30 	.word	0x08012d30
 800cec0:	08013438 	.word	0x08013438
 800cec4:	08012d84 	.word	0x08012d84

0800cec8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b088      	sub	sp, #32
 800cecc:	af00      	add	r7, sp, #0
 800cece:	60f8      	str	r0, [r7, #12]
 800ced0:	60b9      	str	r1, [r7, #8]
 800ced2:	4611      	mov	r1, r2
 800ced4:	461a      	mov	r2, r3
 800ced6:	460b      	mov	r3, r1
 800ced8:	71fb      	strb	r3, [r7, #7]
 800ceda:	4613      	mov	r3, r2
 800cedc:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800cede:	2300      	movs	r3, #0
 800cee0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800cee2:	68bb      	ldr	r3, [r7, #8]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d106      	bne.n	800cef6 <tcp_output_fill_options+0x2e>
 800cee8:	4b12      	ldr	r3, [pc, #72]	; (800cf34 <tcp_output_fill_options+0x6c>)
 800ceea:	f240 7256 	movw	r2, #1878	; 0x756
 800ceee:	4912      	ldr	r1, [pc, #72]	; (800cf38 <tcp_output_fill_options+0x70>)
 800cef0:	4812      	ldr	r0, [pc, #72]	; (800cf3c <tcp_output_fill_options+0x74>)
 800cef2:	f003 fc8f 	bl	8010814 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800cef6:	68bb      	ldr	r3, [r7, #8]
 800cef8:	685b      	ldr	r3, [r3, #4]
 800cefa:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800cefc:	69bb      	ldr	r3, [r7, #24]
 800cefe:	3314      	adds	r3, #20
 800cf00:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800cf02:	8bfb      	ldrh	r3, [r7, #30]
 800cf04:	009b      	lsls	r3, r3, #2
 800cf06:	461a      	mov	r2, r3
 800cf08:	79fb      	ldrb	r3, [r7, #7]
 800cf0a:	009b      	lsls	r3, r3, #2
 800cf0c:	f003 0304 	and.w	r3, r3, #4
 800cf10:	4413      	add	r3, r2
 800cf12:	3314      	adds	r3, #20
 800cf14:	69ba      	ldr	r2, [r7, #24]
 800cf16:	4413      	add	r3, r2
 800cf18:	697a      	ldr	r2, [r7, #20]
 800cf1a:	429a      	cmp	r2, r3
 800cf1c:	d006      	beq.n	800cf2c <tcp_output_fill_options+0x64>
 800cf1e:	4b05      	ldr	r3, [pc, #20]	; (800cf34 <tcp_output_fill_options+0x6c>)
 800cf20:	f240 7275 	movw	r2, #1909	; 0x775
 800cf24:	4906      	ldr	r1, [pc, #24]	; (800cf40 <tcp_output_fill_options+0x78>)
 800cf26:	4805      	ldr	r0, [pc, #20]	; (800cf3c <tcp_output_fill_options+0x74>)
 800cf28:	f003 fc74 	bl	8010814 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800cf2c:	bf00      	nop
 800cf2e:	3720      	adds	r7, #32
 800cf30:	46bd      	mov	sp, r7
 800cf32:	bd80      	pop	{r7, pc}
 800cf34:	08012d30 	.word	0x08012d30
 800cf38:	08013460 	.word	0x08013460
 800cf3c:	08012d84 	.word	0x08012d84
 800cf40:	08013358 	.word	0x08013358

0800cf44 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b08a      	sub	sp, #40	; 0x28
 800cf48:	af04      	add	r7, sp, #16
 800cf4a:	60f8      	str	r0, [r7, #12]
 800cf4c:	60b9      	str	r1, [r7, #8]
 800cf4e:	607a      	str	r2, [r7, #4]
 800cf50:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800cf52:	68bb      	ldr	r3, [r7, #8]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d106      	bne.n	800cf66 <tcp_output_control_segment+0x22>
 800cf58:	4b1c      	ldr	r3, [pc, #112]	; (800cfcc <tcp_output_control_segment+0x88>)
 800cf5a:	f240 7287 	movw	r2, #1927	; 0x787
 800cf5e:	491c      	ldr	r1, [pc, #112]	; (800cfd0 <tcp_output_control_segment+0x8c>)
 800cf60:	481c      	ldr	r0, [pc, #112]	; (800cfd4 <tcp_output_control_segment+0x90>)
 800cf62:	f003 fc57 	bl	8010814 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800cf66:	683a      	ldr	r2, [r7, #0]
 800cf68:	6879      	ldr	r1, [r7, #4]
 800cf6a:	68f8      	ldr	r0, [r7, #12]
 800cf6c:	f7fe ff40 	bl	800bdf0 <tcp_route>
 800cf70:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800cf72:	693b      	ldr	r3, [r7, #16]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d102      	bne.n	800cf7e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800cf78:	23fc      	movs	r3, #252	; 0xfc
 800cf7a:	75fb      	strb	r3, [r7, #23]
 800cf7c:	e01c      	b.n	800cfb8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d006      	beq.n	800cf92 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	7adb      	ldrb	r3, [r3, #11]
 800cf88:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	7a9b      	ldrb	r3, [r3, #10]
 800cf8e:	757b      	strb	r3, [r7, #21]
 800cf90:	e003      	b.n	800cf9a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800cf92:	23ff      	movs	r3, #255	; 0xff
 800cf94:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800cf96:	2300      	movs	r3, #0
 800cf98:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800cf9a:	7dba      	ldrb	r2, [r7, #22]
 800cf9c:	693b      	ldr	r3, [r7, #16]
 800cf9e:	9302      	str	r3, [sp, #8]
 800cfa0:	2306      	movs	r3, #6
 800cfa2:	9301      	str	r3, [sp, #4]
 800cfa4:	7d7b      	ldrb	r3, [r7, #21]
 800cfa6:	9300      	str	r3, [sp, #0]
 800cfa8:	4613      	mov	r3, r2
 800cfaa:	683a      	ldr	r2, [r7, #0]
 800cfac:	6879      	ldr	r1, [r7, #4]
 800cfae:	68b8      	ldr	r0, [r7, #8]
 800cfb0:	f002 fb02 	bl	800f5b8 <ip4_output_if>
 800cfb4:	4603      	mov	r3, r0
 800cfb6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800cfb8:	68b8      	ldr	r0, [r7, #8]
 800cfba:	f7fa fd43 	bl	8007a44 <pbuf_free>
  return err;
 800cfbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	3718      	adds	r7, #24
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd80      	pop	{r7, pc}
 800cfca:	bf00      	nop
 800cfcc:	08012d30 	.word	0x08012d30
 800cfd0:	08013488 	.word	0x08013488
 800cfd4:	08012d84 	.word	0x08012d84

0800cfd8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800cfd8:	b590      	push	{r4, r7, lr}
 800cfda:	b08b      	sub	sp, #44	; 0x2c
 800cfdc:	af04      	add	r7, sp, #16
 800cfde:	60f8      	str	r0, [r7, #12]
 800cfe0:	60b9      	str	r1, [r7, #8]
 800cfe2:	607a      	str	r2, [r7, #4]
 800cfe4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d106      	bne.n	800cffa <tcp_rst+0x22>
 800cfec:	4b1f      	ldr	r3, [pc, #124]	; (800d06c <tcp_rst+0x94>)
 800cfee:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800cff2:	491f      	ldr	r1, [pc, #124]	; (800d070 <tcp_rst+0x98>)
 800cff4:	481f      	ldr	r0, [pc, #124]	; (800d074 <tcp_rst+0x9c>)
 800cff6:	f003 fc0d 	bl	8010814 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800cffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d106      	bne.n	800d00e <tcp_rst+0x36>
 800d000:	4b1a      	ldr	r3, [pc, #104]	; (800d06c <tcp_rst+0x94>)
 800d002:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800d006:	491c      	ldr	r1, [pc, #112]	; (800d078 <tcp_rst+0xa0>)
 800d008:	481a      	ldr	r0, [pc, #104]	; (800d074 <tcp_rst+0x9c>)
 800d00a:	f003 fc03 	bl	8010814 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d00e:	2300      	movs	r3, #0
 800d010:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800d012:	f246 0308 	movw	r3, #24584	; 0x6008
 800d016:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800d018:	7dfb      	ldrb	r3, [r7, #23]
 800d01a:	b29c      	uxth	r4, r3
 800d01c:	68b8      	ldr	r0, [r7, #8]
 800d01e:	f7f9 f9c8 	bl	80063b2 <lwip_htonl>
 800d022:	4602      	mov	r2, r0
 800d024:	8abb      	ldrh	r3, [r7, #20]
 800d026:	9303      	str	r3, [sp, #12]
 800d028:	2314      	movs	r3, #20
 800d02a:	9302      	str	r3, [sp, #8]
 800d02c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d02e:	9301      	str	r3, [sp, #4]
 800d030:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d032:	9300      	str	r3, [sp, #0]
 800d034:	4613      	mov	r3, r2
 800d036:	2200      	movs	r2, #0
 800d038:	4621      	mov	r1, r4
 800d03a:	6878      	ldr	r0, [r7, #4]
 800d03c:	f7ff fe94 	bl	800cd68 <tcp_output_alloc_header_common>
 800d040:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800d042:	693b      	ldr	r3, [r7, #16]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d00c      	beq.n	800d062 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d048:	7dfb      	ldrb	r3, [r7, #23]
 800d04a:	2200      	movs	r2, #0
 800d04c:	6939      	ldr	r1, [r7, #16]
 800d04e:	68f8      	ldr	r0, [r7, #12]
 800d050:	f7ff ff3a 	bl	800cec8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800d054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d056:	683a      	ldr	r2, [r7, #0]
 800d058:	6939      	ldr	r1, [r7, #16]
 800d05a:	68f8      	ldr	r0, [r7, #12]
 800d05c:	f7ff ff72 	bl	800cf44 <tcp_output_control_segment>
 800d060:	e000      	b.n	800d064 <tcp_rst+0x8c>
    return;
 800d062:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800d064:	371c      	adds	r7, #28
 800d066:	46bd      	mov	sp, r7
 800d068:	bd90      	pop	{r4, r7, pc}
 800d06a:	bf00      	nop
 800d06c:	08012d30 	.word	0x08012d30
 800d070:	080134b4 	.word	0x080134b4
 800d074:	08012d84 	.word	0x08012d84
 800d078:	080134d0 	.word	0x080134d0

0800d07c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800d07c:	b590      	push	{r4, r7, lr}
 800d07e:	b087      	sub	sp, #28
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800d084:	2300      	movs	r3, #0
 800d086:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800d088:	2300      	movs	r3, #0
 800d08a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d106      	bne.n	800d0a0 <tcp_send_empty_ack+0x24>
 800d092:	4b28      	ldr	r3, [pc, #160]	; (800d134 <tcp_send_empty_ack+0xb8>)
 800d094:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800d098:	4927      	ldr	r1, [pc, #156]	; (800d138 <tcp_send_empty_ack+0xbc>)
 800d09a:	4828      	ldr	r0, [pc, #160]	; (800d13c <tcp_send_empty_ack+0xc0>)
 800d09c:	f003 fbba 	bl	8010814 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d0a0:	7dfb      	ldrb	r3, [r7, #23]
 800d0a2:	009b      	lsls	r3, r3, #2
 800d0a4:	b2db      	uxtb	r3, r3
 800d0a6:	f003 0304 	and.w	r3, r3, #4
 800d0aa:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800d0ac:	7d7b      	ldrb	r3, [r7, #21]
 800d0ae:	b29c      	uxth	r4, r3
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	f7f9 f97c 	bl	80063b2 <lwip_htonl>
 800d0ba:	4603      	mov	r3, r0
 800d0bc:	2200      	movs	r2, #0
 800d0be:	4621      	mov	r1, r4
 800d0c0:	6878      	ldr	r0, [r7, #4]
 800d0c2:	f7ff fec3 	bl	800ce4c <tcp_output_alloc_header>
 800d0c6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d0c8:	693b      	ldr	r3, [r7, #16]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d109      	bne.n	800d0e2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	8b5b      	ldrh	r3, [r3, #26]
 800d0d2:	f043 0303 	orr.w	r3, r3, #3
 800d0d6:	b29a      	uxth	r2, r3
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800d0dc:	f06f 0301 	mvn.w	r3, #1
 800d0e0:	e023      	b.n	800d12a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800d0e2:	7dbb      	ldrb	r3, [r7, #22]
 800d0e4:	7dfa      	ldrb	r2, [r7, #23]
 800d0e6:	6939      	ldr	r1, [r7, #16]
 800d0e8:	6878      	ldr	r0, [r7, #4]
 800d0ea:	f7ff feed 	bl	800cec8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d0ee:	687a      	ldr	r2, [r7, #4]
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	3304      	adds	r3, #4
 800d0f4:	6939      	ldr	r1, [r7, #16]
 800d0f6:	6878      	ldr	r0, [r7, #4]
 800d0f8:	f7ff ff24 	bl	800cf44 <tcp_output_control_segment>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800d100:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d007      	beq.n	800d118 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	8b5b      	ldrh	r3, [r3, #26]
 800d10c:	f043 0303 	orr.w	r3, r3, #3
 800d110:	b29a      	uxth	r2, r3
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	835a      	strh	r2, [r3, #26]
 800d116:	e006      	b.n	800d126 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	8b5b      	ldrh	r3, [r3, #26]
 800d11c:	f023 0303 	bic.w	r3, r3, #3
 800d120:	b29a      	uxth	r2, r3
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800d126:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d12a:	4618      	mov	r0, r3
 800d12c:	371c      	adds	r7, #28
 800d12e:	46bd      	mov	sp, r7
 800d130:	bd90      	pop	{r4, r7, pc}
 800d132:	bf00      	nop
 800d134:	08012d30 	.word	0x08012d30
 800d138:	080134ec 	.word	0x080134ec
 800d13c:	08012d84 	.word	0x08012d84

0800d140 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800d140:	b590      	push	{r4, r7, lr}
 800d142:	b087      	sub	sp, #28
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d148:	2300      	movs	r3, #0
 800d14a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d106      	bne.n	800d160 <tcp_keepalive+0x20>
 800d152:	4b18      	ldr	r3, [pc, #96]	; (800d1b4 <tcp_keepalive+0x74>)
 800d154:	f640 0224 	movw	r2, #2084	; 0x824
 800d158:	4917      	ldr	r1, [pc, #92]	; (800d1b8 <tcp_keepalive+0x78>)
 800d15a:	4818      	ldr	r0, [pc, #96]	; (800d1bc <tcp_keepalive+0x7c>)
 800d15c:	f003 fb5a 	bl	8010814 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800d160:	7dfb      	ldrb	r3, [r7, #23]
 800d162:	b29c      	uxth	r4, r3
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d168:	3b01      	subs	r3, #1
 800d16a:	4618      	mov	r0, r3
 800d16c:	f7f9 f921 	bl	80063b2 <lwip_htonl>
 800d170:	4603      	mov	r3, r0
 800d172:	2200      	movs	r2, #0
 800d174:	4621      	mov	r1, r4
 800d176:	6878      	ldr	r0, [r7, #4]
 800d178:	f7ff fe68 	bl	800ce4c <tcp_output_alloc_header>
 800d17c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d17e:	693b      	ldr	r3, [r7, #16]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d102      	bne.n	800d18a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800d184:	f04f 33ff 	mov.w	r3, #4294967295
 800d188:	e010      	b.n	800d1ac <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d18a:	7dfb      	ldrb	r3, [r7, #23]
 800d18c:	2200      	movs	r2, #0
 800d18e:	6939      	ldr	r1, [r7, #16]
 800d190:	6878      	ldr	r0, [r7, #4]
 800d192:	f7ff fe99 	bl	800cec8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d196:	687a      	ldr	r2, [r7, #4]
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	3304      	adds	r3, #4
 800d19c:	6939      	ldr	r1, [r7, #16]
 800d19e:	6878      	ldr	r0, [r7, #4]
 800d1a0:	f7ff fed0 	bl	800cf44 <tcp_output_control_segment>
 800d1a4:	4603      	mov	r3, r0
 800d1a6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d1a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	371c      	adds	r7, #28
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	bd90      	pop	{r4, r7, pc}
 800d1b4:	08012d30 	.word	0x08012d30
 800d1b8:	0801350c 	.word	0x0801350c
 800d1bc:	08012d84 	.word	0x08012d84

0800d1c0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800d1c0:	b590      	push	{r4, r7, lr}
 800d1c2:	b08b      	sub	sp, #44	; 0x2c
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d106      	bne.n	800d1e2 <tcp_zero_window_probe+0x22>
 800d1d4:	4b4c      	ldr	r3, [pc, #304]	; (800d308 <tcp_zero_window_probe+0x148>)
 800d1d6:	f640 024f 	movw	r2, #2127	; 0x84f
 800d1da:	494c      	ldr	r1, [pc, #304]	; (800d30c <tcp_zero_window_probe+0x14c>)
 800d1dc:	484c      	ldr	r0, [pc, #304]	; (800d310 <tcp_zero_window_probe+0x150>)
 800d1de:	f003 fb19 	bl	8010814 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1e6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800d1e8:	6a3b      	ldr	r3, [r7, #32]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d101      	bne.n	800d1f2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	e086      	b.n	800d300 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d1f8:	2bff      	cmp	r3, #255	; 0xff
 800d1fa:	d007      	beq.n	800d20c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d202:	3301      	adds	r3, #1
 800d204:	b2da      	uxtb	r2, r3
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800d20c:	6a3b      	ldr	r3, [r7, #32]
 800d20e:	68db      	ldr	r3, [r3, #12]
 800d210:	899b      	ldrh	r3, [r3, #12]
 800d212:	b29b      	uxth	r3, r3
 800d214:	4618      	mov	r0, r3
 800d216:	f7f9 f8b7 	bl	8006388 <lwip_htons>
 800d21a:	4603      	mov	r3, r0
 800d21c:	b2db      	uxtb	r3, r3
 800d21e:	f003 0301 	and.w	r3, r3, #1
 800d222:	2b00      	cmp	r3, #0
 800d224:	d005      	beq.n	800d232 <tcp_zero_window_probe+0x72>
 800d226:	6a3b      	ldr	r3, [r7, #32]
 800d228:	891b      	ldrh	r3, [r3, #8]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d101      	bne.n	800d232 <tcp_zero_window_probe+0x72>
 800d22e:	2301      	movs	r3, #1
 800d230:	e000      	b.n	800d234 <tcp_zero_window_probe+0x74>
 800d232:	2300      	movs	r3, #0
 800d234:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800d236:	7ffb      	ldrb	r3, [r7, #31]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	bf0c      	ite	eq
 800d23c:	2301      	moveq	r3, #1
 800d23e:	2300      	movne	r3, #0
 800d240:	b2db      	uxtb	r3, r3
 800d242:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800d244:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d248:	b299      	uxth	r1, r3
 800d24a:	6a3b      	ldr	r3, [r7, #32]
 800d24c:	68db      	ldr	r3, [r3, #12]
 800d24e:	685b      	ldr	r3, [r3, #4]
 800d250:	8bba      	ldrh	r2, [r7, #28]
 800d252:	6878      	ldr	r0, [r7, #4]
 800d254:	f7ff fdfa 	bl	800ce4c <tcp_output_alloc_header>
 800d258:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800d25a:	69bb      	ldr	r3, [r7, #24]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d102      	bne.n	800d266 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800d260:	f04f 33ff 	mov.w	r3, #4294967295
 800d264:	e04c      	b.n	800d300 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800d266:	69bb      	ldr	r3, [r7, #24]
 800d268:	685b      	ldr	r3, [r3, #4]
 800d26a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800d26c:	7ffb      	ldrb	r3, [r7, #31]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d011      	beq.n	800d296 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800d272:	697b      	ldr	r3, [r7, #20]
 800d274:	899b      	ldrh	r3, [r3, #12]
 800d276:	b29b      	uxth	r3, r3
 800d278:	b21b      	sxth	r3, r3
 800d27a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d27e:	b21c      	sxth	r4, r3
 800d280:	2011      	movs	r0, #17
 800d282:	f7f9 f881 	bl	8006388 <lwip_htons>
 800d286:	4603      	mov	r3, r0
 800d288:	b21b      	sxth	r3, r3
 800d28a:	4323      	orrs	r3, r4
 800d28c:	b21b      	sxth	r3, r3
 800d28e:	b29a      	uxth	r2, r3
 800d290:	697b      	ldr	r3, [r7, #20]
 800d292:	819a      	strh	r2, [r3, #12]
 800d294:	e010      	b.n	800d2b8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800d296:	69bb      	ldr	r3, [r7, #24]
 800d298:	685b      	ldr	r3, [r3, #4]
 800d29a:	3314      	adds	r3, #20
 800d29c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800d29e:	6a3b      	ldr	r3, [r7, #32]
 800d2a0:	6858      	ldr	r0, [r3, #4]
 800d2a2:	6a3b      	ldr	r3, [r7, #32]
 800d2a4:	685b      	ldr	r3, [r3, #4]
 800d2a6:	891a      	ldrh	r2, [r3, #8]
 800d2a8:	6a3b      	ldr	r3, [r7, #32]
 800d2aa:	891b      	ldrh	r3, [r3, #8]
 800d2ac:	1ad3      	subs	r3, r2, r3
 800d2ae:	b29b      	uxth	r3, r3
 800d2b0:	2201      	movs	r2, #1
 800d2b2:	6939      	ldr	r1, [r7, #16]
 800d2b4:	f7fa fdc0 	bl	8007e38 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800d2b8:	6a3b      	ldr	r3, [r7, #32]
 800d2ba:	68db      	ldr	r3, [r3, #12]
 800d2bc:	685b      	ldr	r3, [r3, #4]
 800d2be:	4618      	mov	r0, r3
 800d2c0:	f7f9 f877 	bl	80063b2 <lwip_htonl>
 800d2c4:	4603      	mov	r3, r0
 800d2c6:	3301      	adds	r3, #1
 800d2c8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	1ad3      	subs	r3, r2, r3
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	da02      	bge.n	800d2dc <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	68fa      	ldr	r2, [r7, #12]
 800d2da:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d2dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	69b9      	ldr	r1, [r7, #24]
 800d2e4:	6878      	ldr	r0, [r7, #4]
 800d2e6:	f7ff fdef 	bl	800cec8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d2ea:	687a      	ldr	r2, [r7, #4]
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	3304      	adds	r3, #4
 800d2f0:	69b9      	ldr	r1, [r7, #24]
 800d2f2:	6878      	ldr	r0, [r7, #4]
 800d2f4:	f7ff fe26 	bl	800cf44 <tcp_output_control_segment>
 800d2f8:	4603      	mov	r3, r0
 800d2fa:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d2fc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800d300:	4618      	mov	r0, r3
 800d302:	372c      	adds	r7, #44	; 0x2c
 800d304:	46bd      	mov	sp, r7
 800d306:	bd90      	pop	{r4, r7, pc}
 800d308:	08012d30 	.word	0x08012d30
 800d30c:	08013528 	.word	0x08013528
 800d310:	08012d84 	.word	0x08012d84

0800d314 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b082      	sub	sp, #8
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800d31c:	f7fa ff0c 	bl	8008138 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800d320:	4b0a      	ldr	r3, [pc, #40]	; (800d34c <tcpip_tcp_timer+0x38>)
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d103      	bne.n	800d330 <tcpip_tcp_timer+0x1c>
 800d328:	4b09      	ldr	r3, [pc, #36]	; (800d350 <tcpip_tcp_timer+0x3c>)
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d005      	beq.n	800d33c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d330:	2200      	movs	r2, #0
 800d332:	4908      	ldr	r1, [pc, #32]	; (800d354 <tcpip_tcp_timer+0x40>)
 800d334:	20fa      	movs	r0, #250	; 0xfa
 800d336:	f000 f8f3 	bl	800d520 <sys_timeout>
 800d33a:	e003      	b.n	800d344 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800d33c:	4b06      	ldr	r3, [pc, #24]	; (800d358 <tcpip_tcp_timer+0x44>)
 800d33e:	2200      	movs	r2, #0
 800d340:	601a      	str	r2, [r3, #0]
  }
}
 800d342:	bf00      	nop
 800d344:	bf00      	nop
 800d346:	3708      	adds	r7, #8
 800d348:	46bd      	mov	sp, r7
 800d34a:	bd80      	pop	{r7, pc}
 800d34c:	200088b0 	.word	0x200088b0
 800d350:	200088b4 	.word	0x200088b4
 800d354:	0800d315 	.word	0x0800d315
 800d358:	200088fc 	.word	0x200088fc

0800d35c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800d360:	4b0a      	ldr	r3, [pc, #40]	; (800d38c <tcp_timer_needed+0x30>)
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d10f      	bne.n	800d388 <tcp_timer_needed+0x2c>
 800d368:	4b09      	ldr	r3, [pc, #36]	; (800d390 <tcp_timer_needed+0x34>)
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d103      	bne.n	800d378 <tcp_timer_needed+0x1c>
 800d370:	4b08      	ldr	r3, [pc, #32]	; (800d394 <tcp_timer_needed+0x38>)
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d007      	beq.n	800d388 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800d378:	4b04      	ldr	r3, [pc, #16]	; (800d38c <tcp_timer_needed+0x30>)
 800d37a:	2201      	movs	r2, #1
 800d37c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d37e:	2200      	movs	r2, #0
 800d380:	4905      	ldr	r1, [pc, #20]	; (800d398 <tcp_timer_needed+0x3c>)
 800d382:	20fa      	movs	r0, #250	; 0xfa
 800d384:	f000 f8cc 	bl	800d520 <sys_timeout>
  }
}
 800d388:	bf00      	nop
 800d38a:	bd80      	pop	{r7, pc}
 800d38c:	200088fc 	.word	0x200088fc
 800d390:	200088b0 	.word	0x200088b0
 800d394:	200088b4 	.word	0x200088b4
 800d398:	0800d315 	.word	0x0800d315

0800d39c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b086      	sub	sp, #24
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	60f8      	str	r0, [r7, #12]
 800d3a4:	60b9      	str	r1, [r7, #8]
 800d3a6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800d3a8:	2006      	movs	r0, #6
 800d3aa:	f7f9 fc65 	bl	8006c78 <memp_malloc>
 800d3ae:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800d3b0:	693b      	ldr	r3, [r7, #16]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d109      	bne.n	800d3ca <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800d3b6:	693b      	ldr	r3, [r7, #16]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d151      	bne.n	800d460 <sys_timeout_abs+0xc4>
 800d3bc:	4b2a      	ldr	r3, [pc, #168]	; (800d468 <sys_timeout_abs+0xcc>)
 800d3be:	22be      	movs	r2, #190	; 0xbe
 800d3c0:	492a      	ldr	r1, [pc, #168]	; (800d46c <sys_timeout_abs+0xd0>)
 800d3c2:	482b      	ldr	r0, [pc, #172]	; (800d470 <sys_timeout_abs+0xd4>)
 800d3c4:	f003 fa26 	bl	8010814 <iprintf>
    return;
 800d3c8:	e04a      	b.n	800d460 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800d3ca:	693b      	ldr	r3, [r7, #16]
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800d3d0:	693b      	ldr	r3, [r7, #16]
 800d3d2:	68ba      	ldr	r2, [r7, #8]
 800d3d4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800d3d6:	693b      	ldr	r3, [r7, #16]
 800d3d8:	687a      	ldr	r2, [r7, #4]
 800d3da:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800d3dc:	693b      	ldr	r3, [r7, #16]
 800d3de:	68fa      	ldr	r2, [r7, #12]
 800d3e0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800d3e2:	4b24      	ldr	r3, [pc, #144]	; (800d474 <sys_timeout_abs+0xd8>)
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d103      	bne.n	800d3f2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800d3ea:	4a22      	ldr	r2, [pc, #136]	; (800d474 <sys_timeout_abs+0xd8>)
 800d3ec:	693b      	ldr	r3, [r7, #16]
 800d3ee:	6013      	str	r3, [r2, #0]
    return;
 800d3f0:	e037      	b.n	800d462 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800d3f2:	693b      	ldr	r3, [r7, #16]
 800d3f4:	685a      	ldr	r2, [r3, #4]
 800d3f6:	4b1f      	ldr	r3, [pc, #124]	; (800d474 <sys_timeout_abs+0xd8>)
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	685b      	ldr	r3, [r3, #4]
 800d3fc:	1ad3      	subs	r3, r2, r3
 800d3fe:	0fdb      	lsrs	r3, r3, #31
 800d400:	f003 0301 	and.w	r3, r3, #1
 800d404:	b2db      	uxtb	r3, r3
 800d406:	2b00      	cmp	r3, #0
 800d408:	d007      	beq.n	800d41a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800d40a:	4b1a      	ldr	r3, [pc, #104]	; (800d474 <sys_timeout_abs+0xd8>)
 800d40c:	681a      	ldr	r2, [r3, #0]
 800d40e:	693b      	ldr	r3, [r7, #16]
 800d410:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800d412:	4a18      	ldr	r2, [pc, #96]	; (800d474 <sys_timeout_abs+0xd8>)
 800d414:	693b      	ldr	r3, [r7, #16]
 800d416:	6013      	str	r3, [r2, #0]
 800d418:	e023      	b.n	800d462 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800d41a:	4b16      	ldr	r3, [pc, #88]	; (800d474 <sys_timeout_abs+0xd8>)
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	617b      	str	r3, [r7, #20]
 800d420:	e01a      	b.n	800d458 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800d422:	697b      	ldr	r3, [r7, #20]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d00b      	beq.n	800d442 <sys_timeout_abs+0xa6>
 800d42a:	693b      	ldr	r3, [r7, #16]
 800d42c:	685a      	ldr	r2, [r3, #4]
 800d42e:	697b      	ldr	r3, [r7, #20]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	685b      	ldr	r3, [r3, #4]
 800d434:	1ad3      	subs	r3, r2, r3
 800d436:	0fdb      	lsrs	r3, r3, #31
 800d438:	f003 0301 	and.w	r3, r3, #1
 800d43c:	b2db      	uxtb	r3, r3
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d007      	beq.n	800d452 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800d442:	697b      	ldr	r3, [r7, #20]
 800d444:	681a      	ldr	r2, [r3, #0]
 800d446:	693b      	ldr	r3, [r7, #16]
 800d448:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800d44a:	697b      	ldr	r3, [r7, #20]
 800d44c:	693a      	ldr	r2, [r7, #16]
 800d44e:	601a      	str	r2, [r3, #0]
        break;
 800d450:	e007      	b.n	800d462 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800d452:	697b      	ldr	r3, [r7, #20]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	617b      	str	r3, [r7, #20]
 800d458:	697b      	ldr	r3, [r7, #20]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d1e1      	bne.n	800d422 <sys_timeout_abs+0x86>
 800d45e:	e000      	b.n	800d462 <sys_timeout_abs+0xc6>
    return;
 800d460:	bf00      	nop
      }
    }
  }
}
 800d462:	3718      	adds	r7, #24
 800d464:	46bd      	mov	sp, r7
 800d466:	bd80      	pop	{r7, pc}
 800d468:	0801354c 	.word	0x0801354c
 800d46c:	08013580 	.word	0x08013580
 800d470:	080135c0 	.word	0x080135c0
 800d474:	200088f4 	.word	0x200088f4

0800d478 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b086      	sub	sp, #24
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800d484:	697b      	ldr	r3, [r7, #20]
 800d486:	685b      	ldr	r3, [r3, #4]
 800d488:	4798      	blx	r3

  now = sys_now();
 800d48a:	f7f8 fd71 	bl	8005f70 <sys_now>
 800d48e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800d490:	697b      	ldr	r3, [r7, #20]
 800d492:	681a      	ldr	r2, [r3, #0]
 800d494:	4b0f      	ldr	r3, [pc, #60]	; (800d4d4 <lwip_cyclic_timer+0x5c>)
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	4413      	add	r3, r2
 800d49a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800d49c:	68fa      	ldr	r2, [r7, #12]
 800d49e:	693b      	ldr	r3, [r7, #16]
 800d4a0:	1ad3      	subs	r3, r2, r3
 800d4a2:	0fdb      	lsrs	r3, r3, #31
 800d4a4:	f003 0301 	and.w	r3, r3, #1
 800d4a8:	b2db      	uxtb	r3, r3
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d009      	beq.n	800d4c2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800d4ae:	697b      	ldr	r3, [r7, #20]
 800d4b0:	681a      	ldr	r2, [r3, #0]
 800d4b2:	693b      	ldr	r3, [r7, #16]
 800d4b4:	4413      	add	r3, r2
 800d4b6:	687a      	ldr	r2, [r7, #4]
 800d4b8:	4907      	ldr	r1, [pc, #28]	; (800d4d8 <lwip_cyclic_timer+0x60>)
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	f7ff ff6e 	bl	800d39c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800d4c0:	e004      	b.n	800d4cc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800d4c2:	687a      	ldr	r2, [r7, #4]
 800d4c4:	4904      	ldr	r1, [pc, #16]	; (800d4d8 <lwip_cyclic_timer+0x60>)
 800d4c6:	68f8      	ldr	r0, [r7, #12]
 800d4c8:	f7ff ff68 	bl	800d39c <sys_timeout_abs>
}
 800d4cc:	bf00      	nop
 800d4ce:	3718      	adds	r7, #24
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	bd80      	pop	{r7, pc}
 800d4d4:	200088f8 	.word	0x200088f8
 800d4d8:	0800d479 	.word	0x0800d479

0800d4dc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b082      	sub	sp, #8
 800d4e0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d4e2:	2301      	movs	r3, #1
 800d4e4:	607b      	str	r3, [r7, #4]
 800d4e6:	e00e      	b.n	800d506 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800d4e8:	4a0b      	ldr	r2, [pc, #44]	; (800d518 <sys_timeouts_init+0x3c>)
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	00db      	lsls	r3, r3, #3
 800d4f4:	4a08      	ldr	r2, [pc, #32]	; (800d518 <sys_timeouts_init+0x3c>)
 800d4f6:	4413      	add	r3, r2
 800d4f8:	461a      	mov	r2, r3
 800d4fa:	4908      	ldr	r1, [pc, #32]	; (800d51c <sys_timeouts_init+0x40>)
 800d4fc:	f000 f810 	bl	800d520 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	3301      	adds	r3, #1
 800d504:	607b      	str	r3, [r7, #4]
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	2b02      	cmp	r3, #2
 800d50a:	d9ed      	bls.n	800d4e8 <sys_timeouts_init+0xc>
  }
}
 800d50c:	bf00      	nop
 800d50e:	bf00      	nop
 800d510:	3708      	adds	r7, #8
 800d512:	46bd      	mov	sp, r7
 800d514:	bd80      	pop	{r7, pc}
 800d516:	bf00      	nop
 800d518:	08014138 	.word	0x08014138
 800d51c:	0800d479 	.word	0x0800d479

0800d520 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800d520:	b580      	push	{r7, lr}
 800d522:	b086      	sub	sp, #24
 800d524:	af00      	add	r7, sp, #0
 800d526:	60f8      	str	r0, [r7, #12]
 800d528:	60b9      	str	r1, [r7, #8]
 800d52a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d532:	d306      	bcc.n	800d542 <sys_timeout+0x22>
 800d534:	4b0a      	ldr	r3, [pc, #40]	; (800d560 <sys_timeout+0x40>)
 800d536:	f240 1229 	movw	r2, #297	; 0x129
 800d53a:	490a      	ldr	r1, [pc, #40]	; (800d564 <sys_timeout+0x44>)
 800d53c:	480a      	ldr	r0, [pc, #40]	; (800d568 <sys_timeout+0x48>)
 800d53e:	f003 f969 	bl	8010814 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800d542:	f7f8 fd15 	bl	8005f70 <sys_now>
 800d546:	4602      	mov	r2, r0
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	4413      	add	r3, r2
 800d54c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800d54e:	687a      	ldr	r2, [r7, #4]
 800d550:	68b9      	ldr	r1, [r7, #8]
 800d552:	6978      	ldr	r0, [r7, #20]
 800d554:	f7ff ff22 	bl	800d39c <sys_timeout_abs>
#endif
}
 800d558:	bf00      	nop
 800d55a:	3718      	adds	r7, #24
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}
 800d560:	0801354c 	.word	0x0801354c
 800d564:	080135e8 	.word	0x080135e8
 800d568:	080135c0 	.word	0x080135c0

0800d56c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b084      	sub	sp, #16
 800d570:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800d572:	f7f8 fcfd 	bl	8005f70 <sys_now>
 800d576:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800d578:	4b1a      	ldr	r3, [pc, #104]	; (800d5e4 <sys_check_timeouts+0x78>)
 800d57a:	781b      	ldrb	r3, [r3, #0]
 800d57c:	b2db      	uxtb	r3, r3
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d001      	beq.n	800d586 <sys_check_timeouts+0x1a>
 800d582:	f7f9 ff25 	bl	80073d0 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800d586:	4b18      	ldr	r3, [pc, #96]	; (800d5e8 <sys_check_timeouts+0x7c>)
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800d58c:	68bb      	ldr	r3, [r7, #8]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d022      	beq.n	800d5d8 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800d592:	68bb      	ldr	r3, [r7, #8]
 800d594:	685b      	ldr	r3, [r3, #4]
 800d596:	68fa      	ldr	r2, [r7, #12]
 800d598:	1ad3      	subs	r3, r2, r3
 800d59a:	0fdb      	lsrs	r3, r3, #31
 800d59c:	f003 0301 	and.w	r3, r3, #1
 800d5a0:	b2db      	uxtb	r3, r3
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d11a      	bne.n	800d5dc <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800d5a6:	68bb      	ldr	r3, [r7, #8]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	4a0f      	ldr	r2, [pc, #60]	; (800d5e8 <sys_check_timeouts+0x7c>)
 800d5ac:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800d5ae:	68bb      	ldr	r3, [r7, #8]
 800d5b0:	689b      	ldr	r3, [r3, #8]
 800d5b2:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800d5b4:	68bb      	ldr	r3, [r7, #8]
 800d5b6:	68db      	ldr	r3, [r3, #12]
 800d5b8:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800d5ba:	68bb      	ldr	r3, [r7, #8]
 800d5bc:	685b      	ldr	r3, [r3, #4]
 800d5be:	4a0b      	ldr	r2, [pc, #44]	; (800d5ec <sys_check_timeouts+0x80>)
 800d5c0:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800d5c2:	68b9      	ldr	r1, [r7, #8]
 800d5c4:	2006      	movs	r0, #6
 800d5c6:	f7f9 fbc7 	bl	8006d58 <memp_free>
    if (handler != NULL) {
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d0d3      	beq.n	800d578 <sys_check_timeouts+0xc>
      handler(arg);
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	6838      	ldr	r0, [r7, #0]
 800d5d4:	4798      	blx	r3
  do {
 800d5d6:	e7cf      	b.n	800d578 <sys_check_timeouts+0xc>
      return;
 800d5d8:	bf00      	nop
 800d5da:	e000      	b.n	800d5de <sys_check_timeouts+0x72>
      return;
 800d5dc:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800d5de:	3710      	adds	r7, #16
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	bd80      	pop	{r7, pc}
 800d5e4:	200088a1 	.word	0x200088a1
 800d5e8:	200088f4 	.word	0x200088f4
 800d5ec:	200088f8 	.word	0x200088f8

0800d5f0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d5f4:	f003 f80e 	bl	8010614 <rand>
 800d5f8:	4603      	mov	r3, r0
 800d5fa:	b29b      	uxth	r3, r3
 800d5fc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d600:	b29b      	uxth	r3, r3
 800d602:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d606:	b29a      	uxth	r2, r3
 800d608:	4b01      	ldr	r3, [pc, #4]	; (800d610 <udp_init+0x20>)
 800d60a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d60c:	bf00      	nop
 800d60e:	bd80      	pop	{r7, pc}
 800d610:	20000028 	.word	0x20000028

0800d614 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800d614:	b480      	push	{r7}
 800d616:	b083      	sub	sp, #12
 800d618:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800d61a:	2300      	movs	r3, #0
 800d61c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800d61e:	4b17      	ldr	r3, [pc, #92]	; (800d67c <udp_new_port+0x68>)
 800d620:	881b      	ldrh	r3, [r3, #0]
 800d622:	1c5a      	adds	r2, r3, #1
 800d624:	b291      	uxth	r1, r2
 800d626:	4a15      	ldr	r2, [pc, #84]	; (800d67c <udp_new_port+0x68>)
 800d628:	8011      	strh	r1, [r2, #0]
 800d62a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d62e:	4293      	cmp	r3, r2
 800d630:	d103      	bne.n	800d63a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800d632:	4b12      	ldr	r3, [pc, #72]	; (800d67c <udp_new_port+0x68>)
 800d634:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800d638:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d63a:	4b11      	ldr	r3, [pc, #68]	; (800d680 <udp_new_port+0x6c>)
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	603b      	str	r3, [r7, #0]
 800d640:	e011      	b.n	800d666 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800d642:	683b      	ldr	r3, [r7, #0]
 800d644:	8a5a      	ldrh	r2, [r3, #18]
 800d646:	4b0d      	ldr	r3, [pc, #52]	; (800d67c <udp_new_port+0x68>)
 800d648:	881b      	ldrh	r3, [r3, #0]
 800d64a:	429a      	cmp	r2, r3
 800d64c:	d108      	bne.n	800d660 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800d64e:	88fb      	ldrh	r3, [r7, #6]
 800d650:	3301      	adds	r3, #1
 800d652:	80fb      	strh	r3, [r7, #6]
 800d654:	88fb      	ldrh	r3, [r7, #6]
 800d656:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d65a:	d3e0      	bcc.n	800d61e <udp_new_port+0xa>
        return 0;
 800d65c:	2300      	movs	r3, #0
 800d65e:	e007      	b.n	800d670 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d660:	683b      	ldr	r3, [r7, #0]
 800d662:	68db      	ldr	r3, [r3, #12]
 800d664:	603b      	str	r3, [r7, #0]
 800d666:	683b      	ldr	r3, [r7, #0]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d1ea      	bne.n	800d642 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800d66c:	4b03      	ldr	r3, [pc, #12]	; (800d67c <udp_new_port+0x68>)
 800d66e:	881b      	ldrh	r3, [r3, #0]
}
 800d670:	4618      	mov	r0, r3
 800d672:	370c      	adds	r7, #12
 800d674:	46bd      	mov	sp, r7
 800d676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67a:	4770      	bx	lr
 800d67c:	20000028 	.word	0x20000028
 800d680:	20008900 	.word	0x20008900

0800d684 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800d684:	b580      	push	{r7, lr}
 800d686:	b084      	sub	sp, #16
 800d688:	af00      	add	r7, sp, #0
 800d68a:	60f8      	str	r0, [r7, #12]
 800d68c:	60b9      	str	r1, [r7, #8]
 800d68e:	4613      	mov	r3, r2
 800d690:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d105      	bne.n	800d6a4 <udp_input_local_match+0x20>
 800d698:	4b27      	ldr	r3, [pc, #156]	; (800d738 <udp_input_local_match+0xb4>)
 800d69a:	2287      	movs	r2, #135	; 0x87
 800d69c:	4927      	ldr	r1, [pc, #156]	; (800d73c <udp_input_local_match+0xb8>)
 800d69e:	4828      	ldr	r0, [pc, #160]	; (800d740 <udp_input_local_match+0xbc>)
 800d6a0:	f003 f8b8 	bl	8010814 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800d6a4:	68bb      	ldr	r3, [r7, #8]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d105      	bne.n	800d6b6 <udp_input_local_match+0x32>
 800d6aa:	4b23      	ldr	r3, [pc, #140]	; (800d738 <udp_input_local_match+0xb4>)
 800d6ac:	2288      	movs	r2, #136	; 0x88
 800d6ae:	4925      	ldr	r1, [pc, #148]	; (800d744 <udp_input_local_match+0xc0>)
 800d6b0:	4823      	ldr	r0, [pc, #140]	; (800d740 <udp_input_local_match+0xbc>)
 800d6b2:	f003 f8af 	bl	8010814 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	7a1b      	ldrb	r3, [r3, #8]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d00b      	beq.n	800d6d6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	7a1a      	ldrb	r2, [r3, #8]
 800d6c2:	4b21      	ldr	r3, [pc, #132]	; (800d748 <udp_input_local_match+0xc4>)
 800d6c4:	685b      	ldr	r3, [r3, #4]
 800d6c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d6ca:	3301      	adds	r3, #1
 800d6cc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d6ce:	429a      	cmp	r2, r3
 800d6d0:	d001      	beq.n	800d6d6 <udp_input_local_match+0x52>
    return 0;
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	e02b      	b.n	800d72e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800d6d6:	79fb      	ldrb	r3, [r7, #7]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d018      	beq.n	800d70e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d013      	beq.n	800d70a <udp_input_local_match+0x86>
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d00f      	beq.n	800d70a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d6ea:	4b17      	ldr	r3, [pc, #92]	; (800d748 <udp_input_local_match+0xc4>)
 800d6ec:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d6ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6f2:	d00a      	beq.n	800d70a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	681a      	ldr	r2, [r3, #0]
 800d6f8:	4b13      	ldr	r3, [pc, #76]	; (800d748 <udp_input_local_match+0xc4>)
 800d6fa:	695b      	ldr	r3, [r3, #20]
 800d6fc:	405a      	eors	r2, r3
 800d6fe:	68bb      	ldr	r3, [r7, #8]
 800d700:	3308      	adds	r3, #8
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d706:	2b00      	cmp	r3, #0
 800d708:	d110      	bne.n	800d72c <udp_input_local_match+0xa8>
          return 1;
 800d70a:	2301      	movs	r3, #1
 800d70c:	e00f      	b.n	800d72e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d009      	beq.n	800d728 <udp_input_local_match+0xa4>
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d005      	beq.n	800d728 <udp_input_local_match+0xa4>
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	681a      	ldr	r2, [r3, #0]
 800d720:	4b09      	ldr	r3, [pc, #36]	; (800d748 <udp_input_local_match+0xc4>)
 800d722:	695b      	ldr	r3, [r3, #20]
 800d724:	429a      	cmp	r2, r3
 800d726:	d101      	bne.n	800d72c <udp_input_local_match+0xa8>
        return 1;
 800d728:	2301      	movs	r3, #1
 800d72a:	e000      	b.n	800d72e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800d72c:	2300      	movs	r3, #0
}
 800d72e:	4618      	mov	r0, r3
 800d730:	3710      	adds	r7, #16
 800d732:	46bd      	mov	sp, r7
 800d734:	bd80      	pop	{r7, pc}
 800d736:	bf00      	nop
 800d738:	08013634 	.word	0x08013634
 800d73c:	08013664 	.word	0x08013664
 800d740:	08013688 	.word	0x08013688
 800d744:	080136b0 	.word	0x080136b0
 800d748:	20005334 	.word	0x20005334

0800d74c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800d74c:	b590      	push	{r4, r7, lr}
 800d74e:	b08d      	sub	sp, #52	; 0x34
 800d750:	af02      	add	r7, sp, #8
 800d752:	6078      	str	r0, [r7, #4]
 800d754:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800d756:	2300      	movs	r3, #0
 800d758:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d105      	bne.n	800d76c <udp_input+0x20>
 800d760:	4b7c      	ldr	r3, [pc, #496]	; (800d954 <udp_input+0x208>)
 800d762:	22cf      	movs	r2, #207	; 0xcf
 800d764:	497c      	ldr	r1, [pc, #496]	; (800d958 <udp_input+0x20c>)
 800d766:	487d      	ldr	r0, [pc, #500]	; (800d95c <udp_input+0x210>)
 800d768:	f003 f854 	bl	8010814 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800d76c:	683b      	ldr	r3, [r7, #0]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d105      	bne.n	800d77e <udp_input+0x32>
 800d772:	4b78      	ldr	r3, [pc, #480]	; (800d954 <udp_input+0x208>)
 800d774:	22d0      	movs	r2, #208	; 0xd0
 800d776:	497a      	ldr	r1, [pc, #488]	; (800d960 <udp_input+0x214>)
 800d778:	4878      	ldr	r0, [pc, #480]	; (800d95c <udp_input+0x210>)
 800d77a:	f003 f84b 	bl	8010814 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	895b      	ldrh	r3, [r3, #10]
 800d782:	2b07      	cmp	r3, #7
 800d784:	d803      	bhi.n	800d78e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800d786:	6878      	ldr	r0, [r7, #4]
 800d788:	f7fa f95c 	bl	8007a44 <pbuf_free>
    goto end;
 800d78c:	e0de      	b.n	800d94c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	685b      	ldr	r3, [r3, #4]
 800d792:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800d794:	4b73      	ldr	r3, [pc, #460]	; (800d964 <udp_input+0x218>)
 800d796:	695b      	ldr	r3, [r3, #20]
 800d798:	4a72      	ldr	r2, [pc, #456]	; (800d964 <udp_input+0x218>)
 800d79a:	6812      	ldr	r2, [r2, #0]
 800d79c:	4611      	mov	r1, r2
 800d79e:	4618      	mov	r0, r3
 800d7a0:	f001 ffe2 	bl	800f768 <ip4_addr_isbroadcast_u32>
 800d7a4:	4603      	mov	r3, r0
 800d7a6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800d7a8:	697b      	ldr	r3, [r7, #20]
 800d7aa:	881b      	ldrh	r3, [r3, #0]
 800d7ac:	b29b      	uxth	r3, r3
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	f7f8 fdea 	bl	8006388 <lwip_htons>
 800d7b4:	4603      	mov	r3, r0
 800d7b6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800d7b8:	697b      	ldr	r3, [r7, #20]
 800d7ba:	885b      	ldrh	r3, [r3, #2]
 800d7bc:	b29b      	uxth	r3, r3
 800d7be:	4618      	mov	r0, r3
 800d7c0:	f7f8 fde2 	bl	8006388 <lwip_htons>
 800d7c4:	4603      	mov	r3, r0
 800d7c6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800d7cc:	2300      	movs	r3, #0
 800d7ce:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d7d4:	4b64      	ldr	r3, [pc, #400]	; (800d968 <udp_input+0x21c>)
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	627b      	str	r3, [r7, #36]	; 0x24
 800d7da:	e054      	b.n	800d886 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800d7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7de:	8a5b      	ldrh	r3, [r3, #18]
 800d7e0:	89fa      	ldrh	r2, [r7, #14]
 800d7e2:	429a      	cmp	r2, r3
 800d7e4:	d14a      	bne.n	800d87c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800d7e6:	7cfb      	ldrb	r3, [r7, #19]
 800d7e8:	461a      	mov	r2, r3
 800d7ea:	6839      	ldr	r1, [r7, #0]
 800d7ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d7ee:	f7ff ff49 	bl	800d684 <udp_input_local_match>
 800d7f2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d041      	beq.n	800d87c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800d7f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7fa:	7c1b      	ldrb	r3, [r3, #16]
 800d7fc:	f003 0304 	and.w	r3, r3, #4
 800d800:	2b00      	cmp	r3, #0
 800d802:	d11d      	bne.n	800d840 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800d804:	69fb      	ldr	r3, [r7, #28]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d102      	bne.n	800d810 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800d80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d80c:	61fb      	str	r3, [r7, #28]
 800d80e:	e017      	b.n	800d840 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800d810:	7cfb      	ldrb	r3, [r7, #19]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d014      	beq.n	800d840 <udp_input+0xf4>
 800d816:	4b53      	ldr	r3, [pc, #332]	; (800d964 <udp_input+0x218>)
 800d818:	695b      	ldr	r3, [r3, #20]
 800d81a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d81e:	d10f      	bne.n	800d840 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800d820:	69fb      	ldr	r3, [r7, #28]
 800d822:	681a      	ldr	r2, [r3, #0]
 800d824:	683b      	ldr	r3, [r7, #0]
 800d826:	3304      	adds	r3, #4
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	429a      	cmp	r2, r3
 800d82c:	d008      	beq.n	800d840 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800d82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d830:	681a      	ldr	r2, [r3, #0]
 800d832:	683b      	ldr	r3, [r7, #0]
 800d834:	3304      	adds	r3, #4
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	429a      	cmp	r2, r3
 800d83a:	d101      	bne.n	800d840 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800d83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d83e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800d840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d842:	8a9b      	ldrh	r3, [r3, #20]
 800d844:	8a3a      	ldrh	r2, [r7, #16]
 800d846:	429a      	cmp	r2, r3
 800d848:	d118      	bne.n	800d87c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d84a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d84c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d005      	beq.n	800d85e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800d852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d854:	685a      	ldr	r2, [r3, #4]
 800d856:	4b43      	ldr	r3, [pc, #268]	; (800d964 <udp_input+0x218>)
 800d858:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d85a:	429a      	cmp	r2, r3
 800d85c:	d10e      	bne.n	800d87c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800d85e:	6a3b      	ldr	r3, [r7, #32]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d014      	beq.n	800d88e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800d864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d866:	68da      	ldr	r2, [r3, #12]
 800d868:	6a3b      	ldr	r3, [r7, #32]
 800d86a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800d86c:	4b3e      	ldr	r3, [pc, #248]	; (800d968 <udp_input+0x21c>)
 800d86e:	681a      	ldr	r2, [r3, #0]
 800d870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d872:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800d874:	4a3c      	ldr	r2, [pc, #240]	; (800d968 <udp_input+0x21c>)
 800d876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d878:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800d87a:	e008      	b.n	800d88e <udp_input+0x142>
      }
    }

    prev = pcb;
 800d87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d87e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d882:	68db      	ldr	r3, [r3, #12]
 800d884:	627b      	str	r3, [r7, #36]	; 0x24
 800d886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d1a7      	bne.n	800d7dc <udp_input+0x90>
 800d88c:	e000      	b.n	800d890 <udp_input+0x144>
        break;
 800d88e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800d890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d892:	2b00      	cmp	r3, #0
 800d894:	d101      	bne.n	800d89a <udp_input+0x14e>
    pcb = uncon_pcb;
 800d896:	69fb      	ldr	r3, [r7, #28]
 800d898:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800d89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d002      	beq.n	800d8a6 <udp_input+0x15a>
    for_us = 1;
 800d8a0:	2301      	movs	r3, #1
 800d8a2:	76fb      	strb	r3, [r7, #27]
 800d8a4:	e00a      	b.n	800d8bc <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800d8a6:	683b      	ldr	r3, [r7, #0]
 800d8a8:	3304      	adds	r3, #4
 800d8aa:	681a      	ldr	r2, [r3, #0]
 800d8ac:	4b2d      	ldr	r3, [pc, #180]	; (800d964 <udp_input+0x218>)
 800d8ae:	695b      	ldr	r3, [r3, #20]
 800d8b0:	429a      	cmp	r2, r3
 800d8b2:	bf0c      	ite	eq
 800d8b4:	2301      	moveq	r3, #1
 800d8b6:	2300      	movne	r3, #0
 800d8b8:	b2db      	uxtb	r3, r3
 800d8ba:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800d8bc:	7efb      	ldrb	r3, [r7, #27]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d041      	beq.n	800d946 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800d8c2:	2108      	movs	r1, #8
 800d8c4:	6878      	ldr	r0, [r7, #4]
 800d8c6:	f7fa f837 	bl	8007938 <pbuf_remove_header>
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d00a      	beq.n	800d8e6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800d8d0:	4b20      	ldr	r3, [pc, #128]	; (800d954 <udp_input+0x208>)
 800d8d2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800d8d6:	4925      	ldr	r1, [pc, #148]	; (800d96c <udp_input+0x220>)
 800d8d8:	4820      	ldr	r0, [pc, #128]	; (800d95c <udp_input+0x210>)
 800d8da:	f002 ff9b 	bl	8010814 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800d8de:	6878      	ldr	r0, [r7, #4]
 800d8e0:	f7fa f8b0 	bl	8007a44 <pbuf_free>
      goto end;
 800d8e4:	e032      	b.n	800d94c <udp_input+0x200>
    }

    if (pcb != NULL) {
 800d8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d012      	beq.n	800d912 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800d8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ee:	699b      	ldr	r3, [r3, #24]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d00a      	beq.n	800d90a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800d8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8f6:	699c      	ldr	r4, [r3, #24]
 800d8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8fa:	69d8      	ldr	r0, [r3, #28]
 800d8fc:	8a3b      	ldrh	r3, [r7, #16]
 800d8fe:	9300      	str	r3, [sp, #0]
 800d900:	4b1b      	ldr	r3, [pc, #108]	; (800d970 <udp_input+0x224>)
 800d902:	687a      	ldr	r2, [r7, #4]
 800d904:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d906:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800d908:	e021      	b.n	800d94e <udp_input+0x202>
        pbuf_free(p);
 800d90a:	6878      	ldr	r0, [r7, #4]
 800d90c:	f7fa f89a 	bl	8007a44 <pbuf_free>
        goto end;
 800d910:	e01c      	b.n	800d94c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800d912:	7cfb      	ldrb	r3, [r7, #19]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d112      	bne.n	800d93e <udp_input+0x1f2>
 800d918:	4b12      	ldr	r3, [pc, #72]	; (800d964 <udp_input+0x218>)
 800d91a:	695b      	ldr	r3, [r3, #20]
 800d91c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d920:	2be0      	cmp	r3, #224	; 0xe0
 800d922:	d00c      	beq.n	800d93e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800d924:	4b0f      	ldr	r3, [pc, #60]	; (800d964 <udp_input+0x218>)
 800d926:	899b      	ldrh	r3, [r3, #12]
 800d928:	3308      	adds	r3, #8
 800d92a:	b29b      	uxth	r3, r3
 800d92c:	b21b      	sxth	r3, r3
 800d92e:	4619      	mov	r1, r3
 800d930:	6878      	ldr	r0, [r7, #4]
 800d932:	f7fa f874 	bl	8007a1e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800d936:	2103      	movs	r1, #3
 800d938:	6878      	ldr	r0, [r7, #4]
 800d93a:	f001 fbf5 	bl	800f128 <icmp_dest_unreach>
      pbuf_free(p);
 800d93e:	6878      	ldr	r0, [r7, #4]
 800d940:	f7fa f880 	bl	8007a44 <pbuf_free>
  return;
 800d944:	e003      	b.n	800d94e <udp_input+0x202>
    pbuf_free(p);
 800d946:	6878      	ldr	r0, [r7, #4]
 800d948:	f7fa f87c 	bl	8007a44 <pbuf_free>
  return;
 800d94c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800d94e:	372c      	adds	r7, #44	; 0x2c
 800d950:	46bd      	mov	sp, r7
 800d952:	bd90      	pop	{r4, r7, pc}
 800d954:	08013634 	.word	0x08013634
 800d958:	080136d8 	.word	0x080136d8
 800d95c:	08013688 	.word	0x08013688
 800d960:	080136f0 	.word	0x080136f0
 800d964:	20005334 	.word	0x20005334
 800d968:	20008900 	.word	0x20008900
 800d96c:	0801370c 	.word	0x0801370c
 800d970:	20005344 	.word	0x20005344

0800d974 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800d974:	b580      	push	{r7, lr}
 800d976:	b082      	sub	sp, #8
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
 800d97c:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d109      	bne.n	800d998 <udp_send+0x24>
 800d984:	4b11      	ldr	r3, [pc, #68]	; (800d9cc <udp_send+0x58>)
 800d986:	f240 12d5 	movw	r2, #469	; 0x1d5
 800d98a:	4911      	ldr	r1, [pc, #68]	; (800d9d0 <udp_send+0x5c>)
 800d98c:	4811      	ldr	r0, [pc, #68]	; (800d9d4 <udp_send+0x60>)
 800d98e:	f002 ff41 	bl	8010814 <iprintf>
 800d992:	f06f 030f 	mvn.w	r3, #15
 800d996:	e015      	b.n	800d9c4 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800d998:	683b      	ldr	r3, [r7, #0]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d109      	bne.n	800d9b2 <udp_send+0x3e>
 800d99e:	4b0b      	ldr	r3, [pc, #44]	; (800d9cc <udp_send+0x58>)
 800d9a0:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800d9a4:	490c      	ldr	r1, [pc, #48]	; (800d9d8 <udp_send+0x64>)
 800d9a6:	480b      	ldr	r0, [pc, #44]	; (800d9d4 <udp_send+0x60>)
 800d9a8:	f002 ff34 	bl	8010814 <iprintf>
 800d9ac:	f06f 030f 	mvn.w	r3, #15
 800d9b0:	e008      	b.n	800d9c4 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	1d1a      	adds	r2, r3, #4
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	8a9b      	ldrh	r3, [r3, #20]
 800d9ba:	6839      	ldr	r1, [r7, #0]
 800d9bc:	6878      	ldr	r0, [r7, #4]
 800d9be:	f000 f80d 	bl	800d9dc <udp_sendto>
 800d9c2:	4603      	mov	r3, r0
}
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	3708      	adds	r7, #8
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	bd80      	pop	{r7, pc}
 800d9cc:	08013634 	.word	0x08013634
 800d9d0:	08013728 	.word	0x08013728
 800d9d4:	08013688 	.word	0x08013688
 800d9d8:	08013740 	.word	0x08013740

0800d9dc <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b088      	sub	sp, #32
 800d9e0:	af02      	add	r7, sp, #8
 800d9e2:	60f8      	str	r0, [r7, #12]
 800d9e4:	60b9      	str	r1, [r7, #8]
 800d9e6:	607a      	str	r2, [r7, #4]
 800d9e8:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d109      	bne.n	800da04 <udp_sendto+0x28>
 800d9f0:	4b23      	ldr	r3, [pc, #140]	; (800da80 <udp_sendto+0xa4>)
 800d9f2:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d9f6:	4923      	ldr	r1, [pc, #140]	; (800da84 <udp_sendto+0xa8>)
 800d9f8:	4823      	ldr	r0, [pc, #140]	; (800da88 <udp_sendto+0xac>)
 800d9fa:	f002 ff0b 	bl	8010814 <iprintf>
 800d9fe:	f06f 030f 	mvn.w	r3, #15
 800da02:	e038      	b.n	800da76 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800da04:	68bb      	ldr	r3, [r7, #8]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d109      	bne.n	800da1e <udp_sendto+0x42>
 800da0a:	4b1d      	ldr	r3, [pc, #116]	; (800da80 <udp_sendto+0xa4>)
 800da0c:	f240 2219 	movw	r2, #537	; 0x219
 800da10:	491e      	ldr	r1, [pc, #120]	; (800da8c <udp_sendto+0xb0>)
 800da12:	481d      	ldr	r0, [pc, #116]	; (800da88 <udp_sendto+0xac>)
 800da14:	f002 fefe 	bl	8010814 <iprintf>
 800da18:	f06f 030f 	mvn.w	r3, #15
 800da1c:	e02b      	b.n	800da76 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d109      	bne.n	800da38 <udp_sendto+0x5c>
 800da24:	4b16      	ldr	r3, [pc, #88]	; (800da80 <udp_sendto+0xa4>)
 800da26:	f240 221a 	movw	r2, #538	; 0x21a
 800da2a:	4919      	ldr	r1, [pc, #100]	; (800da90 <udp_sendto+0xb4>)
 800da2c:	4816      	ldr	r0, [pc, #88]	; (800da88 <udp_sendto+0xac>)
 800da2e:	f002 fef1 	bl	8010814 <iprintf>
 800da32:	f06f 030f 	mvn.w	r3, #15
 800da36:	e01e      	b.n	800da76 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	7a1b      	ldrb	r3, [r3, #8]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d006      	beq.n	800da4e <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	7a1b      	ldrb	r3, [r3, #8]
 800da44:	4618      	mov	r0, r3
 800da46:	f7f9 fc9d 	bl	8007384 <netif_get_by_index>
 800da4a:	6178      	str	r0, [r7, #20]
 800da4c:	e003      	b.n	800da56 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800da4e:	6878      	ldr	r0, [r7, #4]
 800da50:	f001 fbf4 	bl	800f23c <ip4_route>
 800da54:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800da56:	697b      	ldr	r3, [r7, #20]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d102      	bne.n	800da62 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800da5c:	f06f 0303 	mvn.w	r3, #3
 800da60:	e009      	b.n	800da76 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800da62:	887a      	ldrh	r2, [r7, #2]
 800da64:	697b      	ldr	r3, [r7, #20]
 800da66:	9300      	str	r3, [sp, #0]
 800da68:	4613      	mov	r3, r2
 800da6a:	687a      	ldr	r2, [r7, #4]
 800da6c:	68b9      	ldr	r1, [r7, #8]
 800da6e:	68f8      	ldr	r0, [r7, #12]
 800da70:	f000 f810 	bl	800da94 <udp_sendto_if>
 800da74:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800da76:	4618      	mov	r0, r3
 800da78:	3718      	adds	r7, #24
 800da7a:	46bd      	mov	sp, r7
 800da7c:	bd80      	pop	{r7, pc}
 800da7e:	bf00      	nop
 800da80:	08013634 	.word	0x08013634
 800da84:	08013758 	.word	0x08013758
 800da88:	08013688 	.word	0x08013688
 800da8c:	08013770 	.word	0x08013770
 800da90:	0801378c 	.word	0x0801378c

0800da94 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800da94:	b580      	push	{r7, lr}
 800da96:	b088      	sub	sp, #32
 800da98:	af02      	add	r7, sp, #8
 800da9a:	60f8      	str	r0, [r7, #12]
 800da9c:	60b9      	str	r1, [r7, #8]
 800da9e:	607a      	str	r2, [r7, #4]
 800daa0:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d109      	bne.n	800dabc <udp_sendto_if+0x28>
 800daa8:	4b2e      	ldr	r3, [pc, #184]	; (800db64 <udp_sendto_if+0xd0>)
 800daaa:	f44f 7220 	mov.w	r2, #640	; 0x280
 800daae:	492e      	ldr	r1, [pc, #184]	; (800db68 <udp_sendto_if+0xd4>)
 800dab0:	482e      	ldr	r0, [pc, #184]	; (800db6c <udp_sendto_if+0xd8>)
 800dab2:	f002 feaf 	bl	8010814 <iprintf>
 800dab6:	f06f 030f 	mvn.w	r3, #15
 800daba:	e04f      	b.n	800db5c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800dabc:	68bb      	ldr	r3, [r7, #8]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d109      	bne.n	800dad6 <udp_sendto_if+0x42>
 800dac2:	4b28      	ldr	r3, [pc, #160]	; (800db64 <udp_sendto_if+0xd0>)
 800dac4:	f240 2281 	movw	r2, #641	; 0x281
 800dac8:	4929      	ldr	r1, [pc, #164]	; (800db70 <udp_sendto_if+0xdc>)
 800daca:	4828      	ldr	r0, [pc, #160]	; (800db6c <udp_sendto_if+0xd8>)
 800dacc:	f002 fea2 	bl	8010814 <iprintf>
 800dad0:	f06f 030f 	mvn.w	r3, #15
 800dad4:	e042      	b.n	800db5c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d109      	bne.n	800daf0 <udp_sendto_if+0x5c>
 800dadc:	4b21      	ldr	r3, [pc, #132]	; (800db64 <udp_sendto_if+0xd0>)
 800dade:	f240 2282 	movw	r2, #642	; 0x282
 800dae2:	4924      	ldr	r1, [pc, #144]	; (800db74 <udp_sendto_if+0xe0>)
 800dae4:	4821      	ldr	r0, [pc, #132]	; (800db6c <udp_sendto_if+0xd8>)
 800dae6:	f002 fe95 	bl	8010814 <iprintf>
 800daea:	f06f 030f 	mvn.w	r3, #15
 800daee:	e035      	b.n	800db5c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800daf0:	6a3b      	ldr	r3, [r7, #32]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d109      	bne.n	800db0a <udp_sendto_if+0x76>
 800daf6:	4b1b      	ldr	r3, [pc, #108]	; (800db64 <udp_sendto_if+0xd0>)
 800daf8:	f240 2283 	movw	r2, #643	; 0x283
 800dafc:	491e      	ldr	r1, [pc, #120]	; (800db78 <udp_sendto_if+0xe4>)
 800dafe:	481b      	ldr	r0, [pc, #108]	; (800db6c <udp_sendto_if+0xd8>)
 800db00:	f002 fe88 	bl	8010814 <iprintf>
 800db04:	f06f 030f 	mvn.w	r3, #15
 800db08:	e028      	b.n	800db5c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d009      	beq.n	800db24 <udp_sendto_if+0x90>
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d005      	beq.n	800db24 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800db20:	2be0      	cmp	r3, #224	; 0xe0
 800db22:	d103      	bne.n	800db2c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800db24:	6a3b      	ldr	r3, [r7, #32]
 800db26:	3304      	adds	r3, #4
 800db28:	617b      	str	r3, [r7, #20]
 800db2a:	e00b      	b.n	800db44 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	681a      	ldr	r2, [r3, #0]
 800db30:	6a3b      	ldr	r3, [r7, #32]
 800db32:	3304      	adds	r3, #4
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	429a      	cmp	r2, r3
 800db38:	d002      	beq.n	800db40 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800db3a:	f06f 0303 	mvn.w	r3, #3
 800db3e:	e00d      	b.n	800db5c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800db44:	887a      	ldrh	r2, [r7, #2]
 800db46:	697b      	ldr	r3, [r7, #20]
 800db48:	9301      	str	r3, [sp, #4]
 800db4a:	6a3b      	ldr	r3, [r7, #32]
 800db4c:	9300      	str	r3, [sp, #0]
 800db4e:	4613      	mov	r3, r2
 800db50:	687a      	ldr	r2, [r7, #4]
 800db52:	68b9      	ldr	r1, [r7, #8]
 800db54:	68f8      	ldr	r0, [r7, #12]
 800db56:	f000 f811 	bl	800db7c <udp_sendto_if_src>
 800db5a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800db5c:	4618      	mov	r0, r3
 800db5e:	3718      	adds	r7, #24
 800db60:	46bd      	mov	sp, r7
 800db62:	bd80      	pop	{r7, pc}
 800db64:	08013634 	.word	0x08013634
 800db68:	080137a8 	.word	0x080137a8
 800db6c:	08013688 	.word	0x08013688
 800db70:	080137c4 	.word	0x080137c4
 800db74:	080137e0 	.word	0x080137e0
 800db78:	08013800 	.word	0x08013800

0800db7c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800db7c:	b580      	push	{r7, lr}
 800db7e:	b08c      	sub	sp, #48	; 0x30
 800db80:	af04      	add	r7, sp, #16
 800db82:	60f8      	str	r0, [r7, #12]
 800db84:	60b9      	str	r1, [r7, #8]
 800db86:	607a      	str	r2, [r7, #4]
 800db88:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d109      	bne.n	800dba4 <udp_sendto_if_src+0x28>
 800db90:	4b65      	ldr	r3, [pc, #404]	; (800dd28 <udp_sendto_if_src+0x1ac>)
 800db92:	f240 22d1 	movw	r2, #721	; 0x2d1
 800db96:	4965      	ldr	r1, [pc, #404]	; (800dd2c <udp_sendto_if_src+0x1b0>)
 800db98:	4865      	ldr	r0, [pc, #404]	; (800dd30 <udp_sendto_if_src+0x1b4>)
 800db9a:	f002 fe3b 	bl	8010814 <iprintf>
 800db9e:	f06f 030f 	mvn.w	r3, #15
 800dba2:	e0bc      	b.n	800dd1e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800dba4:	68bb      	ldr	r3, [r7, #8]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d109      	bne.n	800dbbe <udp_sendto_if_src+0x42>
 800dbaa:	4b5f      	ldr	r3, [pc, #380]	; (800dd28 <udp_sendto_if_src+0x1ac>)
 800dbac:	f240 22d2 	movw	r2, #722	; 0x2d2
 800dbb0:	4960      	ldr	r1, [pc, #384]	; (800dd34 <udp_sendto_if_src+0x1b8>)
 800dbb2:	485f      	ldr	r0, [pc, #380]	; (800dd30 <udp_sendto_if_src+0x1b4>)
 800dbb4:	f002 fe2e 	bl	8010814 <iprintf>
 800dbb8:	f06f 030f 	mvn.w	r3, #15
 800dbbc:	e0af      	b.n	800dd1e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d109      	bne.n	800dbd8 <udp_sendto_if_src+0x5c>
 800dbc4:	4b58      	ldr	r3, [pc, #352]	; (800dd28 <udp_sendto_if_src+0x1ac>)
 800dbc6:	f240 22d3 	movw	r2, #723	; 0x2d3
 800dbca:	495b      	ldr	r1, [pc, #364]	; (800dd38 <udp_sendto_if_src+0x1bc>)
 800dbcc:	4858      	ldr	r0, [pc, #352]	; (800dd30 <udp_sendto_if_src+0x1b4>)
 800dbce:	f002 fe21 	bl	8010814 <iprintf>
 800dbd2:	f06f 030f 	mvn.w	r3, #15
 800dbd6:	e0a2      	b.n	800dd1e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800dbd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d109      	bne.n	800dbf2 <udp_sendto_if_src+0x76>
 800dbde:	4b52      	ldr	r3, [pc, #328]	; (800dd28 <udp_sendto_if_src+0x1ac>)
 800dbe0:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800dbe4:	4955      	ldr	r1, [pc, #340]	; (800dd3c <udp_sendto_if_src+0x1c0>)
 800dbe6:	4852      	ldr	r0, [pc, #328]	; (800dd30 <udp_sendto_if_src+0x1b4>)
 800dbe8:	f002 fe14 	bl	8010814 <iprintf>
 800dbec:	f06f 030f 	mvn.w	r3, #15
 800dbf0:	e095      	b.n	800dd1e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800dbf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d109      	bne.n	800dc0c <udp_sendto_if_src+0x90>
 800dbf8:	4b4b      	ldr	r3, [pc, #300]	; (800dd28 <udp_sendto_if_src+0x1ac>)
 800dbfa:	f240 22d5 	movw	r2, #725	; 0x2d5
 800dbfe:	4950      	ldr	r1, [pc, #320]	; (800dd40 <udp_sendto_if_src+0x1c4>)
 800dc00:	484b      	ldr	r0, [pc, #300]	; (800dd30 <udp_sendto_if_src+0x1b4>)
 800dc02:	f002 fe07 	bl	8010814 <iprintf>
 800dc06:	f06f 030f 	mvn.w	r3, #15
 800dc0a:	e088      	b.n	800dd1e <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	8a5b      	ldrh	r3, [r3, #18]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d10f      	bne.n	800dc34 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800dc14:	68f9      	ldr	r1, [r7, #12]
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	8a5b      	ldrh	r3, [r3, #18]
 800dc1a:	461a      	mov	r2, r3
 800dc1c:	68f8      	ldr	r0, [r7, #12]
 800dc1e:	f000 f893 	bl	800dd48 <udp_bind>
 800dc22:	4603      	mov	r3, r0
 800dc24:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800dc26:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d002      	beq.n	800dc34 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800dc2e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800dc32:	e074      	b.n	800dd1e <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800dc34:	68bb      	ldr	r3, [r7, #8]
 800dc36:	891b      	ldrh	r3, [r3, #8]
 800dc38:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800dc3c:	4293      	cmp	r3, r2
 800dc3e:	d902      	bls.n	800dc46 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800dc40:	f04f 33ff 	mov.w	r3, #4294967295
 800dc44:	e06b      	b.n	800dd1e <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800dc46:	2108      	movs	r1, #8
 800dc48:	68b8      	ldr	r0, [r7, #8]
 800dc4a:	f7f9 fe65 	bl	8007918 <pbuf_add_header>
 800dc4e:	4603      	mov	r3, r0
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d015      	beq.n	800dc80 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800dc54:	f44f 7220 	mov.w	r2, #640	; 0x280
 800dc58:	2108      	movs	r1, #8
 800dc5a:	2022      	movs	r0, #34	; 0x22
 800dc5c:	f7f9 fc0e 	bl	800747c <pbuf_alloc>
 800dc60:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800dc62:	69fb      	ldr	r3, [r7, #28]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d102      	bne.n	800dc6e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800dc68:	f04f 33ff 	mov.w	r3, #4294967295
 800dc6c:	e057      	b.n	800dd1e <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800dc6e:	68bb      	ldr	r3, [r7, #8]
 800dc70:	891b      	ldrh	r3, [r3, #8]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d006      	beq.n	800dc84 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800dc76:	68b9      	ldr	r1, [r7, #8]
 800dc78:	69f8      	ldr	r0, [r7, #28]
 800dc7a:	f7f9 fffb 	bl	8007c74 <pbuf_chain>
 800dc7e:	e001      	b.n	800dc84 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800dc80:	68bb      	ldr	r3, [r7, #8]
 800dc82:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800dc84:	69fb      	ldr	r3, [r7, #28]
 800dc86:	895b      	ldrh	r3, [r3, #10]
 800dc88:	2b07      	cmp	r3, #7
 800dc8a:	d806      	bhi.n	800dc9a <udp_sendto_if_src+0x11e>
 800dc8c:	4b26      	ldr	r3, [pc, #152]	; (800dd28 <udp_sendto_if_src+0x1ac>)
 800dc8e:	f240 320d 	movw	r2, #781	; 0x30d
 800dc92:	492c      	ldr	r1, [pc, #176]	; (800dd44 <udp_sendto_if_src+0x1c8>)
 800dc94:	4826      	ldr	r0, [pc, #152]	; (800dd30 <udp_sendto_if_src+0x1b4>)
 800dc96:	f002 fdbd 	bl	8010814 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800dc9a:	69fb      	ldr	r3, [r7, #28]
 800dc9c:	685b      	ldr	r3, [r3, #4]
 800dc9e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	8a5b      	ldrh	r3, [r3, #18]
 800dca4:	4618      	mov	r0, r3
 800dca6:	f7f8 fb6f 	bl	8006388 <lwip_htons>
 800dcaa:	4603      	mov	r3, r0
 800dcac:	461a      	mov	r2, r3
 800dcae:	697b      	ldr	r3, [r7, #20]
 800dcb0:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800dcb2:	887b      	ldrh	r3, [r7, #2]
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	f7f8 fb67 	bl	8006388 <lwip_htons>
 800dcba:	4603      	mov	r3, r0
 800dcbc:	461a      	mov	r2, r3
 800dcbe:	697b      	ldr	r3, [r7, #20]
 800dcc0:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800dcc2:	697b      	ldr	r3, [r7, #20]
 800dcc4:	2200      	movs	r2, #0
 800dcc6:	719a      	strb	r2, [r3, #6]
 800dcc8:	2200      	movs	r2, #0
 800dcca:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800dccc:	69fb      	ldr	r3, [r7, #28]
 800dcce:	891b      	ldrh	r3, [r3, #8]
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	f7f8 fb59 	bl	8006388 <lwip_htons>
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	461a      	mov	r2, r3
 800dcda:	697b      	ldr	r3, [r7, #20]
 800dcdc:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800dcde:	2311      	movs	r3, #17
 800dce0:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	7adb      	ldrb	r3, [r3, #11]
 800dce6:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	7a9b      	ldrb	r3, [r3, #10]
 800dcec:	7cb9      	ldrb	r1, [r7, #18]
 800dcee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dcf0:	9202      	str	r2, [sp, #8]
 800dcf2:	7cfa      	ldrb	r2, [r7, #19]
 800dcf4:	9201      	str	r2, [sp, #4]
 800dcf6:	9300      	str	r3, [sp, #0]
 800dcf8:	460b      	mov	r3, r1
 800dcfa:	687a      	ldr	r2, [r7, #4]
 800dcfc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dcfe:	69f8      	ldr	r0, [r7, #28]
 800dd00:	f001 fc84 	bl	800f60c <ip4_output_if_src>
 800dd04:	4603      	mov	r3, r0
 800dd06:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800dd08:	69fa      	ldr	r2, [r7, #28]
 800dd0a:	68bb      	ldr	r3, [r7, #8]
 800dd0c:	429a      	cmp	r2, r3
 800dd0e:	d004      	beq.n	800dd1a <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800dd10:	69f8      	ldr	r0, [r7, #28]
 800dd12:	f7f9 fe97 	bl	8007a44 <pbuf_free>
    q = NULL;
 800dd16:	2300      	movs	r3, #0
 800dd18:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800dd1a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800dd1e:	4618      	mov	r0, r3
 800dd20:	3720      	adds	r7, #32
 800dd22:	46bd      	mov	sp, r7
 800dd24:	bd80      	pop	{r7, pc}
 800dd26:	bf00      	nop
 800dd28:	08013634 	.word	0x08013634
 800dd2c:	08013820 	.word	0x08013820
 800dd30:	08013688 	.word	0x08013688
 800dd34:	08013840 	.word	0x08013840
 800dd38:	08013860 	.word	0x08013860
 800dd3c:	08013884 	.word	0x08013884
 800dd40:	080138a8 	.word	0x080138a8
 800dd44:	080138cc 	.word	0x080138cc

0800dd48 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b086      	sub	sp, #24
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	60f8      	str	r0, [r7, #12]
 800dd50:	60b9      	str	r1, [r7, #8]
 800dd52:	4613      	mov	r3, r2
 800dd54:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800dd56:	68bb      	ldr	r3, [r7, #8]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d101      	bne.n	800dd60 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800dd5c:	4b39      	ldr	r3, [pc, #228]	; (800de44 <udp_bind+0xfc>)
 800dd5e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d109      	bne.n	800dd7a <udp_bind+0x32>
 800dd66:	4b38      	ldr	r3, [pc, #224]	; (800de48 <udp_bind+0x100>)
 800dd68:	f240 32b7 	movw	r2, #951	; 0x3b7
 800dd6c:	4937      	ldr	r1, [pc, #220]	; (800de4c <udp_bind+0x104>)
 800dd6e:	4838      	ldr	r0, [pc, #224]	; (800de50 <udp_bind+0x108>)
 800dd70:	f002 fd50 	bl	8010814 <iprintf>
 800dd74:	f06f 030f 	mvn.w	r3, #15
 800dd78:	e060      	b.n	800de3c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800dd7e:	4b35      	ldr	r3, [pc, #212]	; (800de54 <udp_bind+0x10c>)
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	617b      	str	r3, [r7, #20]
 800dd84:	e009      	b.n	800dd9a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800dd86:	68fa      	ldr	r2, [r7, #12]
 800dd88:	697b      	ldr	r3, [r7, #20]
 800dd8a:	429a      	cmp	r2, r3
 800dd8c:	d102      	bne.n	800dd94 <udp_bind+0x4c>
      rebind = 1;
 800dd8e:	2301      	movs	r3, #1
 800dd90:	74fb      	strb	r3, [r7, #19]
      break;
 800dd92:	e005      	b.n	800dda0 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800dd94:	697b      	ldr	r3, [r7, #20]
 800dd96:	68db      	ldr	r3, [r3, #12]
 800dd98:	617b      	str	r3, [r7, #20]
 800dd9a:	697b      	ldr	r3, [r7, #20]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d1f2      	bne.n	800dd86 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800dda0:	88fb      	ldrh	r3, [r7, #6]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d109      	bne.n	800ddba <udp_bind+0x72>
    port = udp_new_port();
 800dda6:	f7ff fc35 	bl	800d614 <udp_new_port>
 800ddaa:	4603      	mov	r3, r0
 800ddac:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800ddae:	88fb      	ldrh	r3, [r7, #6]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d12c      	bne.n	800de0e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800ddb4:	f06f 0307 	mvn.w	r3, #7
 800ddb8:	e040      	b.n	800de3c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ddba:	4b26      	ldr	r3, [pc, #152]	; (800de54 <udp_bind+0x10c>)
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	617b      	str	r3, [r7, #20]
 800ddc0:	e022      	b.n	800de08 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800ddc2:	68fa      	ldr	r2, [r7, #12]
 800ddc4:	697b      	ldr	r3, [r7, #20]
 800ddc6:	429a      	cmp	r2, r3
 800ddc8:	d01b      	beq.n	800de02 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800ddca:	697b      	ldr	r3, [r7, #20]
 800ddcc:	8a5b      	ldrh	r3, [r3, #18]
 800ddce:	88fa      	ldrh	r2, [r7, #6]
 800ddd0:	429a      	cmp	r2, r3
 800ddd2:	d116      	bne.n	800de02 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800ddd4:	697b      	ldr	r3, [r7, #20]
 800ddd6:	681a      	ldr	r2, [r3, #0]
 800ddd8:	68bb      	ldr	r3, [r7, #8]
 800ddda:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800dddc:	429a      	cmp	r2, r3
 800ddde:	d00d      	beq.n	800ddfc <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800dde0:	68bb      	ldr	r3, [r7, #8]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d00a      	beq.n	800ddfc <udp_bind+0xb4>
 800dde6:	68bb      	ldr	r3, [r7, #8]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d006      	beq.n	800ddfc <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800ddee:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d003      	beq.n	800ddfc <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800ddf4:	697b      	ldr	r3, [r7, #20]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d102      	bne.n	800de02 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800ddfc:	f06f 0307 	mvn.w	r3, #7
 800de00:	e01c      	b.n	800de3c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800de02:	697b      	ldr	r3, [r7, #20]
 800de04:	68db      	ldr	r3, [r3, #12]
 800de06:	617b      	str	r3, [r7, #20]
 800de08:	697b      	ldr	r3, [r7, #20]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d1d9      	bne.n	800ddc2 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800de0e:	68bb      	ldr	r3, [r7, #8]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d002      	beq.n	800de1a <udp_bind+0xd2>
 800de14:	68bb      	ldr	r3, [r7, #8]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	e000      	b.n	800de1c <udp_bind+0xd4>
 800de1a:	2300      	movs	r3, #0
 800de1c:	68fa      	ldr	r2, [r7, #12]
 800de1e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	88fa      	ldrh	r2, [r7, #6]
 800de24:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800de26:	7cfb      	ldrb	r3, [r7, #19]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d106      	bne.n	800de3a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800de2c:	4b09      	ldr	r3, [pc, #36]	; (800de54 <udp_bind+0x10c>)
 800de2e:	681a      	ldr	r2, [r3, #0]
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800de34:	4a07      	ldr	r2, [pc, #28]	; (800de54 <udp_bind+0x10c>)
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800de3a:	2300      	movs	r3, #0
}
 800de3c:	4618      	mov	r0, r3
 800de3e:	3718      	adds	r7, #24
 800de40:	46bd      	mov	sp, r7
 800de42:	bd80      	pop	{r7, pc}
 800de44:	08014150 	.word	0x08014150
 800de48:	08013634 	.word	0x08013634
 800de4c:	080138fc 	.word	0x080138fc
 800de50:	08013688 	.word	0x08013688
 800de54:	20008900 	.word	0x20008900

0800de58 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800de58:	b580      	push	{r7, lr}
 800de5a:	b086      	sub	sp, #24
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	60f8      	str	r0, [r7, #12]
 800de60:	60b9      	str	r1, [r7, #8]
 800de62:	4613      	mov	r3, r2
 800de64:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d109      	bne.n	800de80 <udp_connect+0x28>
 800de6c:	4b2c      	ldr	r3, [pc, #176]	; (800df20 <udp_connect+0xc8>)
 800de6e:	f240 4235 	movw	r2, #1077	; 0x435
 800de72:	492c      	ldr	r1, [pc, #176]	; (800df24 <udp_connect+0xcc>)
 800de74:	482c      	ldr	r0, [pc, #176]	; (800df28 <udp_connect+0xd0>)
 800de76:	f002 fccd 	bl	8010814 <iprintf>
 800de7a:	f06f 030f 	mvn.w	r3, #15
 800de7e:	e04b      	b.n	800df18 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800de80:	68bb      	ldr	r3, [r7, #8]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d109      	bne.n	800de9a <udp_connect+0x42>
 800de86:	4b26      	ldr	r3, [pc, #152]	; (800df20 <udp_connect+0xc8>)
 800de88:	f240 4236 	movw	r2, #1078	; 0x436
 800de8c:	4927      	ldr	r1, [pc, #156]	; (800df2c <udp_connect+0xd4>)
 800de8e:	4826      	ldr	r0, [pc, #152]	; (800df28 <udp_connect+0xd0>)
 800de90:	f002 fcc0 	bl	8010814 <iprintf>
 800de94:	f06f 030f 	mvn.w	r3, #15
 800de98:	e03e      	b.n	800df18 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	8a5b      	ldrh	r3, [r3, #18]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d10f      	bne.n	800dec2 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800dea2:	68f9      	ldr	r1, [r7, #12]
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	8a5b      	ldrh	r3, [r3, #18]
 800dea8:	461a      	mov	r2, r3
 800deaa:	68f8      	ldr	r0, [r7, #12]
 800deac:	f7ff ff4c 	bl	800dd48 <udp_bind>
 800deb0:	4603      	mov	r3, r0
 800deb2:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800deb4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d002      	beq.n	800dec2 <udp_connect+0x6a>
      return err;
 800debc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dec0:	e02a      	b.n	800df18 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800dec2:	68bb      	ldr	r3, [r7, #8]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d002      	beq.n	800dece <udp_connect+0x76>
 800dec8:	68bb      	ldr	r3, [r7, #8]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	e000      	b.n	800ded0 <udp_connect+0x78>
 800dece:	2300      	movs	r3, #0
 800ded0:	68fa      	ldr	r2, [r7, #12]
 800ded2:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	88fa      	ldrh	r2, [r7, #6]
 800ded8:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	7c1b      	ldrb	r3, [r3, #16]
 800dede:	f043 0304 	orr.w	r3, r3, #4
 800dee2:	b2da      	uxtb	r2, r3
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800dee8:	4b11      	ldr	r3, [pc, #68]	; (800df30 <udp_connect+0xd8>)
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	617b      	str	r3, [r7, #20]
 800deee:	e008      	b.n	800df02 <udp_connect+0xaa>
    if (pcb == ipcb) {
 800def0:	68fa      	ldr	r2, [r7, #12]
 800def2:	697b      	ldr	r3, [r7, #20]
 800def4:	429a      	cmp	r2, r3
 800def6:	d101      	bne.n	800defc <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800def8:	2300      	movs	r3, #0
 800defa:	e00d      	b.n	800df18 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800defc:	697b      	ldr	r3, [r7, #20]
 800defe:	68db      	ldr	r3, [r3, #12]
 800df00:	617b      	str	r3, [r7, #20]
 800df02:	697b      	ldr	r3, [r7, #20]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d1f3      	bne.n	800def0 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800df08:	4b09      	ldr	r3, [pc, #36]	; (800df30 <udp_connect+0xd8>)
 800df0a:	681a      	ldr	r2, [r3, #0]
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800df10:	4a07      	ldr	r2, [pc, #28]	; (800df30 <udp_connect+0xd8>)
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800df16:	2300      	movs	r3, #0
}
 800df18:	4618      	mov	r0, r3
 800df1a:	3718      	adds	r7, #24
 800df1c:	46bd      	mov	sp, r7
 800df1e:	bd80      	pop	{r7, pc}
 800df20:	08013634 	.word	0x08013634
 800df24:	08013914 	.word	0x08013914
 800df28:	08013688 	.word	0x08013688
 800df2c:	08013930 	.word	0x08013930
 800df30:	20008900 	.word	0x20008900

0800df34 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800df34:	b580      	push	{r7, lr}
 800df36:	b084      	sub	sp, #16
 800df38:	af00      	add	r7, sp, #0
 800df3a:	60f8      	str	r0, [r7, #12]
 800df3c:	60b9      	str	r1, [r7, #8]
 800df3e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d107      	bne.n	800df56 <udp_recv+0x22>
 800df46:	4b08      	ldr	r3, [pc, #32]	; (800df68 <udp_recv+0x34>)
 800df48:	f240 428a 	movw	r2, #1162	; 0x48a
 800df4c:	4907      	ldr	r1, [pc, #28]	; (800df6c <udp_recv+0x38>)
 800df4e:	4808      	ldr	r0, [pc, #32]	; (800df70 <udp_recv+0x3c>)
 800df50:	f002 fc60 	bl	8010814 <iprintf>
 800df54:	e005      	b.n	800df62 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	68ba      	ldr	r2, [r7, #8]
 800df5a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	687a      	ldr	r2, [r7, #4]
 800df60:	61da      	str	r2, [r3, #28]
}
 800df62:	3710      	adds	r7, #16
 800df64:	46bd      	mov	sp, r7
 800df66:	bd80      	pop	{r7, pc}
 800df68:	08013634 	.word	0x08013634
 800df6c:	08013968 	.word	0x08013968
 800df70:	08013688 	.word	0x08013688

0800df74 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800df74:	b580      	push	{r7, lr}
 800df76:	b084      	sub	sp, #16
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d107      	bne.n	800df92 <udp_remove+0x1e>
 800df82:	4b19      	ldr	r3, [pc, #100]	; (800dfe8 <udp_remove+0x74>)
 800df84:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800df88:	4918      	ldr	r1, [pc, #96]	; (800dfec <udp_remove+0x78>)
 800df8a:	4819      	ldr	r0, [pc, #100]	; (800dff0 <udp_remove+0x7c>)
 800df8c:	f002 fc42 	bl	8010814 <iprintf>
 800df90:	e026      	b.n	800dfe0 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800df92:	4b18      	ldr	r3, [pc, #96]	; (800dff4 <udp_remove+0x80>)
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	687a      	ldr	r2, [r7, #4]
 800df98:	429a      	cmp	r2, r3
 800df9a:	d105      	bne.n	800dfa8 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800df9c:	4b15      	ldr	r3, [pc, #84]	; (800dff4 <udp_remove+0x80>)
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	68db      	ldr	r3, [r3, #12]
 800dfa2:	4a14      	ldr	r2, [pc, #80]	; (800dff4 <udp_remove+0x80>)
 800dfa4:	6013      	str	r3, [r2, #0]
 800dfa6:	e017      	b.n	800dfd8 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800dfa8:	4b12      	ldr	r3, [pc, #72]	; (800dff4 <udp_remove+0x80>)
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	60fb      	str	r3, [r7, #12]
 800dfae:	e010      	b.n	800dfd2 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	68db      	ldr	r3, [r3, #12]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d009      	beq.n	800dfcc <udp_remove+0x58>
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	68db      	ldr	r3, [r3, #12]
 800dfbc:	687a      	ldr	r2, [r7, #4]
 800dfbe:	429a      	cmp	r2, r3
 800dfc0:	d104      	bne.n	800dfcc <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	68da      	ldr	r2, [r3, #12]
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	60da      	str	r2, [r3, #12]
        break;
 800dfca:	e005      	b.n	800dfd8 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	68db      	ldr	r3, [r3, #12]
 800dfd0:	60fb      	str	r3, [r7, #12]
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d1eb      	bne.n	800dfb0 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800dfd8:	6879      	ldr	r1, [r7, #4]
 800dfda:	2000      	movs	r0, #0
 800dfdc:	f7f8 febc 	bl	8006d58 <memp_free>
}
 800dfe0:	3710      	adds	r7, #16
 800dfe2:	46bd      	mov	sp, r7
 800dfe4:	bd80      	pop	{r7, pc}
 800dfe6:	bf00      	nop
 800dfe8:	08013634 	.word	0x08013634
 800dfec:	08013980 	.word	0x08013980
 800dff0:	08013688 	.word	0x08013688
 800dff4:	20008900 	.word	0x20008900

0800dff8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b082      	sub	sp, #8
 800dffc:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800dffe:	2000      	movs	r0, #0
 800e000:	f7f8 fe3a 	bl	8006c78 <memp_malloc>
 800e004:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d007      	beq.n	800e01c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800e00c:	2220      	movs	r2, #32
 800e00e:	2100      	movs	r1, #0
 800e010:	6878      	ldr	r0, [r7, #4]
 800e012:	f002 fc64 	bl	80108de <memset>
    pcb->ttl = UDP_TTL;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	22ff      	movs	r2, #255	; 0xff
 800e01a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800e01c:	687b      	ldr	r3, [r7, #4]
}
 800e01e:	4618      	mov	r0, r3
 800e020:	3708      	adds	r7, #8
 800e022:	46bd      	mov	sp, r7
 800e024:	bd80      	pop	{r7, pc}
	...

0800e028 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e028:	b480      	push	{r7}
 800e02a:	b085      	sub	sp, #20
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
 800e030:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d01e      	beq.n	800e076 <udp_netif_ip_addr_changed+0x4e>
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d01a      	beq.n	800e076 <udp_netif_ip_addr_changed+0x4e>
 800e040:	683b      	ldr	r3, [r7, #0]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d017      	beq.n	800e076 <udp_netif_ip_addr_changed+0x4e>
 800e046:	683b      	ldr	r3, [r7, #0]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d013      	beq.n	800e076 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e04e:	4b0d      	ldr	r3, [pc, #52]	; (800e084 <udp_netif_ip_addr_changed+0x5c>)
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	60fb      	str	r3, [r7, #12]
 800e054:	e00c      	b.n	800e070 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	681a      	ldr	r2, [r3, #0]
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	429a      	cmp	r2, r3
 800e060:	d103      	bne.n	800e06a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	681a      	ldr	r2, [r3, #0]
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	68db      	ldr	r3, [r3, #12]
 800e06e:	60fb      	str	r3, [r7, #12]
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d1ef      	bne.n	800e056 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800e076:	bf00      	nop
 800e078:	3714      	adds	r7, #20
 800e07a:	46bd      	mov	sp, r7
 800e07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e080:	4770      	bx	lr
 800e082:	bf00      	nop
 800e084:	20008900 	.word	0x20008900

0800e088 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b082      	sub	sp, #8
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800e090:	4915      	ldr	r1, [pc, #84]	; (800e0e8 <etharp_free_entry+0x60>)
 800e092:	687a      	ldr	r2, [r7, #4]
 800e094:	4613      	mov	r3, r2
 800e096:	005b      	lsls	r3, r3, #1
 800e098:	4413      	add	r3, r2
 800e09a:	00db      	lsls	r3, r3, #3
 800e09c:	440b      	add	r3, r1
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d013      	beq.n	800e0cc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800e0a4:	4910      	ldr	r1, [pc, #64]	; (800e0e8 <etharp_free_entry+0x60>)
 800e0a6:	687a      	ldr	r2, [r7, #4]
 800e0a8:	4613      	mov	r3, r2
 800e0aa:	005b      	lsls	r3, r3, #1
 800e0ac:	4413      	add	r3, r2
 800e0ae:	00db      	lsls	r3, r3, #3
 800e0b0:	440b      	add	r3, r1
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	f7f9 fcc5 	bl	8007a44 <pbuf_free>
    arp_table[i].q = NULL;
 800e0ba:	490b      	ldr	r1, [pc, #44]	; (800e0e8 <etharp_free_entry+0x60>)
 800e0bc:	687a      	ldr	r2, [r7, #4]
 800e0be:	4613      	mov	r3, r2
 800e0c0:	005b      	lsls	r3, r3, #1
 800e0c2:	4413      	add	r3, r2
 800e0c4:	00db      	lsls	r3, r3, #3
 800e0c6:	440b      	add	r3, r1
 800e0c8:	2200      	movs	r2, #0
 800e0ca:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800e0cc:	4906      	ldr	r1, [pc, #24]	; (800e0e8 <etharp_free_entry+0x60>)
 800e0ce:	687a      	ldr	r2, [r7, #4]
 800e0d0:	4613      	mov	r3, r2
 800e0d2:	005b      	lsls	r3, r3, #1
 800e0d4:	4413      	add	r3, r2
 800e0d6:	00db      	lsls	r3, r3, #3
 800e0d8:	440b      	add	r3, r1
 800e0da:	3314      	adds	r3, #20
 800e0dc:	2200      	movs	r2, #0
 800e0de:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800e0e0:	bf00      	nop
 800e0e2:	3708      	adds	r7, #8
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	bd80      	pop	{r7, pc}
 800e0e8:	20008904 	.word	0x20008904

0800e0ec <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b082      	sub	sp, #8
 800e0f0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	607b      	str	r3, [r7, #4]
 800e0f6:	e096      	b.n	800e226 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800e0f8:	494f      	ldr	r1, [pc, #316]	; (800e238 <etharp_tmr+0x14c>)
 800e0fa:	687a      	ldr	r2, [r7, #4]
 800e0fc:	4613      	mov	r3, r2
 800e0fe:	005b      	lsls	r3, r3, #1
 800e100:	4413      	add	r3, r2
 800e102:	00db      	lsls	r3, r3, #3
 800e104:	440b      	add	r3, r1
 800e106:	3314      	adds	r3, #20
 800e108:	781b      	ldrb	r3, [r3, #0]
 800e10a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800e10c:	78fb      	ldrb	r3, [r7, #3]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	f000 8086 	beq.w	800e220 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800e114:	4948      	ldr	r1, [pc, #288]	; (800e238 <etharp_tmr+0x14c>)
 800e116:	687a      	ldr	r2, [r7, #4]
 800e118:	4613      	mov	r3, r2
 800e11a:	005b      	lsls	r3, r3, #1
 800e11c:	4413      	add	r3, r2
 800e11e:	00db      	lsls	r3, r3, #3
 800e120:	440b      	add	r3, r1
 800e122:	3312      	adds	r3, #18
 800e124:	881b      	ldrh	r3, [r3, #0]
 800e126:	3301      	adds	r3, #1
 800e128:	b298      	uxth	r0, r3
 800e12a:	4943      	ldr	r1, [pc, #268]	; (800e238 <etharp_tmr+0x14c>)
 800e12c:	687a      	ldr	r2, [r7, #4]
 800e12e:	4613      	mov	r3, r2
 800e130:	005b      	lsls	r3, r3, #1
 800e132:	4413      	add	r3, r2
 800e134:	00db      	lsls	r3, r3, #3
 800e136:	440b      	add	r3, r1
 800e138:	3312      	adds	r3, #18
 800e13a:	4602      	mov	r2, r0
 800e13c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e13e:	493e      	ldr	r1, [pc, #248]	; (800e238 <etharp_tmr+0x14c>)
 800e140:	687a      	ldr	r2, [r7, #4]
 800e142:	4613      	mov	r3, r2
 800e144:	005b      	lsls	r3, r3, #1
 800e146:	4413      	add	r3, r2
 800e148:	00db      	lsls	r3, r3, #3
 800e14a:	440b      	add	r3, r1
 800e14c:	3312      	adds	r3, #18
 800e14e:	881b      	ldrh	r3, [r3, #0]
 800e150:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800e154:	d215      	bcs.n	800e182 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e156:	4938      	ldr	r1, [pc, #224]	; (800e238 <etharp_tmr+0x14c>)
 800e158:	687a      	ldr	r2, [r7, #4]
 800e15a:	4613      	mov	r3, r2
 800e15c:	005b      	lsls	r3, r3, #1
 800e15e:	4413      	add	r3, r2
 800e160:	00db      	lsls	r3, r3, #3
 800e162:	440b      	add	r3, r1
 800e164:	3314      	adds	r3, #20
 800e166:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e168:	2b01      	cmp	r3, #1
 800e16a:	d10e      	bne.n	800e18a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800e16c:	4932      	ldr	r1, [pc, #200]	; (800e238 <etharp_tmr+0x14c>)
 800e16e:	687a      	ldr	r2, [r7, #4]
 800e170:	4613      	mov	r3, r2
 800e172:	005b      	lsls	r3, r3, #1
 800e174:	4413      	add	r3, r2
 800e176:	00db      	lsls	r3, r3, #3
 800e178:	440b      	add	r3, r1
 800e17a:	3312      	adds	r3, #18
 800e17c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e17e:	2b04      	cmp	r3, #4
 800e180:	d903      	bls.n	800e18a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800e182:	6878      	ldr	r0, [r7, #4]
 800e184:	f7ff ff80 	bl	800e088 <etharp_free_entry>
 800e188:	e04a      	b.n	800e220 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800e18a:	492b      	ldr	r1, [pc, #172]	; (800e238 <etharp_tmr+0x14c>)
 800e18c:	687a      	ldr	r2, [r7, #4]
 800e18e:	4613      	mov	r3, r2
 800e190:	005b      	lsls	r3, r3, #1
 800e192:	4413      	add	r3, r2
 800e194:	00db      	lsls	r3, r3, #3
 800e196:	440b      	add	r3, r1
 800e198:	3314      	adds	r3, #20
 800e19a:	781b      	ldrb	r3, [r3, #0]
 800e19c:	2b03      	cmp	r3, #3
 800e19e:	d10a      	bne.n	800e1b6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800e1a0:	4925      	ldr	r1, [pc, #148]	; (800e238 <etharp_tmr+0x14c>)
 800e1a2:	687a      	ldr	r2, [r7, #4]
 800e1a4:	4613      	mov	r3, r2
 800e1a6:	005b      	lsls	r3, r3, #1
 800e1a8:	4413      	add	r3, r2
 800e1aa:	00db      	lsls	r3, r3, #3
 800e1ac:	440b      	add	r3, r1
 800e1ae:	3314      	adds	r3, #20
 800e1b0:	2204      	movs	r2, #4
 800e1b2:	701a      	strb	r2, [r3, #0]
 800e1b4:	e034      	b.n	800e220 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800e1b6:	4920      	ldr	r1, [pc, #128]	; (800e238 <etharp_tmr+0x14c>)
 800e1b8:	687a      	ldr	r2, [r7, #4]
 800e1ba:	4613      	mov	r3, r2
 800e1bc:	005b      	lsls	r3, r3, #1
 800e1be:	4413      	add	r3, r2
 800e1c0:	00db      	lsls	r3, r3, #3
 800e1c2:	440b      	add	r3, r1
 800e1c4:	3314      	adds	r3, #20
 800e1c6:	781b      	ldrb	r3, [r3, #0]
 800e1c8:	2b04      	cmp	r3, #4
 800e1ca:	d10a      	bne.n	800e1e2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800e1cc:	491a      	ldr	r1, [pc, #104]	; (800e238 <etharp_tmr+0x14c>)
 800e1ce:	687a      	ldr	r2, [r7, #4]
 800e1d0:	4613      	mov	r3, r2
 800e1d2:	005b      	lsls	r3, r3, #1
 800e1d4:	4413      	add	r3, r2
 800e1d6:	00db      	lsls	r3, r3, #3
 800e1d8:	440b      	add	r3, r1
 800e1da:	3314      	adds	r3, #20
 800e1dc:	2202      	movs	r2, #2
 800e1de:	701a      	strb	r2, [r3, #0]
 800e1e0:	e01e      	b.n	800e220 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e1e2:	4915      	ldr	r1, [pc, #84]	; (800e238 <etharp_tmr+0x14c>)
 800e1e4:	687a      	ldr	r2, [r7, #4]
 800e1e6:	4613      	mov	r3, r2
 800e1e8:	005b      	lsls	r3, r3, #1
 800e1ea:	4413      	add	r3, r2
 800e1ec:	00db      	lsls	r3, r3, #3
 800e1ee:	440b      	add	r3, r1
 800e1f0:	3314      	adds	r3, #20
 800e1f2:	781b      	ldrb	r3, [r3, #0]
 800e1f4:	2b01      	cmp	r3, #1
 800e1f6:	d113      	bne.n	800e220 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800e1f8:	490f      	ldr	r1, [pc, #60]	; (800e238 <etharp_tmr+0x14c>)
 800e1fa:	687a      	ldr	r2, [r7, #4]
 800e1fc:	4613      	mov	r3, r2
 800e1fe:	005b      	lsls	r3, r3, #1
 800e200:	4413      	add	r3, r2
 800e202:	00db      	lsls	r3, r3, #3
 800e204:	440b      	add	r3, r1
 800e206:	3308      	adds	r3, #8
 800e208:	6818      	ldr	r0, [r3, #0]
 800e20a:	687a      	ldr	r2, [r7, #4]
 800e20c:	4613      	mov	r3, r2
 800e20e:	005b      	lsls	r3, r3, #1
 800e210:	4413      	add	r3, r2
 800e212:	00db      	lsls	r3, r3, #3
 800e214:	4a08      	ldr	r2, [pc, #32]	; (800e238 <etharp_tmr+0x14c>)
 800e216:	4413      	add	r3, r2
 800e218:	3304      	adds	r3, #4
 800e21a:	4619      	mov	r1, r3
 800e21c:	f000 fe6e 	bl	800eefc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	3301      	adds	r3, #1
 800e224:	607b      	str	r3, [r7, #4]
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	2b09      	cmp	r3, #9
 800e22a:	f77f af65 	ble.w	800e0f8 <etharp_tmr+0xc>
      }
    }
  }
}
 800e22e:	bf00      	nop
 800e230:	bf00      	nop
 800e232:	3708      	adds	r7, #8
 800e234:	46bd      	mov	sp, r7
 800e236:	bd80      	pop	{r7, pc}
 800e238:	20008904 	.word	0x20008904

0800e23c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b08a      	sub	sp, #40	; 0x28
 800e240:	af00      	add	r7, sp, #0
 800e242:	60f8      	str	r0, [r7, #12]
 800e244:	460b      	mov	r3, r1
 800e246:	607a      	str	r2, [r7, #4]
 800e248:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800e24a:	230a      	movs	r3, #10
 800e24c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800e24e:	230a      	movs	r3, #10
 800e250:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800e252:	230a      	movs	r3, #10
 800e254:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800e256:	2300      	movs	r3, #0
 800e258:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800e25a:	230a      	movs	r3, #10
 800e25c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800e25e:	2300      	movs	r3, #0
 800e260:	83bb      	strh	r3, [r7, #28]
 800e262:	2300      	movs	r3, #0
 800e264:	837b      	strh	r3, [r7, #26]
 800e266:	2300      	movs	r3, #0
 800e268:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e26a:	2300      	movs	r3, #0
 800e26c:	843b      	strh	r3, [r7, #32]
 800e26e:	e0ae      	b.n	800e3ce <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800e270:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e274:	49a6      	ldr	r1, [pc, #664]	; (800e510 <etharp_find_entry+0x2d4>)
 800e276:	4613      	mov	r3, r2
 800e278:	005b      	lsls	r3, r3, #1
 800e27a:	4413      	add	r3, r2
 800e27c:	00db      	lsls	r3, r3, #3
 800e27e:	440b      	add	r3, r1
 800e280:	3314      	adds	r3, #20
 800e282:	781b      	ldrb	r3, [r3, #0]
 800e284:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800e286:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e28a:	2b0a      	cmp	r3, #10
 800e28c:	d105      	bne.n	800e29a <etharp_find_entry+0x5e>
 800e28e:	7dfb      	ldrb	r3, [r7, #23]
 800e290:	2b00      	cmp	r3, #0
 800e292:	d102      	bne.n	800e29a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800e294:	8c3b      	ldrh	r3, [r7, #32]
 800e296:	847b      	strh	r3, [r7, #34]	; 0x22
 800e298:	e095      	b.n	800e3c6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800e29a:	7dfb      	ldrb	r3, [r7, #23]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	f000 8092 	beq.w	800e3c6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800e2a2:	7dfb      	ldrb	r3, [r7, #23]
 800e2a4:	2b01      	cmp	r3, #1
 800e2a6:	d009      	beq.n	800e2bc <etharp_find_entry+0x80>
 800e2a8:	7dfb      	ldrb	r3, [r7, #23]
 800e2aa:	2b01      	cmp	r3, #1
 800e2ac:	d806      	bhi.n	800e2bc <etharp_find_entry+0x80>
 800e2ae:	4b99      	ldr	r3, [pc, #612]	; (800e514 <etharp_find_entry+0x2d8>)
 800e2b0:	f240 1223 	movw	r2, #291	; 0x123
 800e2b4:	4998      	ldr	r1, [pc, #608]	; (800e518 <etharp_find_entry+0x2dc>)
 800e2b6:	4899      	ldr	r0, [pc, #612]	; (800e51c <etharp_find_entry+0x2e0>)
 800e2b8:	f002 faac 	bl	8010814 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d020      	beq.n	800e304 <etharp_find_entry+0xc8>
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	6819      	ldr	r1, [r3, #0]
 800e2c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e2ca:	4891      	ldr	r0, [pc, #580]	; (800e510 <etharp_find_entry+0x2d4>)
 800e2cc:	4613      	mov	r3, r2
 800e2ce:	005b      	lsls	r3, r3, #1
 800e2d0:	4413      	add	r3, r2
 800e2d2:	00db      	lsls	r3, r3, #3
 800e2d4:	4403      	add	r3, r0
 800e2d6:	3304      	adds	r3, #4
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	4299      	cmp	r1, r3
 800e2dc:	d112      	bne.n	800e304 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d00c      	beq.n	800e2fe <etharp_find_entry+0xc2>
 800e2e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e2e8:	4989      	ldr	r1, [pc, #548]	; (800e510 <etharp_find_entry+0x2d4>)
 800e2ea:	4613      	mov	r3, r2
 800e2ec:	005b      	lsls	r3, r3, #1
 800e2ee:	4413      	add	r3, r2
 800e2f0:	00db      	lsls	r3, r3, #3
 800e2f2:	440b      	add	r3, r1
 800e2f4:	3308      	adds	r3, #8
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	687a      	ldr	r2, [r7, #4]
 800e2fa:	429a      	cmp	r2, r3
 800e2fc:	d102      	bne.n	800e304 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800e2fe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e302:	e100      	b.n	800e506 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800e304:	7dfb      	ldrb	r3, [r7, #23]
 800e306:	2b01      	cmp	r3, #1
 800e308:	d140      	bne.n	800e38c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800e30a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e30e:	4980      	ldr	r1, [pc, #512]	; (800e510 <etharp_find_entry+0x2d4>)
 800e310:	4613      	mov	r3, r2
 800e312:	005b      	lsls	r3, r3, #1
 800e314:	4413      	add	r3, r2
 800e316:	00db      	lsls	r3, r3, #3
 800e318:	440b      	add	r3, r1
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d01a      	beq.n	800e356 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800e320:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e324:	497a      	ldr	r1, [pc, #488]	; (800e510 <etharp_find_entry+0x2d4>)
 800e326:	4613      	mov	r3, r2
 800e328:	005b      	lsls	r3, r3, #1
 800e32a:	4413      	add	r3, r2
 800e32c:	00db      	lsls	r3, r3, #3
 800e32e:	440b      	add	r3, r1
 800e330:	3312      	adds	r3, #18
 800e332:	881b      	ldrh	r3, [r3, #0]
 800e334:	8bba      	ldrh	r2, [r7, #28]
 800e336:	429a      	cmp	r2, r3
 800e338:	d845      	bhi.n	800e3c6 <etharp_find_entry+0x18a>
            old_queue = i;
 800e33a:	8c3b      	ldrh	r3, [r7, #32]
 800e33c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800e33e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e342:	4973      	ldr	r1, [pc, #460]	; (800e510 <etharp_find_entry+0x2d4>)
 800e344:	4613      	mov	r3, r2
 800e346:	005b      	lsls	r3, r3, #1
 800e348:	4413      	add	r3, r2
 800e34a:	00db      	lsls	r3, r3, #3
 800e34c:	440b      	add	r3, r1
 800e34e:	3312      	adds	r3, #18
 800e350:	881b      	ldrh	r3, [r3, #0]
 800e352:	83bb      	strh	r3, [r7, #28]
 800e354:	e037      	b.n	800e3c6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800e356:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e35a:	496d      	ldr	r1, [pc, #436]	; (800e510 <etharp_find_entry+0x2d4>)
 800e35c:	4613      	mov	r3, r2
 800e35e:	005b      	lsls	r3, r3, #1
 800e360:	4413      	add	r3, r2
 800e362:	00db      	lsls	r3, r3, #3
 800e364:	440b      	add	r3, r1
 800e366:	3312      	adds	r3, #18
 800e368:	881b      	ldrh	r3, [r3, #0]
 800e36a:	8b7a      	ldrh	r2, [r7, #26]
 800e36c:	429a      	cmp	r2, r3
 800e36e:	d82a      	bhi.n	800e3c6 <etharp_find_entry+0x18a>
            old_pending = i;
 800e370:	8c3b      	ldrh	r3, [r7, #32]
 800e372:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800e374:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e378:	4965      	ldr	r1, [pc, #404]	; (800e510 <etharp_find_entry+0x2d4>)
 800e37a:	4613      	mov	r3, r2
 800e37c:	005b      	lsls	r3, r3, #1
 800e37e:	4413      	add	r3, r2
 800e380:	00db      	lsls	r3, r3, #3
 800e382:	440b      	add	r3, r1
 800e384:	3312      	adds	r3, #18
 800e386:	881b      	ldrh	r3, [r3, #0]
 800e388:	837b      	strh	r3, [r7, #26]
 800e38a:	e01c      	b.n	800e3c6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800e38c:	7dfb      	ldrb	r3, [r7, #23]
 800e38e:	2b01      	cmp	r3, #1
 800e390:	d919      	bls.n	800e3c6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800e392:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e396:	495e      	ldr	r1, [pc, #376]	; (800e510 <etharp_find_entry+0x2d4>)
 800e398:	4613      	mov	r3, r2
 800e39a:	005b      	lsls	r3, r3, #1
 800e39c:	4413      	add	r3, r2
 800e39e:	00db      	lsls	r3, r3, #3
 800e3a0:	440b      	add	r3, r1
 800e3a2:	3312      	adds	r3, #18
 800e3a4:	881b      	ldrh	r3, [r3, #0]
 800e3a6:	8b3a      	ldrh	r2, [r7, #24]
 800e3a8:	429a      	cmp	r2, r3
 800e3aa:	d80c      	bhi.n	800e3c6 <etharp_find_entry+0x18a>
            old_stable = i;
 800e3ac:	8c3b      	ldrh	r3, [r7, #32]
 800e3ae:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800e3b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e3b4:	4956      	ldr	r1, [pc, #344]	; (800e510 <etharp_find_entry+0x2d4>)
 800e3b6:	4613      	mov	r3, r2
 800e3b8:	005b      	lsls	r3, r3, #1
 800e3ba:	4413      	add	r3, r2
 800e3bc:	00db      	lsls	r3, r3, #3
 800e3be:	440b      	add	r3, r1
 800e3c0:	3312      	adds	r3, #18
 800e3c2:	881b      	ldrh	r3, [r3, #0]
 800e3c4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e3c6:	8c3b      	ldrh	r3, [r7, #32]
 800e3c8:	3301      	adds	r3, #1
 800e3ca:	b29b      	uxth	r3, r3
 800e3cc:	843b      	strh	r3, [r7, #32]
 800e3ce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e3d2:	2b09      	cmp	r3, #9
 800e3d4:	f77f af4c 	ble.w	800e270 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800e3d8:	7afb      	ldrb	r3, [r7, #11]
 800e3da:	f003 0302 	and.w	r3, r3, #2
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d108      	bne.n	800e3f4 <etharp_find_entry+0x1b8>
 800e3e2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e3e6:	2b0a      	cmp	r3, #10
 800e3e8:	d107      	bne.n	800e3fa <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800e3ea:	7afb      	ldrb	r3, [r7, #11]
 800e3ec:	f003 0301 	and.w	r3, r3, #1
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d102      	bne.n	800e3fa <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800e3f4:	f04f 33ff 	mov.w	r3, #4294967295
 800e3f8:	e085      	b.n	800e506 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800e3fa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e3fe:	2b09      	cmp	r3, #9
 800e400:	dc02      	bgt.n	800e408 <etharp_find_entry+0x1cc>
    i = empty;
 800e402:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e404:	843b      	strh	r3, [r7, #32]
 800e406:	e039      	b.n	800e47c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800e408:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800e40c:	2b09      	cmp	r3, #9
 800e40e:	dc14      	bgt.n	800e43a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800e410:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e412:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800e414:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e418:	493d      	ldr	r1, [pc, #244]	; (800e510 <etharp_find_entry+0x2d4>)
 800e41a:	4613      	mov	r3, r2
 800e41c:	005b      	lsls	r3, r3, #1
 800e41e:	4413      	add	r3, r2
 800e420:	00db      	lsls	r3, r3, #3
 800e422:	440b      	add	r3, r1
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d018      	beq.n	800e45c <etharp_find_entry+0x220>
 800e42a:	4b3a      	ldr	r3, [pc, #232]	; (800e514 <etharp_find_entry+0x2d8>)
 800e42c:	f240 126d 	movw	r2, #365	; 0x16d
 800e430:	493b      	ldr	r1, [pc, #236]	; (800e520 <etharp_find_entry+0x2e4>)
 800e432:	483a      	ldr	r0, [pc, #232]	; (800e51c <etharp_find_entry+0x2e0>)
 800e434:	f002 f9ee 	bl	8010814 <iprintf>
 800e438:	e010      	b.n	800e45c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800e43a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800e43e:	2b09      	cmp	r3, #9
 800e440:	dc02      	bgt.n	800e448 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800e442:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e444:	843b      	strh	r3, [r7, #32]
 800e446:	e009      	b.n	800e45c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800e448:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800e44c:	2b09      	cmp	r3, #9
 800e44e:	dc02      	bgt.n	800e456 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800e450:	8bfb      	ldrh	r3, [r7, #30]
 800e452:	843b      	strh	r3, [r7, #32]
 800e454:	e002      	b.n	800e45c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800e456:	f04f 33ff 	mov.w	r3, #4294967295
 800e45a:	e054      	b.n	800e506 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800e45c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e460:	2b09      	cmp	r3, #9
 800e462:	dd06      	ble.n	800e472 <etharp_find_entry+0x236>
 800e464:	4b2b      	ldr	r3, [pc, #172]	; (800e514 <etharp_find_entry+0x2d8>)
 800e466:	f240 127f 	movw	r2, #383	; 0x17f
 800e46a:	492e      	ldr	r1, [pc, #184]	; (800e524 <etharp_find_entry+0x2e8>)
 800e46c:	482b      	ldr	r0, [pc, #172]	; (800e51c <etharp_find_entry+0x2e0>)
 800e46e:	f002 f9d1 	bl	8010814 <iprintf>
    etharp_free_entry(i);
 800e472:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e476:	4618      	mov	r0, r3
 800e478:	f7ff fe06 	bl	800e088 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800e47c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e480:	2b09      	cmp	r3, #9
 800e482:	dd06      	ble.n	800e492 <etharp_find_entry+0x256>
 800e484:	4b23      	ldr	r3, [pc, #140]	; (800e514 <etharp_find_entry+0x2d8>)
 800e486:	f240 1283 	movw	r2, #387	; 0x183
 800e48a:	4926      	ldr	r1, [pc, #152]	; (800e524 <etharp_find_entry+0x2e8>)
 800e48c:	4823      	ldr	r0, [pc, #140]	; (800e51c <etharp_find_entry+0x2e0>)
 800e48e:	f002 f9c1 	bl	8010814 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800e492:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e496:	491e      	ldr	r1, [pc, #120]	; (800e510 <etharp_find_entry+0x2d4>)
 800e498:	4613      	mov	r3, r2
 800e49a:	005b      	lsls	r3, r3, #1
 800e49c:	4413      	add	r3, r2
 800e49e:	00db      	lsls	r3, r3, #3
 800e4a0:	440b      	add	r3, r1
 800e4a2:	3314      	adds	r3, #20
 800e4a4:	781b      	ldrb	r3, [r3, #0]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d006      	beq.n	800e4b8 <etharp_find_entry+0x27c>
 800e4aa:	4b1a      	ldr	r3, [pc, #104]	; (800e514 <etharp_find_entry+0x2d8>)
 800e4ac:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800e4b0:	491d      	ldr	r1, [pc, #116]	; (800e528 <etharp_find_entry+0x2ec>)
 800e4b2:	481a      	ldr	r0, [pc, #104]	; (800e51c <etharp_find_entry+0x2e0>)
 800e4b4:	f002 f9ae 	bl	8010814 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d00b      	beq.n	800e4d6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800e4be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	6819      	ldr	r1, [r3, #0]
 800e4c6:	4812      	ldr	r0, [pc, #72]	; (800e510 <etharp_find_entry+0x2d4>)
 800e4c8:	4613      	mov	r3, r2
 800e4ca:	005b      	lsls	r3, r3, #1
 800e4cc:	4413      	add	r3, r2
 800e4ce:	00db      	lsls	r3, r3, #3
 800e4d0:	4403      	add	r3, r0
 800e4d2:	3304      	adds	r3, #4
 800e4d4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800e4d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e4da:	490d      	ldr	r1, [pc, #52]	; (800e510 <etharp_find_entry+0x2d4>)
 800e4dc:	4613      	mov	r3, r2
 800e4de:	005b      	lsls	r3, r3, #1
 800e4e0:	4413      	add	r3, r2
 800e4e2:	00db      	lsls	r3, r3, #3
 800e4e4:	440b      	add	r3, r1
 800e4e6:	3312      	adds	r3, #18
 800e4e8:	2200      	movs	r2, #0
 800e4ea:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800e4ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e4f0:	4907      	ldr	r1, [pc, #28]	; (800e510 <etharp_find_entry+0x2d4>)
 800e4f2:	4613      	mov	r3, r2
 800e4f4:	005b      	lsls	r3, r3, #1
 800e4f6:	4413      	add	r3, r2
 800e4f8:	00db      	lsls	r3, r3, #3
 800e4fa:	440b      	add	r3, r1
 800e4fc:	3308      	adds	r3, #8
 800e4fe:	687a      	ldr	r2, [r7, #4]
 800e500:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800e502:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800e506:	4618      	mov	r0, r3
 800e508:	3728      	adds	r7, #40	; 0x28
 800e50a:	46bd      	mov	sp, r7
 800e50c:	bd80      	pop	{r7, pc}
 800e50e:	bf00      	nop
 800e510:	20008904 	.word	0x20008904
 800e514:	08013998 	.word	0x08013998
 800e518:	080139d0 	.word	0x080139d0
 800e51c:	08013a10 	.word	0x08013a10
 800e520:	08013a38 	.word	0x08013a38
 800e524:	08013a50 	.word	0x08013a50
 800e528:	08013a64 	.word	0x08013a64

0800e52c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b088      	sub	sp, #32
 800e530:	af02      	add	r7, sp, #8
 800e532:	60f8      	str	r0, [r7, #12]
 800e534:	60b9      	str	r1, [r7, #8]
 800e536:	607a      	str	r2, [r7, #4]
 800e538:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e540:	2b06      	cmp	r3, #6
 800e542:	d006      	beq.n	800e552 <etharp_update_arp_entry+0x26>
 800e544:	4b48      	ldr	r3, [pc, #288]	; (800e668 <etharp_update_arp_entry+0x13c>)
 800e546:	f240 12a9 	movw	r2, #425	; 0x1a9
 800e54a:	4948      	ldr	r1, [pc, #288]	; (800e66c <etharp_update_arp_entry+0x140>)
 800e54c:	4848      	ldr	r0, [pc, #288]	; (800e670 <etharp_update_arp_entry+0x144>)
 800e54e:	f002 f961 	bl	8010814 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800e552:	68bb      	ldr	r3, [r7, #8]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d012      	beq.n	800e57e <etharp_update_arp_entry+0x52>
 800e558:	68bb      	ldr	r3, [r7, #8]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d00e      	beq.n	800e57e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800e560:	68bb      	ldr	r3, [r7, #8]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	68f9      	ldr	r1, [r7, #12]
 800e566:	4618      	mov	r0, r3
 800e568:	f001 f8fe 	bl	800f768 <ip4_addr_isbroadcast_u32>
 800e56c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d105      	bne.n	800e57e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800e572:	68bb      	ldr	r3, [r7, #8]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800e57a:	2be0      	cmp	r3, #224	; 0xe0
 800e57c:	d102      	bne.n	800e584 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800e57e:	f06f 030f 	mvn.w	r3, #15
 800e582:	e06c      	b.n	800e65e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800e584:	78fb      	ldrb	r3, [r7, #3]
 800e586:	68fa      	ldr	r2, [r7, #12]
 800e588:	4619      	mov	r1, r3
 800e58a:	68b8      	ldr	r0, [r7, #8]
 800e58c:	f7ff fe56 	bl	800e23c <etharp_find_entry>
 800e590:	4603      	mov	r3, r0
 800e592:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800e594:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	da02      	bge.n	800e5a2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800e59c:	8afb      	ldrh	r3, [r7, #22]
 800e59e:	b25b      	sxtb	r3, r3
 800e5a0:	e05d      	b.n	800e65e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800e5a2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e5a6:	4933      	ldr	r1, [pc, #204]	; (800e674 <etharp_update_arp_entry+0x148>)
 800e5a8:	4613      	mov	r3, r2
 800e5aa:	005b      	lsls	r3, r3, #1
 800e5ac:	4413      	add	r3, r2
 800e5ae:	00db      	lsls	r3, r3, #3
 800e5b0:	440b      	add	r3, r1
 800e5b2:	3314      	adds	r3, #20
 800e5b4:	2202      	movs	r2, #2
 800e5b6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800e5b8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e5bc:	492d      	ldr	r1, [pc, #180]	; (800e674 <etharp_update_arp_entry+0x148>)
 800e5be:	4613      	mov	r3, r2
 800e5c0:	005b      	lsls	r3, r3, #1
 800e5c2:	4413      	add	r3, r2
 800e5c4:	00db      	lsls	r3, r3, #3
 800e5c6:	440b      	add	r3, r1
 800e5c8:	3308      	adds	r3, #8
 800e5ca:	68fa      	ldr	r2, [r7, #12]
 800e5cc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800e5ce:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e5d2:	4613      	mov	r3, r2
 800e5d4:	005b      	lsls	r3, r3, #1
 800e5d6:	4413      	add	r3, r2
 800e5d8:	00db      	lsls	r3, r3, #3
 800e5da:	3308      	adds	r3, #8
 800e5dc:	4a25      	ldr	r2, [pc, #148]	; (800e674 <etharp_update_arp_entry+0x148>)
 800e5de:	4413      	add	r3, r2
 800e5e0:	3304      	adds	r3, #4
 800e5e2:	2206      	movs	r2, #6
 800e5e4:	6879      	ldr	r1, [r7, #4]
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	f002 fa01 	bl	80109ee <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800e5ec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e5f0:	4920      	ldr	r1, [pc, #128]	; (800e674 <etharp_update_arp_entry+0x148>)
 800e5f2:	4613      	mov	r3, r2
 800e5f4:	005b      	lsls	r3, r3, #1
 800e5f6:	4413      	add	r3, r2
 800e5f8:	00db      	lsls	r3, r3, #3
 800e5fa:	440b      	add	r3, r1
 800e5fc:	3312      	adds	r3, #18
 800e5fe:	2200      	movs	r2, #0
 800e600:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800e602:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e606:	491b      	ldr	r1, [pc, #108]	; (800e674 <etharp_update_arp_entry+0x148>)
 800e608:	4613      	mov	r3, r2
 800e60a:	005b      	lsls	r3, r3, #1
 800e60c:	4413      	add	r3, r2
 800e60e:	00db      	lsls	r3, r3, #3
 800e610:	440b      	add	r3, r1
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d021      	beq.n	800e65c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800e618:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e61c:	4915      	ldr	r1, [pc, #84]	; (800e674 <etharp_update_arp_entry+0x148>)
 800e61e:	4613      	mov	r3, r2
 800e620:	005b      	lsls	r3, r3, #1
 800e622:	4413      	add	r3, r2
 800e624:	00db      	lsls	r3, r3, #3
 800e626:	440b      	add	r3, r1
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800e62c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e630:	4910      	ldr	r1, [pc, #64]	; (800e674 <etharp_update_arp_entry+0x148>)
 800e632:	4613      	mov	r3, r2
 800e634:	005b      	lsls	r3, r3, #1
 800e636:	4413      	add	r3, r2
 800e638:	00db      	lsls	r3, r3, #3
 800e63a:	440b      	add	r3, r1
 800e63c:	2200      	movs	r2, #0
 800e63e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800e646:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e64a:	9300      	str	r3, [sp, #0]
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	6939      	ldr	r1, [r7, #16]
 800e650:	68f8      	ldr	r0, [r7, #12]
 800e652:	f001 ff97 	bl	8010584 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800e656:	6938      	ldr	r0, [r7, #16]
 800e658:	f7f9 f9f4 	bl	8007a44 <pbuf_free>
  }
  return ERR_OK;
 800e65c:	2300      	movs	r3, #0
}
 800e65e:	4618      	mov	r0, r3
 800e660:	3718      	adds	r7, #24
 800e662:	46bd      	mov	sp, r7
 800e664:	bd80      	pop	{r7, pc}
 800e666:	bf00      	nop
 800e668:	08013998 	.word	0x08013998
 800e66c:	08013a90 	.word	0x08013a90
 800e670:	08013a10 	.word	0x08013a10
 800e674:	20008904 	.word	0x20008904

0800e678 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800e678:	b580      	push	{r7, lr}
 800e67a:	b084      	sub	sp, #16
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e680:	2300      	movs	r3, #0
 800e682:	60fb      	str	r3, [r7, #12]
 800e684:	e01e      	b.n	800e6c4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800e686:	4913      	ldr	r1, [pc, #76]	; (800e6d4 <etharp_cleanup_netif+0x5c>)
 800e688:	68fa      	ldr	r2, [r7, #12]
 800e68a:	4613      	mov	r3, r2
 800e68c:	005b      	lsls	r3, r3, #1
 800e68e:	4413      	add	r3, r2
 800e690:	00db      	lsls	r3, r3, #3
 800e692:	440b      	add	r3, r1
 800e694:	3314      	adds	r3, #20
 800e696:	781b      	ldrb	r3, [r3, #0]
 800e698:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800e69a:	7afb      	ldrb	r3, [r7, #11]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d00e      	beq.n	800e6be <etharp_cleanup_netif+0x46>
 800e6a0:	490c      	ldr	r1, [pc, #48]	; (800e6d4 <etharp_cleanup_netif+0x5c>)
 800e6a2:	68fa      	ldr	r2, [r7, #12]
 800e6a4:	4613      	mov	r3, r2
 800e6a6:	005b      	lsls	r3, r3, #1
 800e6a8:	4413      	add	r3, r2
 800e6aa:	00db      	lsls	r3, r3, #3
 800e6ac:	440b      	add	r3, r1
 800e6ae:	3308      	adds	r3, #8
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	687a      	ldr	r2, [r7, #4]
 800e6b4:	429a      	cmp	r2, r3
 800e6b6:	d102      	bne.n	800e6be <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800e6b8:	68f8      	ldr	r0, [r7, #12]
 800e6ba:	f7ff fce5 	bl	800e088 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	3301      	adds	r3, #1
 800e6c2:	60fb      	str	r3, [r7, #12]
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	2b09      	cmp	r3, #9
 800e6c8:	dddd      	ble.n	800e686 <etharp_cleanup_netif+0xe>
    }
  }
}
 800e6ca:	bf00      	nop
 800e6cc:	bf00      	nop
 800e6ce:	3710      	adds	r7, #16
 800e6d0:	46bd      	mov	sp, r7
 800e6d2:	bd80      	pop	{r7, pc}
 800e6d4:	20008904 	.word	0x20008904

0800e6d8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800e6d8:	b5b0      	push	{r4, r5, r7, lr}
 800e6da:	b08a      	sub	sp, #40	; 0x28
 800e6dc:	af04      	add	r7, sp, #16
 800e6de:	6078      	str	r0, [r7, #4]
 800e6e0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800e6e2:	683b      	ldr	r3, [r7, #0]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d107      	bne.n	800e6f8 <etharp_input+0x20>
 800e6e8:	4b3d      	ldr	r3, [pc, #244]	; (800e7e0 <etharp_input+0x108>)
 800e6ea:	f240 228a 	movw	r2, #650	; 0x28a
 800e6ee:	493d      	ldr	r1, [pc, #244]	; (800e7e4 <etharp_input+0x10c>)
 800e6f0:	483d      	ldr	r0, [pc, #244]	; (800e7e8 <etharp_input+0x110>)
 800e6f2:	f002 f88f 	bl	8010814 <iprintf>
 800e6f6:	e06f      	b.n	800e7d8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	685b      	ldr	r3, [r3, #4]
 800e6fc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800e6fe:	693b      	ldr	r3, [r7, #16]
 800e700:	881b      	ldrh	r3, [r3, #0]
 800e702:	b29b      	uxth	r3, r3
 800e704:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e708:	d10c      	bne.n	800e724 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e70a:	693b      	ldr	r3, [r7, #16]
 800e70c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800e70e:	2b06      	cmp	r3, #6
 800e710:	d108      	bne.n	800e724 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e712:	693b      	ldr	r3, [r7, #16]
 800e714:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e716:	2b04      	cmp	r3, #4
 800e718:	d104      	bne.n	800e724 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800e71a:	693b      	ldr	r3, [r7, #16]
 800e71c:	885b      	ldrh	r3, [r3, #2]
 800e71e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e720:	2b08      	cmp	r3, #8
 800e722:	d003      	beq.n	800e72c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800e724:	6878      	ldr	r0, [r7, #4]
 800e726:	f7f9 f98d 	bl	8007a44 <pbuf_free>
    return;
 800e72a:	e055      	b.n	800e7d8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800e72c:	693b      	ldr	r3, [r7, #16]
 800e72e:	330e      	adds	r3, #14
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800e734:	693b      	ldr	r3, [r7, #16]
 800e736:	3318      	adds	r3, #24
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e73c:	683b      	ldr	r3, [r7, #0]
 800e73e:	3304      	adds	r3, #4
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d102      	bne.n	800e74c <etharp_input+0x74>
    for_us = 0;
 800e746:	2300      	movs	r3, #0
 800e748:	75fb      	strb	r3, [r7, #23]
 800e74a:	e009      	b.n	800e760 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800e74c:	68ba      	ldr	r2, [r7, #8]
 800e74e:	683b      	ldr	r3, [r7, #0]
 800e750:	3304      	adds	r3, #4
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	429a      	cmp	r2, r3
 800e756:	bf0c      	ite	eq
 800e758:	2301      	moveq	r3, #1
 800e75a:	2300      	movne	r3, #0
 800e75c:	b2db      	uxtb	r3, r3
 800e75e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800e760:	693b      	ldr	r3, [r7, #16]
 800e762:	f103 0208 	add.w	r2, r3, #8
 800e766:	7dfb      	ldrb	r3, [r7, #23]
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d001      	beq.n	800e770 <etharp_input+0x98>
 800e76c:	2301      	movs	r3, #1
 800e76e:	e000      	b.n	800e772 <etharp_input+0x9a>
 800e770:	2302      	movs	r3, #2
 800e772:	f107 010c 	add.w	r1, r7, #12
 800e776:	6838      	ldr	r0, [r7, #0]
 800e778:	f7ff fed8 	bl	800e52c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800e77c:	693b      	ldr	r3, [r7, #16]
 800e77e:	88db      	ldrh	r3, [r3, #6]
 800e780:	b29b      	uxth	r3, r3
 800e782:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e786:	d003      	beq.n	800e790 <etharp_input+0xb8>
 800e788:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e78c:	d01e      	beq.n	800e7cc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800e78e:	e020      	b.n	800e7d2 <etharp_input+0xfa>
      if (for_us) {
 800e790:	7dfb      	ldrb	r3, [r7, #23]
 800e792:	2b00      	cmp	r3, #0
 800e794:	d01c      	beq.n	800e7d0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800e796:	683b      	ldr	r3, [r7, #0]
 800e798:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800e79c:	693b      	ldr	r3, [r7, #16]
 800e79e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800e7a2:	683b      	ldr	r3, [r7, #0]
 800e7a4:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800e7a8:	683b      	ldr	r3, [r7, #0]
 800e7aa:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800e7ac:	693a      	ldr	r2, [r7, #16]
 800e7ae:	3208      	adds	r2, #8
        etharp_raw(netif,
 800e7b0:	2102      	movs	r1, #2
 800e7b2:	9103      	str	r1, [sp, #12]
 800e7b4:	f107 010c 	add.w	r1, r7, #12
 800e7b8:	9102      	str	r1, [sp, #8]
 800e7ba:	9201      	str	r2, [sp, #4]
 800e7bc:	9300      	str	r3, [sp, #0]
 800e7be:	462b      	mov	r3, r5
 800e7c0:	4622      	mov	r2, r4
 800e7c2:	4601      	mov	r1, r0
 800e7c4:	6838      	ldr	r0, [r7, #0]
 800e7c6:	f000 faeb 	bl	800eda0 <etharp_raw>
      break;
 800e7ca:	e001      	b.n	800e7d0 <etharp_input+0xf8>
      break;
 800e7cc:	bf00      	nop
 800e7ce:	e000      	b.n	800e7d2 <etharp_input+0xfa>
      break;
 800e7d0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800e7d2:	6878      	ldr	r0, [r7, #4]
 800e7d4:	f7f9 f936 	bl	8007a44 <pbuf_free>
}
 800e7d8:	3718      	adds	r7, #24
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	bdb0      	pop	{r4, r5, r7, pc}
 800e7de:	bf00      	nop
 800e7e0:	08013998 	.word	0x08013998
 800e7e4:	08013ae8 	.word	0x08013ae8
 800e7e8:	08013a10 	.word	0x08013a10

0800e7ec <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b086      	sub	sp, #24
 800e7f0:	af02      	add	r7, sp, #8
 800e7f2:	60f8      	str	r0, [r7, #12]
 800e7f4:	60b9      	str	r1, [r7, #8]
 800e7f6:	4613      	mov	r3, r2
 800e7f8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800e7fa:	79fa      	ldrb	r2, [r7, #7]
 800e7fc:	4944      	ldr	r1, [pc, #272]	; (800e910 <etharp_output_to_arp_index+0x124>)
 800e7fe:	4613      	mov	r3, r2
 800e800:	005b      	lsls	r3, r3, #1
 800e802:	4413      	add	r3, r2
 800e804:	00db      	lsls	r3, r3, #3
 800e806:	440b      	add	r3, r1
 800e808:	3314      	adds	r3, #20
 800e80a:	781b      	ldrb	r3, [r3, #0]
 800e80c:	2b01      	cmp	r3, #1
 800e80e:	d806      	bhi.n	800e81e <etharp_output_to_arp_index+0x32>
 800e810:	4b40      	ldr	r3, [pc, #256]	; (800e914 <etharp_output_to_arp_index+0x128>)
 800e812:	f240 22ee 	movw	r2, #750	; 0x2ee
 800e816:	4940      	ldr	r1, [pc, #256]	; (800e918 <etharp_output_to_arp_index+0x12c>)
 800e818:	4840      	ldr	r0, [pc, #256]	; (800e91c <etharp_output_to_arp_index+0x130>)
 800e81a:	f001 fffb 	bl	8010814 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800e81e:	79fa      	ldrb	r2, [r7, #7]
 800e820:	493b      	ldr	r1, [pc, #236]	; (800e910 <etharp_output_to_arp_index+0x124>)
 800e822:	4613      	mov	r3, r2
 800e824:	005b      	lsls	r3, r3, #1
 800e826:	4413      	add	r3, r2
 800e828:	00db      	lsls	r3, r3, #3
 800e82a:	440b      	add	r3, r1
 800e82c:	3314      	adds	r3, #20
 800e82e:	781b      	ldrb	r3, [r3, #0]
 800e830:	2b02      	cmp	r3, #2
 800e832:	d153      	bne.n	800e8dc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800e834:	79fa      	ldrb	r2, [r7, #7]
 800e836:	4936      	ldr	r1, [pc, #216]	; (800e910 <etharp_output_to_arp_index+0x124>)
 800e838:	4613      	mov	r3, r2
 800e83a:	005b      	lsls	r3, r3, #1
 800e83c:	4413      	add	r3, r2
 800e83e:	00db      	lsls	r3, r3, #3
 800e840:	440b      	add	r3, r1
 800e842:	3312      	adds	r3, #18
 800e844:	881b      	ldrh	r3, [r3, #0]
 800e846:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800e84a:	d919      	bls.n	800e880 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800e84c:	79fa      	ldrb	r2, [r7, #7]
 800e84e:	4613      	mov	r3, r2
 800e850:	005b      	lsls	r3, r3, #1
 800e852:	4413      	add	r3, r2
 800e854:	00db      	lsls	r3, r3, #3
 800e856:	4a2e      	ldr	r2, [pc, #184]	; (800e910 <etharp_output_to_arp_index+0x124>)
 800e858:	4413      	add	r3, r2
 800e85a:	3304      	adds	r3, #4
 800e85c:	4619      	mov	r1, r3
 800e85e:	68f8      	ldr	r0, [r7, #12]
 800e860:	f000 fb4c 	bl	800eefc <etharp_request>
 800e864:	4603      	mov	r3, r0
 800e866:	2b00      	cmp	r3, #0
 800e868:	d138      	bne.n	800e8dc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800e86a:	79fa      	ldrb	r2, [r7, #7]
 800e86c:	4928      	ldr	r1, [pc, #160]	; (800e910 <etharp_output_to_arp_index+0x124>)
 800e86e:	4613      	mov	r3, r2
 800e870:	005b      	lsls	r3, r3, #1
 800e872:	4413      	add	r3, r2
 800e874:	00db      	lsls	r3, r3, #3
 800e876:	440b      	add	r3, r1
 800e878:	3314      	adds	r3, #20
 800e87a:	2203      	movs	r2, #3
 800e87c:	701a      	strb	r2, [r3, #0]
 800e87e:	e02d      	b.n	800e8dc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800e880:	79fa      	ldrb	r2, [r7, #7]
 800e882:	4923      	ldr	r1, [pc, #140]	; (800e910 <etharp_output_to_arp_index+0x124>)
 800e884:	4613      	mov	r3, r2
 800e886:	005b      	lsls	r3, r3, #1
 800e888:	4413      	add	r3, r2
 800e88a:	00db      	lsls	r3, r3, #3
 800e88c:	440b      	add	r3, r1
 800e88e:	3312      	adds	r3, #18
 800e890:	881b      	ldrh	r3, [r3, #0]
 800e892:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800e896:	d321      	bcc.n	800e8dc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800e898:	79fa      	ldrb	r2, [r7, #7]
 800e89a:	4613      	mov	r3, r2
 800e89c:	005b      	lsls	r3, r3, #1
 800e89e:	4413      	add	r3, r2
 800e8a0:	00db      	lsls	r3, r3, #3
 800e8a2:	4a1b      	ldr	r2, [pc, #108]	; (800e910 <etharp_output_to_arp_index+0x124>)
 800e8a4:	4413      	add	r3, r2
 800e8a6:	1d19      	adds	r1, r3, #4
 800e8a8:	79fa      	ldrb	r2, [r7, #7]
 800e8aa:	4613      	mov	r3, r2
 800e8ac:	005b      	lsls	r3, r3, #1
 800e8ae:	4413      	add	r3, r2
 800e8b0:	00db      	lsls	r3, r3, #3
 800e8b2:	3308      	adds	r3, #8
 800e8b4:	4a16      	ldr	r2, [pc, #88]	; (800e910 <etharp_output_to_arp_index+0x124>)
 800e8b6:	4413      	add	r3, r2
 800e8b8:	3304      	adds	r3, #4
 800e8ba:	461a      	mov	r2, r3
 800e8bc:	68f8      	ldr	r0, [r7, #12]
 800e8be:	f000 fafb 	bl	800eeb8 <etharp_request_dst>
 800e8c2:	4603      	mov	r3, r0
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d109      	bne.n	800e8dc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800e8c8:	79fa      	ldrb	r2, [r7, #7]
 800e8ca:	4911      	ldr	r1, [pc, #68]	; (800e910 <etharp_output_to_arp_index+0x124>)
 800e8cc:	4613      	mov	r3, r2
 800e8ce:	005b      	lsls	r3, r3, #1
 800e8d0:	4413      	add	r3, r2
 800e8d2:	00db      	lsls	r3, r3, #3
 800e8d4:	440b      	add	r3, r1
 800e8d6:	3314      	adds	r3, #20
 800e8d8:	2203      	movs	r2, #3
 800e8da:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800e8e2:	79fa      	ldrb	r2, [r7, #7]
 800e8e4:	4613      	mov	r3, r2
 800e8e6:	005b      	lsls	r3, r3, #1
 800e8e8:	4413      	add	r3, r2
 800e8ea:	00db      	lsls	r3, r3, #3
 800e8ec:	3308      	adds	r3, #8
 800e8ee:	4a08      	ldr	r2, [pc, #32]	; (800e910 <etharp_output_to_arp_index+0x124>)
 800e8f0:	4413      	add	r3, r2
 800e8f2:	3304      	adds	r3, #4
 800e8f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e8f8:	9200      	str	r2, [sp, #0]
 800e8fa:	460a      	mov	r2, r1
 800e8fc:	68b9      	ldr	r1, [r7, #8]
 800e8fe:	68f8      	ldr	r0, [r7, #12]
 800e900:	f001 fe40 	bl	8010584 <ethernet_output>
 800e904:	4603      	mov	r3, r0
}
 800e906:	4618      	mov	r0, r3
 800e908:	3710      	adds	r7, #16
 800e90a:	46bd      	mov	sp, r7
 800e90c:	bd80      	pop	{r7, pc}
 800e90e:	bf00      	nop
 800e910:	20008904 	.word	0x20008904
 800e914:	08013998 	.word	0x08013998
 800e918:	08013b08 	.word	0x08013b08
 800e91c:	08013a10 	.word	0x08013a10

0800e920 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800e920:	b580      	push	{r7, lr}
 800e922:	b08a      	sub	sp, #40	; 0x28
 800e924:	af02      	add	r7, sp, #8
 800e926:	60f8      	str	r0, [r7, #12]
 800e928:	60b9      	str	r1, [r7, #8]
 800e92a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	2b00      	cmp	r3, #0
 800e934:	d106      	bne.n	800e944 <etharp_output+0x24>
 800e936:	4b73      	ldr	r3, [pc, #460]	; (800eb04 <etharp_output+0x1e4>)
 800e938:	f240 321e 	movw	r2, #798	; 0x31e
 800e93c:	4972      	ldr	r1, [pc, #456]	; (800eb08 <etharp_output+0x1e8>)
 800e93e:	4873      	ldr	r0, [pc, #460]	; (800eb0c <etharp_output+0x1ec>)
 800e940:	f001 ff68 	bl	8010814 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800e944:	68bb      	ldr	r3, [r7, #8]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d106      	bne.n	800e958 <etharp_output+0x38>
 800e94a:	4b6e      	ldr	r3, [pc, #440]	; (800eb04 <etharp_output+0x1e4>)
 800e94c:	f240 321f 	movw	r2, #799	; 0x31f
 800e950:	496f      	ldr	r1, [pc, #444]	; (800eb10 <etharp_output+0x1f0>)
 800e952:	486e      	ldr	r0, [pc, #440]	; (800eb0c <etharp_output+0x1ec>)
 800e954:	f001 ff5e 	bl	8010814 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d106      	bne.n	800e96c <etharp_output+0x4c>
 800e95e:	4b69      	ldr	r3, [pc, #420]	; (800eb04 <etharp_output+0x1e4>)
 800e960:	f44f 7248 	mov.w	r2, #800	; 0x320
 800e964:	496b      	ldr	r1, [pc, #428]	; (800eb14 <etharp_output+0x1f4>)
 800e966:	4869      	ldr	r0, [pc, #420]	; (800eb0c <etharp_output+0x1ec>)
 800e968:	f001 ff54 	bl	8010814 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	68f9      	ldr	r1, [r7, #12]
 800e972:	4618      	mov	r0, r3
 800e974:	f000 fef8 	bl	800f768 <ip4_addr_isbroadcast_u32>
 800e978:	4603      	mov	r3, r0
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d002      	beq.n	800e984 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800e97e:	4b66      	ldr	r3, [pc, #408]	; (800eb18 <etharp_output+0x1f8>)
 800e980:	61fb      	str	r3, [r7, #28]
 800e982:	e0af      	b.n	800eae4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e98c:	2be0      	cmp	r3, #224	; 0xe0
 800e98e:	d118      	bne.n	800e9c2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800e990:	2301      	movs	r3, #1
 800e992:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800e994:	2300      	movs	r3, #0
 800e996:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800e998:	235e      	movs	r3, #94	; 0x5e
 800e99a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	3301      	adds	r3, #1
 800e9a0:	781b      	ldrb	r3, [r3, #0]
 800e9a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e9a6:	b2db      	uxtb	r3, r3
 800e9a8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	3302      	adds	r3, #2
 800e9ae:	781b      	ldrb	r3, [r3, #0]
 800e9b0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	3303      	adds	r3, #3
 800e9b6:	781b      	ldrb	r3, [r3, #0]
 800e9b8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800e9ba:	f107 0310 	add.w	r3, r7, #16
 800e9be:	61fb      	str	r3, [r7, #28]
 800e9c0:	e090      	b.n	800eae4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	681a      	ldr	r2, [r3, #0]
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	3304      	adds	r3, #4
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	405a      	eors	r2, r3
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	3308      	adds	r3, #8
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	4013      	ands	r3, r2
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d012      	beq.n	800ea00 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e9e0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800e9e4:	4293      	cmp	r3, r2
 800e9e6:	d00b      	beq.n	800ea00 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	330c      	adds	r3, #12
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d003      	beq.n	800e9fa <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	330c      	adds	r3, #12
 800e9f6:	61bb      	str	r3, [r7, #24]
 800e9f8:	e002      	b.n	800ea00 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800e9fa:	f06f 0303 	mvn.w	r3, #3
 800e9fe:	e07d      	b.n	800eafc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800ea00:	4b46      	ldr	r3, [pc, #280]	; (800eb1c <etharp_output+0x1fc>)
 800ea02:	781b      	ldrb	r3, [r3, #0]
 800ea04:	4619      	mov	r1, r3
 800ea06:	4a46      	ldr	r2, [pc, #280]	; (800eb20 <etharp_output+0x200>)
 800ea08:	460b      	mov	r3, r1
 800ea0a:	005b      	lsls	r3, r3, #1
 800ea0c:	440b      	add	r3, r1
 800ea0e:	00db      	lsls	r3, r3, #3
 800ea10:	4413      	add	r3, r2
 800ea12:	3314      	adds	r3, #20
 800ea14:	781b      	ldrb	r3, [r3, #0]
 800ea16:	2b01      	cmp	r3, #1
 800ea18:	d925      	bls.n	800ea66 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800ea1a:	4b40      	ldr	r3, [pc, #256]	; (800eb1c <etharp_output+0x1fc>)
 800ea1c:	781b      	ldrb	r3, [r3, #0]
 800ea1e:	4619      	mov	r1, r3
 800ea20:	4a3f      	ldr	r2, [pc, #252]	; (800eb20 <etharp_output+0x200>)
 800ea22:	460b      	mov	r3, r1
 800ea24:	005b      	lsls	r3, r3, #1
 800ea26:	440b      	add	r3, r1
 800ea28:	00db      	lsls	r3, r3, #3
 800ea2a:	4413      	add	r3, r2
 800ea2c:	3308      	adds	r3, #8
 800ea2e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800ea30:	68fa      	ldr	r2, [r7, #12]
 800ea32:	429a      	cmp	r2, r3
 800ea34:	d117      	bne.n	800ea66 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800ea36:	69bb      	ldr	r3, [r7, #24]
 800ea38:	681a      	ldr	r2, [r3, #0]
 800ea3a:	4b38      	ldr	r3, [pc, #224]	; (800eb1c <etharp_output+0x1fc>)
 800ea3c:	781b      	ldrb	r3, [r3, #0]
 800ea3e:	4618      	mov	r0, r3
 800ea40:	4937      	ldr	r1, [pc, #220]	; (800eb20 <etharp_output+0x200>)
 800ea42:	4603      	mov	r3, r0
 800ea44:	005b      	lsls	r3, r3, #1
 800ea46:	4403      	add	r3, r0
 800ea48:	00db      	lsls	r3, r3, #3
 800ea4a:	440b      	add	r3, r1
 800ea4c:	3304      	adds	r3, #4
 800ea4e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800ea50:	429a      	cmp	r2, r3
 800ea52:	d108      	bne.n	800ea66 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800ea54:	4b31      	ldr	r3, [pc, #196]	; (800eb1c <etharp_output+0x1fc>)
 800ea56:	781b      	ldrb	r3, [r3, #0]
 800ea58:	461a      	mov	r2, r3
 800ea5a:	68b9      	ldr	r1, [r7, #8]
 800ea5c:	68f8      	ldr	r0, [r7, #12]
 800ea5e:	f7ff fec5 	bl	800e7ec <etharp_output_to_arp_index>
 800ea62:	4603      	mov	r3, r0
 800ea64:	e04a      	b.n	800eafc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800ea66:	2300      	movs	r3, #0
 800ea68:	75fb      	strb	r3, [r7, #23]
 800ea6a:	e031      	b.n	800ead0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800ea6c:	7dfa      	ldrb	r2, [r7, #23]
 800ea6e:	492c      	ldr	r1, [pc, #176]	; (800eb20 <etharp_output+0x200>)
 800ea70:	4613      	mov	r3, r2
 800ea72:	005b      	lsls	r3, r3, #1
 800ea74:	4413      	add	r3, r2
 800ea76:	00db      	lsls	r3, r3, #3
 800ea78:	440b      	add	r3, r1
 800ea7a:	3314      	adds	r3, #20
 800ea7c:	781b      	ldrb	r3, [r3, #0]
 800ea7e:	2b01      	cmp	r3, #1
 800ea80:	d923      	bls.n	800eaca <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800ea82:	7dfa      	ldrb	r2, [r7, #23]
 800ea84:	4926      	ldr	r1, [pc, #152]	; (800eb20 <etharp_output+0x200>)
 800ea86:	4613      	mov	r3, r2
 800ea88:	005b      	lsls	r3, r3, #1
 800ea8a:	4413      	add	r3, r2
 800ea8c:	00db      	lsls	r3, r3, #3
 800ea8e:	440b      	add	r3, r1
 800ea90:	3308      	adds	r3, #8
 800ea92:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800ea94:	68fa      	ldr	r2, [r7, #12]
 800ea96:	429a      	cmp	r2, r3
 800ea98:	d117      	bne.n	800eaca <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800ea9a:	69bb      	ldr	r3, [r7, #24]
 800ea9c:	6819      	ldr	r1, [r3, #0]
 800ea9e:	7dfa      	ldrb	r2, [r7, #23]
 800eaa0:	481f      	ldr	r0, [pc, #124]	; (800eb20 <etharp_output+0x200>)
 800eaa2:	4613      	mov	r3, r2
 800eaa4:	005b      	lsls	r3, r3, #1
 800eaa6:	4413      	add	r3, r2
 800eaa8:	00db      	lsls	r3, r3, #3
 800eaaa:	4403      	add	r3, r0
 800eaac:	3304      	adds	r3, #4
 800eaae:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800eab0:	4299      	cmp	r1, r3
 800eab2:	d10a      	bne.n	800eaca <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800eab4:	4a19      	ldr	r2, [pc, #100]	; (800eb1c <etharp_output+0x1fc>)
 800eab6:	7dfb      	ldrb	r3, [r7, #23]
 800eab8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800eaba:	7dfb      	ldrb	r3, [r7, #23]
 800eabc:	461a      	mov	r2, r3
 800eabe:	68b9      	ldr	r1, [r7, #8]
 800eac0:	68f8      	ldr	r0, [r7, #12]
 800eac2:	f7ff fe93 	bl	800e7ec <etharp_output_to_arp_index>
 800eac6:	4603      	mov	r3, r0
 800eac8:	e018      	b.n	800eafc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800eaca:	7dfb      	ldrb	r3, [r7, #23]
 800eacc:	3301      	adds	r3, #1
 800eace:	75fb      	strb	r3, [r7, #23]
 800ead0:	7dfb      	ldrb	r3, [r7, #23]
 800ead2:	2b09      	cmp	r3, #9
 800ead4:	d9ca      	bls.n	800ea6c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800ead6:	68ba      	ldr	r2, [r7, #8]
 800ead8:	69b9      	ldr	r1, [r7, #24]
 800eada:	68f8      	ldr	r0, [r7, #12]
 800eadc:	f000 f822 	bl	800eb24 <etharp_query>
 800eae0:	4603      	mov	r3, r0
 800eae2:	e00b      	b.n	800eafc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800eaea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800eaee:	9300      	str	r3, [sp, #0]
 800eaf0:	69fb      	ldr	r3, [r7, #28]
 800eaf2:	68b9      	ldr	r1, [r7, #8]
 800eaf4:	68f8      	ldr	r0, [r7, #12]
 800eaf6:	f001 fd45 	bl	8010584 <ethernet_output>
 800eafa:	4603      	mov	r3, r0
}
 800eafc:	4618      	mov	r0, r3
 800eafe:	3720      	adds	r7, #32
 800eb00:	46bd      	mov	sp, r7
 800eb02:	bd80      	pop	{r7, pc}
 800eb04:	08013998 	.word	0x08013998
 800eb08:	08013ae8 	.word	0x08013ae8
 800eb0c:	08013a10 	.word	0x08013a10
 800eb10:	08013b38 	.word	0x08013b38
 800eb14:	08013ad8 	.word	0x08013ad8
 800eb18:	08014154 	.word	0x08014154
 800eb1c:	200089f4 	.word	0x200089f4
 800eb20:	20008904 	.word	0x20008904

0800eb24 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b08c      	sub	sp, #48	; 0x30
 800eb28:	af02      	add	r7, sp, #8
 800eb2a:	60f8      	str	r0, [r7, #12]
 800eb2c:	60b9      	str	r1, [r7, #8]
 800eb2e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	3326      	adds	r3, #38	; 0x26
 800eb34:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800eb36:	23ff      	movs	r3, #255	; 0xff
 800eb38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800eb40:	68bb      	ldr	r3, [r7, #8]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	68f9      	ldr	r1, [r7, #12]
 800eb46:	4618      	mov	r0, r3
 800eb48:	f000 fe0e 	bl	800f768 <ip4_addr_isbroadcast_u32>
 800eb4c:	4603      	mov	r3, r0
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d10c      	bne.n	800eb6c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800eb52:	68bb      	ldr	r3, [r7, #8]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800eb5a:	2be0      	cmp	r3, #224	; 0xe0
 800eb5c:	d006      	beq.n	800eb6c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800eb5e:	68bb      	ldr	r3, [r7, #8]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d003      	beq.n	800eb6c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800eb64:	68bb      	ldr	r3, [r7, #8]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d102      	bne.n	800eb72 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800eb6c:	f06f 030f 	mvn.w	r3, #15
 800eb70:	e101      	b.n	800ed76 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800eb72:	68fa      	ldr	r2, [r7, #12]
 800eb74:	2101      	movs	r1, #1
 800eb76:	68b8      	ldr	r0, [r7, #8]
 800eb78:	f7ff fb60 	bl	800e23c <etharp_find_entry>
 800eb7c:	4603      	mov	r3, r0
 800eb7e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800eb80:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	da02      	bge.n	800eb8e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800eb88:	8a7b      	ldrh	r3, [r7, #18]
 800eb8a:	b25b      	sxtb	r3, r3
 800eb8c:	e0f3      	b.n	800ed76 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800eb8e:	8a7b      	ldrh	r3, [r7, #18]
 800eb90:	2b7e      	cmp	r3, #126	; 0x7e
 800eb92:	d906      	bls.n	800eba2 <etharp_query+0x7e>
 800eb94:	4b7a      	ldr	r3, [pc, #488]	; (800ed80 <etharp_query+0x25c>)
 800eb96:	f240 32c1 	movw	r2, #961	; 0x3c1
 800eb9a:	497a      	ldr	r1, [pc, #488]	; (800ed84 <etharp_query+0x260>)
 800eb9c:	487a      	ldr	r0, [pc, #488]	; (800ed88 <etharp_query+0x264>)
 800eb9e:	f001 fe39 	bl	8010814 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800eba2:	8a7b      	ldrh	r3, [r7, #18]
 800eba4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800eba6:	7c7a      	ldrb	r2, [r7, #17]
 800eba8:	4978      	ldr	r1, [pc, #480]	; (800ed8c <etharp_query+0x268>)
 800ebaa:	4613      	mov	r3, r2
 800ebac:	005b      	lsls	r3, r3, #1
 800ebae:	4413      	add	r3, r2
 800ebb0:	00db      	lsls	r3, r3, #3
 800ebb2:	440b      	add	r3, r1
 800ebb4:	3314      	adds	r3, #20
 800ebb6:	781b      	ldrb	r3, [r3, #0]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d115      	bne.n	800ebe8 <etharp_query+0xc4>
    is_new_entry = 1;
 800ebbc:	2301      	movs	r3, #1
 800ebbe:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800ebc0:	7c7a      	ldrb	r2, [r7, #17]
 800ebc2:	4972      	ldr	r1, [pc, #456]	; (800ed8c <etharp_query+0x268>)
 800ebc4:	4613      	mov	r3, r2
 800ebc6:	005b      	lsls	r3, r3, #1
 800ebc8:	4413      	add	r3, r2
 800ebca:	00db      	lsls	r3, r3, #3
 800ebcc:	440b      	add	r3, r1
 800ebce:	3314      	adds	r3, #20
 800ebd0:	2201      	movs	r2, #1
 800ebd2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800ebd4:	7c7a      	ldrb	r2, [r7, #17]
 800ebd6:	496d      	ldr	r1, [pc, #436]	; (800ed8c <etharp_query+0x268>)
 800ebd8:	4613      	mov	r3, r2
 800ebda:	005b      	lsls	r3, r3, #1
 800ebdc:	4413      	add	r3, r2
 800ebde:	00db      	lsls	r3, r3, #3
 800ebe0:	440b      	add	r3, r1
 800ebe2:	3308      	adds	r3, #8
 800ebe4:	68fa      	ldr	r2, [r7, #12]
 800ebe6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800ebe8:	7c7a      	ldrb	r2, [r7, #17]
 800ebea:	4968      	ldr	r1, [pc, #416]	; (800ed8c <etharp_query+0x268>)
 800ebec:	4613      	mov	r3, r2
 800ebee:	005b      	lsls	r3, r3, #1
 800ebf0:	4413      	add	r3, r2
 800ebf2:	00db      	lsls	r3, r3, #3
 800ebf4:	440b      	add	r3, r1
 800ebf6:	3314      	adds	r3, #20
 800ebf8:	781b      	ldrb	r3, [r3, #0]
 800ebfa:	2b01      	cmp	r3, #1
 800ebfc:	d011      	beq.n	800ec22 <etharp_query+0xfe>
 800ebfe:	7c7a      	ldrb	r2, [r7, #17]
 800ec00:	4962      	ldr	r1, [pc, #392]	; (800ed8c <etharp_query+0x268>)
 800ec02:	4613      	mov	r3, r2
 800ec04:	005b      	lsls	r3, r3, #1
 800ec06:	4413      	add	r3, r2
 800ec08:	00db      	lsls	r3, r3, #3
 800ec0a:	440b      	add	r3, r1
 800ec0c:	3314      	adds	r3, #20
 800ec0e:	781b      	ldrb	r3, [r3, #0]
 800ec10:	2b01      	cmp	r3, #1
 800ec12:	d806      	bhi.n	800ec22 <etharp_query+0xfe>
 800ec14:	4b5a      	ldr	r3, [pc, #360]	; (800ed80 <etharp_query+0x25c>)
 800ec16:	f240 32cd 	movw	r2, #973	; 0x3cd
 800ec1a:	495d      	ldr	r1, [pc, #372]	; (800ed90 <etharp_query+0x26c>)
 800ec1c:	485a      	ldr	r0, [pc, #360]	; (800ed88 <etharp_query+0x264>)
 800ec1e:	f001 fdf9 	bl	8010814 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800ec22:	6a3b      	ldr	r3, [r7, #32]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d102      	bne.n	800ec2e <etharp_query+0x10a>
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d10c      	bne.n	800ec48 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800ec2e:	68b9      	ldr	r1, [r7, #8]
 800ec30:	68f8      	ldr	r0, [r7, #12]
 800ec32:	f000 f963 	bl	800eefc <etharp_request>
 800ec36:	4603      	mov	r3, r0
 800ec38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d102      	bne.n	800ec48 <etharp_query+0x124>
      return result;
 800ec42:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ec46:	e096      	b.n	800ed76 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d106      	bne.n	800ec5c <etharp_query+0x138>
 800ec4e:	4b4c      	ldr	r3, [pc, #304]	; (800ed80 <etharp_query+0x25c>)
 800ec50:	f240 32e1 	movw	r2, #993	; 0x3e1
 800ec54:	494f      	ldr	r1, [pc, #316]	; (800ed94 <etharp_query+0x270>)
 800ec56:	484c      	ldr	r0, [pc, #304]	; (800ed88 <etharp_query+0x264>)
 800ec58:	f001 fddc 	bl	8010814 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800ec5c:	7c7a      	ldrb	r2, [r7, #17]
 800ec5e:	494b      	ldr	r1, [pc, #300]	; (800ed8c <etharp_query+0x268>)
 800ec60:	4613      	mov	r3, r2
 800ec62:	005b      	lsls	r3, r3, #1
 800ec64:	4413      	add	r3, r2
 800ec66:	00db      	lsls	r3, r3, #3
 800ec68:	440b      	add	r3, r1
 800ec6a:	3314      	adds	r3, #20
 800ec6c:	781b      	ldrb	r3, [r3, #0]
 800ec6e:	2b01      	cmp	r3, #1
 800ec70:	d917      	bls.n	800eca2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800ec72:	4a49      	ldr	r2, [pc, #292]	; (800ed98 <etharp_query+0x274>)
 800ec74:	7c7b      	ldrb	r3, [r7, #17]
 800ec76:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800ec78:	7c7a      	ldrb	r2, [r7, #17]
 800ec7a:	4613      	mov	r3, r2
 800ec7c:	005b      	lsls	r3, r3, #1
 800ec7e:	4413      	add	r3, r2
 800ec80:	00db      	lsls	r3, r3, #3
 800ec82:	3308      	adds	r3, #8
 800ec84:	4a41      	ldr	r2, [pc, #260]	; (800ed8c <etharp_query+0x268>)
 800ec86:	4413      	add	r3, r2
 800ec88:	3304      	adds	r3, #4
 800ec8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ec8e:	9200      	str	r2, [sp, #0]
 800ec90:	697a      	ldr	r2, [r7, #20]
 800ec92:	6879      	ldr	r1, [r7, #4]
 800ec94:	68f8      	ldr	r0, [r7, #12]
 800ec96:	f001 fc75 	bl	8010584 <ethernet_output>
 800ec9a:	4603      	mov	r3, r0
 800ec9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eca0:	e067      	b.n	800ed72 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800eca2:	7c7a      	ldrb	r2, [r7, #17]
 800eca4:	4939      	ldr	r1, [pc, #228]	; (800ed8c <etharp_query+0x268>)
 800eca6:	4613      	mov	r3, r2
 800eca8:	005b      	lsls	r3, r3, #1
 800ecaa:	4413      	add	r3, r2
 800ecac:	00db      	lsls	r3, r3, #3
 800ecae:	440b      	add	r3, r1
 800ecb0:	3314      	adds	r3, #20
 800ecb2:	781b      	ldrb	r3, [r3, #0]
 800ecb4:	2b01      	cmp	r3, #1
 800ecb6:	d15c      	bne.n	800ed72 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800ecb8:	2300      	movs	r3, #0
 800ecba:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	61fb      	str	r3, [r7, #28]
    while (p) {
 800ecc0:	e01c      	b.n	800ecfc <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800ecc2:	69fb      	ldr	r3, [r7, #28]
 800ecc4:	895a      	ldrh	r2, [r3, #10]
 800ecc6:	69fb      	ldr	r3, [r7, #28]
 800ecc8:	891b      	ldrh	r3, [r3, #8]
 800ecca:	429a      	cmp	r2, r3
 800eccc:	d10a      	bne.n	800ece4 <etharp_query+0x1c0>
 800ecce:	69fb      	ldr	r3, [r7, #28]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d006      	beq.n	800ece4 <etharp_query+0x1c0>
 800ecd6:	4b2a      	ldr	r3, [pc, #168]	; (800ed80 <etharp_query+0x25c>)
 800ecd8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800ecdc:	492f      	ldr	r1, [pc, #188]	; (800ed9c <etharp_query+0x278>)
 800ecde:	482a      	ldr	r0, [pc, #168]	; (800ed88 <etharp_query+0x264>)
 800ece0:	f001 fd98 	bl	8010814 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800ece4:	69fb      	ldr	r3, [r7, #28]
 800ece6:	7b1b      	ldrb	r3, [r3, #12]
 800ece8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d002      	beq.n	800ecf6 <etharp_query+0x1d2>
        copy_needed = 1;
 800ecf0:	2301      	movs	r3, #1
 800ecf2:	61bb      	str	r3, [r7, #24]
        break;
 800ecf4:	e005      	b.n	800ed02 <etharp_query+0x1de>
      }
      p = p->next;
 800ecf6:	69fb      	ldr	r3, [r7, #28]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	61fb      	str	r3, [r7, #28]
    while (p) {
 800ecfc:	69fb      	ldr	r3, [r7, #28]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d1df      	bne.n	800ecc2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800ed02:	69bb      	ldr	r3, [r7, #24]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d007      	beq.n	800ed18 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800ed08:	687a      	ldr	r2, [r7, #4]
 800ed0a:	f44f 7120 	mov.w	r1, #640	; 0x280
 800ed0e:	200e      	movs	r0, #14
 800ed10:	f7f9 f996 	bl	8008040 <pbuf_clone>
 800ed14:	61f8      	str	r0, [r7, #28]
 800ed16:	e004      	b.n	800ed22 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800ed1c:	69f8      	ldr	r0, [r7, #28]
 800ed1e:	f7f8 ff31 	bl	8007b84 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800ed22:	69fb      	ldr	r3, [r7, #28]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d021      	beq.n	800ed6c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800ed28:	7c7a      	ldrb	r2, [r7, #17]
 800ed2a:	4918      	ldr	r1, [pc, #96]	; (800ed8c <etharp_query+0x268>)
 800ed2c:	4613      	mov	r3, r2
 800ed2e:	005b      	lsls	r3, r3, #1
 800ed30:	4413      	add	r3, r2
 800ed32:	00db      	lsls	r3, r3, #3
 800ed34:	440b      	add	r3, r1
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d00a      	beq.n	800ed52 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800ed3c:	7c7a      	ldrb	r2, [r7, #17]
 800ed3e:	4913      	ldr	r1, [pc, #76]	; (800ed8c <etharp_query+0x268>)
 800ed40:	4613      	mov	r3, r2
 800ed42:	005b      	lsls	r3, r3, #1
 800ed44:	4413      	add	r3, r2
 800ed46:	00db      	lsls	r3, r3, #3
 800ed48:	440b      	add	r3, r1
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	4618      	mov	r0, r3
 800ed4e:	f7f8 fe79 	bl	8007a44 <pbuf_free>
      }
      arp_table[i].q = p;
 800ed52:	7c7a      	ldrb	r2, [r7, #17]
 800ed54:	490d      	ldr	r1, [pc, #52]	; (800ed8c <etharp_query+0x268>)
 800ed56:	4613      	mov	r3, r2
 800ed58:	005b      	lsls	r3, r3, #1
 800ed5a:	4413      	add	r3, r2
 800ed5c:	00db      	lsls	r3, r3, #3
 800ed5e:	440b      	add	r3, r1
 800ed60:	69fa      	ldr	r2, [r7, #28]
 800ed62:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800ed64:	2300      	movs	r3, #0
 800ed66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ed6a:	e002      	b.n	800ed72 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800ed6c:	23ff      	movs	r3, #255	; 0xff
 800ed6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800ed72:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800ed76:	4618      	mov	r0, r3
 800ed78:	3728      	adds	r7, #40	; 0x28
 800ed7a:	46bd      	mov	sp, r7
 800ed7c:	bd80      	pop	{r7, pc}
 800ed7e:	bf00      	nop
 800ed80:	08013998 	.word	0x08013998
 800ed84:	08013b44 	.word	0x08013b44
 800ed88:	08013a10 	.word	0x08013a10
 800ed8c:	20008904 	.word	0x20008904
 800ed90:	08013b54 	.word	0x08013b54
 800ed94:	08013b38 	.word	0x08013b38
 800ed98:	200089f4 	.word	0x200089f4
 800ed9c:	08013b7c 	.word	0x08013b7c

0800eda0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800eda0:	b580      	push	{r7, lr}
 800eda2:	b08a      	sub	sp, #40	; 0x28
 800eda4:	af02      	add	r7, sp, #8
 800eda6:	60f8      	str	r0, [r7, #12]
 800eda8:	60b9      	str	r1, [r7, #8]
 800edaa:	607a      	str	r2, [r7, #4]
 800edac:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800edae:	2300      	movs	r3, #0
 800edb0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d106      	bne.n	800edc6 <etharp_raw+0x26>
 800edb8:	4b3a      	ldr	r3, [pc, #232]	; (800eea4 <etharp_raw+0x104>)
 800edba:	f240 4257 	movw	r2, #1111	; 0x457
 800edbe:	493a      	ldr	r1, [pc, #232]	; (800eea8 <etharp_raw+0x108>)
 800edc0:	483a      	ldr	r0, [pc, #232]	; (800eeac <etharp_raw+0x10c>)
 800edc2:	f001 fd27 	bl	8010814 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800edc6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800edca:	211c      	movs	r1, #28
 800edcc:	200e      	movs	r0, #14
 800edce:	f7f8 fb55 	bl	800747c <pbuf_alloc>
 800edd2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800edd4:	69bb      	ldr	r3, [r7, #24]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d102      	bne.n	800ede0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800edda:	f04f 33ff 	mov.w	r3, #4294967295
 800edde:	e05d      	b.n	800ee9c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800ede0:	69bb      	ldr	r3, [r7, #24]
 800ede2:	895b      	ldrh	r3, [r3, #10]
 800ede4:	2b1b      	cmp	r3, #27
 800ede6:	d806      	bhi.n	800edf6 <etharp_raw+0x56>
 800ede8:	4b2e      	ldr	r3, [pc, #184]	; (800eea4 <etharp_raw+0x104>)
 800edea:	f240 4262 	movw	r2, #1122	; 0x462
 800edee:	4930      	ldr	r1, [pc, #192]	; (800eeb0 <etharp_raw+0x110>)
 800edf0:	482e      	ldr	r0, [pc, #184]	; (800eeac <etharp_raw+0x10c>)
 800edf2:	f001 fd0f 	bl	8010814 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800edf6:	69bb      	ldr	r3, [r7, #24]
 800edf8:	685b      	ldr	r3, [r3, #4]
 800edfa:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800edfc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800edfe:	4618      	mov	r0, r3
 800ee00:	f7f7 fac2 	bl	8006388 <lwip_htons>
 800ee04:	4603      	mov	r3, r0
 800ee06:	461a      	mov	r2, r3
 800ee08:	697b      	ldr	r3, [r7, #20]
 800ee0a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ee12:	2b06      	cmp	r3, #6
 800ee14:	d006      	beq.n	800ee24 <etharp_raw+0x84>
 800ee16:	4b23      	ldr	r3, [pc, #140]	; (800eea4 <etharp_raw+0x104>)
 800ee18:	f240 4269 	movw	r2, #1129	; 0x469
 800ee1c:	4925      	ldr	r1, [pc, #148]	; (800eeb4 <etharp_raw+0x114>)
 800ee1e:	4823      	ldr	r0, [pc, #140]	; (800eeac <etharp_raw+0x10c>)
 800ee20:	f001 fcf8 	bl	8010814 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800ee24:	697b      	ldr	r3, [r7, #20]
 800ee26:	3308      	adds	r3, #8
 800ee28:	2206      	movs	r2, #6
 800ee2a:	6839      	ldr	r1, [r7, #0]
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	f001 fdde 	bl	80109ee <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800ee32:	697b      	ldr	r3, [r7, #20]
 800ee34:	3312      	adds	r3, #18
 800ee36:	2206      	movs	r2, #6
 800ee38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	f001 fdd7 	bl	80109ee <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800ee40:	697b      	ldr	r3, [r7, #20]
 800ee42:	330e      	adds	r3, #14
 800ee44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee46:	6812      	ldr	r2, [r2, #0]
 800ee48:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800ee4a:	697b      	ldr	r3, [r7, #20]
 800ee4c:	3318      	adds	r3, #24
 800ee4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee50:	6812      	ldr	r2, [r2, #0]
 800ee52:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800ee54:	697b      	ldr	r3, [r7, #20]
 800ee56:	2200      	movs	r2, #0
 800ee58:	701a      	strb	r2, [r3, #0]
 800ee5a:	2200      	movs	r2, #0
 800ee5c:	f042 0201 	orr.w	r2, r2, #1
 800ee60:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800ee62:	697b      	ldr	r3, [r7, #20]
 800ee64:	2200      	movs	r2, #0
 800ee66:	f042 0208 	orr.w	r2, r2, #8
 800ee6a:	709a      	strb	r2, [r3, #2]
 800ee6c:	2200      	movs	r2, #0
 800ee6e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800ee70:	697b      	ldr	r3, [r7, #20]
 800ee72:	2206      	movs	r2, #6
 800ee74:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800ee76:	697b      	ldr	r3, [r7, #20]
 800ee78:	2204      	movs	r2, #4
 800ee7a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800ee7c:	f640 0306 	movw	r3, #2054	; 0x806
 800ee80:	9300      	str	r3, [sp, #0]
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	68ba      	ldr	r2, [r7, #8]
 800ee86:	69b9      	ldr	r1, [r7, #24]
 800ee88:	68f8      	ldr	r0, [r7, #12]
 800ee8a:	f001 fb7b 	bl	8010584 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800ee8e:	69b8      	ldr	r0, [r7, #24]
 800ee90:	f7f8 fdd8 	bl	8007a44 <pbuf_free>
  p = NULL;
 800ee94:	2300      	movs	r3, #0
 800ee96:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800ee98:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	3720      	adds	r7, #32
 800eea0:	46bd      	mov	sp, r7
 800eea2:	bd80      	pop	{r7, pc}
 800eea4:	08013998 	.word	0x08013998
 800eea8:	08013ae8 	.word	0x08013ae8
 800eeac:	08013a10 	.word	0x08013a10
 800eeb0:	08013b98 	.word	0x08013b98
 800eeb4:	08013bcc 	.word	0x08013bcc

0800eeb8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b088      	sub	sp, #32
 800eebc:	af04      	add	r7, sp, #16
 800eebe:	60f8      	str	r0, [r7, #12]
 800eec0:	60b9      	str	r1, [r7, #8]
 800eec2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800eed4:	2201      	movs	r2, #1
 800eed6:	9203      	str	r2, [sp, #12]
 800eed8:	68ba      	ldr	r2, [r7, #8]
 800eeda:	9202      	str	r2, [sp, #8]
 800eedc:	4a06      	ldr	r2, [pc, #24]	; (800eef8 <etharp_request_dst+0x40>)
 800eede:	9201      	str	r2, [sp, #4]
 800eee0:	9300      	str	r3, [sp, #0]
 800eee2:	4603      	mov	r3, r0
 800eee4:	687a      	ldr	r2, [r7, #4]
 800eee6:	68f8      	ldr	r0, [r7, #12]
 800eee8:	f7ff ff5a 	bl	800eda0 <etharp_raw>
 800eeec:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800eeee:	4618      	mov	r0, r3
 800eef0:	3710      	adds	r7, #16
 800eef2:	46bd      	mov	sp, r7
 800eef4:	bd80      	pop	{r7, pc}
 800eef6:	bf00      	nop
 800eef8:	0801415c 	.word	0x0801415c

0800eefc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800eefc:	b580      	push	{r7, lr}
 800eefe:	b082      	sub	sp, #8
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	6078      	str	r0, [r7, #4]
 800ef04:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800ef06:	4a05      	ldr	r2, [pc, #20]	; (800ef1c <etharp_request+0x20>)
 800ef08:	6839      	ldr	r1, [r7, #0]
 800ef0a:	6878      	ldr	r0, [r7, #4]
 800ef0c:	f7ff ffd4 	bl	800eeb8 <etharp_request_dst>
 800ef10:	4603      	mov	r3, r0
}
 800ef12:	4618      	mov	r0, r3
 800ef14:	3708      	adds	r7, #8
 800ef16:	46bd      	mov	sp, r7
 800ef18:	bd80      	pop	{r7, pc}
 800ef1a:	bf00      	nop
 800ef1c:	08014154 	.word	0x08014154

0800ef20 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b08e      	sub	sp, #56	; 0x38
 800ef24:	af04      	add	r7, sp, #16
 800ef26:	6078      	str	r0, [r7, #4]
 800ef28:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800ef2a:	4b79      	ldr	r3, [pc, #484]	; (800f110 <icmp_input+0x1f0>)
 800ef2c:	689b      	ldr	r3, [r3, #8]
 800ef2e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800ef30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef32:	781b      	ldrb	r3, [r3, #0]
 800ef34:	f003 030f 	and.w	r3, r3, #15
 800ef38:	b2db      	uxtb	r3, r3
 800ef3a:	009b      	lsls	r3, r3, #2
 800ef3c:	b2db      	uxtb	r3, r3
 800ef3e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800ef40:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ef42:	2b13      	cmp	r3, #19
 800ef44:	f240 80cd 	bls.w	800f0e2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	895b      	ldrh	r3, [r3, #10]
 800ef4c:	2b03      	cmp	r3, #3
 800ef4e:	f240 80ca 	bls.w	800f0e6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	685b      	ldr	r3, [r3, #4]
 800ef56:	781b      	ldrb	r3, [r3, #0]
 800ef58:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800ef5c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	f000 80b7 	beq.w	800f0d4 <icmp_input+0x1b4>
 800ef66:	2b08      	cmp	r3, #8
 800ef68:	f040 80b7 	bne.w	800f0da <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800ef6c:	4b69      	ldr	r3, [pc, #420]	; (800f114 <icmp_input+0x1f4>)
 800ef6e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ef70:	4b67      	ldr	r3, [pc, #412]	; (800f110 <icmp_input+0x1f0>)
 800ef72:	695b      	ldr	r3, [r3, #20]
 800ef74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ef78:	2be0      	cmp	r3, #224	; 0xe0
 800ef7a:	f000 80bb 	beq.w	800f0f4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800ef7e:	4b64      	ldr	r3, [pc, #400]	; (800f110 <icmp_input+0x1f0>)
 800ef80:	695b      	ldr	r3, [r3, #20]
 800ef82:	4a63      	ldr	r2, [pc, #396]	; (800f110 <icmp_input+0x1f0>)
 800ef84:	6812      	ldr	r2, [r2, #0]
 800ef86:	4611      	mov	r1, r2
 800ef88:	4618      	mov	r0, r3
 800ef8a:	f000 fbed 	bl	800f768 <ip4_addr_isbroadcast_u32>
 800ef8e:	4603      	mov	r3, r0
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	f040 80b1 	bne.w	800f0f8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	891b      	ldrh	r3, [r3, #8]
 800ef9a:	2b07      	cmp	r3, #7
 800ef9c:	f240 80a5 	bls.w	800f0ea <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800efa0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800efa2:	330e      	adds	r3, #14
 800efa4:	4619      	mov	r1, r3
 800efa6:	6878      	ldr	r0, [r7, #4]
 800efa8:	f7f8 fcb6 	bl	8007918 <pbuf_add_header>
 800efac:	4603      	mov	r3, r0
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d04b      	beq.n	800f04a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	891a      	ldrh	r2, [r3, #8]
 800efb6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800efb8:	4413      	add	r3, r2
 800efba:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	891b      	ldrh	r3, [r3, #8]
 800efc0:	8b7a      	ldrh	r2, [r7, #26]
 800efc2:	429a      	cmp	r2, r3
 800efc4:	f0c0 809a 	bcc.w	800f0fc <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800efc8:	8b7b      	ldrh	r3, [r7, #26]
 800efca:	f44f 7220 	mov.w	r2, #640	; 0x280
 800efce:	4619      	mov	r1, r3
 800efd0:	200e      	movs	r0, #14
 800efd2:	f7f8 fa53 	bl	800747c <pbuf_alloc>
 800efd6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800efd8:	697b      	ldr	r3, [r7, #20]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	f000 8090 	beq.w	800f100 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800efe0:	697b      	ldr	r3, [r7, #20]
 800efe2:	895b      	ldrh	r3, [r3, #10]
 800efe4:	461a      	mov	r2, r3
 800efe6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800efe8:	3308      	adds	r3, #8
 800efea:	429a      	cmp	r2, r3
 800efec:	d203      	bcs.n	800eff6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800efee:	6978      	ldr	r0, [r7, #20]
 800eff0:	f7f8 fd28 	bl	8007a44 <pbuf_free>
          goto icmperr;
 800eff4:	e085      	b.n	800f102 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800eff6:	697b      	ldr	r3, [r7, #20]
 800eff8:	685b      	ldr	r3, [r3, #4]
 800effa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800effc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800effe:	4618      	mov	r0, r3
 800f000:	f001 fcf5 	bl	80109ee <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800f004:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f006:	4619      	mov	r1, r3
 800f008:	6978      	ldr	r0, [r7, #20]
 800f00a:	f7f8 fc95 	bl	8007938 <pbuf_remove_header>
 800f00e:	4603      	mov	r3, r0
 800f010:	2b00      	cmp	r3, #0
 800f012:	d009      	beq.n	800f028 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800f014:	4b40      	ldr	r3, [pc, #256]	; (800f118 <icmp_input+0x1f8>)
 800f016:	22b6      	movs	r2, #182	; 0xb6
 800f018:	4940      	ldr	r1, [pc, #256]	; (800f11c <icmp_input+0x1fc>)
 800f01a:	4841      	ldr	r0, [pc, #260]	; (800f120 <icmp_input+0x200>)
 800f01c:	f001 fbfa 	bl	8010814 <iprintf>
          pbuf_free(r);
 800f020:	6978      	ldr	r0, [r7, #20]
 800f022:	f7f8 fd0f 	bl	8007a44 <pbuf_free>
          goto icmperr;
 800f026:	e06c      	b.n	800f102 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800f028:	6879      	ldr	r1, [r7, #4]
 800f02a:	6978      	ldr	r0, [r7, #20]
 800f02c:	f7f8 fe32 	bl	8007c94 <pbuf_copy>
 800f030:	4603      	mov	r3, r0
 800f032:	2b00      	cmp	r3, #0
 800f034:	d003      	beq.n	800f03e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800f036:	6978      	ldr	r0, [r7, #20]
 800f038:	f7f8 fd04 	bl	8007a44 <pbuf_free>
          goto icmperr;
 800f03c:	e061      	b.n	800f102 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800f03e:	6878      	ldr	r0, [r7, #4]
 800f040:	f7f8 fd00 	bl	8007a44 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800f044:	697b      	ldr	r3, [r7, #20]
 800f046:	607b      	str	r3, [r7, #4]
 800f048:	e00f      	b.n	800f06a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800f04a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f04c:	330e      	adds	r3, #14
 800f04e:	4619      	mov	r1, r3
 800f050:	6878      	ldr	r0, [r7, #4]
 800f052:	f7f8 fc71 	bl	8007938 <pbuf_remove_header>
 800f056:	4603      	mov	r3, r0
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d006      	beq.n	800f06a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800f05c:	4b2e      	ldr	r3, [pc, #184]	; (800f118 <icmp_input+0x1f8>)
 800f05e:	22c7      	movs	r2, #199	; 0xc7
 800f060:	4930      	ldr	r1, [pc, #192]	; (800f124 <icmp_input+0x204>)
 800f062:	482f      	ldr	r0, [pc, #188]	; (800f120 <icmp_input+0x200>)
 800f064:	f001 fbd6 	bl	8010814 <iprintf>
          goto icmperr;
 800f068:	e04b      	b.n	800f102 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	685b      	ldr	r3, [r3, #4]
 800f06e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800f070:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f072:	4619      	mov	r1, r3
 800f074:	6878      	ldr	r0, [r7, #4]
 800f076:	f7f8 fc4f 	bl	8007918 <pbuf_add_header>
 800f07a:	4603      	mov	r3, r0
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d12b      	bne.n	800f0d8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	685b      	ldr	r3, [r3, #4]
 800f084:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800f086:	69fb      	ldr	r3, [r7, #28]
 800f088:	681a      	ldr	r2, [r3, #0]
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800f08e:	4b20      	ldr	r3, [pc, #128]	; (800f110 <icmp_input+0x1f0>)
 800f090:	691a      	ldr	r2, [r3, #16]
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800f096:	693b      	ldr	r3, [r7, #16]
 800f098:	2200      	movs	r2, #0
 800f09a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800f09c:	693b      	ldr	r3, [r7, #16]
 800f09e:	2200      	movs	r2, #0
 800f0a0:	709a      	strb	r2, [r3, #2]
 800f0a2:	2200      	movs	r2, #0
 800f0a4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	22ff      	movs	r2, #255	; 0xff
 800f0aa:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	729a      	strb	r2, [r3, #10]
 800f0b2:	2200      	movs	r2, #0
 800f0b4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800f0b6:	683b      	ldr	r3, [r7, #0]
 800f0b8:	9302      	str	r3, [sp, #8]
 800f0ba:	2301      	movs	r3, #1
 800f0bc:	9301      	str	r3, [sp, #4]
 800f0be:	2300      	movs	r3, #0
 800f0c0:	9300      	str	r3, [sp, #0]
 800f0c2:	23ff      	movs	r3, #255	; 0xff
 800f0c4:	2200      	movs	r2, #0
 800f0c6:	69f9      	ldr	r1, [r7, #28]
 800f0c8:	6878      	ldr	r0, [r7, #4]
 800f0ca:	f000 fa75 	bl	800f5b8 <ip4_output_if>
 800f0ce:	4603      	mov	r3, r0
 800f0d0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800f0d2:	e001      	b.n	800f0d8 <icmp_input+0x1b8>
      break;
 800f0d4:	bf00      	nop
 800f0d6:	e000      	b.n	800f0da <icmp_input+0x1ba>
      break;
 800f0d8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800f0da:	6878      	ldr	r0, [r7, #4]
 800f0dc:	f7f8 fcb2 	bl	8007a44 <pbuf_free>
  return;
 800f0e0:	e013      	b.n	800f10a <icmp_input+0x1ea>
    goto lenerr;
 800f0e2:	bf00      	nop
 800f0e4:	e002      	b.n	800f0ec <icmp_input+0x1cc>
    goto lenerr;
 800f0e6:	bf00      	nop
 800f0e8:	e000      	b.n	800f0ec <icmp_input+0x1cc>
        goto lenerr;
 800f0ea:	bf00      	nop
lenerr:
  pbuf_free(p);
 800f0ec:	6878      	ldr	r0, [r7, #4]
 800f0ee:	f7f8 fca9 	bl	8007a44 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800f0f2:	e00a      	b.n	800f10a <icmp_input+0x1ea>
        goto icmperr;
 800f0f4:	bf00      	nop
 800f0f6:	e004      	b.n	800f102 <icmp_input+0x1e2>
        goto icmperr;
 800f0f8:	bf00      	nop
 800f0fa:	e002      	b.n	800f102 <icmp_input+0x1e2>
          goto icmperr;
 800f0fc:	bf00      	nop
 800f0fe:	e000      	b.n	800f102 <icmp_input+0x1e2>
          goto icmperr;
 800f100:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800f102:	6878      	ldr	r0, [r7, #4]
 800f104:	f7f8 fc9e 	bl	8007a44 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800f108:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800f10a:	3728      	adds	r7, #40	; 0x28
 800f10c:	46bd      	mov	sp, r7
 800f10e:	bd80      	pop	{r7, pc}
 800f110:	20005334 	.word	0x20005334
 800f114:	20005348 	.word	0x20005348
 800f118:	08013c10 	.word	0x08013c10
 800f11c:	08013c48 	.word	0x08013c48
 800f120:	08013c80 	.word	0x08013c80
 800f124:	08013ca8 	.word	0x08013ca8

0800f128 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800f128:	b580      	push	{r7, lr}
 800f12a:	b082      	sub	sp, #8
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	6078      	str	r0, [r7, #4]
 800f130:	460b      	mov	r3, r1
 800f132:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800f134:	78fb      	ldrb	r3, [r7, #3]
 800f136:	461a      	mov	r2, r3
 800f138:	2103      	movs	r1, #3
 800f13a:	6878      	ldr	r0, [r7, #4]
 800f13c:	f000 f814 	bl	800f168 <icmp_send_response>
}
 800f140:	bf00      	nop
 800f142:	3708      	adds	r7, #8
 800f144:	46bd      	mov	sp, r7
 800f146:	bd80      	pop	{r7, pc}

0800f148 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800f148:	b580      	push	{r7, lr}
 800f14a:	b082      	sub	sp, #8
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	6078      	str	r0, [r7, #4]
 800f150:	460b      	mov	r3, r1
 800f152:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800f154:	78fb      	ldrb	r3, [r7, #3]
 800f156:	461a      	mov	r2, r3
 800f158:	210b      	movs	r1, #11
 800f15a:	6878      	ldr	r0, [r7, #4]
 800f15c:	f000 f804 	bl	800f168 <icmp_send_response>
}
 800f160:	bf00      	nop
 800f162:	3708      	adds	r7, #8
 800f164:	46bd      	mov	sp, r7
 800f166:	bd80      	pop	{r7, pc}

0800f168 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800f168:	b580      	push	{r7, lr}
 800f16a:	b08c      	sub	sp, #48	; 0x30
 800f16c:	af04      	add	r7, sp, #16
 800f16e:	6078      	str	r0, [r7, #4]
 800f170:	460b      	mov	r3, r1
 800f172:	70fb      	strb	r3, [r7, #3]
 800f174:	4613      	mov	r3, r2
 800f176:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800f178:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f17c:	2124      	movs	r1, #36	; 0x24
 800f17e:	2022      	movs	r0, #34	; 0x22
 800f180:	f7f8 f97c 	bl	800747c <pbuf_alloc>
 800f184:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800f186:	69fb      	ldr	r3, [r7, #28]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d04c      	beq.n	800f226 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800f18c:	69fb      	ldr	r3, [r7, #28]
 800f18e:	895b      	ldrh	r3, [r3, #10]
 800f190:	2b23      	cmp	r3, #35	; 0x23
 800f192:	d806      	bhi.n	800f1a2 <icmp_send_response+0x3a>
 800f194:	4b26      	ldr	r3, [pc, #152]	; (800f230 <icmp_send_response+0xc8>)
 800f196:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800f19a:	4926      	ldr	r1, [pc, #152]	; (800f234 <icmp_send_response+0xcc>)
 800f19c:	4826      	ldr	r0, [pc, #152]	; (800f238 <icmp_send_response+0xd0>)
 800f19e:	f001 fb39 	bl	8010814 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	685b      	ldr	r3, [r3, #4]
 800f1a6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800f1a8:	69fb      	ldr	r3, [r7, #28]
 800f1aa:	685b      	ldr	r3, [r3, #4]
 800f1ac:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800f1ae:	697b      	ldr	r3, [r7, #20]
 800f1b0:	78fa      	ldrb	r2, [r7, #3]
 800f1b2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800f1b4:	697b      	ldr	r3, [r7, #20]
 800f1b6:	78ba      	ldrb	r2, [r7, #2]
 800f1b8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800f1ba:	697b      	ldr	r3, [r7, #20]
 800f1bc:	2200      	movs	r2, #0
 800f1be:	711a      	strb	r2, [r3, #4]
 800f1c0:	2200      	movs	r2, #0
 800f1c2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800f1c4:	697b      	ldr	r3, [r7, #20]
 800f1c6:	2200      	movs	r2, #0
 800f1c8:	719a      	strb	r2, [r3, #6]
 800f1ca:	2200      	movs	r2, #0
 800f1cc:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800f1ce:	69fb      	ldr	r3, [r7, #28]
 800f1d0:	685b      	ldr	r3, [r3, #4]
 800f1d2:	f103 0008 	add.w	r0, r3, #8
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	685b      	ldr	r3, [r3, #4]
 800f1da:	221c      	movs	r2, #28
 800f1dc:	4619      	mov	r1, r3
 800f1de:	f001 fc06 	bl	80109ee <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800f1e2:	69bb      	ldr	r3, [r7, #24]
 800f1e4:	68db      	ldr	r3, [r3, #12]
 800f1e6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800f1e8:	f107 030c 	add.w	r3, r7, #12
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	f000 f825 	bl	800f23c <ip4_route>
 800f1f2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800f1f4:	693b      	ldr	r3, [r7, #16]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d011      	beq.n	800f21e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800f1fa:	697b      	ldr	r3, [r7, #20]
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	709a      	strb	r2, [r3, #2]
 800f200:	2200      	movs	r2, #0
 800f202:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800f204:	f107 020c 	add.w	r2, r7, #12
 800f208:	693b      	ldr	r3, [r7, #16]
 800f20a:	9302      	str	r3, [sp, #8]
 800f20c:	2301      	movs	r3, #1
 800f20e:	9301      	str	r3, [sp, #4]
 800f210:	2300      	movs	r3, #0
 800f212:	9300      	str	r3, [sp, #0]
 800f214:	23ff      	movs	r3, #255	; 0xff
 800f216:	2100      	movs	r1, #0
 800f218:	69f8      	ldr	r0, [r7, #28]
 800f21a:	f000 f9cd 	bl	800f5b8 <ip4_output_if>
  }
  pbuf_free(q);
 800f21e:	69f8      	ldr	r0, [r7, #28]
 800f220:	f7f8 fc10 	bl	8007a44 <pbuf_free>
 800f224:	e000      	b.n	800f228 <icmp_send_response+0xc0>
    return;
 800f226:	bf00      	nop
}
 800f228:	3720      	adds	r7, #32
 800f22a:	46bd      	mov	sp, r7
 800f22c:	bd80      	pop	{r7, pc}
 800f22e:	bf00      	nop
 800f230:	08013c10 	.word	0x08013c10
 800f234:	08013cdc 	.word	0x08013cdc
 800f238:	08013c80 	.word	0x08013c80

0800f23c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800f23c:	b480      	push	{r7}
 800f23e:	b085      	sub	sp, #20
 800f240:	af00      	add	r7, sp, #0
 800f242:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800f244:	4b33      	ldr	r3, [pc, #204]	; (800f314 <ip4_route+0xd8>)
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	60fb      	str	r3, [r7, #12]
 800f24a:	e036      	b.n	800f2ba <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f252:	f003 0301 	and.w	r3, r3, #1
 800f256:	b2db      	uxtb	r3, r3
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d02b      	beq.n	800f2b4 <ip4_route+0x78>
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f262:	089b      	lsrs	r3, r3, #2
 800f264:	f003 0301 	and.w	r3, r3, #1
 800f268:	b2db      	uxtb	r3, r3
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d022      	beq.n	800f2b4 <ip4_route+0x78>
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	3304      	adds	r3, #4
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	2b00      	cmp	r3, #0
 800f276:	d01d      	beq.n	800f2b4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	681a      	ldr	r2, [r3, #0]
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	3304      	adds	r3, #4
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	405a      	eors	r2, r3
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	3308      	adds	r3, #8
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	4013      	ands	r3, r2
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d101      	bne.n	800f294 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	e038      	b.n	800f306 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f29a:	f003 0302 	and.w	r3, r3, #2
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d108      	bne.n	800f2b4 <ip4_route+0x78>
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	681a      	ldr	r2, [r3, #0]
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	330c      	adds	r3, #12
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	429a      	cmp	r2, r3
 800f2ae:	d101      	bne.n	800f2b4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	e028      	b.n	800f306 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	60fb      	str	r3, [r7, #12]
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d1c5      	bne.n	800f24c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800f2c0:	4b15      	ldr	r3, [pc, #84]	; (800f318 <ip4_route+0xdc>)
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d01a      	beq.n	800f2fe <ip4_route+0xc2>
 800f2c8:	4b13      	ldr	r3, [pc, #76]	; (800f318 <ip4_route+0xdc>)
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f2d0:	f003 0301 	and.w	r3, r3, #1
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d012      	beq.n	800f2fe <ip4_route+0xc2>
 800f2d8:	4b0f      	ldr	r3, [pc, #60]	; (800f318 <ip4_route+0xdc>)
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f2e0:	f003 0304 	and.w	r3, r3, #4
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d00a      	beq.n	800f2fe <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800f2e8:	4b0b      	ldr	r3, [pc, #44]	; (800f318 <ip4_route+0xdc>)
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	3304      	adds	r3, #4
 800f2ee:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d004      	beq.n	800f2fe <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	b2db      	uxtb	r3, r3
 800f2fa:	2b7f      	cmp	r3, #127	; 0x7f
 800f2fc:	d101      	bne.n	800f302 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800f2fe:	2300      	movs	r3, #0
 800f300:	e001      	b.n	800f306 <ip4_route+0xca>
  }

  return netif_default;
 800f302:	4b05      	ldr	r3, [pc, #20]	; (800f318 <ip4_route+0xdc>)
 800f304:	681b      	ldr	r3, [r3, #0]
}
 800f306:	4618      	mov	r0, r3
 800f308:	3714      	adds	r7, #20
 800f30a:	46bd      	mov	sp, r7
 800f30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f310:	4770      	bx	lr
 800f312:	bf00      	nop
 800f314:	20008898 	.word	0x20008898
 800f318:	2000889c 	.word	0x2000889c

0800f31c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800f31c:	b580      	push	{r7, lr}
 800f31e:	b082      	sub	sp, #8
 800f320:	af00      	add	r7, sp, #0
 800f322:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f32a:	f003 0301 	and.w	r3, r3, #1
 800f32e:	b2db      	uxtb	r3, r3
 800f330:	2b00      	cmp	r3, #0
 800f332:	d016      	beq.n	800f362 <ip4_input_accept+0x46>
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	3304      	adds	r3, #4
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d011      	beq.n	800f362 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800f33e:	4b0b      	ldr	r3, [pc, #44]	; (800f36c <ip4_input_accept+0x50>)
 800f340:	695a      	ldr	r2, [r3, #20]
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	3304      	adds	r3, #4
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	429a      	cmp	r2, r3
 800f34a:	d008      	beq.n	800f35e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800f34c:	4b07      	ldr	r3, [pc, #28]	; (800f36c <ip4_input_accept+0x50>)
 800f34e:	695b      	ldr	r3, [r3, #20]
 800f350:	6879      	ldr	r1, [r7, #4]
 800f352:	4618      	mov	r0, r3
 800f354:	f000 fa08 	bl	800f768 <ip4_addr_isbroadcast_u32>
 800f358:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d001      	beq.n	800f362 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800f35e:	2301      	movs	r3, #1
 800f360:	e000      	b.n	800f364 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800f362:	2300      	movs	r3, #0
}
 800f364:	4618      	mov	r0, r3
 800f366:	3708      	adds	r7, #8
 800f368:	46bd      	mov	sp, r7
 800f36a:	bd80      	pop	{r7, pc}
 800f36c:	20005334 	.word	0x20005334

0800f370 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800f370:	b580      	push	{r7, lr}
 800f372:	b086      	sub	sp, #24
 800f374:	af00      	add	r7, sp, #0
 800f376:	6078      	str	r0, [r7, #4]
 800f378:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	685b      	ldr	r3, [r3, #4]
 800f37e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800f380:	697b      	ldr	r3, [r7, #20]
 800f382:	781b      	ldrb	r3, [r3, #0]
 800f384:	091b      	lsrs	r3, r3, #4
 800f386:	b2db      	uxtb	r3, r3
 800f388:	2b04      	cmp	r3, #4
 800f38a:	d004      	beq.n	800f396 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800f38c:	6878      	ldr	r0, [r7, #4]
 800f38e:	f7f8 fb59 	bl	8007a44 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800f392:	2300      	movs	r3, #0
 800f394:	e107      	b.n	800f5a6 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800f396:	697b      	ldr	r3, [r7, #20]
 800f398:	781b      	ldrb	r3, [r3, #0]
 800f39a:	f003 030f 	and.w	r3, r3, #15
 800f39e:	b2db      	uxtb	r3, r3
 800f3a0:	009b      	lsls	r3, r3, #2
 800f3a2:	b2db      	uxtb	r3, r3
 800f3a4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800f3a6:	697b      	ldr	r3, [r7, #20]
 800f3a8:	885b      	ldrh	r3, [r3, #2]
 800f3aa:	b29b      	uxth	r3, r3
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	f7f6 ffeb 	bl	8006388 <lwip_htons>
 800f3b2:	4603      	mov	r3, r0
 800f3b4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	891b      	ldrh	r3, [r3, #8]
 800f3ba:	89ba      	ldrh	r2, [r7, #12]
 800f3bc:	429a      	cmp	r2, r3
 800f3be:	d204      	bcs.n	800f3ca <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800f3c0:	89bb      	ldrh	r3, [r7, #12]
 800f3c2:	4619      	mov	r1, r3
 800f3c4:	6878      	ldr	r0, [r7, #4]
 800f3c6:	f7f8 f9b7 	bl	8007738 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	895b      	ldrh	r3, [r3, #10]
 800f3ce:	89fa      	ldrh	r2, [r7, #14]
 800f3d0:	429a      	cmp	r2, r3
 800f3d2:	d807      	bhi.n	800f3e4 <ip4_input+0x74>
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	891b      	ldrh	r3, [r3, #8]
 800f3d8:	89ba      	ldrh	r2, [r7, #12]
 800f3da:	429a      	cmp	r2, r3
 800f3dc:	d802      	bhi.n	800f3e4 <ip4_input+0x74>
 800f3de:	89fb      	ldrh	r3, [r7, #14]
 800f3e0:	2b13      	cmp	r3, #19
 800f3e2:	d804      	bhi.n	800f3ee <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800f3e4:	6878      	ldr	r0, [r7, #4]
 800f3e6:	f7f8 fb2d 	bl	8007a44 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800f3ea:	2300      	movs	r3, #0
 800f3ec:	e0db      	b.n	800f5a6 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800f3ee:	697b      	ldr	r3, [r7, #20]
 800f3f0:	691b      	ldr	r3, [r3, #16]
 800f3f2:	4a6f      	ldr	r2, [pc, #444]	; (800f5b0 <ip4_input+0x240>)
 800f3f4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800f3f6:	697b      	ldr	r3, [r7, #20]
 800f3f8:	68db      	ldr	r3, [r3, #12]
 800f3fa:	4a6d      	ldr	r2, [pc, #436]	; (800f5b0 <ip4_input+0x240>)
 800f3fc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f3fe:	4b6c      	ldr	r3, [pc, #432]	; (800f5b0 <ip4_input+0x240>)
 800f400:	695b      	ldr	r3, [r3, #20]
 800f402:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f406:	2be0      	cmp	r3, #224	; 0xe0
 800f408:	d112      	bne.n	800f430 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800f40a:	683b      	ldr	r3, [r7, #0]
 800f40c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f410:	f003 0301 	and.w	r3, r3, #1
 800f414:	b2db      	uxtb	r3, r3
 800f416:	2b00      	cmp	r3, #0
 800f418:	d007      	beq.n	800f42a <ip4_input+0xba>
 800f41a:	683b      	ldr	r3, [r7, #0]
 800f41c:	3304      	adds	r3, #4
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	2b00      	cmp	r3, #0
 800f422:	d002      	beq.n	800f42a <ip4_input+0xba>
      netif = inp;
 800f424:	683b      	ldr	r3, [r7, #0]
 800f426:	613b      	str	r3, [r7, #16]
 800f428:	e02a      	b.n	800f480 <ip4_input+0x110>
    } else {
      netif = NULL;
 800f42a:	2300      	movs	r3, #0
 800f42c:	613b      	str	r3, [r7, #16]
 800f42e:	e027      	b.n	800f480 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800f430:	6838      	ldr	r0, [r7, #0]
 800f432:	f7ff ff73 	bl	800f31c <ip4_input_accept>
 800f436:	4603      	mov	r3, r0
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d002      	beq.n	800f442 <ip4_input+0xd2>
      netif = inp;
 800f43c:	683b      	ldr	r3, [r7, #0]
 800f43e:	613b      	str	r3, [r7, #16]
 800f440:	e01e      	b.n	800f480 <ip4_input+0x110>
    } else {
      netif = NULL;
 800f442:	2300      	movs	r3, #0
 800f444:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800f446:	4b5a      	ldr	r3, [pc, #360]	; (800f5b0 <ip4_input+0x240>)
 800f448:	695b      	ldr	r3, [r3, #20]
 800f44a:	b2db      	uxtb	r3, r3
 800f44c:	2b7f      	cmp	r3, #127	; 0x7f
 800f44e:	d017      	beq.n	800f480 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800f450:	4b58      	ldr	r3, [pc, #352]	; (800f5b4 <ip4_input+0x244>)
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	613b      	str	r3, [r7, #16]
 800f456:	e00e      	b.n	800f476 <ip4_input+0x106>
          if (netif == inp) {
 800f458:	693a      	ldr	r2, [r7, #16]
 800f45a:	683b      	ldr	r3, [r7, #0]
 800f45c:	429a      	cmp	r2, r3
 800f45e:	d006      	beq.n	800f46e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800f460:	6938      	ldr	r0, [r7, #16]
 800f462:	f7ff ff5b 	bl	800f31c <ip4_input_accept>
 800f466:	4603      	mov	r3, r0
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d108      	bne.n	800f47e <ip4_input+0x10e>
 800f46c:	e000      	b.n	800f470 <ip4_input+0x100>
            continue;
 800f46e:	bf00      	nop
        NETIF_FOREACH(netif) {
 800f470:	693b      	ldr	r3, [r7, #16]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	613b      	str	r3, [r7, #16]
 800f476:	693b      	ldr	r3, [r7, #16]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d1ed      	bne.n	800f458 <ip4_input+0xe8>
 800f47c:	e000      	b.n	800f480 <ip4_input+0x110>
            break;
 800f47e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800f480:	4b4b      	ldr	r3, [pc, #300]	; (800f5b0 <ip4_input+0x240>)
 800f482:	691b      	ldr	r3, [r3, #16]
 800f484:	6839      	ldr	r1, [r7, #0]
 800f486:	4618      	mov	r0, r3
 800f488:	f000 f96e 	bl	800f768 <ip4_addr_isbroadcast_u32>
 800f48c:	4603      	mov	r3, r0
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d105      	bne.n	800f49e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800f492:	4b47      	ldr	r3, [pc, #284]	; (800f5b0 <ip4_input+0x240>)
 800f494:	691b      	ldr	r3, [r3, #16]
 800f496:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800f49a:	2be0      	cmp	r3, #224	; 0xe0
 800f49c:	d104      	bne.n	800f4a8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800f49e:	6878      	ldr	r0, [r7, #4]
 800f4a0:	f7f8 fad0 	bl	8007a44 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800f4a4:	2300      	movs	r3, #0
 800f4a6:	e07e      	b.n	800f5a6 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800f4a8:	693b      	ldr	r3, [r7, #16]
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d104      	bne.n	800f4b8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800f4ae:	6878      	ldr	r0, [r7, #4]
 800f4b0:	f7f8 fac8 	bl	8007a44 <pbuf_free>
    return ERR_OK;
 800f4b4:	2300      	movs	r3, #0
 800f4b6:	e076      	b.n	800f5a6 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800f4b8:	697b      	ldr	r3, [r7, #20]
 800f4ba:	88db      	ldrh	r3, [r3, #6]
 800f4bc:	b29b      	uxth	r3, r3
 800f4be:	461a      	mov	r2, r3
 800f4c0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800f4c4:	4013      	ands	r3, r2
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d00b      	beq.n	800f4e2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800f4ca:	6878      	ldr	r0, [r7, #4]
 800f4cc:	f000 fc92 	bl	800fdf4 <ip4_reass>
 800f4d0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d101      	bne.n	800f4dc <ip4_input+0x16c>
      return ERR_OK;
 800f4d8:	2300      	movs	r3, #0
 800f4da:	e064      	b.n	800f5a6 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	685b      	ldr	r3, [r3, #4]
 800f4e0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800f4e2:	4a33      	ldr	r2, [pc, #204]	; (800f5b0 <ip4_input+0x240>)
 800f4e4:	693b      	ldr	r3, [r7, #16]
 800f4e6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800f4e8:	4a31      	ldr	r2, [pc, #196]	; (800f5b0 <ip4_input+0x240>)
 800f4ea:	683b      	ldr	r3, [r7, #0]
 800f4ec:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800f4ee:	4a30      	ldr	r2, [pc, #192]	; (800f5b0 <ip4_input+0x240>)
 800f4f0:	697b      	ldr	r3, [r7, #20]
 800f4f2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800f4f4:	697b      	ldr	r3, [r7, #20]
 800f4f6:	781b      	ldrb	r3, [r3, #0]
 800f4f8:	f003 030f 	and.w	r3, r3, #15
 800f4fc:	b2db      	uxtb	r3, r3
 800f4fe:	009b      	lsls	r3, r3, #2
 800f500:	b2db      	uxtb	r3, r3
 800f502:	b29a      	uxth	r2, r3
 800f504:	4b2a      	ldr	r3, [pc, #168]	; (800f5b0 <ip4_input+0x240>)
 800f506:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800f508:	89fb      	ldrh	r3, [r7, #14]
 800f50a:	4619      	mov	r1, r3
 800f50c:	6878      	ldr	r0, [r7, #4]
 800f50e:	f7f8 fa13 	bl	8007938 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800f512:	697b      	ldr	r3, [r7, #20]
 800f514:	7a5b      	ldrb	r3, [r3, #9]
 800f516:	2b11      	cmp	r3, #17
 800f518:	d006      	beq.n	800f528 <ip4_input+0x1b8>
 800f51a:	2b11      	cmp	r3, #17
 800f51c:	dc13      	bgt.n	800f546 <ip4_input+0x1d6>
 800f51e:	2b01      	cmp	r3, #1
 800f520:	d00c      	beq.n	800f53c <ip4_input+0x1cc>
 800f522:	2b06      	cmp	r3, #6
 800f524:	d005      	beq.n	800f532 <ip4_input+0x1c2>
 800f526:	e00e      	b.n	800f546 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800f528:	6839      	ldr	r1, [r7, #0]
 800f52a:	6878      	ldr	r0, [r7, #4]
 800f52c:	f7fe f90e 	bl	800d74c <udp_input>
        break;
 800f530:	e026      	b.n	800f580 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800f532:	6839      	ldr	r1, [r7, #0]
 800f534:	6878      	ldr	r0, [r7, #4]
 800f536:	f7fa f94f 	bl	80097d8 <tcp_input>
        break;
 800f53a:	e021      	b.n	800f580 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800f53c:	6839      	ldr	r1, [r7, #0]
 800f53e:	6878      	ldr	r0, [r7, #4]
 800f540:	f7ff fcee 	bl	800ef20 <icmp_input>
        break;
 800f544:	e01c      	b.n	800f580 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800f546:	4b1a      	ldr	r3, [pc, #104]	; (800f5b0 <ip4_input+0x240>)
 800f548:	695b      	ldr	r3, [r3, #20]
 800f54a:	6939      	ldr	r1, [r7, #16]
 800f54c:	4618      	mov	r0, r3
 800f54e:	f000 f90b 	bl	800f768 <ip4_addr_isbroadcast_u32>
 800f552:	4603      	mov	r3, r0
 800f554:	2b00      	cmp	r3, #0
 800f556:	d10f      	bne.n	800f578 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f558:	4b15      	ldr	r3, [pc, #84]	; (800f5b0 <ip4_input+0x240>)
 800f55a:	695b      	ldr	r3, [r3, #20]
 800f55c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800f560:	2be0      	cmp	r3, #224	; 0xe0
 800f562:	d009      	beq.n	800f578 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800f564:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f568:	4619      	mov	r1, r3
 800f56a:	6878      	ldr	r0, [r7, #4]
 800f56c:	f7f8 fa57 	bl	8007a1e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800f570:	2102      	movs	r1, #2
 800f572:	6878      	ldr	r0, [r7, #4]
 800f574:	f7ff fdd8 	bl	800f128 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800f578:	6878      	ldr	r0, [r7, #4]
 800f57a:	f7f8 fa63 	bl	8007a44 <pbuf_free>
        break;
 800f57e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800f580:	4b0b      	ldr	r3, [pc, #44]	; (800f5b0 <ip4_input+0x240>)
 800f582:	2200      	movs	r2, #0
 800f584:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800f586:	4b0a      	ldr	r3, [pc, #40]	; (800f5b0 <ip4_input+0x240>)
 800f588:	2200      	movs	r2, #0
 800f58a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800f58c:	4b08      	ldr	r3, [pc, #32]	; (800f5b0 <ip4_input+0x240>)
 800f58e:	2200      	movs	r2, #0
 800f590:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800f592:	4b07      	ldr	r3, [pc, #28]	; (800f5b0 <ip4_input+0x240>)
 800f594:	2200      	movs	r2, #0
 800f596:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800f598:	4b05      	ldr	r3, [pc, #20]	; (800f5b0 <ip4_input+0x240>)
 800f59a:	2200      	movs	r2, #0
 800f59c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800f59e:	4b04      	ldr	r3, [pc, #16]	; (800f5b0 <ip4_input+0x240>)
 800f5a0:	2200      	movs	r2, #0
 800f5a2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800f5a4:	2300      	movs	r3, #0
}
 800f5a6:	4618      	mov	r0, r3
 800f5a8:	3718      	adds	r7, #24
 800f5aa:	46bd      	mov	sp, r7
 800f5ac:	bd80      	pop	{r7, pc}
 800f5ae:	bf00      	nop
 800f5b0:	20005334 	.word	0x20005334
 800f5b4:	20008898 	.word	0x20008898

0800f5b8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800f5b8:	b580      	push	{r7, lr}
 800f5ba:	b08a      	sub	sp, #40	; 0x28
 800f5bc:	af04      	add	r7, sp, #16
 800f5be:	60f8      	str	r0, [r7, #12]
 800f5c0:	60b9      	str	r1, [r7, #8]
 800f5c2:	607a      	str	r2, [r7, #4]
 800f5c4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800f5c6:	68bb      	ldr	r3, [r7, #8]
 800f5c8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d009      	beq.n	800f5e4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800f5d0:	68bb      	ldr	r3, [r7, #8]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d003      	beq.n	800f5de <ip4_output_if+0x26>
 800f5d6:	68bb      	ldr	r3, [r7, #8]
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d102      	bne.n	800f5e4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800f5de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5e0:	3304      	adds	r3, #4
 800f5e2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800f5e4:	78fa      	ldrb	r2, [r7, #3]
 800f5e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5e8:	9302      	str	r3, [sp, #8]
 800f5ea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f5ee:	9301      	str	r3, [sp, #4]
 800f5f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f5f4:	9300      	str	r3, [sp, #0]
 800f5f6:	4613      	mov	r3, r2
 800f5f8:	687a      	ldr	r2, [r7, #4]
 800f5fa:	6979      	ldr	r1, [r7, #20]
 800f5fc:	68f8      	ldr	r0, [r7, #12]
 800f5fe:	f000 f805 	bl	800f60c <ip4_output_if_src>
 800f602:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800f604:	4618      	mov	r0, r3
 800f606:	3718      	adds	r7, #24
 800f608:	46bd      	mov	sp, r7
 800f60a:	bd80      	pop	{r7, pc}

0800f60c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800f60c:	b580      	push	{r7, lr}
 800f60e:	b088      	sub	sp, #32
 800f610:	af00      	add	r7, sp, #0
 800f612:	60f8      	str	r0, [r7, #12]
 800f614:	60b9      	str	r1, [r7, #8]
 800f616:	607a      	str	r2, [r7, #4]
 800f618:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	7b9b      	ldrb	r3, [r3, #14]
 800f61e:	2b01      	cmp	r3, #1
 800f620:	d006      	beq.n	800f630 <ip4_output_if_src+0x24>
 800f622:	4b4b      	ldr	r3, [pc, #300]	; (800f750 <ip4_output_if_src+0x144>)
 800f624:	f44f 7255 	mov.w	r2, #852	; 0x354
 800f628:	494a      	ldr	r1, [pc, #296]	; (800f754 <ip4_output_if_src+0x148>)
 800f62a:	484b      	ldr	r0, [pc, #300]	; (800f758 <ip4_output_if_src+0x14c>)
 800f62c:	f001 f8f2 	bl	8010814 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d060      	beq.n	800f6f8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800f636:	2314      	movs	r3, #20
 800f638:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800f63a:	2114      	movs	r1, #20
 800f63c:	68f8      	ldr	r0, [r7, #12]
 800f63e:	f7f8 f96b 	bl	8007918 <pbuf_add_header>
 800f642:	4603      	mov	r3, r0
 800f644:	2b00      	cmp	r3, #0
 800f646:	d002      	beq.n	800f64e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800f648:	f06f 0301 	mvn.w	r3, #1
 800f64c:	e07c      	b.n	800f748 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	685b      	ldr	r3, [r3, #4]
 800f652:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	895b      	ldrh	r3, [r3, #10]
 800f658:	2b13      	cmp	r3, #19
 800f65a:	d806      	bhi.n	800f66a <ip4_output_if_src+0x5e>
 800f65c:	4b3c      	ldr	r3, [pc, #240]	; (800f750 <ip4_output_if_src+0x144>)
 800f65e:	f44f 7262 	mov.w	r2, #904	; 0x388
 800f662:	493e      	ldr	r1, [pc, #248]	; (800f75c <ip4_output_if_src+0x150>)
 800f664:	483c      	ldr	r0, [pc, #240]	; (800f758 <ip4_output_if_src+0x14c>)
 800f666:	f001 f8d5 	bl	8010814 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800f66a:	69fb      	ldr	r3, [r7, #28]
 800f66c:	78fa      	ldrb	r2, [r7, #3]
 800f66e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800f670:	69fb      	ldr	r3, [r7, #28]
 800f672:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800f676:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	681a      	ldr	r2, [r3, #0]
 800f67c:	69fb      	ldr	r3, [r7, #28]
 800f67e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800f680:	8b7b      	ldrh	r3, [r7, #26]
 800f682:	089b      	lsrs	r3, r3, #2
 800f684:	b29b      	uxth	r3, r3
 800f686:	b2db      	uxtb	r3, r3
 800f688:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f68c:	b2da      	uxtb	r2, r3
 800f68e:	69fb      	ldr	r3, [r7, #28]
 800f690:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800f692:	69fb      	ldr	r3, [r7, #28]
 800f694:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800f698:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	891b      	ldrh	r3, [r3, #8]
 800f69e:	4618      	mov	r0, r3
 800f6a0:	f7f6 fe72 	bl	8006388 <lwip_htons>
 800f6a4:	4603      	mov	r3, r0
 800f6a6:	461a      	mov	r2, r3
 800f6a8:	69fb      	ldr	r3, [r7, #28]
 800f6aa:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800f6ac:	69fb      	ldr	r3, [r7, #28]
 800f6ae:	2200      	movs	r2, #0
 800f6b0:	719a      	strb	r2, [r3, #6]
 800f6b2:	2200      	movs	r2, #0
 800f6b4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800f6b6:	4b2a      	ldr	r3, [pc, #168]	; (800f760 <ip4_output_if_src+0x154>)
 800f6b8:	881b      	ldrh	r3, [r3, #0]
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	f7f6 fe64 	bl	8006388 <lwip_htons>
 800f6c0:	4603      	mov	r3, r0
 800f6c2:	461a      	mov	r2, r3
 800f6c4:	69fb      	ldr	r3, [r7, #28]
 800f6c6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800f6c8:	4b25      	ldr	r3, [pc, #148]	; (800f760 <ip4_output_if_src+0x154>)
 800f6ca:	881b      	ldrh	r3, [r3, #0]
 800f6cc:	3301      	adds	r3, #1
 800f6ce:	b29a      	uxth	r2, r3
 800f6d0:	4b23      	ldr	r3, [pc, #140]	; (800f760 <ip4_output_if_src+0x154>)
 800f6d2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800f6d4:	68bb      	ldr	r3, [r7, #8]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d104      	bne.n	800f6e4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800f6da:	4b22      	ldr	r3, [pc, #136]	; (800f764 <ip4_output_if_src+0x158>)
 800f6dc:	681a      	ldr	r2, [r3, #0]
 800f6de:	69fb      	ldr	r3, [r7, #28]
 800f6e0:	60da      	str	r2, [r3, #12]
 800f6e2:	e003      	b.n	800f6ec <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800f6e4:	68bb      	ldr	r3, [r7, #8]
 800f6e6:	681a      	ldr	r2, [r3, #0]
 800f6e8:	69fb      	ldr	r3, [r7, #28]
 800f6ea:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800f6ec:	69fb      	ldr	r3, [r7, #28]
 800f6ee:	2200      	movs	r2, #0
 800f6f0:	729a      	strb	r2, [r3, #10]
 800f6f2:	2200      	movs	r2, #0
 800f6f4:	72da      	strb	r2, [r3, #11]
 800f6f6:	e00f      	b.n	800f718 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	895b      	ldrh	r3, [r3, #10]
 800f6fc:	2b13      	cmp	r3, #19
 800f6fe:	d802      	bhi.n	800f706 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800f700:	f06f 0301 	mvn.w	r3, #1
 800f704:	e020      	b.n	800f748 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	685b      	ldr	r3, [r3, #4]
 800f70a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800f70c:	69fb      	ldr	r3, [r7, #28]
 800f70e:	691b      	ldr	r3, [r3, #16]
 800f710:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800f712:	f107 0314 	add.w	r3, r7, #20
 800f716:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800f718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f71a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d00c      	beq.n	800f73a <ip4_output_if_src+0x12e>
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	891a      	ldrh	r2, [r3, #8]
 800f724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f726:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f728:	429a      	cmp	r2, r3
 800f72a:	d906      	bls.n	800f73a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800f72c:	687a      	ldr	r2, [r7, #4]
 800f72e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f730:	68f8      	ldr	r0, [r7, #12]
 800f732:	f000 fd53 	bl	80101dc <ip4_frag>
 800f736:	4603      	mov	r3, r0
 800f738:	e006      	b.n	800f748 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800f73a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f73c:	695b      	ldr	r3, [r3, #20]
 800f73e:	687a      	ldr	r2, [r7, #4]
 800f740:	68f9      	ldr	r1, [r7, #12]
 800f742:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f744:	4798      	blx	r3
 800f746:	4603      	mov	r3, r0
}
 800f748:	4618      	mov	r0, r3
 800f74a:	3720      	adds	r7, #32
 800f74c:	46bd      	mov	sp, r7
 800f74e:	bd80      	pop	{r7, pc}
 800f750:	08013d08 	.word	0x08013d08
 800f754:	08013d3c 	.word	0x08013d3c
 800f758:	08013d48 	.word	0x08013d48
 800f75c:	08013d70 	.word	0x08013d70
 800f760:	200089f6 	.word	0x200089f6
 800f764:	08014150 	.word	0x08014150

0800f768 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800f768:	b480      	push	{r7}
 800f76a:	b085      	sub	sp, #20
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	6078      	str	r0, [r7, #4]
 800f770:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f77c:	d002      	beq.n	800f784 <ip4_addr_isbroadcast_u32+0x1c>
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	2b00      	cmp	r3, #0
 800f782:	d101      	bne.n	800f788 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800f784:	2301      	movs	r3, #1
 800f786:	e02a      	b.n	800f7de <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800f788:	683b      	ldr	r3, [r7, #0]
 800f78a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f78e:	f003 0302 	and.w	r3, r3, #2
 800f792:	2b00      	cmp	r3, #0
 800f794:	d101      	bne.n	800f79a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800f796:	2300      	movs	r3, #0
 800f798:	e021      	b.n	800f7de <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800f79a:	683b      	ldr	r3, [r7, #0]
 800f79c:	3304      	adds	r3, #4
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	687a      	ldr	r2, [r7, #4]
 800f7a2:	429a      	cmp	r2, r3
 800f7a4:	d101      	bne.n	800f7aa <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800f7a6:	2300      	movs	r3, #0
 800f7a8:	e019      	b.n	800f7de <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800f7aa:	68fa      	ldr	r2, [r7, #12]
 800f7ac:	683b      	ldr	r3, [r7, #0]
 800f7ae:	3304      	adds	r3, #4
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	405a      	eors	r2, r3
 800f7b4:	683b      	ldr	r3, [r7, #0]
 800f7b6:	3308      	adds	r3, #8
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	4013      	ands	r3, r2
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d10d      	bne.n	800f7dc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800f7c0:	683b      	ldr	r3, [r7, #0]
 800f7c2:	3308      	adds	r3, #8
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	43da      	mvns	r2, r3
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800f7cc:	683b      	ldr	r3, [r7, #0]
 800f7ce:	3308      	adds	r3, #8
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800f7d4:	429a      	cmp	r2, r3
 800f7d6:	d101      	bne.n	800f7dc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800f7d8:	2301      	movs	r3, #1
 800f7da:	e000      	b.n	800f7de <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800f7dc:	2300      	movs	r3, #0
  }
}
 800f7de:	4618      	mov	r0, r3
 800f7e0:	3714      	adds	r7, #20
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e8:	4770      	bx	lr
	...

0800f7ec <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800f7ec:	b580      	push	{r7, lr}
 800f7ee:	b084      	sub	sp, #16
 800f7f0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800f7f2:	2300      	movs	r3, #0
 800f7f4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800f7f6:	4b12      	ldr	r3, [pc, #72]	; (800f840 <ip_reass_tmr+0x54>)
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800f7fc:	e018      	b.n	800f830 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	7fdb      	ldrb	r3, [r3, #31]
 800f802:	2b00      	cmp	r3, #0
 800f804:	d00b      	beq.n	800f81e <ip_reass_tmr+0x32>
      r->timer--;
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	7fdb      	ldrb	r3, [r3, #31]
 800f80a:	3b01      	subs	r3, #1
 800f80c:	b2da      	uxtb	r2, r3
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	60fb      	str	r3, [r7, #12]
 800f81c:	e008      	b.n	800f830 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800f828:	68b9      	ldr	r1, [r7, #8]
 800f82a:	6878      	ldr	r0, [r7, #4]
 800f82c:	f000 f80a 	bl	800f844 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d1e3      	bne.n	800f7fe <ip_reass_tmr+0x12>
    }
  }
}
 800f836:	bf00      	nop
 800f838:	bf00      	nop
 800f83a:	3710      	adds	r7, #16
 800f83c:	46bd      	mov	sp, r7
 800f83e:	bd80      	pop	{r7, pc}
 800f840:	200089f8 	.word	0x200089f8

0800f844 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f844:	b580      	push	{r7, lr}
 800f846:	b088      	sub	sp, #32
 800f848:	af00      	add	r7, sp, #0
 800f84a:	6078      	str	r0, [r7, #4]
 800f84c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800f84e:	2300      	movs	r3, #0
 800f850:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800f852:	683a      	ldr	r2, [r7, #0]
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	429a      	cmp	r2, r3
 800f858:	d105      	bne.n	800f866 <ip_reass_free_complete_datagram+0x22>
 800f85a:	4b45      	ldr	r3, [pc, #276]	; (800f970 <ip_reass_free_complete_datagram+0x12c>)
 800f85c:	22ab      	movs	r2, #171	; 0xab
 800f85e:	4945      	ldr	r1, [pc, #276]	; (800f974 <ip_reass_free_complete_datagram+0x130>)
 800f860:	4845      	ldr	r0, [pc, #276]	; (800f978 <ip_reass_free_complete_datagram+0x134>)
 800f862:	f000 ffd7 	bl	8010814 <iprintf>
  if (prev != NULL) {
 800f866:	683b      	ldr	r3, [r7, #0]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d00a      	beq.n	800f882 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800f86c:	683b      	ldr	r3, [r7, #0]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	687a      	ldr	r2, [r7, #4]
 800f872:	429a      	cmp	r2, r3
 800f874:	d005      	beq.n	800f882 <ip_reass_free_complete_datagram+0x3e>
 800f876:	4b3e      	ldr	r3, [pc, #248]	; (800f970 <ip_reass_free_complete_datagram+0x12c>)
 800f878:	22ad      	movs	r2, #173	; 0xad
 800f87a:	4940      	ldr	r1, [pc, #256]	; (800f97c <ip_reass_free_complete_datagram+0x138>)
 800f87c:	483e      	ldr	r0, [pc, #248]	; (800f978 <ip_reass_free_complete_datagram+0x134>)
 800f87e:	f000 ffc9 	bl	8010814 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	685b      	ldr	r3, [r3, #4]
 800f886:	685b      	ldr	r3, [r3, #4]
 800f888:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800f88a:	697b      	ldr	r3, [r7, #20]
 800f88c:	889b      	ldrh	r3, [r3, #4]
 800f88e:	b29b      	uxth	r3, r3
 800f890:	2b00      	cmp	r3, #0
 800f892:	d12a      	bne.n	800f8ea <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	685b      	ldr	r3, [r3, #4]
 800f898:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800f89a:	697b      	ldr	r3, [r7, #20]
 800f89c:	681a      	ldr	r2, [r3, #0]
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800f8a2:	69bb      	ldr	r3, [r7, #24]
 800f8a4:	6858      	ldr	r0, [r3, #4]
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	3308      	adds	r3, #8
 800f8aa:	2214      	movs	r2, #20
 800f8ac:	4619      	mov	r1, r3
 800f8ae:	f001 f89e 	bl	80109ee <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800f8b2:	2101      	movs	r1, #1
 800f8b4:	69b8      	ldr	r0, [r7, #24]
 800f8b6:	f7ff fc47 	bl	800f148 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800f8ba:	69b8      	ldr	r0, [r7, #24]
 800f8bc:	f7f8 f94a 	bl	8007b54 <pbuf_clen>
 800f8c0:	4603      	mov	r3, r0
 800f8c2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f8c4:	8bfa      	ldrh	r2, [r7, #30]
 800f8c6:	8a7b      	ldrh	r3, [r7, #18]
 800f8c8:	4413      	add	r3, r2
 800f8ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f8ce:	db05      	blt.n	800f8dc <ip_reass_free_complete_datagram+0x98>
 800f8d0:	4b27      	ldr	r3, [pc, #156]	; (800f970 <ip_reass_free_complete_datagram+0x12c>)
 800f8d2:	22bc      	movs	r2, #188	; 0xbc
 800f8d4:	492a      	ldr	r1, [pc, #168]	; (800f980 <ip_reass_free_complete_datagram+0x13c>)
 800f8d6:	4828      	ldr	r0, [pc, #160]	; (800f978 <ip_reass_free_complete_datagram+0x134>)
 800f8d8:	f000 ff9c 	bl	8010814 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800f8dc:	8bfa      	ldrh	r2, [r7, #30]
 800f8de:	8a7b      	ldrh	r3, [r7, #18]
 800f8e0:	4413      	add	r3, r2
 800f8e2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800f8e4:	69b8      	ldr	r0, [r7, #24]
 800f8e6:	f7f8 f8ad 	bl	8007a44 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	685b      	ldr	r3, [r3, #4]
 800f8ee:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800f8f0:	e01f      	b.n	800f932 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800f8f2:	69bb      	ldr	r3, [r7, #24]
 800f8f4:	685b      	ldr	r3, [r3, #4]
 800f8f6:	617b      	str	r3, [r7, #20]
    pcur = p;
 800f8f8:	69bb      	ldr	r3, [r7, #24]
 800f8fa:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800f8fc:	697b      	ldr	r3, [r7, #20]
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800f902:	68f8      	ldr	r0, [r7, #12]
 800f904:	f7f8 f926 	bl	8007b54 <pbuf_clen>
 800f908:	4603      	mov	r3, r0
 800f90a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f90c:	8bfa      	ldrh	r2, [r7, #30]
 800f90e:	8a7b      	ldrh	r3, [r7, #18]
 800f910:	4413      	add	r3, r2
 800f912:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f916:	db05      	blt.n	800f924 <ip_reass_free_complete_datagram+0xe0>
 800f918:	4b15      	ldr	r3, [pc, #84]	; (800f970 <ip_reass_free_complete_datagram+0x12c>)
 800f91a:	22cc      	movs	r2, #204	; 0xcc
 800f91c:	4918      	ldr	r1, [pc, #96]	; (800f980 <ip_reass_free_complete_datagram+0x13c>)
 800f91e:	4816      	ldr	r0, [pc, #88]	; (800f978 <ip_reass_free_complete_datagram+0x134>)
 800f920:	f000 ff78 	bl	8010814 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800f924:	8bfa      	ldrh	r2, [r7, #30]
 800f926:	8a7b      	ldrh	r3, [r7, #18]
 800f928:	4413      	add	r3, r2
 800f92a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800f92c:	68f8      	ldr	r0, [r7, #12]
 800f92e:	f7f8 f889 	bl	8007a44 <pbuf_free>
  while (p != NULL) {
 800f932:	69bb      	ldr	r3, [r7, #24]
 800f934:	2b00      	cmp	r3, #0
 800f936:	d1dc      	bne.n	800f8f2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800f938:	6839      	ldr	r1, [r7, #0]
 800f93a:	6878      	ldr	r0, [r7, #4]
 800f93c:	f000 f8c2 	bl	800fac4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800f940:	4b10      	ldr	r3, [pc, #64]	; (800f984 <ip_reass_free_complete_datagram+0x140>)
 800f942:	881b      	ldrh	r3, [r3, #0]
 800f944:	8bfa      	ldrh	r2, [r7, #30]
 800f946:	429a      	cmp	r2, r3
 800f948:	d905      	bls.n	800f956 <ip_reass_free_complete_datagram+0x112>
 800f94a:	4b09      	ldr	r3, [pc, #36]	; (800f970 <ip_reass_free_complete_datagram+0x12c>)
 800f94c:	22d2      	movs	r2, #210	; 0xd2
 800f94e:	490e      	ldr	r1, [pc, #56]	; (800f988 <ip_reass_free_complete_datagram+0x144>)
 800f950:	4809      	ldr	r0, [pc, #36]	; (800f978 <ip_reass_free_complete_datagram+0x134>)
 800f952:	f000 ff5f 	bl	8010814 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800f956:	4b0b      	ldr	r3, [pc, #44]	; (800f984 <ip_reass_free_complete_datagram+0x140>)
 800f958:	881a      	ldrh	r2, [r3, #0]
 800f95a:	8bfb      	ldrh	r3, [r7, #30]
 800f95c:	1ad3      	subs	r3, r2, r3
 800f95e:	b29a      	uxth	r2, r3
 800f960:	4b08      	ldr	r3, [pc, #32]	; (800f984 <ip_reass_free_complete_datagram+0x140>)
 800f962:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800f964:	8bfb      	ldrh	r3, [r7, #30]
}
 800f966:	4618      	mov	r0, r3
 800f968:	3720      	adds	r7, #32
 800f96a:	46bd      	mov	sp, r7
 800f96c:	bd80      	pop	{r7, pc}
 800f96e:	bf00      	nop
 800f970:	08013da0 	.word	0x08013da0
 800f974:	08013ddc 	.word	0x08013ddc
 800f978:	08013de8 	.word	0x08013de8
 800f97c:	08013e10 	.word	0x08013e10
 800f980:	08013e24 	.word	0x08013e24
 800f984:	200089fc 	.word	0x200089fc
 800f988:	08013e44 	.word	0x08013e44

0800f98c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800f98c:	b580      	push	{r7, lr}
 800f98e:	b08a      	sub	sp, #40	; 0x28
 800f990:	af00      	add	r7, sp, #0
 800f992:	6078      	str	r0, [r7, #4]
 800f994:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800f996:	2300      	movs	r3, #0
 800f998:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800f99a:	2300      	movs	r3, #0
 800f99c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800f99e:	2300      	movs	r3, #0
 800f9a0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800f9a2:	2300      	movs	r3, #0
 800f9a4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800f9a6:	2300      	movs	r3, #0
 800f9a8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800f9aa:	4b28      	ldr	r3, [pc, #160]	; (800fa4c <ip_reass_remove_oldest_datagram+0xc0>)
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800f9b0:	e030      	b.n	800fa14 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800f9b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9b4:	695a      	ldr	r2, [r3, #20]
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	68db      	ldr	r3, [r3, #12]
 800f9ba:	429a      	cmp	r2, r3
 800f9bc:	d10c      	bne.n	800f9d8 <ip_reass_remove_oldest_datagram+0x4c>
 800f9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9c0:	699a      	ldr	r2, [r3, #24]
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	691b      	ldr	r3, [r3, #16]
 800f9c6:	429a      	cmp	r2, r3
 800f9c8:	d106      	bne.n	800f9d8 <ip_reass_remove_oldest_datagram+0x4c>
 800f9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9cc:	899a      	ldrh	r2, [r3, #12]
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	889b      	ldrh	r3, [r3, #4]
 800f9d2:	b29b      	uxth	r3, r3
 800f9d4:	429a      	cmp	r2, r3
 800f9d6:	d014      	beq.n	800fa02 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800f9d8:	693b      	ldr	r3, [r7, #16]
 800f9da:	3301      	adds	r3, #1
 800f9dc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800f9de:	6a3b      	ldr	r3, [r7, #32]
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d104      	bne.n	800f9ee <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800f9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9e6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f9e8:	69fb      	ldr	r3, [r7, #28]
 800f9ea:	61bb      	str	r3, [r7, #24]
 800f9ec:	e009      	b.n	800fa02 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800f9ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9f0:	7fda      	ldrb	r2, [r3, #31]
 800f9f2:	6a3b      	ldr	r3, [r7, #32]
 800f9f4:	7fdb      	ldrb	r3, [r3, #31]
 800f9f6:	429a      	cmp	r2, r3
 800f9f8:	d803      	bhi.n	800fa02 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800f9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9fc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f9fe:	69fb      	ldr	r3, [r7, #28]
 800fa00:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800fa02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d001      	beq.n	800fa0e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800fa0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa0c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800fa0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800fa14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d1cb      	bne.n	800f9b2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800fa1a:	6a3b      	ldr	r3, [r7, #32]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d008      	beq.n	800fa32 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800fa20:	69b9      	ldr	r1, [r7, #24]
 800fa22:	6a38      	ldr	r0, [r7, #32]
 800fa24:	f7ff ff0e 	bl	800f844 <ip_reass_free_complete_datagram>
 800fa28:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800fa2a:	697a      	ldr	r2, [r7, #20]
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	4413      	add	r3, r2
 800fa30:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800fa32:	697a      	ldr	r2, [r7, #20]
 800fa34:	683b      	ldr	r3, [r7, #0]
 800fa36:	429a      	cmp	r2, r3
 800fa38:	da02      	bge.n	800fa40 <ip_reass_remove_oldest_datagram+0xb4>
 800fa3a:	693b      	ldr	r3, [r7, #16]
 800fa3c:	2b01      	cmp	r3, #1
 800fa3e:	dcac      	bgt.n	800f99a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800fa40:	697b      	ldr	r3, [r7, #20]
}
 800fa42:	4618      	mov	r0, r3
 800fa44:	3728      	adds	r7, #40	; 0x28
 800fa46:	46bd      	mov	sp, r7
 800fa48:	bd80      	pop	{r7, pc}
 800fa4a:	bf00      	nop
 800fa4c:	200089f8 	.word	0x200089f8

0800fa50 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800fa50:	b580      	push	{r7, lr}
 800fa52:	b084      	sub	sp, #16
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	6078      	str	r0, [r7, #4]
 800fa58:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800fa5a:	2004      	movs	r0, #4
 800fa5c:	f7f7 f90c 	bl	8006c78 <memp_malloc>
 800fa60:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d110      	bne.n	800fa8a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800fa68:	6839      	ldr	r1, [r7, #0]
 800fa6a:	6878      	ldr	r0, [r7, #4]
 800fa6c:	f7ff ff8e 	bl	800f98c <ip_reass_remove_oldest_datagram>
 800fa70:	4602      	mov	r2, r0
 800fa72:	683b      	ldr	r3, [r7, #0]
 800fa74:	4293      	cmp	r3, r2
 800fa76:	dc03      	bgt.n	800fa80 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800fa78:	2004      	movs	r0, #4
 800fa7a:	f7f7 f8fd 	bl	8006c78 <memp_malloc>
 800fa7e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d101      	bne.n	800fa8a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800fa86:	2300      	movs	r3, #0
 800fa88:	e016      	b.n	800fab8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800fa8a:	2220      	movs	r2, #32
 800fa8c:	2100      	movs	r1, #0
 800fa8e:	68f8      	ldr	r0, [r7, #12]
 800fa90:	f000 ff25 	bl	80108de <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	220f      	movs	r2, #15
 800fa98:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800fa9a:	4b09      	ldr	r3, [pc, #36]	; (800fac0 <ip_reass_enqueue_new_datagram+0x70>)
 800fa9c:	681a      	ldr	r2, [r3, #0]
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800faa2:	4a07      	ldr	r2, [pc, #28]	; (800fac0 <ip_reass_enqueue_new_datagram+0x70>)
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	3308      	adds	r3, #8
 800faac:	2214      	movs	r2, #20
 800faae:	6879      	ldr	r1, [r7, #4]
 800fab0:	4618      	mov	r0, r3
 800fab2:	f000 ff9c 	bl	80109ee <memcpy>
  return ipr;
 800fab6:	68fb      	ldr	r3, [r7, #12]
}
 800fab8:	4618      	mov	r0, r3
 800faba:	3710      	adds	r7, #16
 800fabc:	46bd      	mov	sp, r7
 800fabe:	bd80      	pop	{r7, pc}
 800fac0:	200089f8 	.word	0x200089f8

0800fac4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800fac4:	b580      	push	{r7, lr}
 800fac6:	b082      	sub	sp, #8
 800fac8:	af00      	add	r7, sp, #0
 800faca:	6078      	str	r0, [r7, #4]
 800facc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800face:	4b10      	ldr	r3, [pc, #64]	; (800fb10 <ip_reass_dequeue_datagram+0x4c>)
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	687a      	ldr	r2, [r7, #4]
 800fad4:	429a      	cmp	r2, r3
 800fad6:	d104      	bne.n	800fae2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	4a0c      	ldr	r2, [pc, #48]	; (800fb10 <ip_reass_dequeue_datagram+0x4c>)
 800fade:	6013      	str	r3, [r2, #0]
 800fae0:	e00d      	b.n	800fafe <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800fae2:	683b      	ldr	r3, [r7, #0]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d106      	bne.n	800faf6 <ip_reass_dequeue_datagram+0x32>
 800fae8:	4b0a      	ldr	r3, [pc, #40]	; (800fb14 <ip_reass_dequeue_datagram+0x50>)
 800faea:	f240 1245 	movw	r2, #325	; 0x145
 800faee:	490a      	ldr	r1, [pc, #40]	; (800fb18 <ip_reass_dequeue_datagram+0x54>)
 800faf0:	480a      	ldr	r0, [pc, #40]	; (800fb1c <ip_reass_dequeue_datagram+0x58>)
 800faf2:	f000 fe8f 	bl	8010814 <iprintf>
    prev->next = ipr->next;
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	681a      	ldr	r2, [r3, #0]
 800fafa:	683b      	ldr	r3, [r7, #0]
 800fafc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800fafe:	6879      	ldr	r1, [r7, #4]
 800fb00:	2004      	movs	r0, #4
 800fb02:	f7f7 f929 	bl	8006d58 <memp_free>
}
 800fb06:	bf00      	nop
 800fb08:	3708      	adds	r7, #8
 800fb0a:	46bd      	mov	sp, r7
 800fb0c:	bd80      	pop	{r7, pc}
 800fb0e:	bf00      	nop
 800fb10:	200089f8 	.word	0x200089f8
 800fb14:	08013da0 	.word	0x08013da0
 800fb18:	08013e68 	.word	0x08013e68
 800fb1c:	08013de8 	.word	0x08013de8

0800fb20 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800fb20:	b580      	push	{r7, lr}
 800fb22:	b08c      	sub	sp, #48	; 0x30
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	60f8      	str	r0, [r7, #12]
 800fb28:	60b9      	str	r1, [r7, #8]
 800fb2a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800fb2c:	2300      	movs	r3, #0
 800fb2e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800fb30:	2301      	movs	r3, #1
 800fb32:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800fb34:	68bb      	ldr	r3, [r7, #8]
 800fb36:	685b      	ldr	r3, [r3, #4]
 800fb38:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800fb3a:	69fb      	ldr	r3, [r7, #28]
 800fb3c:	885b      	ldrh	r3, [r3, #2]
 800fb3e:	b29b      	uxth	r3, r3
 800fb40:	4618      	mov	r0, r3
 800fb42:	f7f6 fc21 	bl	8006388 <lwip_htons>
 800fb46:	4603      	mov	r3, r0
 800fb48:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800fb4a:	69fb      	ldr	r3, [r7, #28]
 800fb4c:	781b      	ldrb	r3, [r3, #0]
 800fb4e:	f003 030f 	and.w	r3, r3, #15
 800fb52:	b2db      	uxtb	r3, r3
 800fb54:	009b      	lsls	r3, r3, #2
 800fb56:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800fb58:	7e7b      	ldrb	r3, [r7, #25]
 800fb5a:	b29b      	uxth	r3, r3
 800fb5c:	8b7a      	ldrh	r2, [r7, #26]
 800fb5e:	429a      	cmp	r2, r3
 800fb60:	d202      	bcs.n	800fb68 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fb62:	f04f 33ff 	mov.w	r3, #4294967295
 800fb66:	e135      	b.n	800fdd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800fb68:	7e7b      	ldrb	r3, [r7, #25]
 800fb6a:	b29b      	uxth	r3, r3
 800fb6c:	8b7a      	ldrh	r2, [r7, #26]
 800fb6e:	1ad3      	subs	r3, r2, r3
 800fb70:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800fb72:	69fb      	ldr	r3, [r7, #28]
 800fb74:	88db      	ldrh	r3, [r3, #6]
 800fb76:	b29b      	uxth	r3, r3
 800fb78:	4618      	mov	r0, r3
 800fb7a:	f7f6 fc05 	bl	8006388 <lwip_htons>
 800fb7e:	4603      	mov	r3, r0
 800fb80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fb84:	b29b      	uxth	r3, r3
 800fb86:	00db      	lsls	r3, r3, #3
 800fb88:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800fb8a:	68bb      	ldr	r3, [r7, #8]
 800fb8c:	685b      	ldr	r3, [r3, #4]
 800fb8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800fb90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb92:	2200      	movs	r2, #0
 800fb94:	701a      	strb	r2, [r3, #0]
 800fb96:	2200      	movs	r2, #0
 800fb98:	705a      	strb	r2, [r3, #1]
 800fb9a:	2200      	movs	r2, #0
 800fb9c:	709a      	strb	r2, [r3, #2]
 800fb9e:	2200      	movs	r2, #0
 800fba0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800fba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fba4:	8afa      	ldrh	r2, [r7, #22]
 800fba6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800fba8:	8afa      	ldrh	r2, [r7, #22]
 800fbaa:	8b7b      	ldrh	r3, [r7, #26]
 800fbac:	4413      	add	r3, r2
 800fbae:	b29a      	uxth	r2, r3
 800fbb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbb2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800fbb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbb6:	88db      	ldrh	r3, [r3, #6]
 800fbb8:	b29b      	uxth	r3, r3
 800fbba:	8afa      	ldrh	r2, [r7, #22]
 800fbbc:	429a      	cmp	r2, r3
 800fbbe:	d902      	bls.n	800fbc6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fbc0:	f04f 33ff 	mov.w	r3, #4294967295
 800fbc4:	e106      	b.n	800fdd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	685b      	ldr	r3, [r3, #4]
 800fbca:	627b      	str	r3, [r7, #36]	; 0x24
 800fbcc:	e068      	b.n	800fca0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800fbce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbd0:	685b      	ldr	r3, [r3, #4]
 800fbd2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800fbd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbd6:	889b      	ldrh	r3, [r3, #4]
 800fbd8:	b29a      	uxth	r2, r3
 800fbda:	693b      	ldr	r3, [r7, #16]
 800fbdc:	889b      	ldrh	r3, [r3, #4]
 800fbde:	b29b      	uxth	r3, r3
 800fbe0:	429a      	cmp	r2, r3
 800fbe2:	d235      	bcs.n	800fc50 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800fbe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fbe8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800fbea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d020      	beq.n	800fc32 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800fbf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbf2:	889b      	ldrh	r3, [r3, #4]
 800fbf4:	b29a      	uxth	r2, r3
 800fbf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbf8:	88db      	ldrh	r3, [r3, #6]
 800fbfa:	b29b      	uxth	r3, r3
 800fbfc:	429a      	cmp	r2, r3
 800fbfe:	d307      	bcc.n	800fc10 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800fc00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc02:	88db      	ldrh	r3, [r3, #6]
 800fc04:	b29a      	uxth	r2, r3
 800fc06:	693b      	ldr	r3, [r7, #16]
 800fc08:	889b      	ldrh	r3, [r3, #4]
 800fc0a:	b29b      	uxth	r3, r3
 800fc0c:	429a      	cmp	r2, r3
 800fc0e:	d902      	bls.n	800fc16 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fc10:	f04f 33ff 	mov.w	r3, #4294967295
 800fc14:	e0de      	b.n	800fdd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800fc16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc18:	68ba      	ldr	r2, [r7, #8]
 800fc1a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800fc1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc1e:	88db      	ldrh	r3, [r3, #6]
 800fc20:	b29a      	uxth	r2, r3
 800fc22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc24:	889b      	ldrh	r3, [r3, #4]
 800fc26:	b29b      	uxth	r3, r3
 800fc28:	429a      	cmp	r2, r3
 800fc2a:	d03d      	beq.n	800fca8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800fc2c:	2300      	movs	r3, #0
 800fc2e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800fc30:	e03a      	b.n	800fca8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800fc32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc34:	88db      	ldrh	r3, [r3, #6]
 800fc36:	b29a      	uxth	r2, r3
 800fc38:	693b      	ldr	r3, [r7, #16]
 800fc3a:	889b      	ldrh	r3, [r3, #4]
 800fc3c:	b29b      	uxth	r3, r3
 800fc3e:	429a      	cmp	r2, r3
 800fc40:	d902      	bls.n	800fc48 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fc42:	f04f 33ff 	mov.w	r3, #4294967295
 800fc46:	e0c5      	b.n	800fdd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	68ba      	ldr	r2, [r7, #8]
 800fc4c:	605a      	str	r2, [r3, #4]
      break;
 800fc4e:	e02b      	b.n	800fca8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800fc50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc52:	889b      	ldrh	r3, [r3, #4]
 800fc54:	b29a      	uxth	r2, r3
 800fc56:	693b      	ldr	r3, [r7, #16]
 800fc58:	889b      	ldrh	r3, [r3, #4]
 800fc5a:	b29b      	uxth	r3, r3
 800fc5c:	429a      	cmp	r2, r3
 800fc5e:	d102      	bne.n	800fc66 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fc60:	f04f 33ff 	mov.w	r3, #4294967295
 800fc64:	e0b6      	b.n	800fdd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800fc66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc68:	889b      	ldrh	r3, [r3, #4]
 800fc6a:	b29a      	uxth	r2, r3
 800fc6c:	693b      	ldr	r3, [r7, #16]
 800fc6e:	88db      	ldrh	r3, [r3, #6]
 800fc70:	b29b      	uxth	r3, r3
 800fc72:	429a      	cmp	r2, r3
 800fc74:	d202      	bcs.n	800fc7c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fc76:	f04f 33ff 	mov.w	r3, #4294967295
 800fc7a:	e0ab      	b.n	800fdd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800fc7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d009      	beq.n	800fc96 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800fc82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc84:	88db      	ldrh	r3, [r3, #6]
 800fc86:	b29a      	uxth	r2, r3
 800fc88:	693b      	ldr	r3, [r7, #16]
 800fc8a:	889b      	ldrh	r3, [r3, #4]
 800fc8c:	b29b      	uxth	r3, r3
 800fc8e:	429a      	cmp	r2, r3
 800fc90:	d001      	beq.n	800fc96 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800fc92:	2300      	movs	r3, #0
 800fc94:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800fc96:	693b      	ldr	r3, [r7, #16]
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800fc9c:	693b      	ldr	r3, [r7, #16]
 800fc9e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800fca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d193      	bne.n	800fbce <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800fca6:	e000      	b.n	800fcaa <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800fca8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800fcaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d12d      	bne.n	800fd0c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800fcb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d01c      	beq.n	800fcf0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800fcb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcb8:	88db      	ldrh	r3, [r3, #6]
 800fcba:	b29a      	uxth	r2, r3
 800fcbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcbe:	889b      	ldrh	r3, [r3, #4]
 800fcc0:	b29b      	uxth	r3, r3
 800fcc2:	429a      	cmp	r2, r3
 800fcc4:	d906      	bls.n	800fcd4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800fcc6:	4b45      	ldr	r3, [pc, #276]	; (800fddc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fcc8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800fccc:	4944      	ldr	r1, [pc, #272]	; (800fde0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800fcce:	4845      	ldr	r0, [pc, #276]	; (800fde4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fcd0:	f000 fda0 	bl	8010814 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800fcd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcd6:	68ba      	ldr	r2, [r7, #8]
 800fcd8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800fcda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcdc:	88db      	ldrh	r3, [r3, #6]
 800fcde:	b29a      	uxth	r2, r3
 800fce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fce2:	889b      	ldrh	r3, [r3, #4]
 800fce4:	b29b      	uxth	r3, r3
 800fce6:	429a      	cmp	r2, r3
 800fce8:	d010      	beq.n	800fd0c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800fcea:	2300      	movs	r3, #0
 800fcec:	623b      	str	r3, [r7, #32]
 800fcee:	e00d      	b.n	800fd0c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	685b      	ldr	r3, [r3, #4]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d006      	beq.n	800fd06 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800fcf8:	4b38      	ldr	r3, [pc, #224]	; (800fddc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fcfa:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800fcfe:	493a      	ldr	r1, [pc, #232]	; (800fde8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800fd00:	4838      	ldr	r0, [pc, #224]	; (800fde4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fd02:	f000 fd87 	bl	8010814 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	68ba      	ldr	r2, [r7, #8]
 800fd0a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d105      	bne.n	800fd1e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	7f9b      	ldrb	r3, [r3, #30]
 800fd16:	f003 0301 	and.w	r3, r3, #1
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d059      	beq.n	800fdd2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800fd1e:	6a3b      	ldr	r3, [r7, #32]
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d04f      	beq.n	800fdc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	685b      	ldr	r3, [r3, #4]
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d006      	beq.n	800fd3a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	685b      	ldr	r3, [r3, #4]
 800fd30:	685b      	ldr	r3, [r3, #4]
 800fd32:	889b      	ldrh	r3, [r3, #4]
 800fd34:	b29b      	uxth	r3, r3
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d002      	beq.n	800fd40 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800fd3a:	2300      	movs	r3, #0
 800fd3c:	623b      	str	r3, [r7, #32]
 800fd3e:	e041      	b.n	800fdc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800fd40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd42:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800fd44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800fd4a:	e012      	b.n	800fd72 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800fd4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd4e:	685b      	ldr	r3, [r3, #4]
 800fd50:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800fd52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd54:	88db      	ldrh	r3, [r3, #6]
 800fd56:	b29a      	uxth	r2, r3
 800fd58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd5a:	889b      	ldrh	r3, [r3, #4]
 800fd5c:	b29b      	uxth	r3, r3
 800fd5e:	429a      	cmp	r2, r3
 800fd60:	d002      	beq.n	800fd68 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800fd62:	2300      	movs	r3, #0
 800fd64:	623b      	str	r3, [r7, #32]
            break;
 800fd66:	e007      	b.n	800fd78 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800fd68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd6a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800fd6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800fd72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d1e9      	bne.n	800fd4c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800fd78:	6a3b      	ldr	r3, [r7, #32]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d022      	beq.n	800fdc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	685b      	ldr	r3, [r3, #4]
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d106      	bne.n	800fd94 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800fd86:	4b15      	ldr	r3, [pc, #84]	; (800fddc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fd88:	f240 12df 	movw	r2, #479	; 0x1df
 800fd8c:	4917      	ldr	r1, [pc, #92]	; (800fdec <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800fd8e:	4815      	ldr	r0, [pc, #84]	; (800fde4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fd90:	f000 fd40 	bl	8010814 <iprintf>
          LWIP_ASSERT("sanity check",
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	685b      	ldr	r3, [r3, #4]
 800fd98:	685b      	ldr	r3, [r3, #4]
 800fd9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd9c:	429a      	cmp	r2, r3
 800fd9e:	d106      	bne.n	800fdae <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800fda0:	4b0e      	ldr	r3, [pc, #56]	; (800fddc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fda2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800fda6:	4911      	ldr	r1, [pc, #68]	; (800fdec <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800fda8:	480e      	ldr	r0, [pc, #56]	; (800fde4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fdaa:	f000 fd33 	bl	8010814 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800fdae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d006      	beq.n	800fdc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800fdb6:	4b09      	ldr	r3, [pc, #36]	; (800fddc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fdb8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800fdbc:	490c      	ldr	r1, [pc, #48]	; (800fdf0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800fdbe:	4809      	ldr	r0, [pc, #36]	; (800fde4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fdc0:	f000 fd28 	bl	8010814 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800fdc4:	6a3b      	ldr	r3, [r7, #32]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	bf14      	ite	ne
 800fdca:	2301      	movne	r3, #1
 800fdcc:	2300      	moveq	r3, #0
 800fdce:	b2db      	uxtb	r3, r3
 800fdd0:	e000      	b.n	800fdd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800fdd2:	2300      	movs	r3, #0
}
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	3730      	adds	r7, #48	; 0x30
 800fdd8:	46bd      	mov	sp, r7
 800fdda:	bd80      	pop	{r7, pc}
 800fddc:	08013da0 	.word	0x08013da0
 800fde0:	08013e84 	.word	0x08013e84
 800fde4:	08013de8 	.word	0x08013de8
 800fde8:	08013ea4 	.word	0x08013ea4
 800fdec:	08013edc 	.word	0x08013edc
 800fdf0:	08013eec 	.word	0x08013eec

0800fdf4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800fdf4:	b580      	push	{r7, lr}
 800fdf6:	b08e      	sub	sp, #56	; 0x38
 800fdf8:	af00      	add	r7, sp, #0
 800fdfa:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	685b      	ldr	r3, [r3, #4]
 800fe00:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800fe02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe04:	781b      	ldrb	r3, [r3, #0]
 800fe06:	f003 030f 	and.w	r3, r3, #15
 800fe0a:	b2db      	uxtb	r3, r3
 800fe0c:	009b      	lsls	r3, r3, #2
 800fe0e:	b2db      	uxtb	r3, r3
 800fe10:	2b14      	cmp	r3, #20
 800fe12:	f040 8171 	bne.w	80100f8 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800fe16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe18:	88db      	ldrh	r3, [r3, #6]
 800fe1a:	b29b      	uxth	r3, r3
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	f7f6 fab3 	bl	8006388 <lwip_htons>
 800fe22:	4603      	mov	r3, r0
 800fe24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fe28:	b29b      	uxth	r3, r3
 800fe2a:	00db      	lsls	r3, r3, #3
 800fe2c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800fe2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe30:	885b      	ldrh	r3, [r3, #2]
 800fe32:	b29b      	uxth	r3, r3
 800fe34:	4618      	mov	r0, r3
 800fe36:	f7f6 faa7 	bl	8006388 <lwip_htons>
 800fe3a:	4603      	mov	r3, r0
 800fe3c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800fe3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe40:	781b      	ldrb	r3, [r3, #0]
 800fe42:	f003 030f 	and.w	r3, r3, #15
 800fe46:	b2db      	uxtb	r3, r3
 800fe48:	009b      	lsls	r3, r3, #2
 800fe4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800fe4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fe52:	b29b      	uxth	r3, r3
 800fe54:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fe56:	429a      	cmp	r2, r3
 800fe58:	f0c0 8150 	bcc.w	80100fc <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800fe5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fe60:	b29b      	uxth	r3, r3
 800fe62:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fe64:	1ad3      	subs	r3, r2, r3
 800fe66:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800fe68:	6878      	ldr	r0, [r7, #4]
 800fe6a:	f7f7 fe73 	bl	8007b54 <pbuf_clen>
 800fe6e:	4603      	mov	r3, r0
 800fe70:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800fe72:	4b8c      	ldr	r3, [pc, #560]	; (80100a4 <ip4_reass+0x2b0>)
 800fe74:	881b      	ldrh	r3, [r3, #0]
 800fe76:	461a      	mov	r2, r3
 800fe78:	8c3b      	ldrh	r3, [r7, #32]
 800fe7a:	4413      	add	r3, r2
 800fe7c:	2b0a      	cmp	r3, #10
 800fe7e:	dd10      	ble.n	800fea2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800fe80:	8c3b      	ldrh	r3, [r7, #32]
 800fe82:	4619      	mov	r1, r3
 800fe84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fe86:	f7ff fd81 	bl	800f98c <ip_reass_remove_oldest_datagram>
 800fe8a:	4603      	mov	r3, r0
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	f000 8137 	beq.w	8010100 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800fe92:	4b84      	ldr	r3, [pc, #528]	; (80100a4 <ip4_reass+0x2b0>)
 800fe94:	881b      	ldrh	r3, [r3, #0]
 800fe96:	461a      	mov	r2, r3
 800fe98:	8c3b      	ldrh	r3, [r7, #32]
 800fe9a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800fe9c:	2b0a      	cmp	r3, #10
 800fe9e:	f300 812f 	bgt.w	8010100 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800fea2:	4b81      	ldr	r3, [pc, #516]	; (80100a8 <ip4_reass+0x2b4>)
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	633b      	str	r3, [r7, #48]	; 0x30
 800fea8:	e015      	b.n	800fed6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800feaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feac:	695a      	ldr	r2, [r3, #20]
 800feae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feb0:	68db      	ldr	r3, [r3, #12]
 800feb2:	429a      	cmp	r2, r3
 800feb4:	d10c      	bne.n	800fed0 <ip4_reass+0xdc>
 800feb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feb8:	699a      	ldr	r2, [r3, #24]
 800feba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800febc:	691b      	ldr	r3, [r3, #16]
 800febe:	429a      	cmp	r2, r3
 800fec0:	d106      	bne.n	800fed0 <ip4_reass+0xdc>
 800fec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fec4:	899a      	ldrh	r2, [r3, #12]
 800fec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fec8:	889b      	ldrh	r3, [r3, #4]
 800feca:	b29b      	uxth	r3, r3
 800fecc:	429a      	cmp	r2, r3
 800fece:	d006      	beq.n	800fede <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800fed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	633b      	str	r3, [r7, #48]	; 0x30
 800fed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d1e6      	bne.n	800feaa <ip4_reass+0xb6>
 800fedc:	e000      	b.n	800fee0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800fede:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800fee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d109      	bne.n	800fefa <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800fee6:	8c3b      	ldrh	r3, [r7, #32]
 800fee8:	4619      	mov	r1, r3
 800feea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800feec:	f7ff fdb0 	bl	800fa50 <ip_reass_enqueue_new_datagram>
 800fef0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800fef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d11c      	bne.n	800ff32 <ip4_reass+0x13e>
      goto nullreturn;
 800fef8:	e105      	b.n	8010106 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800fefa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fefc:	88db      	ldrh	r3, [r3, #6]
 800fefe:	b29b      	uxth	r3, r3
 800ff00:	4618      	mov	r0, r3
 800ff02:	f7f6 fa41 	bl	8006388 <lwip_htons>
 800ff06:	4603      	mov	r3, r0
 800ff08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d110      	bne.n	800ff32 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800ff10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff12:	89db      	ldrh	r3, [r3, #14]
 800ff14:	4618      	mov	r0, r3
 800ff16:	f7f6 fa37 	bl	8006388 <lwip_htons>
 800ff1a:	4603      	mov	r3, r0
 800ff1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d006      	beq.n	800ff32 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800ff24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff26:	3308      	adds	r3, #8
 800ff28:	2214      	movs	r2, #20
 800ff2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ff2c:	4618      	mov	r0, r3
 800ff2e:	f000 fd5e 	bl	80109ee <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800ff32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff34:	88db      	ldrh	r3, [r3, #6]
 800ff36:	b29b      	uxth	r3, r3
 800ff38:	f003 0320 	and.w	r3, r3, #32
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	bf0c      	ite	eq
 800ff40:	2301      	moveq	r3, #1
 800ff42:	2300      	movne	r3, #0
 800ff44:	b2db      	uxtb	r3, r3
 800ff46:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800ff48:	69fb      	ldr	r3, [r7, #28]
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d00e      	beq.n	800ff6c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800ff4e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ff50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ff52:	4413      	add	r3, r2
 800ff54:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800ff56:	8b7a      	ldrh	r2, [r7, #26]
 800ff58:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ff5a:	429a      	cmp	r2, r3
 800ff5c:	f0c0 80a0 	bcc.w	80100a0 <ip4_reass+0x2ac>
 800ff60:	8b7b      	ldrh	r3, [r7, #26]
 800ff62:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800ff66:	4293      	cmp	r3, r2
 800ff68:	f200 809a 	bhi.w	80100a0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800ff6c:	69fa      	ldr	r2, [r7, #28]
 800ff6e:	6879      	ldr	r1, [r7, #4]
 800ff70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ff72:	f7ff fdd5 	bl	800fb20 <ip_reass_chain_frag_into_datagram_and_validate>
 800ff76:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800ff78:	697b      	ldr	r3, [r7, #20]
 800ff7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff7e:	f000 809b 	beq.w	80100b8 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800ff82:	4b48      	ldr	r3, [pc, #288]	; (80100a4 <ip4_reass+0x2b0>)
 800ff84:	881a      	ldrh	r2, [r3, #0]
 800ff86:	8c3b      	ldrh	r3, [r7, #32]
 800ff88:	4413      	add	r3, r2
 800ff8a:	b29a      	uxth	r2, r3
 800ff8c:	4b45      	ldr	r3, [pc, #276]	; (80100a4 <ip4_reass+0x2b0>)
 800ff8e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800ff90:	69fb      	ldr	r3, [r7, #28]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d00d      	beq.n	800ffb2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800ff96:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ff98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ff9a:	4413      	add	r3, r2
 800ff9c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800ff9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffa0:	8a7a      	ldrh	r2, [r7, #18]
 800ffa2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800ffa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffa6:	7f9b      	ldrb	r3, [r3, #30]
 800ffa8:	f043 0301 	orr.w	r3, r3, #1
 800ffac:	b2da      	uxtb	r2, r3
 800ffae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffb0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800ffb2:	697b      	ldr	r3, [r7, #20]
 800ffb4:	2b01      	cmp	r3, #1
 800ffb6:	d171      	bne.n	801009c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800ffb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffba:	8b9b      	ldrh	r3, [r3, #28]
 800ffbc:	3314      	adds	r3, #20
 800ffbe:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800ffc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffc2:	685b      	ldr	r3, [r3, #4]
 800ffc4:	685b      	ldr	r3, [r3, #4]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800ffca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffcc:	685b      	ldr	r3, [r3, #4]
 800ffce:	685b      	ldr	r3, [r3, #4]
 800ffd0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800ffd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffd4:	3308      	adds	r3, #8
 800ffd6:	2214      	movs	r2, #20
 800ffd8:	4619      	mov	r1, r3
 800ffda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ffdc:	f000 fd07 	bl	80109ee <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800ffe0:	8a3b      	ldrh	r3, [r7, #16]
 800ffe2:	4618      	mov	r0, r3
 800ffe4:	f7f6 f9d0 	bl	8006388 <lwip_htons>
 800ffe8:	4603      	mov	r3, r0
 800ffea:	461a      	mov	r2, r3
 800ffec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffee:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800fff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fff2:	2200      	movs	r2, #0
 800fff4:	719a      	strb	r2, [r3, #6]
 800fff6:	2200      	movs	r2, #0
 800fff8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800fffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fffc:	2200      	movs	r2, #0
 800fffe:	729a      	strb	r2, [r3, #10]
 8010000:	2200      	movs	r2, #0
 8010002:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8010004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010006:	685b      	ldr	r3, [r3, #4]
 8010008:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801000a:	e00d      	b.n	8010028 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801000c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801000e:	685b      	ldr	r3, [r3, #4]
 8010010:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8010012:	2114      	movs	r1, #20
 8010014:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010016:	f7f7 fc8f 	bl	8007938 <pbuf_remove_header>
      pbuf_cat(p, r);
 801001a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801001c:	6878      	ldr	r0, [r7, #4]
 801001e:	f7f7 fdd3 	bl	8007bc8 <pbuf_cat>
      r = iprh->next_pbuf;
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8010028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801002a:	2b00      	cmp	r3, #0
 801002c:	d1ee      	bne.n	801000c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801002e:	4b1e      	ldr	r3, [pc, #120]	; (80100a8 <ip4_reass+0x2b4>)
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010034:	429a      	cmp	r2, r3
 8010036:	d102      	bne.n	801003e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8010038:	2300      	movs	r3, #0
 801003a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801003c:	e010      	b.n	8010060 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801003e:	4b1a      	ldr	r3, [pc, #104]	; (80100a8 <ip4_reass+0x2b4>)
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010044:	e007      	b.n	8010056 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8010046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801004c:	429a      	cmp	r2, r3
 801004e:	d006      	beq.n	801005e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010058:	2b00      	cmp	r3, #0
 801005a:	d1f4      	bne.n	8010046 <ip4_reass+0x252>
 801005c:	e000      	b.n	8010060 <ip4_reass+0x26c>
          break;
 801005e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8010060:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010062:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010064:	f7ff fd2e 	bl	800fac4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8010068:	6878      	ldr	r0, [r7, #4]
 801006a:	f7f7 fd73 	bl	8007b54 <pbuf_clen>
 801006e:	4603      	mov	r3, r0
 8010070:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8010072:	4b0c      	ldr	r3, [pc, #48]	; (80100a4 <ip4_reass+0x2b0>)
 8010074:	881b      	ldrh	r3, [r3, #0]
 8010076:	8c3a      	ldrh	r2, [r7, #32]
 8010078:	429a      	cmp	r2, r3
 801007a:	d906      	bls.n	801008a <ip4_reass+0x296>
 801007c:	4b0b      	ldr	r3, [pc, #44]	; (80100ac <ip4_reass+0x2b8>)
 801007e:	f240 229b 	movw	r2, #667	; 0x29b
 8010082:	490b      	ldr	r1, [pc, #44]	; (80100b0 <ip4_reass+0x2bc>)
 8010084:	480b      	ldr	r0, [pc, #44]	; (80100b4 <ip4_reass+0x2c0>)
 8010086:	f000 fbc5 	bl	8010814 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801008a:	4b06      	ldr	r3, [pc, #24]	; (80100a4 <ip4_reass+0x2b0>)
 801008c:	881a      	ldrh	r2, [r3, #0]
 801008e:	8c3b      	ldrh	r3, [r7, #32]
 8010090:	1ad3      	subs	r3, r2, r3
 8010092:	b29a      	uxth	r2, r3
 8010094:	4b03      	ldr	r3, [pc, #12]	; (80100a4 <ip4_reass+0x2b0>)
 8010096:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	e038      	b.n	801010e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801009c:	2300      	movs	r3, #0
 801009e:	e036      	b.n	801010e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80100a0:	bf00      	nop
 80100a2:	e00a      	b.n	80100ba <ip4_reass+0x2c6>
 80100a4:	200089fc 	.word	0x200089fc
 80100a8:	200089f8 	.word	0x200089f8
 80100ac:	08013da0 	.word	0x08013da0
 80100b0:	08013f10 	.word	0x08013f10
 80100b4:	08013de8 	.word	0x08013de8
    goto nullreturn_ipr;
 80100b8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80100ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d106      	bne.n	80100ce <ip4_reass+0x2da>
 80100c0:	4b15      	ldr	r3, [pc, #84]	; (8010118 <ip4_reass+0x324>)
 80100c2:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80100c6:	4915      	ldr	r1, [pc, #84]	; (801011c <ip4_reass+0x328>)
 80100c8:	4815      	ldr	r0, [pc, #84]	; (8010120 <ip4_reass+0x32c>)
 80100ca:	f000 fba3 	bl	8010814 <iprintf>
  if (ipr->p == NULL) {
 80100ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100d0:	685b      	ldr	r3, [r3, #4]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d116      	bne.n	8010104 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80100d6:	4b13      	ldr	r3, [pc, #76]	; (8010124 <ip4_reass+0x330>)
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80100dc:	429a      	cmp	r2, r3
 80100de:	d006      	beq.n	80100ee <ip4_reass+0x2fa>
 80100e0:	4b0d      	ldr	r3, [pc, #52]	; (8010118 <ip4_reass+0x324>)
 80100e2:	f240 22ab 	movw	r2, #683	; 0x2ab
 80100e6:	4910      	ldr	r1, [pc, #64]	; (8010128 <ip4_reass+0x334>)
 80100e8:	480d      	ldr	r0, [pc, #52]	; (8010120 <ip4_reass+0x32c>)
 80100ea:	f000 fb93 	bl	8010814 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80100ee:	2100      	movs	r1, #0
 80100f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80100f2:	f7ff fce7 	bl	800fac4 <ip_reass_dequeue_datagram>
 80100f6:	e006      	b.n	8010106 <ip4_reass+0x312>
    goto nullreturn;
 80100f8:	bf00      	nop
 80100fa:	e004      	b.n	8010106 <ip4_reass+0x312>
    goto nullreturn;
 80100fc:	bf00      	nop
 80100fe:	e002      	b.n	8010106 <ip4_reass+0x312>
      goto nullreturn;
 8010100:	bf00      	nop
 8010102:	e000      	b.n	8010106 <ip4_reass+0x312>
  }

nullreturn:
 8010104:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8010106:	6878      	ldr	r0, [r7, #4]
 8010108:	f7f7 fc9c 	bl	8007a44 <pbuf_free>
  return NULL;
 801010c:	2300      	movs	r3, #0
}
 801010e:	4618      	mov	r0, r3
 8010110:	3738      	adds	r7, #56	; 0x38
 8010112:	46bd      	mov	sp, r7
 8010114:	bd80      	pop	{r7, pc}
 8010116:	bf00      	nop
 8010118:	08013da0 	.word	0x08013da0
 801011c:	08013f2c 	.word	0x08013f2c
 8010120:	08013de8 	.word	0x08013de8
 8010124:	200089f8 	.word	0x200089f8
 8010128:	08013f38 	.word	0x08013f38

0801012c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801012c:	b580      	push	{r7, lr}
 801012e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8010130:	2005      	movs	r0, #5
 8010132:	f7f6 fda1 	bl	8006c78 <memp_malloc>
 8010136:	4603      	mov	r3, r0
}
 8010138:	4618      	mov	r0, r3
 801013a:	bd80      	pop	{r7, pc}

0801013c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801013c:	b580      	push	{r7, lr}
 801013e:	b082      	sub	sp, #8
 8010140:	af00      	add	r7, sp, #0
 8010142:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	2b00      	cmp	r3, #0
 8010148:	d106      	bne.n	8010158 <ip_frag_free_pbuf_custom_ref+0x1c>
 801014a:	4b07      	ldr	r3, [pc, #28]	; (8010168 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801014c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8010150:	4906      	ldr	r1, [pc, #24]	; (801016c <ip_frag_free_pbuf_custom_ref+0x30>)
 8010152:	4807      	ldr	r0, [pc, #28]	; (8010170 <ip_frag_free_pbuf_custom_ref+0x34>)
 8010154:	f000 fb5e 	bl	8010814 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8010158:	6879      	ldr	r1, [r7, #4]
 801015a:	2005      	movs	r0, #5
 801015c:	f7f6 fdfc 	bl	8006d58 <memp_free>
}
 8010160:	bf00      	nop
 8010162:	3708      	adds	r7, #8
 8010164:	46bd      	mov	sp, r7
 8010166:	bd80      	pop	{r7, pc}
 8010168:	08013da0 	.word	0x08013da0
 801016c:	08013f58 	.word	0x08013f58
 8010170:	08013de8 	.word	0x08013de8

08010174 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8010174:	b580      	push	{r7, lr}
 8010176:	b084      	sub	sp, #16
 8010178:	af00      	add	r7, sp, #0
 801017a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	2b00      	cmp	r3, #0
 8010184:	d106      	bne.n	8010194 <ipfrag_free_pbuf_custom+0x20>
 8010186:	4b11      	ldr	r3, [pc, #68]	; (80101cc <ipfrag_free_pbuf_custom+0x58>)
 8010188:	f240 22ce 	movw	r2, #718	; 0x2ce
 801018c:	4910      	ldr	r1, [pc, #64]	; (80101d0 <ipfrag_free_pbuf_custom+0x5c>)
 801018e:	4811      	ldr	r0, [pc, #68]	; (80101d4 <ipfrag_free_pbuf_custom+0x60>)
 8010190:	f000 fb40 	bl	8010814 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8010194:	68fa      	ldr	r2, [r7, #12]
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	429a      	cmp	r2, r3
 801019a:	d006      	beq.n	80101aa <ipfrag_free_pbuf_custom+0x36>
 801019c:	4b0b      	ldr	r3, [pc, #44]	; (80101cc <ipfrag_free_pbuf_custom+0x58>)
 801019e:	f240 22cf 	movw	r2, #719	; 0x2cf
 80101a2:	490d      	ldr	r1, [pc, #52]	; (80101d8 <ipfrag_free_pbuf_custom+0x64>)
 80101a4:	480b      	ldr	r0, [pc, #44]	; (80101d4 <ipfrag_free_pbuf_custom+0x60>)
 80101a6:	f000 fb35 	bl	8010814 <iprintf>
  if (pcr->original != NULL) {
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	695b      	ldr	r3, [r3, #20]
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d004      	beq.n	80101bc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	695b      	ldr	r3, [r3, #20]
 80101b6:	4618      	mov	r0, r3
 80101b8:	f7f7 fc44 	bl	8007a44 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80101bc:	68f8      	ldr	r0, [r7, #12]
 80101be:	f7ff ffbd 	bl	801013c <ip_frag_free_pbuf_custom_ref>
}
 80101c2:	bf00      	nop
 80101c4:	3710      	adds	r7, #16
 80101c6:	46bd      	mov	sp, r7
 80101c8:	bd80      	pop	{r7, pc}
 80101ca:	bf00      	nop
 80101cc:	08013da0 	.word	0x08013da0
 80101d0:	08013f64 	.word	0x08013f64
 80101d4:	08013de8 	.word	0x08013de8
 80101d8:	08013f70 	.word	0x08013f70

080101dc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80101dc:	b580      	push	{r7, lr}
 80101de:	b094      	sub	sp, #80	; 0x50
 80101e0:	af02      	add	r7, sp, #8
 80101e2:	60f8      	str	r0, [r7, #12]
 80101e4:	60b9      	str	r1, [r7, #8]
 80101e6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80101e8:	2300      	movs	r3, #0
 80101ea:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80101ee:	68bb      	ldr	r3, [r7, #8]
 80101f0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80101f2:	3b14      	subs	r3, #20
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	da00      	bge.n	80101fa <ip4_frag+0x1e>
 80101f8:	3307      	adds	r3, #7
 80101fa:	10db      	asrs	r3, r3, #3
 80101fc:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80101fe:	2314      	movs	r3, #20
 8010200:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	685b      	ldr	r3, [r3, #4]
 8010206:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8010208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801020a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801020c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801020e:	781b      	ldrb	r3, [r3, #0]
 8010210:	f003 030f 	and.w	r3, r3, #15
 8010214:	b2db      	uxtb	r3, r3
 8010216:	009b      	lsls	r3, r3, #2
 8010218:	b2db      	uxtb	r3, r3
 801021a:	2b14      	cmp	r3, #20
 801021c:	d002      	beq.n	8010224 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801021e:	f06f 0305 	mvn.w	r3, #5
 8010222:	e110      	b.n	8010446 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	895b      	ldrh	r3, [r3, #10]
 8010228:	2b13      	cmp	r3, #19
 801022a:	d809      	bhi.n	8010240 <ip4_frag+0x64>
 801022c:	4b88      	ldr	r3, [pc, #544]	; (8010450 <ip4_frag+0x274>)
 801022e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8010232:	4988      	ldr	r1, [pc, #544]	; (8010454 <ip4_frag+0x278>)
 8010234:	4888      	ldr	r0, [pc, #544]	; (8010458 <ip4_frag+0x27c>)
 8010236:	f000 faed 	bl	8010814 <iprintf>
 801023a:	f06f 0305 	mvn.w	r3, #5
 801023e:	e102      	b.n	8010446 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8010240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010242:	88db      	ldrh	r3, [r3, #6]
 8010244:	b29b      	uxth	r3, r3
 8010246:	4618      	mov	r0, r3
 8010248:	f7f6 f89e 	bl	8006388 <lwip_htons>
 801024c:	4603      	mov	r3, r0
 801024e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8010250:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010252:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010256:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801025a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801025c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010260:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	891b      	ldrh	r3, [r3, #8]
 8010266:	3b14      	subs	r3, #20
 8010268:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801026c:	e0e1      	b.n	8010432 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801026e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010270:	00db      	lsls	r3, r3, #3
 8010272:	b29b      	uxth	r3, r3
 8010274:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010278:	4293      	cmp	r3, r2
 801027a:	bf28      	it	cs
 801027c:	4613      	movcs	r3, r2
 801027e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8010280:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010284:	2114      	movs	r1, #20
 8010286:	200e      	movs	r0, #14
 8010288:	f7f7 f8f8 	bl	800747c <pbuf_alloc>
 801028c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801028e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010290:	2b00      	cmp	r3, #0
 8010292:	f000 80d5 	beq.w	8010440 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8010296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010298:	895b      	ldrh	r3, [r3, #10]
 801029a:	2b13      	cmp	r3, #19
 801029c:	d806      	bhi.n	80102ac <ip4_frag+0xd0>
 801029e:	4b6c      	ldr	r3, [pc, #432]	; (8010450 <ip4_frag+0x274>)
 80102a0:	f44f 7249 	mov.w	r2, #804	; 0x324
 80102a4:	496d      	ldr	r1, [pc, #436]	; (801045c <ip4_frag+0x280>)
 80102a6:	486c      	ldr	r0, [pc, #432]	; (8010458 <ip4_frag+0x27c>)
 80102a8:	f000 fab4 	bl	8010814 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80102ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102ae:	685b      	ldr	r3, [r3, #4]
 80102b0:	2214      	movs	r2, #20
 80102b2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80102b4:	4618      	mov	r0, r3
 80102b6:	f000 fb9a 	bl	80109ee <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80102ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102bc:	685b      	ldr	r3, [r3, #4]
 80102be:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80102c0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80102c2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80102c6:	e064      	b.n	8010392 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	895a      	ldrh	r2, [r3, #10]
 80102cc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80102ce:	1ad3      	subs	r3, r2, r3
 80102d0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	895b      	ldrh	r3, [r3, #10]
 80102d6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80102d8:	429a      	cmp	r2, r3
 80102da:	d906      	bls.n	80102ea <ip4_frag+0x10e>
 80102dc:	4b5c      	ldr	r3, [pc, #368]	; (8010450 <ip4_frag+0x274>)
 80102de:	f240 322d 	movw	r2, #813	; 0x32d
 80102e2:	495f      	ldr	r1, [pc, #380]	; (8010460 <ip4_frag+0x284>)
 80102e4:	485c      	ldr	r0, [pc, #368]	; (8010458 <ip4_frag+0x27c>)
 80102e6:	f000 fa95 	bl	8010814 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80102ea:	8bfa      	ldrh	r2, [r7, #30]
 80102ec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80102f0:	4293      	cmp	r3, r2
 80102f2:	bf28      	it	cs
 80102f4:	4613      	movcs	r3, r2
 80102f6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80102fa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d105      	bne.n	801030e <ip4_frag+0x132>
        poff = 0;
 8010302:	2300      	movs	r3, #0
 8010304:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	60fb      	str	r3, [r7, #12]
        continue;
 801030c:	e041      	b.n	8010392 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801030e:	f7ff ff0d 	bl	801012c <ip_frag_alloc_pbuf_custom_ref>
 8010312:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8010314:	69bb      	ldr	r3, [r7, #24]
 8010316:	2b00      	cmp	r3, #0
 8010318:	d103      	bne.n	8010322 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801031a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801031c:	f7f7 fb92 	bl	8007a44 <pbuf_free>
        goto memerr;
 8010320:	e08f      	b.n	8010442 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010322:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010328:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801032a:	4413      	add	r3, r2
 801032c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8010330:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8010334:	9201      	str	r2, [sp, #4]
 8010336:	9300      	str	r3, [sp, #0]
 8010338:	4603      	mov	r3, r0
 801033a:	2241      	movs	r2, #65	; 0x41
 801033c:	2000      	movs	r0, #0
 801033e:	f7f7 f9c7 	bl	80076d0 <pbuf_alloced_custom>
 8010342:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8010344:	697b      	ldr	r3, [r7, #20]
 8010346:	2b00      	cmp	r3, #0
 8010348:	d106      	bne.n	8010358 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801034a:	69b8      	ldr	r0, [r7, #24]
 801034c:	f7ff fef6 	bl	801013c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8010350:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010352:	f7f7 fb77 	bl	8007a44 <pbuf_free>
        goto memerr;
 8010356:	e074      	b.n	8010442 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8010358:	68f8      	ldr	r0, [r7, #12]
 801035a:	f7f7 fc13 	bl	8007b84 <pbuf_ref>
      pcr->original = p;
 801035e:	69bb      	ldr	r3, [r7, #24]
 8010360:	68fa      	ldr	r2, [r7, #12]
 8010362:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8010364:	69bb      	ldr	r3, [r7, #24]
 8010366:	4a3f      	ldr	r2, [pc, #252]	; (8010464 <ip4_frag+0x288>)
 8010368:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801036a:	6979      	ldr	r1, [r7, #20]
 801036c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801036e:	f7f7 fc2b 	bl	8007bc8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8010372:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8010376:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801037a:	1ad3      	subs	r3, r2, r3
 801037c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8010380:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010384:	2b00      	cmp	r3, #0
 8010386:	d004      	beq.n	8010392 <ip4_frag+0x1b6>
        poff = 0;
 8010388:	2300      	movs	r3, #0
 801038a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8010392:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010396:	2b00      	cmp	r3, #0
 8010398:	d196      	bne.n	80102c8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801039a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801039c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80103a0:	4413      	add	r3, r2
 80103a2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80103a4:	68bb      	ldr	r3, [r7, #8]
 80103a6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80103a8:	f1a3 0213 	sub.w	r2, r3, #19
 80103ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80103b0:	429a      	cmp	r2, r3
 80103b2:	bfcc      	ite	gt
 80103b4:	2301      	movgt	r3, #1
 80103b6:	2300      	movle	r3, #0
 80103b8:	b2db      	uxtb	r3, r3
 80103ba:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80103bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80103c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80103c4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80103c6:	6a3b      	ldr	r3, [r7, #32]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d002      	beq.n	80103d2 <ip4_frag+0x1f6>
 80103cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d003      	beq.n	80103da <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80103d2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80103d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80103d8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80103da:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80103dc:	4618      	mov	r0, r3
 80103de:	f7f5 ffd3 	bl	8006388 <lwip_htons>
 80103e2:	4603      	mov	r3, r0
 80103e4:	461a      	mov	r2, r3
 80103e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103e8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80103ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80103ec:	3314      	adds	r3, #20
 80103ee:	b29b      	uxth	r3, r3
 80103f0:	4618      	mov	r0, r3
 80103f2:	f7f5 ffc9 	bl	8006388 <lwip_htons>
 80103f6:	4603      	mov	r3, r0
 80103f8:	461a      	mov	r2, r3
 80103fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103fc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80103fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010400:	2200      	movs	r2, #0
 8010402:	729a      	strb	r2, [r3, #10]
 8010404:	2200      	movs	r2, #0
 8010406:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8010408:	68bb      	ldr	r3, [r7, #8]
 801040a:	695b      	ldr	r3, [r3, #20]
 801040c:	687a      	ldr	r2, [r7, #4]
 801040e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010410:	68b8      	ldr	r0, [r7, #8]
 8010412:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8010414:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010416:	f7f7 fb15 	bl	8007a44 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801041a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801041e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010420:	1ad3      	subs	r3, r2, r3
 8010422:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8010426:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801042a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801042c:	4413      	add	r3, r2
 801042e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8010432:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010436:	2b00      	cmp	r3, #0
 8010438:	f47f af19 	bne.w	801026e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801043c:	2300      	movs	r3, #0
 801043e:	e002      	b.n	8010446 <ip4_frag+0x26a>
      goto memerr;
 8010440:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8010442:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010446:	4618      	mov	r0, r3
 8010448:	3748      	adds	r7, #72	; 0x48
 801044a:	46bd      	mov	sp, r7
 801044c:	bd80      	pop	{r7, pc}
 801044e:	bf00      	nop
 8010450:	08013da0 	.word	0x08013da0
 8010454:	08013f7c 	.word	0x08013f7c
 8010458:	08013de8 	.word	0x08013de8
 801045c:	08013f98 	.word	0x08013f98
 8010460:	08013fb8 	.word	0x08013fb8
 8010464:	08010175 	.word	0x08010175

08010468 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8010468:	b580      	push	{r7, lr}
 801046a:	b086      	sub	sp, #24
 801046c:	af00      	add	r7, sp, #0
 801046e:	6078      	str	r0, [r7, #4]
 8010470:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8010472:	230e      	movs	r3, #14
 8010474:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	895b      	ldrh	r3, [r3, #10]
 801047a:	2b0e      	cmp	r3, #14
 801047c:	d96e      	bls.n	801055c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	7bdb      	ldrb	r3, [r3, #15]
 8010482:	2b00      	cmp	r3, #0
 8010484:	d106      	bne.n	8010494 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8010486:	683b      	ldr	r3, [r7, #0]
 8010488:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801048c:	3301      	adds	r3, #1
 801048e:	b2da      	uxtb	r2, r3
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	685b      	ldr	r3, [r3, #4]
 8010498:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801049a:	693b      	ldr	r3, [r7, #16]
 801049c:	7b1a      	ldrb	r2, [r3, #12]
 801049e:	7b5b      	ldrb	r3, [r3, #13]
 80104a0:	021b      	lsls	r3, r3, #8
 80104a2:	4313      	orrs	r3, r2
 80104a4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80104a6:	693b      	ldr	r3, [r7, #16]
 80104a8:	781b      	ldrb	r3, [r3, #0]
 80104aa:	f003 0301 	and.w	r3, r3, #1
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d023      	beq.n	80104fa <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80104b2:	693b      	ldr	r3, [r7, #16]
 80104b4:	781b      	ldrb	r3, [r3, #0]
 80104b6:	2b01      	cmp	r3, #1
 80104b8:	d10f      	bne.n	80104da <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80104ba:	693b      	ldr	r3, [r7, #16]
 80104bc:	785b      	ldrb	r3, [r3, #1]
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d11b      	bne.n	80104fa <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80104c2:	693b      	ldr	r3, [r7, #16]
 80104c4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80104c6:	2b5e      	cmp	r3, #94	; 0x5e
 80104c8:	d117      	bne.n	80104fa <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	7b5b      	ldrb	r3, [r3, #13]
 80104ce:	f043 0310 	orr.w	r3, r3, #16
 80104d2:	b2da      	uxtb	r2, r3
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	735a      	strb	r2, [r3, #13]
 80104d8:	e00f      	b.n	80104fa <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80104da:	693b      	ldr	r3, [r7, #16]
 80104dc:	2206      	movs	r2, #6
 80104de:	4928      	ldr	r1, [pc, #160]	; (8010580 <ethernet_input+0x118>)
 80104e0:	4618      	mov	r0, r3
 80104e2:	f000 f9ec 	bl	80108be <memcmp>
 80104e6:	4603      	mov	r3, r0
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d106      	bne.n	80104fa <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	7b5b      	ldrb	r3, [r3, #13]
 80104f0:	f043 0308 	orr.w	r3, r3, #8
 80104f4:	b2da      	uxtb	r2, r3
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80104fa:	89fb      	ldrh	r3, [r7, #14]
 80104fc:	2b08      	cmp	r3, #8
 80104fe:	d003      	beq.n	8010508 <ethernet_input+0xa0>
 8010500:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8010504:	d014      	beq.n	8010530 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8010506:	e032      	b.n	801056e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010508:	683b      	ldr	r3, [r7, #0]
 801050a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801050e:	f003 0308 	and.w	r3, r3, #8
 8010512:	2b00      	cmp	r3, #0
 8010514:	d024      	beq.n	8010560 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010516:	8afb      	ldrh	r3, [r7, #22]
 8010518:	4619      	mov	r1, r3
 801051a:	6878      	ldr	r0, [r7, #4]
 801051c:	f7f7 fa0c 	bl	8007938 <pbuf_remove_header>
 8010520:	4603      	mov	r3, r0
 8010522:	2b00      	cmp	r3, #0
 8010524:	d11e      	bne.n	8010564 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8010526:	6839      	ldr	r1, [r7, #0]
 8010528:	6878      	ldr	r0, [r7, #4]
 801052a:	f7fe ff21 	bl	800f370 <ip4_input>
      break;
 801052e:	e013      	b.n	8010558 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010530:	683b      	ldr	r3, [r7, #0]
 8010532:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010536:	f003 0308 	and.w	r3, r3, #8
 801053a:	2b00      	cmp	r3, #0
 801053c:	d014      	beq.n	8010568 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801053e:	8afb      	ldrh	r3, [r7, #22]
 8010540:	4619      	mov	r1, r3
 8010542:	6878      	ldr	r0, [r7, #4]
 8010544:	f7f7 f9f8 	bl	8007938 <pbuf_remove_header>
 8010548:	4603      	mov	r3, r0
 801054a:	2b00      	cmp	r3, #0
 801054c:	d10e      	bne.n	801056c <ethernet_input+0x104>
        etharp_input(p, netif);
 801054e:	6839      	ldr	r1, [r7, #0]
 8010550:	6878      	ldr	r0, [r7, #4]
 8010552:	f7fe f8c1 	bl	800e6d8 <etharp_input>
      break;
 8010556:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8010558:	2300      	movs	r3, #0
 801055a:	e00c      	b.n	8010576 <ethernet_input+0x10e>
    goto free_and_return;
 801055c:	bf00      	nop
 801055e:	e006      	b.n	801056e <ethernet_input+0x106>
        goto free_and_return;
 8010560:	bf00      	nop
 8010562:	e004      	b.n	801056e <ethernet_input+0x106>
        goto free_and_return;
 8010564:	bf00      	nop
 8010566:	e002      	b.n	801056e <ethernet_input+0x106>
        goto free_and_return;
 8010568:	bf00      	nop
 801056a:	e000      	b.n	801056e <ethernet_input+0x106>
        goto free_and_return;
 801056c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801056e:	6878      	ldr	r0, [r7, #4]
 8010570:	f7f7 fa68 	bl	8007a44 <pbuf_free>
  return ERR_OK;
 8010574:	2300      	movs	r3, #0
}
 8010576:	4618      	mov	r0, r3
 8010578:	3718      	adds	r7, #24
 801057a:	46bd      	mov	sp, r7
 801057c:	bd80      	pop	{r7, pc}
 801057e:	bf00      	nop
 8010580:	08014154 	.word	0x08014154

08010584 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8010584:	b580      	push	{r7, lr}
 8010586:	b086      	sub	sp, #24
 8010588:	af00      	add	r7, sp, #0
 801058a:	60f8      	str	r0, [r7, #12]
 801058c:	60b9      	str	r1, [r7, #8]
 801058e:	607a      	str	r2, [r7, #4]
 8010590:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8010592:	8c3b      	ldrh	r3, [r7, #32]
 8010594:	4618      	mov	r0, r3
 8010596:	f7f5 fef7 	bl	8006388 <lwip_htons>
 801059a:	4603      	mov	r3, r0
 801059c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801059e:	210e      	movs	r1, #14
 80105a0:	68b8      	ldr	r0, [r7, #8]
 80105a2:	f7f7 f9b9 	bl	8007918 <pbuf_add_header>
 80105a6:	4603      	mov	r3, r0
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d125      	bne.n	80105f8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80105ac:	68bb      	ldr	r3, [r7, #8]
 80105ae:	685b      	ldr	r3, [r3, #4]
 80105b0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80105b2:	693b      	ldr	r3, [r7, #16]
 80105b4:	8afa      	ldrh	r2, [r7, #22]
 80105b6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80105b8:	693b      	ldr	r3, [r7, #16]
 80105ba:	2206      	movs	r2, #6
 80105bc:	6839      	ldr	r1, [r7, #0]
 80105be:	4618      	mov	r0, r3
 80105c0:	f000 fa15 	bl	80109ee <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80105c4:	693b      	ldr	r3, [r7, #16]
 80105c6:	3306      	adds	r3, #6
 80105c8:	2206      	movs	r2, #6
 80105ca:	6879      	ldr	r1, [r7, #4]
 80105cc:	4618      	mov	r0, r3
 80105ce:	f000 fa0e 	bl	80109ee <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80105d8:	2b06      	cmp	r3, #6
 80105da:	d006      	beq.n	80105ea <ethernet_output+0x66>
 80105dc:	4b0a      	ldr	r3, [pc, #40]	; (8010608 <ethernet_output+0x84>)
 80105de:	f44f 7299 	mov.w	r2, #306	; 0x132
 80105e2:	490a      	ldr	r1, [pc, #40]	; (801060c <ethernet_output+0x88>)
 80105e4:	480a      	ldr	r0, [pc, #40]	; (8010610 <ethernet_output+0x8c>)
 80105e6:	f000 f915 	bl	8010814 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	699b      	ldr	r3, [r3, #24]
 80105ee:	68b9      	ldr	r1, [r7, #8]
 80105f0:	68f8      	ldr	r0, [r7, #12]
 80105f2:	4798      	blx	r3
 80105f4:	4603      	mov	r3, r0
 80105f6:	e002      	b.n	80105fe <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80105f8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80105fa:	f06f 0301 	mvn.w	r3, #1
}
 80105fe:	4618      	mov	r0, r3
 8010600:	3718      	adds	r7, #24
 8010602:	46bd      	mov	sp, r7
 8010604:	bd80      	pop	{r7, pc}
 8010606:	bf00      	nop
 8010608:	08013fc8 	.word	0x08013fc8
 801060c:	08014000 	.word	0x08014000
 8010610:	08014034 	.word	0x08014034

08010614 <rand>:
 8010614:	4b16      	ldr	r3, [pc, #88]	; (8010670 <rand+0x5c>)
 8010616:	b510      	push	{r4, lr}
 8010618:	681c      	ldr	r4, [r3, #0]
 801061a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801061c:	b9b3      	cbnz	r3, 801064c <rand+0x38>
 801061e:	2018      	movs	r0, #24
 8010620:	f000 fa5e 	bl	8010ae0 <malloc>
 8010624:	4602      	mov	r2, r0
 8010626:	6320      	str	r0, [r4, #48]	; 0x30
 8010628:	b920      	cbnz	r0, 8010634 <rand+0x20>
 801062a:	4b12      	ldr	r3, [pc, #72]	; (8010674 <rand+0x60>)
 801062c:	4812      	ldr	r0, [pc, #72]	; (8010678 <rand+0x64>)
 801062e:	2152      	movs	r1, #82	; 0x52
 8010630:	f000 f9ec 	bl	8010a0c <__assert_func>
 8010634:	4911      	ldr	r1, [pc, #68]	; (801067c <rand+0x68>)
 8010636:	4b12      	ldr	r3, [pc, #72]	; (8010680 <rand+0x6c>)
 8010638:	e9c0 1300 	strd	r1, r3, [r0]
 801063c:	4b11      	ldr	r3, [pc, #68]	; (8010684 <rand+0x70>)
 801063e:	6083      	str	r3, [r0, #8]
 8010640:	230b      	movs	r3, #11
 8010642:	8183      	strh	r3, [r0, #12]
 8010644:	2100      	movs	r1, #0
 8010646:	2001      	movs	r0, #1
 8010648:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801064c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801064e:	480e      	ldr	r0, [pc, #56]	; (8010688 <rand+0x74>)
 8010650:	690b      	ldr	r3, [r1, #16]
 8010652:	694c      	ldr	r4, [r1, #20]
 8010654:	4a0d      	ldr	r2, [pc, #52]	; (801068c <rand+0x78>)
 8010656:	4358      	muls	r0, r3
 8010658:	fb02 0004 	mla	r0, r2, r4, r0
 801065c:	fba3 3202 	umull	r3, r2, r3, r2
 8010660:	3301      	adds	r3, #1
 8010662:	eb40 0002 	adc.w	r0, r0, r2
 8010666:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801066a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801066e:	bd10      	pop	{r4, pc}
 8010670:	20000084 	.word	0x20000084
 8010674:	08014162 	.word	0x08014162
 8010678:	08014179 	.word	0x08014179
 801067c:	abcd330e 	.word	0xabcd330e
 8010680:	e66d1234 	.word	0xe66d1234
 8010684:	0005deec 	.word	0x0005deec
 8010688:	5851f42d 	.word	0x5851f42d
 801068c:	4c957f2d 	.word	0x4c957f2d

08010690 <std>:
 8010690:	2300      	movs	r3, #0
 8010692:	b510      	push	{r4, lr}
 8010694:	4604      	mov	r4, r0
 8010696:	e9c0 3300 	strd	r3, r3, [r0]
 801069a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801069e:	6083      	str	r3, [r0, #8]
 80106a0:	8181      	strh	r1, [r0, #12]
 80106a2:	6643      	str	r3, [r0, #100]	; 0x64
 80106a4:	81c2      	strh	r2, [r0, #14]
 80106a6:	6183      	str	r3, [r0, #24]
 80106a8:	4619      	mov	r1, r3
 80106aa:	2208      	movs	r2, #8
 80106ac:	305c      	adds	r0, #92	; 0x5c
 80106ae:	f000 f916 	bl	80108de <memset>
 80106b2:	4b0d      	ldr	r3, [pc, #52]	; (80106e8 <std+0x58>)
 80106b4:	6263      	str	r3, [r4, #36]	; 0x24
 80106b6:	4b0d      	ldr	r3, [pc, #52]	; (80106ec <std+0x5c>)
 80106b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80106ba:	4b0d      	ldr	r3, [pc, #52]	; (80106f0 <std+0x60>)
 80106bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80106be:	4b0d      	ldr	r3, [pc, #52]	; (80106f4 <std+0x64>)
 80106c0:	6323      	str	r3, [r4, #48]	; 0x30
 80106c2:	4b0d      	ldr	r3, [pc, #52]	; (80106f8 <std+0x68>)
 80106c4:	6224      	str	r4, [r4, #32]
 80106c6:	429c      	cmp	r4, r3
 80106c8:	d006      	beq.n	80106d8 <std+0x48>
 80106ca:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80106ce:	4294      	cmp	r4, r2
 80106d0:	d002      	beq.n	80106d8 <std+0x48>
 80106d2:	33d0      	adds	r3, #208	; 0xd0
 80106d4:	429c      	cmp	r4, r3
 80106d6:	d105      	bne.n	80106e4 <std+0x54>
 80106d8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80106dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80106e0:	f000 b982 	b.w	80109e8 <__retarget_lock_init_recursive>
 80106e4:	bd10      	pop	{r4, pc}
 80106e6:	bf00      	nop
 80106e8:	08010839 	.word	0x08010839
 80106ec:	0801085b 	.word	0x0801085b
 80106f0:	08010893 	.word	0x08010893
 80106f4:	080108b7 	.word	0x080108b7
 80106f8:	20008a00 	.word	0x20008a00

080106fc <stdio_exit_handler>:
 80106fc:	4a02      	ldr	r2, [pc, #8]	; (8010708 <stdio_exit_handler+0xc>)
 80106fe:	4903      	ldr	r1, [pc, #12]	; (801070c <stdio_exit_handler+0x10>)
 8010700:	4803      	ldr	r0, [pc, #12]	; (8010710 <stdio_exit_handler+0x14>)
 8010702:	f000 b869 	b.w	80107d8 <_fwalk_sglue>
 8010706:	bf00      	nop
 8010708:	2000002c 	.word	0x2000002c
 801070c:	080112fd 	.word	0x080112fd
 8010710:	20000038 	.word	0x20000038

08010714 <cleanup_stdio>:
 8010714:	6841      	ldr	r1, [r0, #4]
 8010716:	4b0c      	ldr	r3, [pc, #48]	; (8010748 <cleanup_stdio+0x34>)
 8010718:	4299      	cmp	r1, r3
 801071a:	b510      	push	{r4, lr}
 801071c:	4604      	mov	r4, r0
 801071e:	d001      	beq.n	8010724 <cleanup_stdio+0x10>
 8010720:	f000 fdec 	bl	80112fc <_fflush_r>
 8010724:	68a1      	ldr	r1, [r4, #8]
 8010726:	4b09      	ldr	r3, [pc, #36]	; (801074c <cleanup_stdio+0x38>)
 8010728:	4299      	cmp	r1, r3
 801072a:	d002      	beq.n	8010732 <cleanup_stdio+0x1e>
 801072c:	4620      	mov	r0, r4
 801072e:	f000 fde5 	bl	80112fc <_fflush_r>
 8010732:	68e1      	ldr	r1, [r4, #12]
 8010734:	4b06      	ldr	r3, [pc, #24]	; (8010750 <cleanup_stdio+0x3c>)
 8010736:	4299      	cmp	r1, r3
 8010738:	d004      	beq.n	8010744 <cleanup_stdio+0x30>
 801073a:	4620      	mov	r0, r4
 801073c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010740:	f000 bddc 	b.w	80112fc <_fflush_r>
 8010744:	bd10      	pop	{r4, pc}
 8010746:	bf00      	nop
 8010748:	20008a00 	.word	0x20008a00
 801074c:	20008a68 	.word	0x20008a68
 8010750:	20008ad0 	.word	0x20008ad0

08010754 <global_stdio_init.part.0>:
 8010754:	b510      	push	{r4, lr}
 8010756:	4b0b      	ldr	r3, [pc, #44]	; (8010784 <global_stdio_init.part.0+0x30>)
 8010758:	4c0b      	ldr	r4, [pc, #44]	; (8010788 <global_stdio_init.part.0+0x34>)
 801075a:	4a0c      	ldr	r2, [pc, #48]	; (801078c <global_stdio_init.part.0+0x38>)
 801075c:	601a      	str	r2, [r3, #0]
 801075e:	4620      	mov	r0, r4
 8010760:	2200      	movs	r2, #0
 8010762:	2104      	movs	r1, #4
 8010764:	f7ff ff94 	bl	8010690 <std>
 8010768:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801076c:	2201      	movs	r2, #1
 801076e:	2109      	movs	r1, #9
 8010770:	f7ff ff8e 	bl	8010690 <std>
 8010774:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8010778:	2202      	movs	r2, #2
 801077a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801077e:	2112      	movs	r1, #18
 8010780:	f7ff bf86 	b.w	8010690 <std>
 8010784:	20008b38 	.word	0x20008b38
 8010788:	20008a00 	.word	0x20008a00
 801078c:	080106fd 	.word	0x080106fd

08010790 <__sfp_lock_acquire>:
 8010790:	4801      	ldr	r0, [pc, #4]	; (8010798 <__sfp_lock_acquire+0x8>)
 8010792:	f000 b92a 	b.w	80109ea <__retarget_lock_acquire_recursive>
 8010796:	bf00      	nop
 8010798:	20008b41 	.word	0x20008b41

0801079c <__sfp_lock_release>:
 801079c:	4801      	ldr	r0, [pc, #4]	; (80107a4 <__sfp_lock_release+0x8>)
 801079e:	f000 b925 	b.w	80109ec <__retarget_lock_release_recursive>
 80107a2:	bf00      	nop
 80107a4:	20008b41 	.word	0x20008b41

080107a8 <__sinit>:
 80107a8:	b510      	push	{r4, lr}
 80107aa:	4604      	mov	r4, r0
 80107ac:	f7ff fff0 	bl	8010790 <__sfp_lock_acquire>
 80107b0:	6a23      	ldr	r3, [r4, #32]
 80107b2:	b11b      	cbz	r3, 80107bc <__sinit+0x14>
 80107b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80107b8:	f7ff bff0 	b.w	801079c <__sfp_lock_release>
 80107bc:	4b04      	ldr	r3, [pc, #16]	; (80107d0 <__sinit+0x28>)
 80107be:	6223      	str	r3, [r4, #32]
 80107c0:	4b04      	ldr	r3, [pc, #16]	; (80107d4 <__sinit+0x2c>)
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d1f5      	bne.n	80107b4 <__sinit+0xc>
 80107c8:	f7ff ffc4 	bl	8010754 <global_stdio_init.part.0>
 80107cc:	e7f2      	b.n	80107b4 <__sinit+0xc>
 80107ce:	bf00      	nop
 80107d0:	08010715 	.word	0x08010715
 80107d4:	20008b38 	.word	0x20008b38

080107d8 <_fwalk_sglue>:
 80107d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80107dc:	4607      	mov	r7, r0
 80107de:	4688      	mov	r8, r1
 80107e0:	4614      	mov	r4, r2
 80107e2:	2600      	movs	r6, #0
 80107e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80107e8:	f1b9 0901 	subs.w	r9, r9, #1
 80107ec:	d505      	bpl.n	80107fa <_fwalk_sglue+0x22>
 80107ee:	6824      	ldr	r4, [r4, #0]
 80107f0:	2c00      	cmp	r4, #0
 80107f2:	d1f7      	bne.n	80107e4 <_fwalk_sglue+0xc>
 80107f4:	4630      	mov	r0, r6
 80107f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80107fa:	89ab      	ldrh	r3, [r5, #12]
 80107fc:	2b01      	cmp	r3, #1
 80107fe:	d907      	bls.n	8010810 <_fwalk_sglue+0x38>
 8010800:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010804:	3301      	adds	r3, #1
 8010806:	d003      	beq.n	8010810 <_fwalk_sglue+0x38>
 8010808:	4629      	mov	r1, r5
 801080a:	4638      	mov	r0, r7
 801080c:	47c0      	blx	r8
 801080e:	4306      	orrs	r6, r0
 8010810:	3568      	adds	r5, #104	; 0x68
 8010812:	e7e9      	b.n	80107e8 <_fwalk_sglue+0x10>

08010814 <iprintf>:
 8010814:	b40f      	push	{r0, r1, r2, r3}
 8010816:	b507      	push	{r0, r1, r2, lr}
 8010818:	4906      	ldr	r1, [pc, #24]	; (8010834 <iprintf+0x20>)
 801081a:	ab04      	add	r3, sp, #16
 801081c:	6808      	ldr	r0, [r1, #0]
 801081e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010822:	6881      	ldr	r1, [r0, #8]
 8010824:	9301      	str	r3, [sp, #4]
 8010826:	f000 fa39 	bl	8010c9c <_vfiprintf_r>
 801082a:	b003      	add	sp, #12
 801082c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010830:	b004      	add	sp, #16
 8010832:	4770      	bx	lr
 8010834:	20000084 	.word	0x20000084

08010838 <__sread>:
 8010838:	b510      	push	{r4, lr}
 801083a:	460c      	mov	r4, r1
 801083c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010840:	f000 f88a 	bl	8010958 <_read_r>
 8010844:	2800      	cmp	r0, #0
 8010846:	bfab      	itete	ge
 8010848:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801084a:	89a3      	ldrhlt	r3, [r4, #12]
 801084c:	181b      	addge	r3, r3, r0
 801084e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010852:	bfac      	ite	ge
 8010854:	6563      	strge	r3, [r4, #84]	; 0x54
 8010856:	81a3      	strhlt	r3, [r4, #12]
 8010858:	bd10      	pop	{r4, pc}

0801085a <__swrite>:
 801085a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801085e:	461f      	mov	r7, r3
 8010860:	898b      	ldrh	r3, [r1, #12]
 8010862:	05db      	lsls	r3, r3, #23
 8010864:	4605      	mov	r5, r0
 8010866:	460c      	mov	r4, r1
 8010868:	4616      	mov	r6, r2
 801086a:	d505      	bpl.n	8010878 <__swrite+0x1e>
 801086c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010870:	2302      	movs	r3, #2
 8010872:	2200      	movs	r2, #0
 8010874:	f000 f85e 	bl	8010934 <_lseek_r>
 8010878:	89a3      	ldrh	r3, [r4, #12]
 801087a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801087e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010882:	81a3      	strh	r3, [r4, #12]
 8010884:	4632      	mov	r2, r6
 8010886:	463b      	mov	r3, r7
 8010888:	4628      	mov	r0, r5
 801088a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801088e:	f000 b875 	b.w	801097c <_write_r>

08010892 <__sseek>:
 8010892:	b510      	push	{r4, lr}
 8010894:	460c      	mov	r4, r1
 8010896:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801089a:	f000 f84b 	bl	8010934 <_lseek_r>
 801089e:	1c43      	adds	r3, r0, #1
 80108a0:	89a3      	ldrh	r3, [r4, #12]
 80108a2:	bf15      	itete	ne
 80108a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80108a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80108aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80108ae:	81a3      	strheq	r3, [r4, #12]
 80108b0:	bf18      	it	ne
 80108b2:	81a3      	strhne	r3, [r4, #12]
 80108b4:	bd10      	pop	{r4, pc}

080108b6 <__sclose>:
 80108b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108ba:	f000 b82b 	b.w	8010914 <_close_r>

080108be <memcmp>:
 80108be:	b510      	push	{r4, lr}
 80108c0:	3901      	subs	r1, #1
 80108c2:	4402      	add	r2, r0
 80108c4:	4290      	cmp	r0, r2
 80108c6:	d101      	bne.n	80108cc <memcmp+0xe>
 80108c8:	2000      	movs	r0, #0
 80108ca:	e005      	b.n	80108d8 <memcmp+0x1a>
 80108cc:	7803      	ldrb	r3, [r0, #0]
 80108ce:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80108d2:	42a3      	cmp	r3, r4
 80108d4:	d001      	beq.n	80108da <memcmp+0x1c>
 80108d6:	1b18      	subs	r0, r3, r4
 80108d8:	bd10      	pop	{r4, pc}
 80108da:	3001      	adds	r0, #1
 80108dc:	e7f2      	b.n	80108c4 <memcmp+0x6>

080108de <memset>:
 80108de:	4402      	add	r2, r0
 80108e0:	4603      	mov	r3, r0
 80108e2:	4293      	cmp	r3, r2
 80108e4:	d100      	bne.n	80108e8 <memset+0xa>
 80108e6:	4770      	bx	lr
 80108e8:	f803 1b01 	strb.w	r1, [r3], #1
 80108ec:	e7f9      	b.n	80108e2 <memset+0x4>

080108ee <strncpy>:
 80108ee:	b510      	push	{r4, lr}
 80108f0:	3901      	subs	r1, #1
 80108f2:	4603      	mov	r3, r0
 80108f4:	b132      	cbz	r2, 8010904 <strncpy+0x16>
 80108f6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80108fa:	f803 4b01 	strb.w	r4, [r3], #1
 80108fe:	3a01      	subs	r2, #1
 8010900:	2c00      	cmp	r4, #0
 8010902:	d1f7      	bne.n	80108f4 <strncpy+0x6>
 8010904:	441a      	add	r2, r3
 8010906:	2100      	movs	r1, #0
 8010908:	4293      	cmp	r3, r2
 801090a:	d100      	bne.n	801090e <strncpy+0x20>
 801090c:	bd10      	pop	{r4, pc}
 801090e:	f803 1b01 	strb.w	r1, [r3], #1
 8010912:	e7f9      	b.n	8010908 <strncpy+0x1a>

08010914 <_close_r>:
 8010914:	b538      	push	{r3, r4, r5, lr}
 8010916:	4d06      	ldr	r5, [pc, #24]	; (8010930 <_close_r+0x1c>)
 8010918:	2300      	movs	r3, #0
 801091a:	4604      	mov	r4, r0
 801091c:	4608      	mov	r0, r1
 801091e:	602b      	str	r3, [r5, #0]
 8010920:	f7f0 fa37 	bl	8000d92 <_close>
 8010924:	1c43      	adds	r3, r0, #1
 8010926:	d102      	bne.n	801092e <_close_r+0x1a>
 8010928:	682b      	ldr	r3, [r5, #0]
 801092a:	b103      	cbz	r3, 801092e <_close_r+0x1a>
 801092c:	6023      	str	r3, [r4, #0]
 801092e:	bd38      	pop	{r3, r4, r5, pc}
 8010930:	20008b3c 	.word	0x20008b3c

08010934 <_lseek_r>:
 8010934:	b538      	push	{r3, r4, r5, lr}
 8010936:	4d07      	ldr	r5, [pc, #28]	; (8010954 <_lseek_r+0x20>)
 8010938:	4604      	mov	r4, r0
 801093a:	4608      	mov	r0, r1
 801093c:	4611      	mov	r1, r2
 801093e:	2200      	movs	r2, #0
 8010940:	602a      	str	r2, [r5, #0]
 8010942:	461a      	mov	r2, r3
 8010944:	f7f0 fa4c 	bl	8000de0 <_lseek>
 8010948:	1c43      	adds	r3, r0, #1
 801094a:	d102      	bne.n	8010952 <_lseek_r+0x1e>
 801094c:	682b      	ldr	r3, [r5, #0]
 801094e:	b103      	cbz	r3, 8010952 <_lseek_r+0x1e>
 8010950:	6023      	str	r3, [r4, #0]
 8010952:	bd38      	pop	{r3, r4, r5, pc}
 8010954:	20008b3c 	.word	0x20008b3c

08010958 <_read_r>:
 8010958:	b538      	push	{r3, r4, r5, lr}
 801095a:	4d07      	ldr	r5, [pc, #28]	; (8010978 <_read_r+0x20>)
 801095c:	4604      	mov	r4, r0
 801095e:	4608      	mov	r0, r1
 8010960:	4611      	mov	r1, r2
 8010962:	2200      	movs	r2, #0
 8010964:	602a      	str	r2, [r5, #0]
 8010966:	461a      	mov	r2, r3
 8010968:	f7f0 f9da 	bl	8000d20 <_read>
 801096c:	1c43      	adds	r3, r0, #1
 801096e:	d102      	bne.n	8010976 <_read_r+0x1e>
 8010970:	682b      	ldr	r3, [r5, #0]
 8010972:	b103      	cbz	r3, 8010976 <_read_r+0x1e>
 8010974:	6023      	str	r3, [r4, #0]
 8010976:	bd38      	pop	{r3, r4, r5, pc}
 8010978:	20008b3c 	.word	0x20008b3c

0801097c <_write_r>:
 801097c:	b538      	push	{r3, r4, r5, lr}
 801097e:	4d07      	ldr	r5, [pc, #28]	; (801099c <_write_r+0x20>)
 8010980:	4604      	mov	r4, r0
 8010982:	4608      	mov	r0, r1
 8010984:	4611      	mov	r1, r2
 8010986:	2200      	movs	r2, #0
 8010988:	602a      	str	r2, [r5, #0]
 801098a:	461a      	mov	r2, r3
 801098c:	f7f0 f9e5 	bl	8000d5a <_write>
 8010990:	1c43      	adds	r3, r0, #1
 8010992:	d102      	bne.n	801099a <_write_r+0x1e>
 8010994:	682b      	ldr	r3, [r5, #0]
 8010996:	b103      	cbz	r3, 801099a <_write_r+0x1e>
 8010998:	6023      	str	r3, [r4, #0]
 801099a:	bd38      	pop	{r3, r4, r5, pc}
 801099c:	20008b3c 	.word	0x20008b3c

080109a0 <__libc_init_array>:
 80109a0:	b570      	push	{r4, r5, r6, lr}
 80109a2:	4d0d      	ldr	r5, [pc, #52]	; (80109d8 <__libc_init_array+0x38>)
 80109a4:	4c0d      	ldr	r4, [pc, #52]	; (80109dc <__libc_init_array+0x3c>)
 80109a6:	1b64      	subs	r4, r4, r5
 80109a8:	10a4      	asrs	r4, r4, #2
 80109aa:	2600      	movs	r6, #0
 80109ac:	42a6      	cmp	r6, r4
 80109ae:	d109      	bne.n	80109c4 <__libc_init_array+0x24>
 80109b0:	4d0b      	ldr	r5, [pc, #44]	; (80109e0 <__libc_init_array+0x40>)
 80109b2:	4c0c      	ldr	r4, [pc, #48]	; (80109e4 <__libc_init_array+0x44>)
 80109b4:	f000 fe52 	bl	801165c <_init>
 80109b8:	1b64      	subs	r4, r4, r5
 80109ba:	10a4      	asrs	r4, r4, #2
 80109bc:	2600      	movs	r6, #0
 80109be:	42a6      	cmp	r6, r4
 80109c0:	d105      	bne.n	80109ce <__libc_init_array+0x2e>
 80109c2:	bd70      	pop	{r4, r5, r6, pc}
 80109c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80109c8:	4798      	blx	r3
 80109ca:	3601      	adds	r6, #1
 80109cc:	e7ee      	b.n	80109ac <__libc_init_array+0xc>
 80109ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80109d2:	4798      	blx	r3
 80109d4:	3601      	adds	r6, #1
 80109d6:	e7f2      	b.n	80109be <__libc_init_array+0x1e>
 80109d8:	08014248 	.word	0x08014248
 80109dc:	08014248 	.word	0x08014248
 80109e0:	08014248 	.word	0x08014248
 80109e4:	0801424c 	.word	0x0801424c

080109e8 <__retarget_lock_init_recursive>:
 80109e8:	4770      	bx	lr

080109ea <__retarget_lock_acquire_recursive>:
 80109ea:	4770      	bx	lr

080109ec <__retarget_lock_release_recursive>:
 80109ec:	4770      	bx	lr

080109ee <memcpy>:
 80109ee:	440a      	add	r2, r1
 80109f0:	4291      	cmp	r1, r2
 80109f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80109f6:	d100      	bne.n	80109fa <memcpy+0xc>
 80109f8:	4770      	bx	lr
 80109fa:	b510      	push	{r4, lr}
 80109fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010a00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010a04:	4291      	cmp	r1, r2
 8010a06:	d1f9      	bne.n	80109fc <memcpy+0xe>
 8010a08:	bd10      	pop	{r4, pc}
	...

08010a0c <__assert_func>:
 8010a0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010a0e:	4614      	mov	r4, r2
 8010a10:	461a      	mov	r2, r3
 8010a12:	4b09      	ldr	r3, [pc, #36]	; (8010a38 <__assert_func+0x2c>)
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	4605      	mov	r5, r0
 8010a18:	68d8      	ldr	r0, [r3, #12]
 8010a1a:	b14c      	cbz	r4, 8010a30 <__assert_func+0x24>
 8010a1c:	4b07      	ldr	r3, [pc, #28]	; (8010a3c <__assert_func+0x30>)
 8010a1e:	9100      	str	r1, [sp, #0]
 8010a20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010a24:	4906      	ldr	r1, [pc, #24]	; (8010a40 <__assert_func+0x34>)
 8010a26:	462b      	mov	r3, r5
 8010a28:	f000 fc90 	bl	801134c <fiprintf>
 8010a2c:	f000 fd46 	bl	80114bc <abort>
 8010a30:	4b04      	ldr	r3, [pc, #16]	; (8010a44 <__assert_func+0x38>)
 8010a32:	461c      	mov	r4, r3
 8010a34:	e7f3      	b.n	8010a1e <__assert_func+0x12>
 8010a36:	bf00      	nop
 8010a38:	20000084 	.word	0x20000084
 8010a3c:	080141d1 	.word	0x080141d1
 8010a40:	080141de 	.word	0x080141de
 8010a44:	0801420c 	.word	0x0801420c

08010a48 <_free_r>:
 8010a48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010a4a:	2900      	cmp	r1, #0
 8010a4c:	d044      	beq.n	8010ad8 <_free_r+0x90>
 8010a4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010a52:	9001      	str	r0, [sp, #4]
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	f1a1 0404 	sub.w	r4, r1, #4
 8010a5a:	bfb8      	it	lt
 8010a5c:	18e4      	addlt	r4, r4, r3
 8010a5e:	f000 f8e7 	bl	8010c30 <__malloc_lock>
 8010a62:	4a1e      	ldr	r2, [pc, #120]	; (8010adc <_free_r+0x94>)
 8010a64:	9801      	ldr	r0, [sp, #4]
 8010a66:	6813      	ldr	r3, [r2, #0]
 8010a68:	b933      	cbnz	r3, 8010a78 <_free_r+0x30>
 8010a6a:	6063      	str	r3, [r4, #4]
 8010a6c:	6014      	str	r4, [r2, #0]
 8010a6e:	b003      	add	sp, #12
 8010a70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010a74:	f000 b8e2 	b.w	8010c3c <__malloc_unlock>
 8010a78:	42a3      	cmp	r3, r4
 8010a7a:	d908      	bls.n	8010a8e <_free_r+0x46>
 8010a7c:	6825      	ldr	r5, [r4, #0]
 8010a7e:	1961      	adds	r1, r4, r5
 8010a80:	428b      	cmp	r3, r1
 8010a82:	bf01      	itttt	eq
 8010a84:	6819      	ldreq	r1, [r3, #0]
 8010a86:	685b      	ldreq	r3, [r3, #4]
 8010a88:	1949      	addeq	r1, r1, r5
 8010a8a:	6021      	streq	r1, [r4, #0]
 8010a8c:	e7ed      	b.n	8010a6a <_free_r+0x22>
 8010a8e:	461a      	mov	r2, r3
 8010a90:	685b      	ldr	r3, [r3, #4]
 8010a92:	b10b      	cbz	r3, 8010a98 <_free_r+0x50>
 8010a94:	42a3      	cmp	r3, r4
 8010a96:	d9fa      	bls.n	8010a8e <_free_r+0x46>
 8010a98:	6811      	ldr	r1, [r2, #0]
 8010a9a:	1855      	adds	r5, r2, r1
 8010a9c:	42a5      	cmp	r5, r4
 8010a9e:	d10b      	bne.n	8010ab8 <_free_r+0x70>
 8010aa0:	6824      	ldr	r4, [r4, #0]
 8010aa2:	4421      	add	r1, r4
 8010aa4:	1854      	adds	r4, r2, r1
 8010aa6:	42a3      	cmp	r3, r4
 8010aa8:	6011      	str	r1, [r2, #0]
 8010aaa:	d1e0      	bne.n	8010a6e <_free_r+0x26>
 8010aac:	681c      	ldr	r4, [r3, #0]
 8010aae:	685b      	ldr	r3, [r3, #4]
 8010ab0:	6053      	str	r3, [r2, #4]
 8010ab2:	440c      	add	r4, r1
 8010ab4:	6014      	str	r4, [r2, #0]
 8010ab6:	e7da      	b.n	8010a6e <_free_r+0x26>
 8010ab8:	d902      	bls.n	8010ac0 <_free_r+0x78>
 8010aba:	230c      	movs	r3, #12
 8010abc:	6003      	str	r3, [r0, #0]
 8010abe:	e7d6      	b.n	8010a6e <_free_r+0x26>
 8010ac0:	6825      	ldr	r5, [r4, #0]
 8010ac2:	1961      	adds	r1, r4, r5
 8010ac4:	428b      	cmp	r3, r1
 8010ac6:	bf04      	itt	eq
 8010ac8:	6819      	ldreq	r1, [r3, #0]
 8010aca:	685b      	ldreq	r3, [r3, #4]
 8010acc:	6063      	str	r3, [r4, #4]
 8010ace:	bf04      	itt	eq
 8010ad0:	1949      	addeq	r1, r1, r5
 8010ad2:	6021      	streq	r1, [r4, #0]
 8010ad4:	6054      	str	r4, [r2, #4]
 8010ad6:	e7ca      	b.n	8010a6e <_free_r+0x26>
 8010ad8:	b003      	add	sp, #12
 8010ada:	bd30      	pop	{r4, r5, pc}
 8010adc:	20008b44 	.word	0x20008b44

08010ae0 <malloc>:
 8010ae0:	4b02      	ldr	r3, [pc, #8]	; (8010aec <malloc+0xc>)
 8010ae2:	4601      	mov	r1, r0
 8010ae4:	6818      	ldr	r0, [r3, #0]
 8010ae6:	f000 b823 	b.w	8010b30 <_malloc_r>
 8010aea:	bf00      	nop
 8010aec:	20000084 	.word	0x20000084

08010af0 <sbrk_aligned>:
 8010af0:	b570      	push	{r4, r5, r6, lr}
 8010af2:	4e0e      	ldr	r6, [pc, #56]	; (8010b2c <sbrk_aligned+0x3c>)
 8010af4:	460c      	mov	r4, r1
 8010af6:	6831      	ldr	r1, [r6, #0]
 8010af8:	4605      	mov	r5, r0
 8010afa:	b911      	cbnz	r1, 8010b02 <sbrk_aligned+0x12>
 8010afc:	f000 fcce 	bl	801149c <_sbrk_r>
 8010b00:	6030      	str	r0, [r6, #0]
 8010b02:	4621      	mov	r1, r4
 8010b04:	4628      	mov	r0, r5
 8010b06:	f000 fcc9 	bl	801149c <_sbrk_r>
 8010b0a:	1c43      	adds	r3, r0, #1
 8010b0c:	d00a      	beq.n	8010b24 <sbrk_aligned+0x34>
 8010b0e:	1cc4      	adds	r4, r0, #3
 8010b10:	f024 0403 	bic.w	r4, r4, #3
 8010b14:	42a0      	cmp	r0, r4
 8010b16:	d007      	beq.n	8010b28 <sbrk_aligned+0x38>
 8010b18:	1a21      	subs	r1, r4, r0
 8010b1a:	4628      	mov	r0, r5
 8010b1c:	f000 fcbe 	bl	801149c <_sbrk_r>
 8010b20:	3001      	adds	r0, #1
 8010b22:	d101      	bne.n	8010b28 <sbrk_aligned+0x38>
 8010b24:	f04f 34ff 	mov.w	r4, #4294967295
 8010b28:	4620      	mov	r0, r4
 8010b2a:	bd70      	pop	{r4, r5, r6, pc}
 8010b2c:	20008b48 	.word	0x20008b48

08010b30 <_malloc_r>:
 8010b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b34:	1ccd      	adds	r5, r1, #3
 8010b36:	f025 0503 	bic.w	r5, r5, #3
 8010b3a:	3508      	adds	r5, #8
 8010b3c:	2d0c      	cmp	r5, #12
 8010b3e:	bf38      	it	cc
 8010b40:	250c      	movcc	r5, #12
 8010b42:	2d00      	cmp	r5, #0
 8010b44:	4607      	mov	r7, r0
 8010b46:	db01      	blt.n	8010b4c <_malloc_r+0x1c>
 8010b48:	42a9      	cmp	r1, r5
 8010b4a:	d905      	bls.n	8010b58 <_malloc_r+0x28>
 8010b4c:	230c      	movs	r3, #12
 8010b4e:	603b      	str	r3, [r7, #0]
 8010b50:	2600      	movs	r6, #0
 8010b52:	4630      	mov	r0, r6
 8010b54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b58:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8010c2c <_malloc_r+0xfc>
 8010b5c:	f000 f868 	bl	8010c30 <__malloc_lock>
 8010b60:	f8d8 3000 	ldr.w	r3, [r8]
 8010b64:	461c      	mov	r4, r3
 8010b66:	bb5c      	cbnz	r4, 8010bc0 <_malloc_r+0x90>
 8010b68:	4629      	mov	r1, r5
 8010b6a:	4638      	mov	r0, r7
 8010b6c:	f7ff ffc0 	bl	8010af0 <sbrk_aligned>
 8010b70:	1c43      	adds	r3, r0, #1
 8010b72:	4604      	mov	r4, r0
 8010b74:	d155      	bne.n	8010c22 <_malloc_r+0xf2>
 8010b76:	f8d8 4000 	ldr.w	r4, [r8]
 8010b7a:	4626      	mov	r6, r4
 8010b7c:	2e00      	cmp	r6, #0
 8010b7e:	d145      	bne.n	8010c0c <_malloc_r+0xdc>
 8010b80:	2c00      	cmp	r4, #0
 8010b82:	d048      	beq.n	8010c16 <_malloc_r+0xe6>
 8010b84:	6823      	ldr	r3, [r4, #0]
 8010b86:	4631      	mov	r1, r6
 8010b88:	4638      	mov	r0, r7
 8010b8a:	eb04 0903 	add.w	r9, r4, r3
 8010b8e:	f000 fc85 	bl	801149c <_sbrk_r>
 8010b92:	4581      	cmp	r9, r0
 8010b94:	d13f      	bne.n	8010c16 <_malloc_r+0xe6>
 8010b96:	6821      	ldr	r1, [r4, #0]
 8010b98:	1a6d      	subs	r5, r5, r1
 8010b9a:	4629      	mov	r1, r5
 8010b9c:	4638      	mov	r0, r7
 8010b9e:	f7ff ffa7 	bl	8010af0 <sbrk_aligned>
 8010ba2:	3001      	adds	r0, #1
 8010ba4:	d037      	beq.n	8010c16 <_malloc_r+0xe6>
 8010ba6:	6823      	ldr	r3, [r4, #0]
 8010ba8:	442b      	add	r3, r5
 8010baa:	6023      	str	r3, [r4, #0]
 8010bac:	f8d8 3000 	ldr.w	r3, [r8]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d038      	beq.n	8010c26 <_malloc_r+0xf6>
 8010bb4:	685a      	ldr	r2, [r3, #4]
 8010bb6:	42a2      	cmp	r2, r4
 8010bb8:	d12b      	bne.n	8010c12 <_malloc_r+0xe2>
 8010bba:	2200      	movs	r2, #0
 8010bbc:	605a      	str	r2, [r3, #4]
 8010bbe:	e00f      	b.n	8010be0 <_malloc_r+0xb0>
 8010bc0:	6822      	ldr	r2, [r4, #0]
 8010bc2:	1b52      	subs	r2, r2, r5
 8010bc4:	d41f      	bmi.n	8010c06 <_malloc_r+0xd6>
 8010bc6:	2a0b      	cmp	r2, #11
 8010bc8:	d917      	bls.n	8010bfa <_malloc_r+0xca>
 8010bca:	1961      	adds	r1, r4, r5
 8010bcc:	42a3      	cmp	r3, r4
 8010bce:	6025      	str	r5, [r4, #0]
 8010bd0:	bf18      	it	ne
 8010bd2:	6059      	strne	r1, [r3, #4]
 8010bd4:	6863      	ldr	r3, [r4, #4]
 8010bd6:	bf08      	it	eq
 8010bd8:	f8c8 1000 	streq.w	r1, [r8]
 8010bdc:	5162      	str	r2, [r4, r5]
 8010bde:	604b      	str	r3, [r1, #4]
 8010be0:	4638      	mov	r0, r7
 8010be2:	f104 060b 	add.w	r6, r4, #11
 8010be6:	f000 f829 	bl	8010c3c <__malloc_unlock>
 8010bea:	f026 0607 	bic.w	r6, r6, #7
 8010bee:	1d23      	adds	r3, r4, #4
 8010bf0:	1af2      	subs	r2, r6, r3
 8010bf2:	d0ae      	beq.n	8010b52 <_malloc_r+0x22>
 8010bf4:	1b9b      	subs	r3, r3, r6
 8010bf6:	50a3      	str	r3, [r4, r2]
 8010bf8:	e7ab      	b.n	8010b52 <_malloc_r+0x22>
 8010bfa:	42a3      	cmp	r3, r4
 8010bfc:	6862      	ldr	r2, [r4, #4]
 8010bfe:	d1dd      	bne.n	8010bbc <_malloc_r+0x8c>
 8010c00:	f8c8 2000 	str.w	r2, [r8]
 8010c04:	e7ec      	b.n	8010be0 <_malloc_r+0xb0>
 8010c06:	4623      	mov	r3, r4
 8010c08:	6864      	ldr	r4, [r4, #4]
 8010c0a:	e7ac      	b.n	8010b66 <_malloc_r+0x36>
 8010c0c:	4634      	mov	r4, r6
 8010c0e:	6876      	ldr	r6, [r6, #4]
 8010c10:	e7b4      	b.n	8010b7c <_malloc_r+0x4c>
 8010c12:	4613      	mov	r3, r2
 8010c14:	e7cc      	b.n	8010bb0 <_malloc_r+0x80>
 8010c16:	230c      	movs	r3, #12
 8010c18:	603b      	str	r3, [r7, #0]
 8010c1a:	4638      	mov	r0, r7
 8010c1c:	f000 f80e 	bl	8010c3c <__malloc_unlock>
 8010c20:	e797      	b.n	8010b52 <_malloc_r+0x22>
 8010c22:	6025      	str	r5, [r4, #0]
 8010c24:	e7dc      	b.n	8010be0 <_malloc_r+0xb0>
 8010c26:	605b      	str	r3, [r3, #4]
 8010c28:	deff      	udf	#255	; 0xff
 8010c2a:	bf00      	nop
 8010c2c:	20008b44 	.word	0x20008b44

08010c30 <__malloc_lock>:
 8010c30:	4801      	ldr	r0, [pc, #4]	; (8010c38 <__malloc_lock+0x8>)
 8010c32:	f7ff beda 	b.w	80109ea <__retarget_lock_acquire_recursive>
 8010c36:	bf00      	nop
 8010c38:	20008b40 	.word	0x20008b40

08010c3c <__malloc_unlock>:
 8010c3c:	4801      	ldr	r0, [pc, #4]	; (8010c44 <__malloc_unlock+0x8>)
 8010c3e:	f7ff bed5 	b.w	80109ec <__retarget_lock_release_recursive>
 8010c42:	bf00      	nop
 8010c44:	20008b40 	.word	0x20008b40

08010c48 <__sfputc_r>:
 8010c48:	6893      	ldr	r3, [r2, #8]
 8010c4a:	3b01      	subs	r3, #1
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	b410      	push	{r4}
 8010c50:	6093      	str	r3, [r2, #8]
 8010c52:	da08      	bge.n	8010c66 <__sfputc_r+0x1e>
 8010c54:	6994      	ldr	r4, [r2, #24]
 8010c56:	42a3      	cmp	r3, r4
 8010c58:	db01      	blt.n	8010c5e <__sfputc_r+0x16>
 8010c5a:	290a      	cmp	r1, #10
 8010c5c:	d103      	bne.n	8010c66 <__sfputc_r+0x1e>
 8010c5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c62:	f000 bb85 	b.w	8011370 <__swbuf_r>
 8010c66:	6813      	ldr	r3, [r2, #0]
 8010c68:	1c58      	adds	r0, r3, #1
 8010c6a:	6010      	str	r0, [r2, #0]
 8010c6c:	7019      	strb	r1, [r3, #0]
 8010c6e:	4608      	mov	r0, r1
 8010c70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c74:	4770      	bx	lr

08010c76 <__sfputs_r>:
 8010c76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c78:	4606      	mov	r6, r0
 8010c7a:	460f      	mov	r7, r1
 8010c7c:	4614      	mov	r4, r2
 8010c7e:	18d5      	adds	r5, r2, r3
 8010c80:	42ac      	cmp	r4, r5
 8010c82:	d101      	bne.n	8010c88 <__sfputs_r+0x12>
 8010c84:	2000      	movs	r0, #0
 8010c86:	e007      	b.n	8010c98 <__sfputs_r+0x22>
 8010c88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c8c:	463a      	mov	r2, r7
 8010c8e:	4630      	mov	r0, r6
 8010c90:	f7ff ffda 	bl	8010c48 <__sfputc_r>
 8010c94:	1c43      	adds	r3, r0, #1
 8010c96:	d1f3      	bne.n	8010c80 <__sfputs_r+0xa>
 8010c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010c9c <_vfiprintf_r>:
 8010c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ca0:	460d      	mov	r5, r1
 8010ca2:	b09d      	sub	sp, #116	; 0x74
 8010ca4:	4614      	mov	r4, r2
 8010ca6:	4698      	mov	r8, r3
 8010ca8:	4606      	mov	r6, r0
 8010caa:	b118      	cbz	r0, 8010cb4 <_vfiprintf_r+0x18>
 8010cac:	6a03      	ldr	r3, [r0, #32]
 8010cae:	b90b      	cbnz	r3, 8010cb4 <_vfiprintf_r+0x18>
 8010cb0:	f7ff fd7a 	bl	80107a8 <__sinit>
 8010cb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010cb6:	07d9      	lsls	r1, r3, #31
 8010cb8:	d405      	bmi.n	8010cc6 <_vfiprintf_r+0x2a>
 8010cba:	89ab      	ldrh	r3, [r5, #12]
 8010cbc:	059a      	lsls	r2, r3, #22
 8010cbe:	d402      	bmi.n	8010cc6 <_vfiprintf_r+0x2a>
 8010cc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010cc2:	f7ff fe92 	bl	80109ea <__retarget_lock_acquire_recursive>
 8010cc6:	89ab      	ldrh	r3, [r5, #12]
 8010cc8:	071b      	lsls	r3, r3, #28
 8010cca:	d501      	bpl.n	8010cd0 <_vfiprintf_r+0x34>
 8010ccc:	692b      	ldr	r3, [r5, #16]
 8010cce:	b99b      	cbnz	r3, 8010cf8 <_vfiprintf_r+0x5c>
 8010cd0:	4629      	mov	r1, r5
 8010cd2:	4630      	mov	r0, r6
 8010cd4:	f000 fb8a 	bl	80113ec <__swsetup_r>
 8010cd8:	b170      	cbz	r0, 8010cf8 <_vfiprintf_r+0x5c>
 8010cda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010cdc:	07dc      	lsls	r4, r3, #31
 8010cde:	d504      	bpl.n	8010cea <_vfiprintf_r+0x4e>
 8010ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8010ce4:	b01d      	add	sp, #116	; 0x74
 8010ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cea:	89ab      	ldrh	r3, [r5, #12]
 8010cec:	0598      	lsls	r0, r3, #22
 8010cee:	d4f7      	bmi.n	8010ce0 <_vfiprintf_r+0x44>
 8010cf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010cf2:	f7ff fe7b 	bl	80109ec <__retarget_lock_release_recursive>
 8010cf6:	e7f3      	b.n	8010ce0 <_vfiprintf_r+0x44>
 8010cf8:	2300      	movs	r3, #0
 8010cfa:	9309      	str	r3, [sp, #36]	; 0x24
 8010cfc:	2320      	movs	r3, #32
 8010cfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010d02:	f8cd 800c 	str.w	r8, [sp, #12]
 8010d06:	2330      	movs	r3, #48	; 0x30
 8010d08:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8010ebc <_vfiprintf_r+0x220>
 8010d0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010d10:	f04f 0901 	mov.w	r9, #1
 8010d14:	4623      	mov	r3, r4
 8010d16:	469a      	mov	sl, r3
 8010d18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010d1c:	b10a      	cbz	r2, 8010d22 <_vfiprintf_r+0x86>
 8010d1e:	2a25      	cmp	r2, #37	; 0x25
 8010d20:	d1f9      	bne.n	8010d16 <_vfiprintf_r+0x7a>
 8010d22:	ebba 0b04 	subs.w	fp, sl, r4
 8010d26:	d00b      	beq.n	8010d40 <_vfiprintf_r+0xa4>
 8010d28:	465b      	mov	r3, fp
 8010d2a:	4622      	mov	r2, r4
 8010d2c:	4629      	mov	r1, r5
 8010d2e:	4630      	mov	r0, r6
 8010d30:	f7ff ffa1 	bl	8010c76 <__sfputs_r>
 8010d34:	3001      	adds	r0, #1
 8010d36:	f000 80a9 	beq.w	8010e8c <_vfiprintf_r+0x1f0>
 8010d3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010d3c:	445a      	add	r2, fp
 8010d3e:	9209      	str	r2, [sp, #36]	; 0x24
 8010d40:	f89a 3000 	ldrb.w	r3, [sl]
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	f000 80a1 	beq.w	8010e8c <_vfiprintf_r+0x1f0>
 8010d4a:	2300      	movs	r3, #0
 8010d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8010d50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010d54:	f10a 0a01 	add.w	sl, sl, #1
 8010d58:	9304      	str	r3, [sp, #16]
 8010d5a:	9307      	str	r3, [sp, #28]
 8010d5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010d60:	931a      	str	r3, [sp, #104]	; 0x68
 8010d62:	4654      	mov	r4, sl
 8010d64:	2205      	movs	r2, #5
 8010d66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d6a:	4854      	ldr	r0, [pc, #336]	; (8010ebc <_vfiprintf_r+0x220>)
 8010d6c:	f7ef fa70 	bl	8000250 <memchr>
 8010d70:	9a04      	ldr	r2, [sp, #16]
 8010d72:	b9d8      	cbnz	r0, 8010dac <_vfiprintf_r+0x110>
 8010d74:	06d1      	lsls	r1, r2, #27
 8010d76:	bf44      	itt	mi
 8010d78:	2320      	movmi	r3, #32
 8010d7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010d7e:	0713      	lsls	r3, r2, #28
 8010d80:	bf44      	itt	mi
 8010d82:	232b      	movmi	r3, #43	; 0x2b
 8010d84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010d88:	f89a 3000 	ldrb.w	r3, [sl]
 8010d8c:	2b2a      	cmp	r3, #42	; 0x2a
 8010d8e:	d015      	beq.n	8010dbc <_vfiprintf_r+0x120>
 8010d90:	9a07      	ldr	r2, [sp, #28]
 8010d92:	4654      	mov	r4, sl
 8010d94:	2000      	movs	r0, #0
 8010d96:	f04f 0c0a 	mov.w	ip, #10
 8010d9a:	4621      	mov	r1, r4
 8010d9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010da0:	3b30      	subs	r3, #48	; 0x30
 8010da2:	2b09      	cmp	r3, #9
 8010da4:	d94d      	bls.n	8010e42 <_vfiprintf_r+0x1a6>
 8010da6:	b1b0      	cbz	r0, 8010dd6 <_vfiprintf_r+0x13a>
 8010da8:	9207      	str	r2, [sp, #28]
 8010daa:	e014      	b.n	8010dd6 <_vfiprintf_r+0x13a>
 8010dac:	eba0 0308 	sub.w	r3, r0, r8
 8010db0:	fa09 f303 	lsl.w	r3, r9, r3
 8010db4:	4313      	orrs	r3, r2
 8010db6:	9304      	str	r3, [sp, #16]
 8010db8:	46a2      	mov	sl, r4
 8010dba:	e7d2      	b.n	8010d62 <_vfiprintf_r+0xc6>
 8010dbc:	9b03      	ldr	r3, [sp, #12]
 8010dbe:	1d19      	adds	r1, r3, #4
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	9103      	str	r1, [sp, #12]
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	bfbb      	ittet	lt
 8010dc8:	425b      	neglt	r3, r3
 8010dca:	f042 0202 	orrlt.w	r2, r2, #2
 8010dce:	9307      	strge	r3, [sp, #28]
 8010dd0:	9307      	strlt	r3, [sp, #28]
 8010dd2:	bfb8      	it	lt
 8010dd4:	9204      	strlt	r2, [sp, #16]
 8010dd6:	7823      	ldrb	r3, [r4, #0]
 8010dd8:	2b2e      	cmp	r3, #46	; 0x2e
 8010dda:	d10c      	bne.n	8010df6 <_vfiprintf_r+0x15a>
 8010ddc:	7863      	ldrb	r3, [r4, #1]
 8010dde:	2b2a      	cmp	r3, #42	; 0x2a
 8010de0:	d134      	bne.n	8010e4c <_vfiprintf_r+0x1b0>
 8010de2:	9b03      	ldr	r3, [sp, #12]
 8010de4:	1d1a      	adds	r2, r3, #4
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	9203      	str	r2, [sp, #12]
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	bfb8      	it	lt
 8010dee:	f04f 33ff 	movlt.w	r3, #4294967295
 8010df2:	3402      	adds	r4, #2
 8010df4:	9305      	str	r3, [sp, #20]
 8010df6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8010ecc <_vfiprintf_r+0x230>
 8010dfa:	7821      	ldrb	r1, [r4, #0]
 8010dfc:	2203      	movs	r2, #3
 8010dfe:	4650      	mov	r0, sl
 8010e00:	f7ef fa26 	bl	8000250 <memchr>
 8010e04:	b138      	cbz	r0, 8010e16 <_vfiprintf_r+0x17a>
 8010e06:	9b04      	ldr	r3, [sp, #16]
 8010e08:	eba0 000a 	sub.w	r0, r0, sl
 8010e0c:	2240      	movs	r2, #64	; 0x40
 8010e0e:	4082      	lsls	r2, r0
 8010e10:	4313      	orrs	r3, r2
 8010e12:	3401      	adds	r4, #1
 8010e14:	9304      	str	r3, [sp, #16]
 8010e16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e1a:	4829      	ldr	r0, [pc, #164]	; (8010ec0 <_vfiprintf_r+0x224>)
 8010e1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010e20:	2206      	movs	r2, #6
 8010e22:	f7ef fa15 	bl	8000250 <memchr>
 8010e26:	2800      	cmp	r0, #0
 8010e28:	d03f      	beq.n	8010eaa <_vfiprintf_r+0x20e>
 8010e2a:	4b26      	ldr	r3, [pc, #152]	; (8010ec4 <_vfiprintf_r+0x228>)
 8010e2c:	bb1b      	cbnz	r3, 8010e76 <_vfiprintf_r+0x1da>
 8010e2e:	9b03      	ldr	r3, [sp, #12]
 8010e30:	3307      	adds	r3, #7
 8010e32:	f023 0307 	bic.w	r3, r3, #7
 8010e36:	3308      	adds	r3, #8
 8010e38:	9303      	str	r3, [sp, #12]
 8010e3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e3c:	443b      	add	r3, r7
 8010e3e:	9309      	str	r3, [sp, #36]	; 0x24
 8010e40:	e768      	b.n	8010d14 <_vfiprintf_r+0x78>
 8010e42:	fb0c 3202 	mla	r2, ip, r2, r3
 8010e46:	460c      	mov	r4, r1
 8010e48:	2001      	movs	r0, #1
 8010e4a:	e7a6      	b.n	8010d9a <_vfiprintf_r+0xfe>
 8010e4c:	2300      	movs	r3, #0
 8010e4e:	3401      	adds	r4, #1
 8010e50:	9305      	str	r3, [sp, #20]
 8010e52:	4619      	mov	r1, r3
 8010e54:	f04f 0c0a 	mov.w	ip, #10
 8010e58:	4620      	mov	r0, r4
 8010e5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010e5e:	3a30      	subs	r2, #48	; 0x30
 8010e60:	2a09      	cmp	r2, #9
 8010e62:	d903      	bls.n	8010e6c <_vfiprintf_r+0x1d0>
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d0c6      	beq.n	8010df6 <_vfiprintf_r+0x15a>
 8010e68:	9105      	str	r1, [sp, #20]
 8010e6a:	e7c4      	b.n	8010df6 <_vfiprintf_r+0x15a>
 8010e6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010e70:	4604      	mov	r4, r0
 8010e72:	2301      	movs	r3, #1
 8010e74:	e7f0      	b.n	8010e58 <_vfiprintf_r+0x1bc>
 8010e76:	ab03      	add	r3, sp, #12
 8010e78:	9300      	str	r3, [sp, #0]
 8010e7a:	462a      	mov	r2, r5
 8010e7c:	4b12      	ldr	r3, [pc, #72]	; (8010ec8 <_vfiprintf_r+0x22c>)
 8010e7e:	a904      	add	r1, sp, #16
 8010e80:	4630      	mov	r0, r6
 8010e82:	f3af 8000 	nop.w
 8010e86:	4607      	mov	r7, r0
 8010e88:	1c78      	adds	r0, r7, #1
 8010e8a:	d1d6      	bne.n	8010e3a <_vfiprintf_r+0x19e>
 8010e8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010e8e:	07d9      	lsls	r1, r3, #31
 8010e90:	d405      	bmi.n	8010e9e <_vfiprintf_r+0x202>
 8010e92:	89ab      	ldrh	r3, [r5, #12]
 8010e94:	059a      	lsls	r2, r3, #22
 8010e96:	d402      	bmi.n	8010e9e <_vfiprintf_r+0x202>
 8010e98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010e9a:	f7ff fda7 	bl	80109ec <__retarget_lock_release_recursive>
 8010e9e:	89ab      	ldrh	r3, [r5, #12]
 8010ea0:	065b      	lsls	r3, r3, #25
 8010ea2:	f53f af1d 	bmi.w	8010ce0 <_vfiprintf_r+0x44>
 8010ea6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010ea8:	e71c      	b.n	8010ce4 <_vfiprintf_r+0x48>
 8010eaa:	ab03      	add	r3, sp, #12
 8010eac:	9300      	str	r3, [sp, #0]
 8010eae:	462a      	mov	r2, r5
 8010eb0:	4b05      	ldr	r3, [pc, #20]	; (8010ec8 <_vfiprintf_r+0x22c>)
 8010eb2:	a904      	add	r1, sp, #16
 8010eb4:	4630      	mov	r0, r6
 8010eb6:	f000 f879 	bl	8010fac <_printf_i>
 8010eba:	e7e4      	b.n	8010e86 <_vfiprintf_r+0x1ea>
 8010ebc:	0801420d 	.word	0x0801420d
 8010ec0:	08014217 	.word	0x08014217
 8010ec4:	00000000 	.word	0x00000000
 8010ec8:	08010c77 	.word	0x08010c77
 8010ecc:	08014213 	.word	0x08014213

08010ed0 <_printf_common>:
 8010ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ed4:	4616      	mov	r6, r2
 8010ed6:	4699      	mov	r9, r3
 8010ed8:	688a      	ldr	r2, [r1, #8]
 8010eda:	690b      	ldr	r3, [r1, #16]
 8010edc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010ee0:	4293      	cmp	r3, r2
 8010ee2:	bfb8      	it	lt
 8010ee4:	4613      	movlt	r3, r2
 8010ee6:	6033      	str	r3, [r6, #0]
 8010ee8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010eec:	4607      	mov	r7, r0
 8010eee:	460c      	mov	r4, r1
 8010ef0:	b10a      	cbz	r2, 8010ef6 <_printf_common+0x26>
 8010ef2:	3301      	adds	r3, #1
 8010ef4:	6033      	str	r3, [r6, #0]
 8010ef6:	6823      	ldr	r3, [r4, #0]
 8010ef8:	0699      	lsls	r1, r3, #26
 8010efa:	bf42      	ittt	mi
 8010efc:	6833      	ldrmi	r3, [r6, #0]
 8010efe:	3302      	addmi	r3, #2
 8010f00:	6033      	strmi	r3, [r6, #0]
 8010f02:	6825      	ldr	r5, [r4, #0]
 8010f04:	f015 0506 	ands.w	r5, r5, #6
 8010f08:	d106      	bne.n	8010f18 <_printf_common+0x48>
 8010f0a:	f104 0a19 	add.w	sl, r4, #25
 8010f0e:	68e3      	ldr	r3, [r4, #12]
 8010f10:	6832      	ldr	r2, [r6, #0]
 8010f12:	1a9b      	subs	r3, r3, r2
 8010f14:	42ab      	cmp	r3, r5
 8010f16:	dc26      	bgt.n	8010f66 <_printf_common+0x96>
 8010f18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010f1c:	1e13      	subs	r3, r2, #0
 8010f1e:	6822      	ldr	r2, [r4, #0]
 8010f20:	bf18      	it	ne
 8010f22:	2301      	movne	r3, #1
 8010f24:	0692      	lsls	r2, r2, #26
 8010f26:	d42b      	bmi.n	8010f80 <_printf_common+0xb0>
 8010f28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010f2c:	4649      	mov	r1, r9
 8010f2e:	4638      	mov	r0, r7
 8010f30:	47c0      	blx	r8
 8010f32:	3001      	adds	r0, #1
 8010f34:	d01e      	beq.n	8010f74 <_printf_common+0xa4>
 8010f36:	6823      	ldr	r3, [r4, #0]
 8010f38:	6922      	ldr	r2, [r4, #16]
 8010f3a:	f003 0306 	and.w	r3, r3, #6
 8010f3e:	2b04      	cmp	r3, #4
 8010f40:	bf02      	ittt	eq
 8010f42:	68e5      	ldreq	r5, [r4, #12]
 8010f44:	6833      	ldreq	r3, [r6, #0]
 8010f46:	1aed      	subeq	r5, r5, r3
 8010f48:	68a3      	ldr	r3, [r4, #8]
 8010f4a:	bf0c      	ite	eq
 8010f4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010f50:	2500      	movne	r5, #0
 8010f52:	4293      	cmp	r3, r2
 8010f54:	bfc4      	itt	gt
 8010f56:	1a9b      	subgt	r3, r3, r2
 8010f58:	18ed      	addgt	r5, r5, r3
 8010f5a:	2600      	movs	r6, #0
 8010f5c:	341a      	adds	r4, #26
 8010f5e:	42b5      	cmp	r5, r6
 8010f60:	d11a      	bne.n	8010f98 <_printf_common+0xc8>
 8010f62:	2000      	movs	r0, #0
 8010f64:	e008      	b.n	8010f78 <_printf_common+0xa8>
 8010f66:	2301      	movs	r3, #1
 8010f68:	4652      	mov	r2, sl
 8010f6a:	4649      	mov	r1, r9
 8010f6c:	4638      	mov	r0, r7
 8010f6e:	47c0      	blx	r8
 8010f70:	3001      	adds	r0, #1
 8010f72:	d103      	bne.n	8010f7c <_printf_common+0xac>
 8010f74:	f04f 30ff 	mov.w	r0, #4294967295
 8010f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f7c:	3501      	adds	r5, #1
 8010f7e:	e7c6      	b.n	8010f0e <_printf_common+0x3e>
 8010f80:	18e1      	adds	r1, r4, r3
 8010f82:	1c5a      	adds	r2, r3, #1
 8010f84:	2030      	movs	r0, #48	; 0x30
 8010f86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010f8a:	4422      	add	r2, r4
 8010f8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010f90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010f94:	3302      	adds	r3, #2
 8010f96:	e7c7      	b.n	8010f28 <_printf_common+0x58>
 8010f98:	2301      	movs	r3, #1
 8010f9a:	4622      	mov	r2, r4
 8010f9c:	4649      	mov	r1, r9
 8010f9e:	4638      	mov	r0, r7
 8010fa0:	47c0      	blx	r8
 8010fa2:	3001      	adds	r0, #1
 8010fa4:	d0e6      	beq.n	8010f74 <_printf_common+0xa4>
 8010fa6:	3601      	adds	r6, #1
 8010fa8:	e7d9      	b.n	8010f5e <_printf_common+0x8e>
	...

08010fac <_printf_i>:
 8010fac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010fb0:	7e0f      	ldrb	r7, [r1, #24]
 8010fb2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010fb4:	2f78      	cmp	r7, #120	; 0x78
 8010fb6:	4691      	mov	r9, r2
 8010fb8:	4680      	mov	r8, r0
 8010fba:	460c      	mov	r4, r1
 8010fbc:	469a      	mov	sl, r3
 8010fbe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010fc2:	d807      	bhi.n	8010fd4 <_printf_i+0x28>
 8010fc4:	2f62      	cmp	r7, #98	; 0x62
 8010fc6:	d80a      	bhi.n	8010fde <_printf_i+0x32>
 8010fc8:	2f00      	cmp	r7, #0
 8010fca:	f000 80d4 	beq.w	8011176 <_printf_i+0x1ca>
 8010fce:	2f58      	cmp	r7, #88	; 0x58
 8010fd0:	f000 80c0 	beq.w	8011154 <_printf_i+0x1a8>
 8010fd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010fd8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010fdc:	e03a      	b.n	8011054 <_printf_i+0xa8>
 8010fde:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010fe2:	2b15      	cmp	r3, #21
 8010fe4:	d8f6      	bhi.n	8010fd4 <_printf_i+0x28>
 8010fe6:	a101      	add	r1, pc, #4	; (adr r1, 8010fec <_printf_i+0x40>)
 8010fe8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010fec:	08011045 	.word	0x08011045
 8010ff0:	08011059 	.word	0x08011059
 8010ff4:	08010fd5 	.word	0x08010fd5
 8010ff8:	08010fd5 	.word	0x08010fd5
 8010ffc:	08010fd5 	.word	0x08010fd5
 8011000:	08010fd5 	.word	0x08010fd5
 8011004:	08011059 	.word	0x08011059
 8011008:	08010fd5 	.word	0x08010fd5
 801100c:	08010fd5 	.word	0x08010fd5
 8011010:	08010fd5 	.word	0x08010fd5
 8011014:	08010fd5 	.word	0x08010fd5
 8011018:	0801115d 	.word	0x0801115d
 801101c:	08011085 	.word	0x08011085
 8011020:	08011117 	.word	0x08011117
 8011024:	08010fd5 	.word	0x08010fd5
 8011028:	08010fd5 	.word	0x08010fd5
 801102c:	0801117f 	.word	0x0801117f
 8011030:	08010fd5 	.word	0x08010fd5
 8011034:	08011085 	.word	0x08011085
 8011038:	08010fd5 	.word	0x08010fd5
 801103c:	08010fd5 	.word	0x08010fd5
 8011040:	0801111f 	.word	0x0801111f
 8011044:	682b      	ldr	r3, [r5, #0]
 8011046:	1d1a      	adds	r2, r3, #4
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	602a      	str	r2, [r5, #0]
 801104c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011050:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011054:	2301      	movs	r3, #1
 8011056:	e09f      	b.n	8011198 <_printf_i+0x1ec>
 8011058:	6820      	ldr	r0, [r4, #0]
 801105a:	682b      	ldr	r3, [r5, #0]
 801105c:	0607      	lsls	r7, r0, #24
 801105e:	f103 0104 	add.w	r1, r3, #4
 8011062:	6029      	str	r1, [r5, #0]
 8011064:	d501      	bpl.n	801106a <_printf_i+0xbe>
 8011066:	681e      	ldr	r6, [r3, #0]
 8011068:	e003      	b.n	8011072 <_printf_i+0xc6>
 801106a:	0646      	lsls	r6, r0, #25
 801106c:	d5fb      	bpl.n	8011066 <_printf_i+0xba>
 801106e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8011072:	2e00      	cmp	r6, #0
 8011074:	da03      	bge.n	801107e <_printf_i+0xd2>
 8011076:	232d      	movs	r3, #45	; 0x2d
 8011078:	4276      	negs	r6, r6
 801107a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801107e:	485a      	ldr	r0, [pc, #360]	; (80111e8 <_printf_i+0x23c>)
 8011080:	230a      	movs	r3, #10
 8011082:	e012      	b.n	80110aa <_printf_i+0xfe>
 8011084:	682b      	ldr	r3, [r5, #0]
 8011086:	6820      	ldr	r0, [r4, #0]
 8011088:	1d19      	adds	r1, r3, #4
 801108a:	6029      	str	r1, [r5, #0]
 801108c:	0605      	lsls	r5, r0, #24
 801108e:	d501      	bpl.n	8011094 <_printf_i+0xe8>
 8011090:	681e      	ldr	r6, [r3, #0]
 8011092:	e002      	b.n	801109a <_printf_i+0xee>
 8011094:	0641      	lsls	r1, r0, #25
 8011096:	d5fb      	bpl.n	8011090 <_printf_i+0xe4>
 8011098:	881e      	ldrh	r6, [r3, #0]
 801109a:	4853      	ldr	r0, [pc, #332]	; (80111e8 <_printf_i+0x23c>)
 801109c:	2f6f      	cmp	r7, #111	; 0x6f
 801109e:	bf0c      	ite	eq
 80110a0:	2308      	moveq	r3, #8
 80110a2:	230a      	movne	r3, #10
 80110a4:	2100      	movs	r1, #0
 80110a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80110aa:	6865      	ldr	r5, [r4, #4]
 80110ac:	60a5      	str	r5, [r4, #8]
 80110ae:	2d00      	cmp	r5, #0
 80110b0:	bfa2      	ittt	ge
 80110b2:	6821      	ldrge	r1, [r4, #0]
 80110b4:	f021 0104 	bicge.w	r1, r1, #4
 80110b8:	6021      	strge	r1, [r4, #0]
 80110ba:	b90e      	cbnz	r6, 80110c0 <_printf_i+0x114>
 80110bc:	2d00      	cmp	r5, #0
 80110be:	d04b      	beq.n	8011158 <_printf_i+0x1ac>
 80110c0:	4615      	mov	r5, r2
 80110c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80110c6:	fb03 6711 	mls	r7, r3, r1, r6
 80110ca:	5dc7      	ldrb	r7, [r0, r7]
 80110cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80110d0:	4637      	mov	r7, r6
 80110d2:	42bb      	cmp	r3, r7
 80110d4:	460e      	mov	r6, r1
 80110d6:	d9f4      	bls.n	80110c2 <_printf_i+0x116>
 80110d8:	2b08      	cmp	r3, #8
 80110da:	d10b      	bne.n	80110f4 <_printf_i+0x148>
 80110dc:	6823      	ldr	r3, [r4, #0]
 80110de:	07de      	lsls	r6, r3, #31
 80110e0:	d508      	bpl.n	80110f4 <_printf_i+0x148>
 80110e2:	6923      	ldr	r3, [r4, #16]
 80110e4:	6861      	ldr	r1, [r4, #4]
 80110e6:	4299      	cmp	r1, r3
 80110e8:	bfde      	ittt	le
 80110ea:	2330      	movle	r3, #48	; 0x30
 80110ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80110f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80110f4:	1b52      	subs	r2, r2, r5
 80110f6:	6122      	str	r2, [r4, #16]
 80110f8:	f8cd a000 	str.w	sl, [sp]
 80110fc:	464b      	mov	r3, r9
 80110fe:	aa03      	add	r2, sp, #12
 8011100:	4621      	mov	r1, r4
 8011102:	4640      	mov	r0, r8
 8011104:	f7ff fee4 	bl	8010ed0 <_printf_common>
 8011108:	3001      	adds	r0, #1
 801110a:	d14a      	bne.n	80111a2 <_printf_i+0x1f6>
 801110c:	f04f 30ff 	mov.w	r0, #4294967295
 8011110:	b004      	add	sp, #16
 8011112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011116:	6823      	ldr	r3, [r4, #0]
 8011118:	f043 0320 	orr.w	r3, r3, #32
 801111c:	6023      	str	r3, [r4, #0]
 801111e:	4833      	ldr	r0, [pc, #204]	; (80111ec <_printf_i+0x240>)
 8011120:	2778      	movs	r7, #120	; 0x78
 8011122:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011126:	6823      	ldr	r3, [r4, #0]
 8011128:	6829      	ldr	r1, [r5, #0]
 801112a:	061f      	lsls	r7, r3, #24
 801112c:	f851 6b04 	ldr.w	r6, [r1], #4
 8011130:	d402      	bmi.n	8011138 <_printf_i+0x18c>
 8011132:	065f      	lsls	r7, r3, #25
 8011134:	bf48      	it	mi
 8011136:	b2b6      	uxthmi	r6, r6
 8011138:	07df      	lsls	r7, r3, #31
 801113a:	bf48      	it	mi
 801113c:	f043 0320 	orrmi.w	r3, r3, #32
 8011140:	6029      	str	r1, [r5, #0]
 8011142:	bf48      	it	mi
 8011144:	6023      	strmi	r3, [r4, #0]
 8011146:	b91e      	cbnz	r6, 8011150 <_printf_i+0x1a4>
 8011148:	6823      	ldr	r3, [r4, #0]
 801114a:	f023 0320 	bic.w	r3, r3, #32
 801114e:	6023      	str	r3, [r4, #0]
 8011150:	2310      	movs	r3, #16
 8011152:	e7a7      	b.n	80110a4 <_printf_i+0xf8>
 8011154:	4824      	ldr	r0, [pc, #144]	; (80111e8 <_printf_i+0x23c>)
 8011156:	e7e4      	b.n	8011122 <_printf_i+0x176>
 8011158:	4615      	mov	r5, r2
 801115a:	e7bd      	b.n	80110d8 <_printf_i+0x12c>
 801115c:	682b      	ldr	r3, [r5, #0]
 801115e:	6826      	ldr	r6, [r4, #0]
 8011160:	6961      	ldr	r1, [r4, #20]
 8011162:	1d18      	adds	r0, r3, #4
 8011164:	6028      	str	r0, [r5, #0]
 8011166:	0635      	lsls	r5, r6, #24
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	d501      	bpl.n	8011170 <_printf_i+0x1c4>
 801116c:	6019      	str	r1, [r3, #0]
 801116e:	e002      	b.n	8011176 <_printf_i+0x1ca>
 8011170:	0670      	lsls	r0, r6, #25
 8011172:	d5fb      	bpl.n	801116c <_printf_i+0x1c0>
 8011174:	8019      	strh	r1, [r3, #0]
 8011176:	2300      	movs	r3, #0
 8011178:	6123      	str	r3, [r4, #16]
 801117a:	4615      	mov	r5, r2
 801117c:	e7bc      	b.n	80110f8 <_printf_i+0x14c>
 801117e:	682b      	ldr	r3, [r5, #0]
 8011180:	1d1a      	adds	r2, r3, #4
 8011182:	602a      	str	r2, [r5, #0]
 8011184:	681d      	ldr	r5, [r3, #0]
 8011186:	6862      	ldr	r2, [r4, #4]
 8011188:	2100      	movs	r1, #0
 801118a:	4628      	mov	r0, r5
 801118c:	f7ef f860 	bl	8000250 <memchr>
 8011190:	b108      	cbz	r0, 8011196 <_printf_i+0x1ea>
 8011192:	1b40      	subs	r0, r0, r5
 8011194:	6060      	str	r0, [r4, #4]
 8011196:	6863      	ldr	r3, [r4, #4]
 8011198:	6123      	str	r3, [r4, #16]
 801119a:	2300      	movs	r3, #0
 801119c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80111a0:	e7aa      	b.n	80110f8 <_printf_i+0x14c>
 80111a2:	6923      	ldr	r3, [r4, #16]
 80111a4:	462a      	mov	r2, r5
 80111a6:	4649      	mov	r1, r9
 80111a8:	4640      	mov	r0, r8
 80111aa:	47d0      	blx	sl
 80111ac:	3001      	adds	r0, #1
 80111ae:	d0ad      	beq.n	801110c <_printf_i+0x160>
 80111b0:	6823      	ldr	r3, [r4, #0]
 80111b2:	079b      	lsls	r3, r3, #30
 80111b4:	d413      	bmi.n	80111de <_printf_i+0x232>
 80111b6:	68e0      	ldr	r0, [r4, #12]
 80111b8:	9b03      	ldr	r3, [sp, #12]
 80111ba:	4298      	cmp	r0, r3
 80111bc:	bfb8      	it	lt
 80111be:	4618      	movlt	r0, r3
 80111c0:	e7a6      	b.n	8011110 <_printf_i+0x164>
 80111c2:	2301      	movs	r3, #1
 80111c4:	4632      	mov	r2, r6
 80111c6:	4649      	mov	r1, r9
 80111c8:	4640      	mov	r0, r8
 80111ca:	47d0      	blx	sl
 80111cc:	3001      	adds	r0, #1
 80111ce:	d09d      	beq.n	801110c <_printf_i+0x160>
 80111d0:	3501      	adds	r5, #1
 80111d2:	68e3      	ldr	r3, [r4, #12]
 80111d4:	9903      	ldr	r1, [sp, #12]
 80111d6:	1a5b      	subs	r3, r3, r1
 80111d8:	42ab      	cmp	r3, r5
 80111da:	dcf2      	bgt.n	80111c2 <_printf_i+0x216>
 80111dc:	e7eb      	b.n	80111b6 <_printf_i+0x20a>
 80111de:	2500      	movs	r5, #0
 80111e0:	f104 0619 	add.w	r6, r4, #25
 80111e4:	e7f5      	b.n	80111d2 <_printf_i+0x226>
 80111e6:	bf00      	nop
 80111e8:	0801421e 	.word	0x0801421e
 80111ec:	0801422f 	.word	0x0801422f

080111f0 <__sflush_r>:
 80111f0:	898a      	ldrh	r2, [r1, #12]
 80111f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111f6:	4605      	mov	r5, r0
 80111f8:	0710      	lsls	r0, r2, #28
 80111fa:	460c      	mov	r4, r1
 80111fc:	d458      	bmi.n	80112b0 <__sflush_r+0xc0>
 80111fe:	684b      	ldr	r3, [r1, #4]
 8011200:	2b00      	cmp	r3, #0
 8011202:	dc05      	bgt.n	8011210 <__sflush_r+0x20>
 8011204:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011206:	2b00      	cmp	r3, #0
 8011208:	dc02      	bgt.n	8011210 <__sflush_r+0x20>
 801120a:	2000      	movs	r0, #0
 801120c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011210:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011212:	2e00      	cmp	r6, #0
 8011214:	d0f9      	beq.n	801120a <__sflush_r+0x1a>
 8011216:	2300      	movs	r3, #0
 8011218:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801121c:	682f      	ldr	r7, [r5, #0]
 801121e:	6a21      	ldr	r1, [r4, #32]
 8011220:	602b      	str	r3, [r5, #0]
 8011222:	d032      	beq.n	801128a <__sflush_r+0x9a>
 8011224:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011226:	89a3      	ldrh	r3, [r4, #12]
 8011228:	075a      	lsls	r2, r3, #29
 801122a:	d505      	bpl.n	8011238 <__sflush_r+0x48>
 801122c:	6863      	ldr	r3, [r4, #4]
 801122e:	1ac0      	subs	r0, r0, r3
 8011230:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011232:	b10b      	cbz	r3, 8011238 <__sflush_r+0x48>
 8011234:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011236:	1ac0      	subs	r0, r0, r3
 8011238:	2300      	movs	r3, #0
 801123a:	4602      	mov	r2, r0
 801123c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801123e:	6a21      	ldr	r1, [r4, #32]
 8011240:	4628      	mov	r0, r5
 8011242:	47b0      	blx	r6
 8011244:	1c43      	adds	r3, r0, #1
 8011246:	89a3      	ldrh	r3, [r4, #12]
 8011248:	d106      	bne.n	8011258 <__sflush_r+0x68>
 801124a:	6829      	ldr	r1, [r5, #0]
 801124c:	291d      	cmp	r1, #29
 801124e:	d82b      	bhi.n	80112a8 <__sflush_r+0xb8>
 8011250:	4a29      	ldr	r2, [pc, #164]	; (80112f8 <__sflush_r+0x108>)
 8011252:	410a      	asrs	r2, r1
 8011254:	07d6      	lsls	r6, r2, #31
 8011256:	d427      	bmi.n	80112a8 <__sflush_r+0xb8>
 8011258:	2200      	movs	r2, #0
 801125a:	6062      	str	r2, [r4, #4]
 801125c:	04d9      	lsls	r1, r3, #19
 801125e:	6922      	ldr	r2, [r4, #16]
 8011260:	6022      	str	r2, [r4, #0]
 8011262:	d504      	bpl.n	801126e <__sflush_r+0x7e>
 8011264:	1c42      	adds	r2, r0, #1
 8011266:	d101      	bne.n	801126c <__sflush_r+0x7c>
 8011268:	682b      	ldr	r3, [r5, #0]
 801126a:	b903      	cbnz	r3, 801126e <__sflush_r+0x7e>
 801126c:	6560      	str	r0, [r4, #84]	; 0x54
 801126e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011270:	602f      	str	r7, [r5, #0]
 8011272:	2900      	cmp	r1, #0
 8011274:	d0c9      	beq.n	801120a <__sflush_r+0x1a>
 8011276:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801127a:	4299      	cmp	r1, r3
 801127c:	d002      	beq.n	8011284 <__sflush_r+0x94>
 801127e:	4628      	mov	r0, r5
 8011280:	f7ff fbe2 	bl	8010a48 <_free_r>
 8011284:	2000      	movs	r0, #0
 8011286:	6360      	str	r0, [r4, #52]	; 0x34
 8011288:	e7c0      	b.n	801120c <__sflush_r+0x1c>
 801128a:	2301      	movs	r3, #1
 801128c:	4628      	mov	r0, r5
 801128e:	47b0      	blx	r6
 8011290:	1c41      	adds	r1, r0, #1
 8011292:	d1c8      	bne.n	8011226 <__sflush_r+0x36>
 8011294:	682b      	ldr	r3, [r5, #0]
 8011296:	2b00      	cmp	r3, #0
 8011298:	d0c5      	beq.n	8011226 <__sflush_r+0x36>
 801129a:	2b1d      	cmp	r3, #29
 801129c:	d001      	beq.n	80112a2 <__sflush_r+0xb2>
 801129e:	2b16      	cmp	r3, #22
 80112a0:	d101      	bne.n	80112a6 <__sflush_r+0xb6>
 80112a2:	602f      	str	r7, [r5, #0]
 80112a4:	e7b1      	b.n	801120a <__sflush_r+0x1a>
 80112a6:	89a3      	ldrh	r3, [r4, #12]
 80112a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80112ac:	81a3      	strh	r3, [r4, #12]
 80112ae:	e7ad      	b.n	801120c <__sflush_r+0x1c>
 80112b0:	690f      	ldr	r7, [r1, #16]
 80112b2:	2f00      	cmp	r7, #0
 80112b4:	d0a9      	beq.n	801120a <__sflush_r+0x1a>
 80112b6:	0793      	lsls	r3, r2, #30
 80112b8:	680e      	ldr	r6, [r1, #0]
 80112ba:	bf08      	it	eq
 80112bc:	694b      	ldreq	r3, [r1, #20]
 80112be:	600f      	str	r7, [r1, #0]
 80112c0:	bf18      	it	ne
 80112c2:	2300      	movne	r3, #0
 80112c4:	eba6 0807 	sub.w	r8, r6, r7
 80112c8:	608b      	str	r3, [r1, #8]
 80112ca:	f1b8 0f00 	cmp.w	r8, #0
 80112ce:	dd9c      	ble.n	801120a <__sflush_r+0x1a>
 80112d0:	6a21      	ldr	r1, [r4, #32]
 80112d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80112d4:	4643      	mov	r3, r8
 80112d6:	463a      	mov	r2, r7
 80112d8:	4628      	mov	r0, r5
 80112da:	47b0      	blx	r6
 80112dc:	2800      	cmp	r0, #0
 80112de:	dc06      	bgt.n	80112ee <__sflush_r+0xfe>
 80112e0:	89a3      	ldrh	r3, [r4, #12]
 80112e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80112e6:	81a3      	strh	r3, [r4, #12]
 80112e8:	f04f 30ff 	mov.w	r0, #4294967295
 80112ec:	e78e      	b.n	801120c <__sflush_r+0x1c>
 80112ee:	4407      	add	r7, r0
 80112f0:	eba8 0800 	sub.w	r8, r8, r0
 80112f4:	e7e9      	b.n	80112ca <__sflush_r+0xda>
 80112f6:	bf00      	nop
 80112f8:	dfbffffe 	.word	0xdfbffffe

080112fc <_fflush_r>:
 80112fc:	b538      	push	{r3, r4, r5, lr}
 80112fe:	690b      	ldr	r3, [r1, #16]
 8011300:	4605      	mov	r5, r0
 8011302:	460c      	mov	r4, r1
 8011304:	b913      	cbnz	r3, 801130c <_fflush_r+0x10>
 8011306:	2500      	movs	r5, #0
 8011308:	4628      	mov	r0, r5
 801130a:	bd38      	pop	{r3, r4, r5, pc}
 801130c:	b118      	cbz	r0, 8011316 <_fflush_r+0x1a>
 801130e:	6a03      	ldr	r3, [r0, #32]
 8011310:	b90b      	cbnz	r3, 8011316 <_fflush_r+0x1a>
 8011312:	f7ff fa49 	bl	80107a8 <__sinit>
 8011316:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801131a:	2b00      	cmp	r3, #0
 801131c:	d0f3      	beq.n	8011306 <_fflush_r+0xa>
 801131e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011320:	07d0      	lsls	r0, r2, #31
 8011322:	d404      	bmi.n	801132e <_fflush_r+0x32>
 8011324:	0599      	lsls	r1, r3, #22
 8011326:	d402      	bmi.n	801132e <_fflush_r+0x32>
 8011328:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801132a:	f7ff fb5e 	bl	80109ea <__retarget_lock_acquire_recursive>
 801132e:	4628      	mov	r0, r5
 8011330:	4621      	mov	r1, r4
 8011332:	f7ff ff5d 	bl	80111f0 <__sflush_r>
 8011336:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011338:	07da      	lsls	r2, r3, #31
 801133a:	4605      	mov	r5, r0
 801133c:	d4e4      	bmi.n	8011308 <_fflush_r+0xc>
 801133e:	89a3      	ldrh	r3, [r4, #12]
 8011340:	059b      	lsls	r3, r3, #22
 8011342:	d4e1      	bmi.n	8011308 <_fflush_r+0xc>
 8011344:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011346:	f7ff fb51 	bl	80109ec <__retarget_lock_release_recursive>
 801134a:	e7dd      	b.n	8011308 <_fflush_r+0xc>

0801134c <fiprintf>:
 801134c:	b40e      	push	{r1, r2, r3}
 801134e:	b503      	push	{r0, r1, lr}
 8011350:	4601      	mov	r1, r0
 8011352:	ab03      	add	r3, sp, #12
 8011354:	4805      	ldr	r0, [pc, #20]	; (801136c <fiprintf+0x20>)
 8011356:	f853 2b04 	ldr.w	r2, [r3], #4
 801135a:	6800      	ldr	r0, [r0, #0]
 801135c:	9301      	str	r3, [sp, #4]
 801135e:	f7ff fc9d 	bl	8010c9c <_vfiprintf_r>
 8011362:	b002      	add	sp, #8
 8011364:	f85d eb04 	ldr.w	lr, [sp], #4
 8011368:	b003      	add	sp, #12
 801136a:	4770      	bx	lr
 801136c:	20000084 	.word	0x20000084

08011370 <__swbuf_r>:
 8011370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011372:	460e      	mov	r6, r1
 8011374:	4614      	mov	r4, r2
 8011376:	4605      	mov	r5, r0
 8011378:	b118      	cbz	r0, 8011382 <__swbuf_r+0x12>
 801137a:	6a03      	ldr	r3, [r0, #32]
 801137c:	b90b      	cbnz	r3, 8011382 <__swbuf_r+0x12>
 801137e:	f7ff fa13 	bl	80107a8 <__sinit>
 8011382:	69a3      	ldr	r3, [r4, #24]
 8011384:	60a3      	str	r3, [r4, #8]
 8011386:	89a3      	ldrh	r3, [r4, #12]
 8011388:	071a      	lsls	r2, r3, #28
 801138a:	d525      	bpl.n	80113d8 <__swbuf_r+0x68>
 801138c:	6923      	ldr	r3, [r4, #16]
 801138e:	b31b      	cbz	r3, 80113d8 <__swbuf_r+0x68>
 8011390:	6823      	ldr	r3, [r4, #0]
 8011392:	6922      	ldr	r2, [r4, #16]
 8011394:	1a98      	subs	r0, r3, r2
 8011396:	6963      	ldr	r3, [r4, #20]
 8011398:	b2f6      	uxtb	r6, r6
 801139a:	4283      	cmp	r3, r0
 801139c:	4637      	mov	r7, r6
 801139e:	dc04      	bgt.n	80113aa <__swbuf_r+0x3a>
 80113a0:	4621      	mov	r1, r4
 80113a2:	4628      	mov	r0, r5
 80113a4:	f7ff ffaa 	bl	80112fc <_fflush_r>
 80113a8:	b9e0      	cbnz	r0, 80113e4 <__swbuf_r+0x74>
 80113aa:	68a3      	ldr	r3, [r4, #8]
 80113ac:	3b01      	subs	r3, #1
 80113ae:	60a3      	str	r3, [r4, #8]
 80113b0:	6823      	ldr	r3, [r4, #0]
 80113b2:	1c5a      	adds	r2, r3, #1
 80113b4:	6022      	str	r2, [r4, #0]
 80113b6:	701e      	strb	r6, [r3, #0]
 80113b8:	6962      	ldr	r2, [r4, #20]
 80113ba:	1c43      	adds	r3, r0, #1
 80113bc:	429a      	cmp	r2, r3
 80113be:	d004      	beq.n	80113ca <__swbuf_r+0x5a>
 80113c0:	89a3      	ldrh	r3, [r4, #12]
 80113c2:	07db      	lsls	r3, r3, #31
 80113c4:	d506      	bpl.n	80113d4 <__swbuf_r+0x64>
 80113c6:	2e0a      	cmp	r6, #10
 80113c8:	d104      	bne.n	80113d4 <__swbuf_r+0x64>
 80113ca:	4621      	mov	r1, r4
 80113cc:	4628      	mov	r0, r5
 80113ce:	f7ff ff95 	bl	80112fc <_fflush_r>
 80113d2:	b938      	cbnz	r0, 80113e4 <__swbuf_r+0x74>
 80113d4:	4638      	mov	r0, r7
 80113d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80113d8:	4621      	mov	r1, r4
 80113da:	4628      	mov	r0, r5
 80113dc:	f000 f806 	bl	80113ec <__swsetup_r>
 80113e0:	2800      	cmp	r0, #0
 80113e2:	d0d5      	beq.n	8011390 <__swbuf_r+0x20>
 80113e4:	f04f 37ff 	mov.w	r7, #4294967295
 80113e8:	e7f4      	b.n	80113d4 <__swbuf_r+0x64>
	...

080113ec <__swsetup_r>:
 80113ec:	b538      	push	{r3, r4, r5, lr}
 80113ee:	4b2a      	ldr	r3, [pc, #168]	; (8011498 <__swsetup_r+0xac>)
 80113f0:	4605      	mov	r5, r0
 80113f2:	6818      	ldr	r0, [r3, #0]
 80113f4:	460c      	mov	r4, r1
 80113f6:	b118      	cbz	r0, 8011400 <__swsetup_r+0x14>
 80113f8:	6a03      	ldr	r3, [r0, #32]
 80113fa:	b90b      	cbnz	r3, 8011400 <__swsetup_r+0x14>
 80113fc:	f7ff f9d4 	bl	80107a8 <__sinit>
 8011400:	89a3      	ldrh	r3, [r4, #12]
 8011402:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011406:	0718      	lsls	r0, r3, #28
 8011408:	d422      	bmi.n	8011450 <__swsetup_r+0x64>
 801140a:	06d9      	lsls	r1, r3, #27
 801140c:	d407      	bmi.n	801141e <__swsetup_r+0x32>
 801140e:	2309      	movs	r3, #9
 8011410:	602b      	str	r3, [r5, #0]
 8011412:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011416:	81a3      	strh	r3, [r4, #12]
 8011418:	f04f 30ff 	mov.w	r0, #4294967295
 801141c:	e034      	b.n	8011488 <__swsetup_r+0x9c>
 801141e:	0758      	lsls	r0, r3, #29
 8011420:	d512      	bpl.n	8011448 <__swsetup_r+0x5c>
 8011422:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011424:	b141      	cbz	r1, 8011438 <__swsetup_r+0x4c>
 8011426:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801142a:	4299      	cmp	r1, r3
 801142c:	d002      	beq.n	8011434 <__swsetup_r+0x48>
 801142e:	4628      	mov	r0, r5
 8011430:	f7ff fb0a 	bl	8010a48 <_free_r>
 8011434:	2300      	movs	r3, #0
 8011436:	6363      	str	r3, [r4, #52]	; 0x34
 8011438:	89a3      	ldrh	r3, [r4, #12]
 801143a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801143e:	81a3      	strh	r3, [r4, #12]
 8011440:	2300      	movs	r3, #0
 8011442:	6063      	str	r3, [r4, #4]
 8011444:	6923      	ldr	r3, [r4, #16]
 8011446:	6023      	str	r3, [r4, #0]
 8011448:	89a3      	ldrh	r3, [r4, #12]
 801144a:	f043 0308 	orr.w	r3, r3, #8
 801144e:	81a3      	strh	r3, [r4, #12]
 8011450:	6923      	ldr	r3, [r4, #16]
 8011452:	b94b      	cbnz	r3, 8011468 <__swsetup_r+0x7c>
 8011454:	89a3      	ldrh	r3, [r4, #12]
 8011456:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801145a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801145e:	d003      	beq.n	8011468 <__swsetup_r+0x7c>
 8011460:	4621      	mov	r1, r4
 8011462:	4628      	mov	r0, r5
 8011464:	f000 f857 	bl	8011516 <__smakebuf_r>
 8011468:	89a0      	ldrh	r0, [r4, #12]
 801146a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801146e:	f010 0301 	ands.w	r3, r0, #1
 8011472:	d00a      	beq.n	801148a <__swsetup_r+0x9e>
 8011474:	2300      	movs	r3, #0
 8011476:	60a3      	str	r3, [r4, #8]
 8011478:	6963      	ldr	r3, [r4, #20]
 801147a:	425b      	negs	r3, r3
 801147c:	61a3      	str	r3, [r4, #24]
 801147e:	6923      	ldr	r3, [r4, #16]
 8011480:	b943      	cbnz	r3, 8011494 <__swsetup_r+0xa8>
 8011482:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011486:	d1c4      	bne.n	8011412 <__swsetup_r+0x26>
 8011488:	bd38      	pop	{r3, r4, r5, pc}
 801148a:	0781      	lsls	r1, r0, #30
 801148c:	bf58      	it	pl
 801148e:	6963      	ldrpl	r3, [r4, #20]
 8011490:	60a3      	str	r3, [r4, #8]
 8011492:	e7f4      	b.n	801147e <__swsetup_r+0x92>
 8011494:	2000      	movs	r0, #0
 8011496:	e7f7      	b.n	8011488 <__swsetup_r+0x9c>
 8011498:	20000084 	.word	0x20000084

0801149c <_sbrk_r>:
 801149c:	b538      	push	{r3, r4, r5, lr}
 801149e:	4d06      	ldr	r5, [pc, #24]	; (80114b8 <_sbrk_r+0x1c>)
 80114a0:	2300      	movs	r3, #0
 80114a2:	4604      	mov	r4, r0
 80114a4:	4608      	mov	r0, r1
 80114a6:	602b      	str	r3, [r5, #0]
 80114a8:	f7ef fca8 	bl	8000dfc <_sbrk>
 80114ac:	1c43      	adds	r3, r0, #1
 80114ae:	d102      	bne.n	80114b6 <_sbrk_r+0x1a>
 80114b0:	682b      	ldr	r3, [r5, #0]
 80114b2:	b103      	cbz	r3, 80114b6 <_sbrk_r+0x1a>
 80114b4:	6023      	str	r3, [r4, #0]
 80114b6:	bd38      	pop	{r3, r4, r5, pc}
 80114b8:	20008b3c 	.word	0x20008b3c

080114bc <abort>:
 80114bc:	b508      	push	{r3, lr}
 80114be:	2006      	movs	r0, #6
 80114c0:	f000 f88e 	bl	80115e0 <raise>
 80114c4:	2001      	movs	r0, #1
 80114c6:	f7ef fc21 	bl	8000d0c <_exit>

080114ca <__swhatbuf_r>:
 80114ca:	b570      	push	{r4, r5, r6, lr}
 80114cc:	460c      	mov	r4, r1
 80114ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80114d2:	2900      	cmp	r1, #0
 80114d4:	b096      	sub	sp, #88	; 0x58
 80114d6:	4615      	mov	r5, r2
 80114d8:	461e      	mov	r6, r3
 80114da:	da0d      	bge.n	80114f8 <__swhatbuf_r+0x2e>
 80114dc:	89a3      	ldrh	r3, [r4, #12]
 80114de:	f013 0f80 	tst.w	r3, #128	; 0x80
 80114e2:	f04f 0100 	mov.w	r1, #0
 80114e6:	bf0c      	ite	eq
 80114e8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80114ec:	2340      	movne	r3, #64	; 0x40
 80114ee:	2000      	movs	r0, #0
 80114f0:	6031      	str	r1, [r6, #0]
 80114f2:	602b      	str	r3, [r5, #0]
 80114f4:	b016      	add	sp, #88	; 0x58
 80114f6:	bd70      	pop	{r4, r5, r6, pc}
 80114f8:	466a      	mov	r2, sp
 80114fa:	f000 f879 	bl	80115f0 <_fstat_r>
 80114fe:	2800      	cmp	r0, #0
 8011500:	dbec      	blt.n	80114dc <__swhatbuf_r+0x12>
 8011502:	9901      	ldr	r1, [sp, #4]
 8011504:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8011508:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801150c:	4259      	negs	r1, r3
 801150e:	4159      	adcs	r1, r3
 8011510:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011514:	e7eb      	b.n	80114ee <__swhatbuf_r+0x24>

08011516 <__smakebuf_r>:
 8011516:	898b      	ldrh	r3, [r1, #12]
 8011518:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801151a:	079d      	lsls	r5, r3, #30
 801151c:	4606      	mov	r6, r0
 801151e:	460c      	mov	r4, r1
 8011520:	d507      	bpl.n	8011532 <__smakebuf_r+0x1c>
 8011522:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011526:	6023      	str	r3, [r4, #0]
 8011528:	6123      	str	r3, [r4, #16]
 801152a:	2301      	movs	r3, #1
 801152c:	6163      	str	r3, [r4, #20]
 801152e:	b002      	add	sp, #8
 8011530:	bd70      	pop	{r4, r5, r6, pc}
 8011532:	ab01      	add	r3, sp, #4
 8011534:	466a      	mov	r2, sp
 8011536:	f7ff ffc8 	bl	80114ca <__swhatbuf_r>
 801153a:	9900      	ldr	r1, [sp, #0]
 801153c:	4605      	mov	r5, r0
 801153e:	4630      	mov	r0, r6
 8011540:	f7ff faf6 	bl	8010b30 <_malloc_r>
 8011544:	b948      	cbnz	r0, 801155a <__smakebuf_r+0x44>
 8011546:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801154a:	059a      	lsls	r2, r3, #22
 801154c:	d4ef      	bmi.n	801152e <__smakebuf_r+0x18>
 801154e:	f023 0303 	bic.w	r3, r3, #3
 8011552:	f043 0302 	orr.w	r3, r3, #2
 8011556:	81a3      	strh	r3, [r4, #12]
 8011558:	e7e3      	b.n	8011522 <__smakebuf_r+0xc>
 801155a:	89a3      	ldrh	r3, [r4, #12]
 801155c:	6020      	str	r0, [r4, #0]
 801155e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011562:	81a3      	strh	r3, [r4, #12]
 8011564:	9b00      	ldr	r3, [sp, #0]
 8011566:	6163      	str	r3, [r4, #20]
 8011568:	9b01      	ldr	r3, [sp, #4]
 801156a:	6120      	str	r0, [r4, #16]
 801156c:	b15b      	cbz	r3, 8011586 <__smakebuf_r+0x70>
 801156e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011572:	4630      	mov	r0, r6
 8011574:	f000 f84e 	bl	8011614 <_isatty_r>
 8011578:	b128      	cbz	r0, 8011586 <__smakebuf_r+0x70>
 801157a:	89a3      	ldrh	r3, [r4, #12]
 801157c:	f023 0303 	bic.w	r3, r3, #3
 8011580:	f043 0301 	orr.w	r3, r3, #1
 8011584:	81a3      	strh	r3, [r4, #12]
 8011586:	89a3      	ldrh	r3, [r4, #12]
 8011588:	431d      	orrs	r5, r3
 801158a:	81a5      	strh	r5, [r4, #12]
 801158c:	e7cf      	b.n	801152e <__smakebuf_r+0x18>

0801158e <_raise_r>:
 801158e:	291f      	cmp	r1, #31
 8011590:	b538      	push	{r3, r4, r5, lr}
 8011592:	4604      	mov	r4, r0
 8011594:	460d      	mov	r5, r1
 8011596:	d904      	bls.n	80115a2 <_raise_r+0x14>
 8011598:	2316      	movs	r3, #22
 801159a:	6003      	str	r3, [r0, #0]
 801159c:	f04f 30ff 	mov.w	r0, #4294967295
 80115a0:	bd38      	pop	{r3, r4, r5, pc}
 80115a2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80115a4:	b112      	cbz	r2, 80115ac <_raise_r+0x1e>
 80115a6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80115aa:	b94b      	cbnz	r3, 80115c0 <_raise_r+0x32>
 80115ac:	4620      	mov	r0, r4
 80115ae:	f000 f853 	bl	8011658 <_getpid_r>
 80115b2:	462a      	mov	r2, r5
 80115b4:	4601      	mov	r1, r0
 80115b6:	4620      	mov	r0, r4
 80115b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80115bc:	f000 b83a 	b.w	8011634 <_kill_r>
 80115c0:	2b01      	cmp	r3, #1
 80115c2:	d00a      	beq.n	80115da <_raise_r+0x4c>
 80115c4:	1c59      	adds	r1, r3, #1
 80115c6:	d103      	bne.n	80115d0 <_raise_r+0x42>
 80115c8:	2316      	movs	r3, #22
 80115ca:	6003      	str	r3, [r0, #0]
 80115cc:	2001      	movs	r0, #1
 80115ce:	e7e7      	b.n	80115a0 <_raise_r+0x12>
 80115d0:	2400      	movs	r4, #0
 80115d2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80115d6:	4628      	mov	r0, r5
 80115d8:	4798      	blx	r3
 80115da:	2000      	movs	r0, #0
 80115dc:	e7e0      	b.n	80115a0 <_raise_r+0x12>
	...

080115e0 <raise>:
 80115e0:	4b02      	ldr	r3, [pc, #8]	; (80115ec <raise+0xc>)
 80115e2:	4601      	mov	r1, r0
 80115e4:	6818      	ldr	r0, [r3, #0]
 80115e6:	f7ff bfd2 	b.w	801158e <_raise_r>
 80115ea:	bf00      	nop
 80115ec:	20000084 	.word	0x20000084

080115f0 <_fstat_r>:
 80115f0:	b538      	push	{r3, r4, r5, lr}
 80115f2:	4d07      	ldr	r5, [pc, #28]	; (8011610 <_fstat_r+0x20>)
 80115f4:	2300      	movs	r3, #0
 80115f6:	4604      	mov	r4, r0
 80115f8:	4608      	mov	r0, r1
 80115fa:	4611      	mov	r1, r2
 80115fc:	602b      	str	r3, [r5, #0]
 80115fe:	f7ef fbd4 	bl	8000daa <_fstat>
 8011602:	1c43      	adds	r3, r0, #1
 8011604:	d102      	bne.n	801160c <_fstat_r+0x1c>
 8011606:	682b      	ldr	r3, [r5, #0]
 8011608:	b103      	cbz	r3, 801160c <_fstat_r+0x1c>
 801160a:	6023      	str	r3, [r4, #0]
 801160c:	bd38      	pop	{r3, r4, r5, pc}
 801160e:	bf00      	nop
 8011610:	20008b3c 	.word	0x20008b3c

08011614 <_isatty_r>:
 8011614:	b538      	push	{r3, r4, r5, lr}
 8011616:	4d06      	ldr	r5, [pc, #24]	; (8011630 <_isatty_r+0x1c>)
 8011618:	2300      	movs	r3, #0
 801161a:	4604      	mov	r4, r0
 801161c:	4608      	mov	r0, r1
 801161e:	602b      	str	r3, [r5, #0]
 8011620:	f7ef fbd3 	bl	8000dca <_isatty>
 8011624:	1c43      	adds	r3, r0, #1
 8011626:	d102      	bne.n	801162e <_isatty_r+0x1a>
 8011628:	682b      	ldr	r3, [r5, #0]
 801162a:	b103      	cbz	r3, 801162e <_isatty_r+0x1a>
 801162c:	6023      	str	r3, [r4, #0]
 801162e:	bd38      	pop	{r3, r4, r5, pc}
 8011630:	20008b3c 	.word	0x20008b3c

08011634 <_kill_r>:
 8011634:	b538      	push	{r3, r4, r5, lr}
 8011636:	4d07      	ldr	r5, [pc, #28]	; (8011654 <_kill_r+0x20>)
 8011638:	2300      	movs	r3, #0
 801163a:	4604      	mov	r4, r0
 801163c:	4608      	mov	r0, r1
 801163e:	4611      	mov	r1, r2
 8011640:	602b      	str	r3, [r5, #0]
 8011642:	f7ef fb51 	bl	8000ce8 <_kill>
 8011646:	1c43      	adds	r3, r0, #1
 8011648:	d102      	bne.n	8011650 <_kill_r+0x1c>
 801164a:	682b      	ldr	r3, [r5, #0]
 801164c:	b103      	cbz	r3, 8011650 <_kill_r+0x1c>
 801164e:	6023      	str	r3, [r4, #0]
 8011650:	bd38      	pop	{r3, r4, r5, pc}
 8011652:	bf00      	nop
 8011654:	20008b3c 	.word	0x20008b3c

08011658 <_getpid_r>:
 8011658:	f7ef bb3e 	b.w	8000cd8 <_getpid>

0801165c <_init>:
 801165c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801165e:	bf00      	nop
 8011660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011662:	bc08      	pop	{r3}
 8011664:	469e      	mov	lr, r3
 8011666:	4770      	bx	lr

08011668 <_fini>:
 8011668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801166a:	bf00      	nop
 801166c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801166e:	bc08      	pop	{r3}
 8011670:	469e      	mov	lr, r3
 8011672:	4770      	bx	lr
